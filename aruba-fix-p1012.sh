#!/bin/bash

# Script specifico per risolvere errore Prisma P1012 su Aruba Cloud
# Risolve problemi di encoding, caratteri nascosti e formato DATABASE_URL

# Colori per output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funzioni di logging
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üîß ARUBA CLOUD - FIX PRISMA P1012"
echo "================================="
echo ""

# Verifica directory di lavoro
if [ ! -d "backend" ]; then
    log_error "Directory 'backend' non trovata"
    log_info "Assicurati di essere nella directory root del progetto"
    exit 1
fi

cd backend

# Backup del file .env esistente
if [ -f ".env" ]; then
    cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    log_info "Backup .env creato"
fi

# Rileva configurazione database Aruba
log_info "Rilevamento configurazione database Aruba..."

# Cerca DATABASE_URL esistente
if [ -f ".env" ]; then
    existing_url=$(grep "^DATABASE_URL=" .env | head -1 | cut -d'=' -f2- | tr -d '"' | tr -d "'" | tr -d ' ')
    log_info "DATABASE_URL esistente: $existing_url"
else
    existing_url=""
fi

# Estrae componenti dal DATABASE_URL esistente se presente
if [ -n "$existing_url" ]; then
    # Estrae password, host, porta e database dal URL esistente
    if [[ $existing_url =~ postgresql://([^:]+):([^@]+)@([^:]+):([0-9]+)/(.+) ]]; then
        db_user="${BASH_REMATCH[1]}"
        db_password="${BASH_REMATCH[2]}"
        db_host="${BASH_REMATCH[3]}"
        db_port="${BASH_REMATCH[4]}"
        db_name="${BASH_REMATCH[5]}"
        
        log_info "Componenti estratti:"
        log_info "  User: $db_user"
        log_info "  Host: $db_host"
        log_info "  Port: $db_port"
        log_info "  Database: $db_name"
    else
        log_warning "Formato DATABASE_URL non riconosciuto, uso valori predefiniti"
        db_user="postgres"
        db_password="password"
        db_host="localhost"
        db_port="5432"
        db_name="elementmedica"
    fi
else
    log_info "DATABASE_URL non trovato, uso configurazione predefinita Aruba"
    db_user="postgres"
    db_password="password"
    db_host="localhost"
    db_port="5432"
    db_name="elementmedica"
fi

# Crea nuovo file .env pulito
log_info "Creazione file .env ottimizzato per Aruba Cloud..."

cat > .env << EOF
# Environment variables for Aruba Cloud deployment
# Generated by aruba-fix-p1012.sh

# Database Configuration
DATABASE_URL="postgresql://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}"
SHADOW_DATABASE_URL="postgresql://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}_shadow"

# Prisma Configuration
PRISMA_CLI_BINARY_TARGETS="native,linux-openssl-1.1.x"
PRISMA_ENGINES_MIRROR="https://binaries.prisma.sh"

# Node.js Configuration
NODE_ENV="production"
PORT="4001"

# Redis Configuration (Aruba Cloud)
REDIS_URL="redis://localhost:6379"
REDIS_PASSWORD=""
REDIS_DB="0"

# JWT Configuration
JWT_SECRET="your-super-secret-jwt-key-change-in-production"
JWT_EXPIRES_IN="24h"
JWT_REFRESH_SECRET="your-super-secret-refresh-key-change-in-production"
JWT_REFRESH_EXPIRES_IN="7d"

# Encryption Configuration
ENCRYPTION_KEY="your-32-character-encryption-key-change-this"
ENCRYPTION_ALGORITHM="aes-256-cbc"

# GDPR Configuration
GDPR_RETENTION_DAYS="2555"
GDPR_ANONYMIZATION_ENABLED="true"
GDPR_AUDIT_ENABLED="true"

# Session Configuration
SESSION_SECRET="your-session-secret-change-in-production"
SESSION_MAX_AGE="86400000"
SESSION_SECURE="false"
SESSION_HTTP_ONLY="true"

# Rate Limiting
RATE_LIMIT_WINDOW_MS="900000"
RATE_LIMIT_MAX_REQUESTS="100"
RATE_LIMIT_SKIP_SUCCESSFUL_REQUESTS="false"

# CORS Configuration
CORS_ORIGIN="http://localhost:5173,http://localhost:3000"
CORS_CREDENTIALS="true"

# File Upload Configuration
MAX_FILE_SIZE="10485760"
UPLOAD_PATH="./uploads"

# Logging Configuration
LOG_LEVEL="info"
LOG_FILE="./logs/app.log"

# Email Configuration (if needed)
SMTP_HOST=""
SMTP_PORT="587"
SMTP_USER=""
SMTP_PASS=""
SMTP_FROM="noreply@example.com"
EOF

log_success "File .env ricreato con configurazione ottimizzata"

# Verifica formato DATABASE_URL
log_info "Verifica formato DATABASE_URL..."
source .env
echo "DATABASE_URL: $DATABASE_URL"

if [[ $DATABASE_URL =~ ^postgresql:// ]] || [[ $DATABASE_URL =~ ^postgres:// ]]; then
    log_success "‚úÖ Formato DATABASE_URL corretto"
else
    log_error "‚ùå Formato DATABASE_URL non valido"
    exit 1
fi

# Pulizia cache Prisma
log_info "Pulizia cache Prisma..."
rm -rf node_modules/.prisma
rm -rf prisma/generated

# Verifica installazione dipendenze
if [ ! -d "node_modules" ] || [ ! -f "node_modules/.package-lock.json" ]; then
    log_info "Installazione dipendenze..."
    npm install
fi

# Rigenerazione Prisma Client
log_info "Rigenerazione Prisma Client..."
npx prisma generate

if [ $? -ne 0 ]; then
    log_error "Errore durante la generazione del Prisma Client"
    exit 1
fi

log_success "Prisma Client rigenerato con successo"

# Test validazione schema
log_info "Test validazione schema Prisma..."
npx prisma validate

if [ $? -eq 0 ]; then
    log_success "‚úÖ Schema Prisma validato con successo!"
else
    log_error "‚ùå Errore nella validazione dello schema"
    log_info "Verifica che PostgreSQL sia in esecuzione e accessibile"
    exit 1
fi

# Test connessione database
log_info "Test connessione database..."
npx prisma db pull --preview-feature 2>/dev/null

if [ $? -eq 0 ]; then
    log_success "‚úÖ Connessione database riuscita"
else
    log_warning "‚ö†Ô∏è  Connessione database fallita"
    log_info "Il database potrebbe non esistere ancora"
    log_info "Procedi con il deploy delle migrazioni"
fi

# Deploy migrazioni
log_info "Deploy migrazioni database..."
npx prisma db push

if [ $? -eq 0 ]; then
    log_success "‚úÖ Migrazioni applicate con successo"
else
    log_error "‚ùå Errore durante il deploy delle migrazioni"
    log_info "Verifica manualmente:"
    log_info "1. PostgreSQL √® in esecuzione?"
    log_info "2. Database '$db_name' esiste?"
    log_info "3. Credenziali corrette?"
    log_info "4. Porta $db_port accessibile?"
fi

echo ""
log_success "üéâ FIX P1012 COMPLETATO"
log_info "File di backup disponibili: .env.backup.*"
log_info "DATABASE_URL configurato: $DATABASE_URL"
log_info "Prossimi passi:"
log_info "1. Verifica che i servizi siano attivi: pm2 status"
log_info "2. Testa l'API: curl http://localhost:4001/health"
log_info "3. Testa il proxy: curl http://localhost:4003/health"

cd ..