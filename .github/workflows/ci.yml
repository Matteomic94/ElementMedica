name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install test dependencies
      run: |
        cd backend/tests
        npm ci
    
    - name: Run ESLint
      run: |
        cd backend
        npm run lint
    
    - name: Check Prettier formatting
      run: |
        cd backend
        npm run format:check
    
    - name: Run unit tests
      run: |
        cd backend
        npm run test:unit
    
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration
    
    - name: Generate test coverage
      run: |
        cd backend
        npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install test dependencies
      run: |
        cd backend/tests
        npm ci
    
    - name: Setup test environment
      run: |
        cd backend
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "API_PORT=4001" >> .env.test
        echo "PROXY_PORT=4003" >> .env.test
        echo "DOCS_PORT=4002" >> .env.test
    
    - name: Run database migrations
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    
    - name: Start API server in background
      run: |
        cd backend
        npm run start:api &
        sleep 10
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    
    - name: Start proxy server in background
      run: |
        cd backend
        npm run start:proxy &
        sleep 5
      env:
        NODE_ENV: test
    
    - name: Wait for servers to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:4001/health; do sleep 1; done'
        timeout 30 bash -c 'until curl -f http://localhost:4003/health; do sleep 1; done'
    
    - name: Run E2E tests
      run: |
        cd backend
        npm run test:e2e
      env:
        NODE_ENV: test
    
    - name: Stop servers
      run: |
        pkill -f "node.*servers/api-server.js" || true
        pkill -f "node.*servers/proxy-server.js" || true

  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level moderate
    
    - name: Check for outdated packages
      run: |
        cd backend
        npm outdated || true

  build-check:
    runs-on: ubuntu-latest
    needs: [quality-check, e2e-tests, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Verify build integrity
      run: |
        cd backend
        node -c servers/api-server.js
        node -c servers/proxy-server.js
        node -c servers/documents-server.js
    
    - name: Check environment configuration
      run: |
        cd backend
        node -e "console.log('Environment check passed')"