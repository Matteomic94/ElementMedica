# Multi-stage build per ottimizzare l'immagine di produzione
FROM node:18-alpine AS base

# Installa dipendenze per moduli nativi
RUN apk add --no-cache python3 make g++ curl

WORKDIR /app

# Copia file di configurazione
COPY package*.json ./
COPY tsconfig*.json ./
COPY vite.config.ts ./
COPY tailwind.config.js ./
COPY postcss.config.js ./
COPY eslint.config.js ./

# Stage di sviluppo
FROM base AS development
RUN npm ci
COPY . .
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Stage di staging
FROM base AS staging
RUN npm install --force --omit=optional
COPY . .
RUN npm run build

# Nginx per staging
FROM nginx:alpine AS staging-server
COPY --from=staging /app/dist /usr/share/nginx/html
COPY nginx/nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

# Stage di produzione
FROM base AS production
RUN npm install --force --omit=optional
COPY . .
RUN npm run build && npm cache clean --force

# Nginx per produzione
FROM nginx:alpine AS production-server

# Installa curl per health check
RUN apk add --no-cache curl

# Copia applicazione builddata
COPY --from=production /app/dist /usr/share/nginx/html

# Copia configurazione nginx
COPY ./nginx/nginx.conf /etc/nginx/nginx.conf

# Crea utente non-root
RUN addgroup -g 1001 -S nginx-user
RUN adduser -S nginx-user -u 1001 -G nginx-user

# Cambia ownership delle directory
RUN chown -R nginx-user:nginx-user /usr/share/nginx/html
RUN chown -R nginx-user:nginx-user /var/cache/nginx
RUN chown -R nginx-user:nginx-user /var/log/nginx
RUN chown -R nginx-user:nginx-user /etc/nginx/conf.d

# Crea directory per PID
RUN mkdir -p /var/run/nginx
RUN chown -R nginx-user:nginx-user /var/run/nginx

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

EXPOSE 80

# Usa utente non-root
USER nginx-user

CMD ["nginx", "-g", "daemon off;"]