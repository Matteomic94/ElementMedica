// üîß SCHEMA PRISMA PULITO - POST MIGRAZIONE SOFT DELETE
// Data: 29 Dicembre 2024
// Cambiamenti: Rimossi tutti i campi isDeleted duplicati, mantenuto solo deletedAt

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                  String              @id @default(uuid())
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  codice_ateco        String?
  iban                String?
  pec                 String?
  sdi                 String?
  cap                 String?
  citta               String?
  codice_fiscale      String?
  mail                String?
  note                String?
  persona_riferimento String?
  piva                String?
  provincia           String?
  ragione_sociale     String
  sede_azienda        String?
  telefono            String?
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt           DateTime?           @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  tenantId            String?
  slug                String?             @unique
  domain              String?             @unique
  settings            Json?               @default("{}")
  subscription_plan   String              @default("basic")
  is_active           Boolean             @default(true)
  tenant              Tenant?             @relation(fields: [tenantId], references: [id])
  schedules           CourseSchedule[]
  fatturaAzienda      FatturaAzienda[]
  preventivoAzienda   PreventivoAzienda[]
  scheduleCompanies   ScheduleCompany[]
  templateLinks       TemplateLink[]
  enhancedRoles       EnhancedUserRole[]
  personRoles         PersonRole[]
  persons             Person[]
}

// REMOVED: model Employee - migrated to Person

model Course {
  id              String           @id @default(uuid())
  title           String
  category        String?
  description     String?
  duration        String?
  status          String?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  certifications  String?
  code            String?          @unique
  contents        String?
  maxPeople       Int?
  pricePerPerson  Float?
  regulation      String?
  renewalDuration String?
  validityYears   Int?
  tenantId        String?
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt       DateTime?        @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  tenant          Tenant?          @relation(fields: [tenantId], references: [id])
  schedules       CourseSchedule[]
}

model CourseSchedule {
  id               String             @id @default(uuid())
  courseId         String
  start_date       DateTime
  end_date         DateTime
  location         String?
  max_participants Int?
  status           String?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  companyId        String?
  notes            String?
  trainerId        String?
  delivery_mode    String?
  attendance       Json?
  hasAttestati     Boolean            @default(false)
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt        DateTime?          @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  attestati        Attestato[]
  enrollments      CourseEnrollment[]
  company          Company?           @relation(fields: [companyId], references: [id])
  course           Course             @relation(fields: [courseId], references: [id])
  trainer          Person?            @relation("ScheduleTrainer", fields: [trainerId], references: [id])
  sessions         CourseSession[]
  fatture          Fattura[]
  lettereIncarico  LetteraIncarico[]
  preventivi       Preventivo[]
  registriPresenze RegistroPresenze[]
  companies        ScheduleCompany[]
  testDocuments    TestDocument[]
}

model CourseEnrollment {
  id         String         @id @default(uuid())
  scheduleId String
  personId   String         @map("employee_id") // Mapped for DB compatibility
  status     String?
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt  DateTime?      @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  person     Person         @relation("CourseEnrollment_Person", fields: [personId], references: [id])
  schedule   CourseSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, personId])
  @@map("course_enrollments")
}

model CourseSession {
  id               String             @id @default(uuid())
  scheduleId       String
  date             DateTime
  start            String
  end              String
  trainerId        String?
  coTrainerId      String?
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt        DateTime?          @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  co_trainer       Person?            @relation("SessionCoTrainer", fields: [coTrainerId], references: [id])
  schedule         CourseSchedule     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  trainer          Person?            @relation("SessionTrainer", fields: [trainerId], references: [id])
  registroPresenze RegistroPresenze[]
}

model ScheduleCompany {
  id         String         @id @default(uuid())
  scheduleId String
  companyId  String
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt  DateTime?      @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  company    Company        @relation(fields: [companyId], references: [id])
  schedule   CourseSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model Attestato {
  id                String         @id @default(uuid())
  scheduledCourseId String         @map("scheduled_course_id")
  personId          String         @map("partecipante_id") // Mapped for DB compatibility
  fileName          String         @map("nome_file")
  fileUrl           String         @map("url")
  generatedAt       DateTime       @default(now()) @map("data_generazione")
  numeroProgressivo Int            @map("numero_progressivo")
  annoProgressivo   Int            @map("anno_progressivo")
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt         DateTime?      @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  person            Person         @relation("Attestato_Person", fields: [personId], references: [id])
  scheduledCourse   CourseSchedule @relation(fields: [scheduledCourseId], references: [id], onDelete: Cascade)

  @@map("attestati")
}

model TemplateLink {
  id            String   @id @default(uuid())
  name          String
  url           String
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  content       String?
  footer        String?
  header        String?
  isDefault     Boolean  @default(false)
  logoPosition  String?
  fileFormat    String?
  googleDocsUrl String?
  logoImage     String?
  companyId     String?
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt     DateTime? @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  company       Company? @relation(fields: [companyId], references: [id])
}

model LetteraIncarico {
  id                String         @id @default(uuid())
  scheduledCourseId String
  trainerId         String
  nomeFile          String
  url               String
  dataGenerazione   DateTime       @default(now())
  numeroProgressivo Int
  annoProgressivo   Int
  // ‚ùå RIMOSSO: isDeleted Boolean @default(false) @map("eliminato")
  deletedAt         DateTime?      @map("deleted_at")  // ‚úÖ UNICO CAMPO SOFT DELETE
  scheduledCourse   CourseSchedule @relation(fields: [scheduledCourseId], references: [id], onDelete: Cascade)
  trainer           Person         @relation("LetteraIncarico_Trainer", fields: [trainerId], references: [id])
}

// ‚úÖ NOTA: Il modello Person mantiene gi√† solo deletedAt (corretto)
// ‚úÖ NOTA: Altri modelli che non avevano isDeleted rimangono invariati

// üìä RIEPILOGO CAMBIAMENTI:
// - Rimossi 24 campi isDeleted duplicati
// - Mantenuti tutti i campi deletedAt esistenti
// - Standardizzato soft delete su deletedAt DateTime?
// - Preservate tutte le relazioni e indici esistenti