[{"filePath":"/Users/matteo.michielon/project 2.0/.storybook/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/.storybook/preview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/add-employee-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/add-missing-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/jwt-advanced.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/jwt.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/middleware-debug.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/middleware-simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/middleware-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/personController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/roleTypeController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/auth/routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/babel.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/check_admin_roles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/check_admin_user.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/check_admin_user.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/check_public_submissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/check_submissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/advanced-logger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/apiVersioning.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/bodyParser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/cache.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/cors.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/database-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/database.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/healthCheck.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/lifecycle.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/middleware-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/multer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/prisma-optimization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/rateLimiting.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/redis-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/security.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/config/versioning.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/controllers/advancedSubmissionsController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/controllers/cmsController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/controllers/contactSubmissionController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/controllers/formTemplatesController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/controllers/personController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/controllers/publicCoursesController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/controllers/publicFormsController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/create-admin-simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/create-sample-form-templates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/database/backup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/database/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/database/manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/database/monitoring.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/database/query-optimizer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/documents-server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/fix-admin-permissions-simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/fix-admin-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/force-reload-hierarchy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/generated/prisma/index.d.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PrismaClient' is assigned a value but never used.","line":1,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":51}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { PrismaClient } = require('@prisma/client'); ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/advanced-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/api-versioning.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/audit-trail.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/audit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/auth-advanced.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/cache.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/circuit-breaker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/errorHandler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/gdprMiddleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/loader.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/performance-monitor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/performance-monitoring.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/performance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/query-logging.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/rateLimiting.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/rbac.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/security-logging.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/soft-delete-advanced.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/tenant-security.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/tenant.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/middleware/virtualEntityMiddleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/prisma/remove_superfluous_maps.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/prisma/seed.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/config/cors.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/config/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/handlers/gracefulShutdown.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/handlers/healthCheck.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/middleware/bodyParser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/middleware/logging.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/middleware/proxyFactory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/middleware/rateLimiting.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/middleware/security.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/routes/localRoutes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/proxy/routes/proxyRoutes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/advanced-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/advanced-submissions-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/api-documentation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/api-versioning.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/auth-advanced.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/cms-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/companies-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/companies.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/company-sites-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/core/middleware-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/core/route-loader.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/core/route-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/core/route-registry.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/courses-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/courses.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/dashboard-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/documentation/documentation-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/dvr-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/employees-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/employees.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/example-usage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/form-templates-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/gdpr.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/gdpr/audit-compliance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/gdpr/consent-management.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/gdpr/data-deletion.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/gdpr/data-export.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/gdpr/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/google-docs-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/impostazioni.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/integration-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/monitoring/performance-monitor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/orari.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/permessi-avanzati.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/person-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/persone.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/public-courses-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/public-forms-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/query-optimizer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/reparto-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/response-handler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/advanced-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/analytics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/assignment.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/basic-management.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/custom-roles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/hierarchy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/index-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/middleware/auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/middleware/logging.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/middleware/validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/test-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/users.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/utils/filters.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/utils/helpers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/roles/utils/validators.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/schedules-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/settings-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/sopralluogo-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/tenant.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/tenants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/test-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/trainers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/users-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/users.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/v1/auth-optimized.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/v1/auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/v1/auth/authentication.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/v1/auth/debug.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/v1/auth/permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/v1/auth/user-info.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/v1/permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/v1/submission-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/validators.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/versioning/api-version-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routes/virtualEntityRoutes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/core/ProxyManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/core/RouteLogger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/core/RouterMap.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/core/VersionManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/middleware/bodyParsingMiddleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/middleware/diagnosticMiddleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/middleware/rawBodyMiddleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/middleware/rawBodyPreservationMiddleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/routing/middleware/routeMiddleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/add-role-management-permission.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/add-test-users.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase1-naming-conventions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase1-naming-standardization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase10-general-cleanup.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase2-indices-optimization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase2-naming-conventions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase3-indices-constraints.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase4-relations-ondelete.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase5-soft-delete-middleware.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase6-multi-tenant-security.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase7-enum-validation.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase8-schema-modularization.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/archived/phase9-middleware-logging.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/assign-companies-permissions-to-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/assign-companies-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/check-and-fix-admin-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/check-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/debug-permissions-endpoint.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/debug/create-test-data.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/debug/debug-current-permissions.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/debug/setup-test-data.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/debug/test-admin-permissions-detailed.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/debug/test-admin-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/debug/test-roles-endpoint.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/find-users.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/fix-public-courses.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/fix-role-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/get-tenant-id.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/init-base-data.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/add-persons-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/build-schema.cjs","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token .","line":73,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Build Script per Schema Modulare\n * Combina tutti i moduli in un unico schema Prisma\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nclass SchemaBuild {\n  constructor() {\n    this.modulesDir = path.join(__dirname, '../prisma/modules');\n    this.outputPath = path.join(__dirname, '../prisma/schema.prisma');\n  }\n\n  async build() {\n    console.log('🔧 Building unified schema...');\n    \n    let unifiedSchema = '';\n    \n    // Aggiungi header\n    unifiedSchema += this.getSchemaHeader();\n    \n    // Aggiungi enum da modulo enum\n    const enumPath = path.join(this.modulesDir, 'enums/schema.prisma');\n    if (fs.existsSync(enumPath)) {\n      const enumContent = fs.readFileSync(enumPath, 'utf8');\n      unifiedSchema += this.extractContent(enumContent);\n    }\n    \n    // Aggiungi modelli da tutti i moduli\n    const modules = fs.readdirSync(this.modulesDir)\n      .filter(dir => dir !== 'enums' && fs.statSync(path.join(this.modulesDir, dir)).isDirectory());\n    \n    for (const module of modules) {\n      const modulePath = path.join(this.modulesDir, module, 'schema.prisma');\n      if (fs.existsSync(modulePath)) {\n        const moduleContent = fs.readFileSync(modulePath, 'utf8');\n        unifiedSchema += `\\n// === MODULE: ${module.toUpperCase()} ===\\n`;\n        unifiedSchema += this.extractContent(moduleContent);\n      }\n    }\n    \n    // Salva schema unificato\n    fs.writeFileSync(this.outputPath, unifiedSchema);\n    \n    console.log('✅ Schema unificato generato');\n    console.log(`📁 Output: ${this.outputPath}`);\n  }\n\n  getSchemaHeader() {\n    return `// === PRISMA SCHEMA UNIFICATO ===\n// Generato automaticamente dal build script\n// NON MODIFICARE DIRETTAMENTE - Editare i moduli in prisma/modules/\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n`;\n  }\n\n  extractContent(content) {\n    // Rimuovi commenti header e mantieni solo definizioni\n    return content\n      .replace(//**[sS]*?*//g, '') // Rimuovi commenti block\n      .replace(///.*$/gm, '') // Rimuovi commenti line\n      .replace(/^s*$/gm, '') // Rimuovi righe vuote\n      .trim() + '\n\n';\n  }\n}\n\nif (require.main === module) {\n  const builder = new SchemaBuild();\n  builder.build().catch(console.error);\n}\n\nmodule.exports = SchemaBuild;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/complete-schema-optimization.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/convert-snake-case.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/create-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/find-obsolete-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/find-users.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/fix-naming.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/migrate-enhanced-user-role.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/migrate-performance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/migrate-to-person-unified.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/recreate-enum.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/refactor-manual-checks.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/run-phase2-optimization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/safe-naming-fix.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/schema-analysis.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/maintenance/sync-role-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/migrate-enhanced-user-role.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/quick-admin-check.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/refactor-manual-checks.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/schema-analysis.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/seed-public-courses.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup-test-data.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/add-cms-form-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/add-company-permissions-to-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/add-missing-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/add-super-admin-role.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/assign-companies-permissions-to-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/assign-companies-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/check-admin-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/populate-permissions-table.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/reset-admin-password.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/setup-companies-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/setup-permissions-direct.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/temp-check-admin.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/setup/verify-admin-user.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test-public-courses-controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/check-admin-edit-permissions.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/check-admin-tenant.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/check-and-fix-admin-permissions.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-admin-cms-permissions.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-admin-permissions-debug.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-admin-permissions.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-api-verify-token.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-auth-flow-debug.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-form-endpoints-detailed.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-frontend-permissions.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-page-access.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/test/test-permission-mapping.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/testing/test-model-detection.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/testing/test-model-replacement.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/update-admin-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/scripts/verify-role-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/servers/api-server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/servers/documents-server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/servers/proxy-server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/PersonServiceOptimized.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/advanced-permission.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/api-docs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/authService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRole/EnhancedRoleService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRole/core/RoleCore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRole/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRole/middleware/RoleMiddleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRole/permissions/PermissionChecker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRole/stats/RoleStats.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRole/utils/RoleTypes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRole/utils/RoleUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/enhancedRoleService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/gdpr-service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/google-api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/health-check.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/PersonCRUDService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/PersonImportService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/PersonRoleQueryService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/PersonService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/PersonValidationService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/core/PersonCore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/core/PersonRoles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/export/PersonExport.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/import/PersonImport.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/preferences/PersonPreferences.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/stats/PersonStats.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/utils/PersonRoleMapping.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/person/utils/PersonUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/personService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/redis.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/roleHierarchy/DatabaseOperations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/roleHierarchy/HierarchyCalculator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/roleHierarchy/HierarchyDefinition.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/roleHierarchy/PermissionManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/roleHierarchy/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/roleHierarchy/utils/testUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/roleHierarchyService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/tenantService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/services/virtualEntityPermissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/temp_check_admin_tenant.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/temp_check_admin_tenant.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/test_advanced_endpoint.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/test_api_after_fixes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/test_submission_endpoint.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/test_submissions_endpoint.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/auth.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/debug-mock.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/documents.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/helpers/test-app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/personController.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/proxy-server.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/reparto.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/tests/virtual-entities.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/utils/advanced-validations.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":71,"column":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced Validations - Fase 7\n * Validazioni Zod per enum e tipi standardizzati\n */\n\nimport { z } from 'zod';\n\n// === ENUM VALIDATIONS ===\n\nexport const CourseStatusSchema = z.enum(['DRAFT', 'PUBLISHED', 'ACTIVE', 'COMPLETED', 'CANCELLED', 'SUSPENDED']);\n\nexport const EnrollmentStatusSchema = z.enum(['PENDING', 'CONFIRMED', 'ACTIVE', 'COMPLETED', 'CANCELLED', 'SUSPENDED']);\n\n// === NUMERIC VALIDATIONS ===\n\n// Validazioni monetarie\nexport const MoneySchema = z.number()\n  .min(0, 'Amount must be positive')\n  .max(99999999.99, 'Amount too large')\n  .multipleOf(0.01, 'Amount must have max 2 decimal places');\n\n// Validazioni percentuali\nexport const PercentageSchema = z.number()\n  .min(0, 'Percentage must be positive')\n  .max(100, 'Percentage cannot exceed 100')\n  .multipleOf(0.01, 'Percentage must have max 2 decimal places');\n\n// Validazioni ore\nexport const HoursSchema = z.number()\n  .min(0, 'Hours must be positive')\n  .max(999999.99, 'Hours value too large')\n  .multipleOf(0.01, 'Hours must have max 2 decimal places');\n\n// === MODEL VALIDATIONS ===\n\n// Person validation\nexport const PersonValidationSchema = z.object({\n  email: z.string().email('Invalid email format'),\n  firstName: z.string().min(1, 'First name required').max(100, 'First name too long'),\n  lastName: z.string().min(1, 'Last name required').max(100, 'Last name too long'),\n  taxCode: z.string().regex(/^[A-Z]{6}[0-9]{2}[A-Z][0-9]{2}[A-Z][0-9]{3}[A-Z]$/, 'Invalid tax code').optional(),\n  status: PersonStatusSchema.optional(),\n  gender: GenderSchema.optional()\n});\n\n// Company validation\nexport const CompanyValidationSchema = z.object({\n  ragioneSociale: z.string().min(1, 'Company name required').max(255, 'Company name too long'),\n  piva: z.string().regex(/^[0-9]{11}$/, 'Invalid VAT number').optional(),\n  codiceFiscale: z.string().regex(/^[0-9]{11}$/, 'Invalid fiscal code').optional(),\n  status: CompanyStatusSchema.optional(),\n  type: CompanyTypeSchema.optional()\n});\n\n// Course validation\nexport const CourseValidationSchema = z.object({\n  title: z.string().min(1, 'Course title required').max(255, 'Title too long'),\n  description: z.string().max(2000, 'Description too long').optional(),\n  status: CourseStatusSchema.optional(),\n  level: CourseLevelSchema.optional(),\n  type: CourseTypeSchema.optional(),\n  price: MoneySchema.optional(),\n  duration: HoursSchema.optional()\n});\n\n// === UTILITY FUNCTIONS ===\n\n/**\n * Valida un oggetto con schema Zod\n */\nexport function validateWithSchema<T>(schema: z.ZodSchema<T>, data: unknown): {\n  success: boolean;\n  data?: T;\n  errors?: string[];\n} {\n  try {\n    const result = schema.parse(data);\n    return { success: true, data: result };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return {\n        success: false,\n        errors: error.errors.map(e => e.path.join('.') + ': ' + e.message)\n      };\n    }\n    return {\n      success: false,\n      errors: ['Validation failed']\n    };\n  }\n}\n\n/**\n * Middleware per validazione automatica\n */\nexport function createValidationMiddleware<T>(schema: z.ZodSchema<T>) {\n  return (req: any, res: any, next: any) => {\n    const validation = validateWithSchema(schema, req.body);\n    \n    if (!validation.success) {\n      return res.status(400).json({\n        error: 'Validation failed',\n        details: validation.errors\n      });\n    }\n    \n    req.validatedData = validation.data;\n    next();\n  };\n}\n\nexport default {\n  PersonValidationSchema,\n  CompanyValidationSchema,\n  CourseValidationSchema,\n  MoneySchema,\n  PercentageSchema,\n  HoursSchema,\n  validateWithSchema,\n  createValidationMiddleware\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/utils/cache.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/utils/googleApiService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/utils/loadBalancer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/utils/logger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/utils/permissionMapping.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/utils/permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/attendance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/audit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/billing.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/companies.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/core.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/courses.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/documents.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/monitoring.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/testing.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/validations/modules/users.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/backend/verify-persons-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/10_analisi_dipendenze_backend/check-users.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_duplicati/create_admin_user.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_duplicati/create_test_user.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_duplicati/reset-admin-password.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_duplicati/reset_admin_password.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_test/test-advanced-permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_test/test-companies-advanced-permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_test/test-direct-company-creation.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_test/test-simple-company-creation.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_test/test_admin_login.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_test/test_connectivity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_test/test_permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/backend_cleanup/script_test/test_simple_db.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/debug/check_admin_roles.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/add_admin_permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/check-admin-credentials.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/check-admin-user.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/check-db-permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/check_admin_permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/check_users.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/clearTrainers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/create-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/create_admin_simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/debug-admin-companies-access.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/debug-admin-permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/debug-companies-access.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/debug-companies-config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/debug-companies-permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/debug-jwt-token.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/debug-user-permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/debug-verify-token.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/init-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/minimal-proxy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/reset-admin-password.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/setup-advanced-permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/setup-auth-system.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/simple-proxy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-admin-companies-permission.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-admin-login.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-admin-role-mapping.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-api-direct.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-auth-mapping.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-companies-access-final.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-companies-access.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-companies-frontend.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-companies-page-access.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-direct-companies-access.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-frontend-auth.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-frontend-companies-access.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-frontend-companies.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-login-companies-access.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-login-fix.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-proxy-routing.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-token-storage.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test-verify-endpoint.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_admin_exists.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_admin_login.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_admin_permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_companies_api.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_companies_endpoint.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_direct_jwt.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_login_admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_permissions.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_tanstack_issue.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_verify_detailed.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/test_verify_endpoint.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/13_riordino_e_ottimizzazione_sistema/script_test_root/update-admin-password.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/16_prisma_schema_optimization/test_login_after_optimization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/16_prisma_schema_optimization/test_login_current.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/16_prisma_schema_optimization/test_login_current.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/16_prisma_schema_optimization/test_login_native.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/16_prisma_schema_optimization/test_login_simple.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/16_prisma_schema_optimization/test_login_simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/16_prisma_schema_optimization/test_login_verification.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/16_prisma_schema_optimization/verifica_ottimizzazioni.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/17_backend_optimization_restructure/test-db-connection.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/17_backend_optimization_restructure/test-login-diagnosis.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/17_backend_optimization_restructure/test-login-diagnosis.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/17_backend_optimization_restructure/test-login.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/17_backend_optimization_restructure/test-login.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/17_backend_optimization_restructure/test-validation.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/17_backend_optimization_restructure/test-validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/24_risoluzione_errore_500_creazione_persone/test_import_debug.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/3_analisi_errore_network_connection/test-admin-login.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/3_analisi_errore_network_connection/test-network-fix.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/0_Progetti_passati/7_refactoring_completo_sistema/migrazioni/migrate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/debug/test_database_query.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/debug/test_jwt_decode.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/debug/test_login_endpoint.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/debug/test_login_endpoint.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/docs/10_project_managemnt/debug/test_permissions_detailed.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/fix-lucide-imports.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/scripts/audit-color-contrast.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/scripts/fix-api-urls.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/scripts/fix-specific-imports.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/scripts/fix-unused-variables.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/scripts/fix-unused-vars.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/scripts/force-browser-refresh.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/scripts/setup-companies-permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/scripts/test_delete_company.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/api/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/api/companies.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CompanyFilters' is defined but never used.","line":4,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[413,416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[413,416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/api/courses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/app/courses/[id]/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCourse'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [isEditing, loadCourse]","fix":{"range":[964,975],"text":"[isEditing, loadCourse]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Course } from '@prisma/client';\nimport { createCourse, getCourse, updateCourse } from '@/api/courses';\nimport { Button } from '@/design-system/atoms/Button';\nimport { Input } from '@/design-system/atoms/Input';\nimport { Label } from '@/design-system/atoms/Label';\nimport { Select } from '@/design-system/atoms/Select';\nimport { toast } from 'sonner';\n\ntype CourseFormData = Omit<Course, 'id' | 'createdAt' | 'updatedAt'>;\n\nconst initialFormData: CourseFormData = {\n  title: '',\n  category: '',\n  description: '',\n  duration: '',\n  status: 'DRAFT',\n};\n\nexport default function CourseForm({ params }: { params: { id: string } }) {\n  const router = useRouter();\n  const [formData, setFormData] = useState<CourseFormData>(initialFormData);\n  const isEditing = params.id !== 'new';\n\n  useEffect(() => {\n    if (isEditing) {\n      loadCourse();\n    }\n  }, [isEditing]);\n\n  const loadCourse = async () => {\n    try {\n      const course = await getCourse(params.id);\n      if (course) {\n        setFormData({\n          title: course.title,\n          category: course.category || '',\n          description: course.description || '',\n          duration: course.duration || '',\n          status: course.status || 'DRAFT',\n        });\n      }\n    } catch {\n      toast.error('Failed to load course');\n      router.push('/courses');\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      if (isEditing) {\n        await updateCourse(params.id, formData);\n        toast.success('Course updated successfully');\n      } else {\n        await createCourse(formData);\n        toast.success('Course created successfully');\n      }\n      router.push('/courses');\n    } catch {\n      toast.error(isEditing ? 'Failed to update course' : 'Failed to create course');\n    }\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <h1 className=\"text-3xl font-bold mb-6\">\n        {isEditing ? 'Edit Course' : 'New Course'}\n      </h1>\n      <form onSubmit={handleSubmit} className=\"space-y-6 max-w-2xl\">\n        <div>\n          <Label htmlFor=\"title\">Title</Label>\n          <Input\n            id=\"title\"\n            name=\"title\"\n            value={formData.title}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"category\">Category</Label>\n          <Input\n            id=\"category\"\n            name=\"category\"\n            value={formData.category || ''}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\">Description</Label>\n          <textarea\n            id=\"description\"\n            name=\"description\"\n            value={formData.description || ''}\n            onChange={handleChange}\n            className=\"w-full min-h-[100px] p-2 border rounded-md\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"duration\">Duration</Label>\n          <Input\n            id=\"duration\"\n            name=\"duration\"\n            value={formData.duration || ''}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"status\">Status</Label>\n          <Select\n            id=\"status\"\n            name=\"status\"\n            value={formData.status}\n            onChange={handleChange}\n          >\n            <option value=\"DRAFT\">Draft</option>\n            <option value=\"PUBLISHED\">Published</option>\n            <option value=\"ARCHIVED\">Archived</option>\n          </Select>\n        </div>\n\n        <div className=\"flex gap-4\">\n          <Button type=\"submit\">\n            {isEditing ? 'Update Course' : 'Create Course'}\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => router.push('/courses')}\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/app/courses/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/backend/controllers/publicCourseController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/__tests__/Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/__tests__/RoleHierarchy.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1737,1740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1737,1740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1812,1815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1812,1815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { vi, describe, it, beforeEach, expect } from 'vitest';\nimport RoleHierarchy from '../roles/RoleHierarchy';\nimport { getRoleHierarchy, getCurrentUserRoleHierarchy } from '../../services/roles';\n\n// Mock del servizio roles\nvi.mock('../../services/roles', () => ({\n  RolesService: {\n    getRoles: vi.fn(),\n    createRole: vi.fn(),\n    updateRole: vi.fn(),\n    deleteRole: vi.fn(),\n    moveRole: vi.fn(),\n    getPermissions: vi.fn(),\n  },\n  getRoleHierarchy: vi.fn(),\n  getCurrentUserRoleHierarchy: vi.fn(),\n}));\n\nvi.mock('@/services/auth', () => ({\n  isAuthenticated: vi.fn().mockReturnValue(true),\n}));\n\n// Mock dei componenti UI\nvi.mock('@/components/ui/use-toast', () => ({\n  toast: vi.fn(),\n}));\n\nconst mockHierarchy = {\n  ADMIN: {\n    name: 'Amministratore',\n    description: 'Amministratore del sistema',\n    level: 1,\n    permissions: ['USER_MANAGEMENT', 'ROLE_MANAGEMENT'],\n    assignableRoles: ['MANAGER', 'EMPLOYEE'],\n  },\n  MANAGER: {\n    name: 'Manager',\n    description: 'Manager aziendale',\n    level: 2,\n    permissions: ['EMPLOYEE_MANAGEMENT'],\n    assignableRoles: ['EMPLOYEE'],\n  },\n  EMPLOYEE: {\n    name: 'Dipendente',\n    description: 'Dipendente standard',\n    level: 3,\n    permissions: ['BASIC_ACCESS'],\n    assignableRoles: [],\n  },\n};\n\nconst mockUserHierarchy = {\n  highestRole: 'ADMIN',\n  userLevel: 1,\n  userRoles: ['ADMIN'],\n  assignableRoles: ['MANAGER', 'EMPLOYEE'],\n};\n\n// Mock dei dati di test rimossi perché non utilizzati\n\ndescribe('RoleHierarchy CRUD', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Mock delle funzioni specifiche per RoleHierarchy\n    (getRoleHierarchy as any).mockResolvedValue(mockHierarchy);\n    (getCurrentUserRoleHierarchy as any).mockResolvedValue(mockUserHierarchy);\n  });\n\n  it('should switch between list and tree view modes', async () => {\n    render(<RoleHierarchy />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Albero')).toBeInTheDocument();\n      expect(screen.getByText('Lista')).toBeInTheDocument();\n    });\n\n    // Clicca sulla vista lista\n    fireEvent.click(screen.getByText('Lista'));\n\n    // Verifica che il componente risponda al click\n    await waitFor(() => {\n      expect(screen.getByText('Lista')).toBeInTheDocument();\n    });\n  });\n\n  it('should filter roles when searching', async () => {\n    render(<RoleHierarchy />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Lista')).toBeInTheDocument();\n    });\n\n    // Passa alla vista lista per vedere la barra di ricerca\n    fireEvent.click(screen.getByText('Lista'));\n\n    await waitFor(() => {\n      expect(screen.getByPlaceholderText('Cerca ruoli...')).toBeInTheDocument();\n    });\n\n    // Cerca un ruolo specifico\n    const searchInput = screen.getByPlaceholderText('Cerca ruoli...');\n    fireEvent.change(searchInput, { target: { value: 'Admin' } });\n\n    // Verifica che solo i ruoli corrispondenti siano visibili\n    expect(screen.getByText('Amministratore')).toBeInTheDocument();\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/assessments/AssessmentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/CompanyEditForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/CompanyForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/CompanyFormNew.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/CompanyImport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/CompanyImportConflictModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/CompanySiteForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/CompanySites.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSites'. Either include it or remove the dependency array.","line":85,"column":6,"nodeType":"ArrayExpression","endLine":85,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, fetchSites]","fix":{"range":[2183,2194],"text":"[companyId, fetchSites]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Building2,\n  Calendar,\n  Edit,\n  Eye,\n  FileText,\n  Mail,\n  MapPin,\n  Phone,\n  Plus,\n  Shield,\n  Stethoscope,\n  Trash2,\n  User,\n  Users\n} from 'lucide-react';\nimport { apiGet, apiDelete } from '../../services/api';\nimport { useToast } from '../../hooks/useToast';\nimport { DVRManager } from '../managers/DVRManager';\nimport SopralluogoManager from '../managers/SopralluogoManager';\nimport RepartoManager from '../managers/RepartoManager';\nimport CompanySiteForm from './CompanySiteForm';\n\ninterface CompanySite {\n  id: string;\n  siteName: string;\n  citta: string;\n  indirizzo: string;\n  cap: string;\n  provincia: string;\n  personaRiferimento?: string;\n  telefono?: string;\n  mail?: string;\n  dvr?: string;\n  rsppId?: string;\n  medicoCompetenteId?: string;\n  // Campi sopralluogo corretti secondo lo schema\n  ultimoSopralluogo?: string;\n  prossimoSopralluogo?: string;\n  valutazioneSopralluogo?: string;\n  sopralluogoEseguitoDa?: string;\n  rspp?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  medicoCompetente?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  companyId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface CompanySitesProps {\n  companyId: string;\n  selectedSiteId?: string | null;\n  onSiteFilterChange?: (siteId: string | null) => void;\n}\n\nconst CompanySites: React.FC<CompanySitesProps> = ({ companyId, selectedSiteId, onSiteFilterChange }) => {\n  const [sites, setSites] = useState<CompanySite[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingSite, setEditingSite] = useState<CompanySite | null>(null);\n  const [activeManager, setActiveManager] = useState<{\n    type: 'dvr' | 'sopralluogo' | 'reparto' | null;\n    siteId: string;\n    siteName: string;\n  }>({ type: null, siteId: '', siteName: '' });\n  const { showToast } = useToast();\n\n  // Filtra le sedi in base alla selezione\n  const filteredSites = selectedSiteId \n    ? sites.filter(site => site.id === selectedSiteId)\n    : sites;\n\n  useEffect(() => {\n    fetchSites();\n  }, [companyId]);\n\n  const fetchSites = async () => {\n    try {\n      setLoading(true);\n      const response = await apiGet(`/api/v1/company-sites/company/${companyId}`) as { sites: CompanySite[] };\n      setSites(response.sites || []);\n    } catch (error) {\n      console.error('Error fetching company sites:', error);\n      showToast({ message: 'Errore nel caricamento delle sedi', type: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEdit = (site: CompanySite) => {\n    setEditingSite(site);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (siteId: string) => {\n    if (!confirm('Sei sicuro di voler eliminare questa sede?')) return;\n\n    try {\n      await apiDelete(`/api/v1/company-sites/${siteId}`);\n      await fetchSites();\n      showToast({ message: 'Sede eliminata con successo', type: 'success' });\n    } catch (error) {\n      console.error('Error deleting site:', error);\n      showToast({ message: 'Errore nell\\'eliminazione della sede', type: 'error' });\n    }\n  };\n\n  const resetForm = () => {\n    setEditingSite(null);\n  };\n\n  const handleFormClose = () => {\n    setShowForm(false);\n    resetForm();\n  };\n\n  const handleFormSuccess = () => {\n    fetchSites();\n    handleFormClose();\n    showToast({ \n      message: editingSite ? 'Sede aggiornata con successo' : 'Sede creata con successo', \n      type: 'success' \n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"space-y-3\">\n            <div className=\"h-4 bg-gray-200 rounded\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex flex-wrap items-center justify-between gap-3 mb-3\">\n          <h2 className=\"text-lg font-semibold text-gray-800 flex items-center flex-shrink-0\">\n            <Building2 className=\"h-5 w-5 mr-2\" />\n            Sedi Aziendali\n          </h2>\n          \n          <button\n            onClick={() => setShowForm(true)}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-full transition-colors flex items-center shadow-md hover:shadow-lg flex-shrink-0\"\n          >\n            <Plus className=\"h-4 w-4 mr-1\" />\n            Aggiungi Sede\n          </button>\n        </div>\n        \n        {/* Filtro sedi centrato - Solo se ci sono più sedi */}\n        {sites.length > 1 && onSiteFilterChange && (\n          <div className=\"flex justify-center\">\n            <div className=\"flex bg-gray-100 rounded-full shadow-sm border border-gray-200 overflow-x-auto px-1.5 py-0.5 gap-0.5\">\n              <button\n                type=\"button\"\n                onClick={() => onSiteFilterChange(null)}\n                className={`px-2.5 py-1 text-xs font-medium rounded-full transition-colors duration-200 focus:outline-none focus:ring-1 focus:ring-blue-300 whitespace-nowrap ${\n                  selectedSiteId === null\n                    ? 'bg-blue-600 text-white shadow-sm'\n                    : 'bg-transparent text-gray-700 hover:bg-blue-100'\n                }`}\n              >\n                Tutte ({sites.length})\n              </button>\n              {sites.map(site => (\n                <button\n                  key={site.id}\n                  type=\"button\"\n                  onClick={() => onSiteFilterChange(site.id)}\n                  className={`px-2.5 py-1 text-xs font-medium rounded-full transition-colors duration-200 focus:outline-none focus:ring-1 focus:ring-blue-300 whitespace-nowrap ${\n                    selectedSiteId === site.id\n                      ? 'bg-blue-600 text-white shadow-sm'\n                      : 'bg-transparent text-gray-700 hover:bg-blue-100'\n                  }`}\n                >\n                  {site.siteName}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {sites.length === 0 ? (\n        <div className=\"px-6 py-8 text-center\">\n          <Building2 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nessuna sede trovata</h3>\n          <p className=\"text-gray-500 mb-4\">Aggiungi la prima sede per questa azienda.</p>\n          <button\n            onClick={() => setShowForm(true)}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-full transition-colors flex items-center shadow-md hover:shadow-lg mx-auto\"\n          >\n            <Plus className=\"h-4 w-4 mr-1\" />\n            Aggiungi Prima Sede\n          </button>\n        </div>\n      ) : filteredSites.length === 0 ? (\n        <div className=\"px-6 py-8 text-center\">\n          <Building2 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nessuna sede corrispondente</h3>\n          <p className=\"text-gray-500 mb-4\">La sede selezionata non è stata trovata.</p>\n        </div>\n      ) : (\n        <div className=\"p-6\">\n          {filteredSites.length === 1 ? (\n            // Visualizzazione diretta per sede singola\n            <div className=\"space-y-6\">\n              {filteredSites.map((site) => (\n                <div key={site.id}>\n                  {/* Header con nome sede e azioni */}\n                  <div className=\"flex justify-between items-center mb-6\">\n                    <div className=\"flex items-center\">\n                      <Building2 className=\"h-5 w-5 text-blue-600 mr-2\" />\n                      <h3 className=\"text-lg font-semibold text-gray-900\">{site.siteName}</h3>\n                    </div>\n                    <div className=\"flex flex-wrap gap-2\">\n                      <button\n                        onClick={() => setActiveManager({ type: 'dvr', siteId: site.id, siteName: site.siteName })}\n                        className=\"px-3 py-1.5 text-xs font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 rounded-full transition-colors flex items-center\"\n                        title=\"Gestisci DVR\"\n                      >\n                        <FileText className=\"h-3 w-3 mr-1\" />\n                        DVR\n                      </button>\n                      <button\n                        onClick={() => setActiveManager({ type: 'sopralluogo', siteId: site.id, siteName: site.siteName })}\n                        className=\"px-3 py-1.5 text-xs font-medium text-green-700 bg-green-100 hover:bg-green-200 rounded-full transition-colors flex items-center\"\n                        title=\"Gestisci Sopralluoghi\"\n                      >\n                        <Eye className=\"h-3 w-3 mr-1\" />\n                        Sopralluoghi\n                      </button>\n                      <button\n                        onClick={() => setActiveManager({ type: 'reparto', siteId: site.id, siteName: site.siteName })}\n                        className=\"px-3 py-1.5 text-xs font-medium text-purple-700 bg-purple-100 hover:bg-purple-200 rounded-full transition-colors flex items-center\"\n                        title=\"Gestisci Reparti\"\n                      >\n                        <Users className=\"h-3 w-3 mr-1\" />\n                        Reparti\n                      </button>\n                      <button\n                        onClick={() => handleEdit(site)}\n                        className=\"px-3 py-1.5 text-xs font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 rounded-full transition-colors flex items-center\"\n                        title=\"Modifica sede\"\n                      >\n                        <Edit className=\"h-3 w-3 mr-1\" />\n                        Modifica\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Griglia informazioni dirette */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    {/* Indirizzo */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"text-sm font-semibold text-gray-800 uppercase tracking-wide\">Indirizzo</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center text-sm text-gray-600\">\n                          <MapPin className=\"h-4 w-4 mr-2 text-blue-500\" />\n                          {site.indirizzo}\n                        </div>\n                        <div className=\"text-sm text-gray-600 ml-6\">\n                          {site.citta}, {site.cap} ({site.provincia})\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Contatti */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"text-sm font-semibold text-gray-800 uppercase tracking-wide\">Contatti</h4>\n                      <div className=\"space-y-2\">\n                        {site.personaRiferimento && (\n                          <div className=\"flex items-start text-sm text-gray-600\">\n                            <User className=\"h-4 w-4 mr-2 mt-0.5 flex-shrink-0 text-green-500\" />\n                            <span className=\"break-words\">{site.personaRiferimento}</span>\n                          </div>\n                        )}\n                        {site.telefono && (\n                          <div className=\"flex items-start text-sm text-gray-600\">\n                            <Phone className=\"h-4 w-4 mr-2 mt-0.5 flex-shrink-0 text-green-500\" />\n                            <span className=\"break-all\">{site.telefono}</span>\n                          </div>\n                        )}\n                        {site.mail && (\n                          <div className=\"flex items-start text-sm text-gray-600\">\n                            <Mail className=\"h-4 w-4 mr-2 mt-0.5 flex-shrink-0 text-green-500\" />\n                            <span className=\"break-all\">{site.mail}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Sicurezza */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"text-sm font-semibold text-gray-800 uppercase tracking-wide\">Sicurezza</h4>\n                      <div className=\"space-y-2\">\n                        {site.rspp && (\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <Shield className=\"h-4 w-4 mr-2 text-orange-500\" />\n                            <span className=\"font-medium\">RSPP:</span> {site.rspp.firstName} {site.rspp.lastName}\n                          </div>\n                        )}\n                        {site.medicoCompetente && (\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <Stethoscope className=\"h-4 w-4 mr-2 text-red-500\" />\n                            <span className=\"font-medium\">MC:</span> {site.medicoCompetente.firstName} {site.medicoCompetente.lastName}\n                          </div>\n                        )}\n                        {site.dvr && (\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <FileText className=\"h-4 w-4 mr-2 text-purple-500\" />\n                            <span className=\"font-medium\">DVR:</span> {site.dvr}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Sopralluoghi */}\n                  {(site.ultimoSopralluogo || site.prossimoSopralluogo || site.valutazioneSopralluogo) && (\n                    <div className=\"mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-100\">\n                      <h4 className=\"text-sm font-semibold text-gray-800 mb-3 flex items-center uppercase tracking-wide\">\n                        <Calendar className=\"h-4 w-4 mr-2 text-blue-600\" />\n                        Sopralluoghi\n                      </h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600\">\n                        {site.ultimoSopralluogo && (\n                          <div className=\"flex items-center\">\n                            <span className=\"font-medium text-gray-700\">Ultimo:</span>\n                            <span className=\"ml-2\">{new Date(site.ultimoSopralluogo).toLocaleDateString()}</span>\n                          </div>\n                        )}\n                        {site.prossimoSopralluogo && (\n                          <div className=\"flex items-center\">\n                            <span className=\"font-medium text-gray-700\">Prossimo:</span>\n                            <span className=\"ml-2\">{new Date(site.prossimoSopralluogo).toLocaleDateString()}</span>\n                          </div>\n                        )}\n                        {site.valutazioneSopralluogo && (\n                          <div className=\"md:col-span-3\">\n                            <span className=\"font-medium text-gray-700\">Valutazione:</span>\n                            <span className=\"ml-2\">{site.valutazioneSopralluogo}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          ) : (\n            // Visualizzazione a card per sedi multiple\n            <div className=\"space-y-4\">\n              {filteredSites.map((site) => (\n                 <div key={site.id} className=\"bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow\">\n                   <div className=\"p-6 flex justify-between items-start\">\n                     <div className=\"flex-1\">\n                       <div className=\"flex items-center mb-4\">\n                         <Building2 className=\"h-5 w-5 text-blue-600 mr-2\" />\n                         <h3 className=\"text-lg font-semibold text-gray-900\">{site.siteName}</h3>\n                       </div>\n\n                       <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                         {/* Indirizzo */}\n                         <div className=\"space-y-2\">\n                           <h4 className=\"text-sm font-medium text-gray-700\">Indirizzo</h4>\n                           <div className=\"space-y-1\">\n                             <div className=\"flex items-center text-sm text-gray-600\">\n                               <MapPin className=\"h-4 w-4 mr-2\" />\n                               {site.indirizzo}\n                             </div>\n                             <div className=\"text-sm text-gray-600\">\n                               {site.citta}, {site.cap} ({site.provincia})\n                             </div>\n                           </div>\n                         </div>\n\n                         {/* Contatti */}\n                         <div className=\"space-y-2\">\n                           <h4 className=\"text-sm font-medium text-gray-700\">Contatti</h4>\n                           <div className=\"space-y-1\">\n                             {site.personaRiferimento && (\n                               <div className=\"flex items-start text-sm text-gray-600\">\n                                 <User className=\"h-4 w-4 mr-2 mt-0.5 flex-shrink-0\" />\n                                 <span className=\"break-words\">{site.personaRiferimento}</span>\n                               </div>\n                             )}\n                             {site.telefono && (\n                               <div className=\"flex items-start text-sm text-gray-600\">\n                                 <Phone className=\"h-4 w-4 mr-2 mt-0.5 flex-shrink-0\" />\n                                 <span className=\"break-all\">{site.telefono}</span>\n                               </div>\n                             )}\n                             {site.mail && (\n                               <div className=\"flex items-start text-sm text-gray-600\">\n                                 <Mail className=\"h-4 w-4 mr-2 mt-0.5 flex-shrink-0\" />\n                                 <span className=\"break-all\">{site.mail}</span>\n                               </div>\n                             )}\n                           </div>\n                         </div>\n\n                         {/* Sicurezza */}\n                         <div className=\"space-y-2\">\n                           <h4 className=\"text-sm font-medium text-gray-700\">Sicurezza</h4>\n                           <div className=\"space-y-1\">\n                             {site.rspp && (\n                               <div className=\"flex items-center text-sm text-gray-600\">\n                                 <Shield className=\"h-4 w-4 mr-2\" />\n                                 RSPP: {site.rspp.firstName} {site.rspp.lastName}\n                               </div>\n                             )}\n                             {site.medicoCompetente && (\n                               <div className=\"flex items-center text-sm text-gray-600\">\n                                 <Stethoscope className=\"h-4 w-4 mr-2\" />\n                                 MC: {site.medicoCompetente.firstName} {site.medicoCompetente.lastName}\n                               </div>\n                             )}\n                             {site.dvr && (\n                               <div className=\"flex items-center text-sm text-gray-600\">\n                                 <FileText className=\"h-4 w-4 mr-2\" />\n                                 DVR: {site.dvr}\n                               </div>\n                             )}\n                           </div>\n                         </div>\n                       </div>\n\n                       {/* Sopralluogo */}\n                       {(site.ultimoSopralluogo || site.prossimoSopralluogo || site.valutazioneSopralluogo) && (\n                         <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                           <h4 className=\"text-sm font-medium text-gray-700 mb-2 flex items-center\">\n                             <Calendar className=\"h-4 w-4 mr-2\" />\n                             Sopralluogo\n                           </h4>\n                           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm text-gray-600\">\n                             {site.ultimoSopralluogo && (\n                               <div>\n                                 <span className=\"font-medium\">Ultimo:</span> {new Date(site.ultimoSopralluogo).toLocaleDateString()}\n                               </div>\n                             )}\n                             {site.prossimoSopralluogo && (\n                               <div>\n                                 <span className=\"font-medium\">Prossimo:</span> {new Date(site.prossimoSopralluogo).toLocaleDateString()}\n                               </div>\n                             )}\n                             {site.valutazioneSopralluogo && (\n                               <div>\n                                 <span className=\"font-medium\">Valutazione:</span> {site.valutazioneSopralluogo}\n                               </div>\n                             )}\n                           </div>\n                         </div>\n                       )}\n                     </div>\n\n                     <div className=\"flex flex-wrap gap-2 ml-4\">\n                       {/* Pulsanti a forma di pillola per gestire DVR, Sopralluoghi e Reparti */}\n                       <button\n                         onClick={() => setActiveManager({ type: 'dvr', siteId: site.id, siteName: site.siteName })}\n                         className=\"px-3 py-1.5 text-xs font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 rounded-full transition-colors flex items-center\"\n                         title=\"Gestisci DVR\"\n                       >\n                         <FileText className=\"h-3 w-3 mr-1\" />\n                         DVR\n                       </button>\n                       <button\n                         onClick={() => setActiveManager({ type: 'sopralluogo', siteId: site.id, siteName: site.siteName })}\n                         className=\"px-3 py-1.5 text-xs font-medium text-green-700 bg-green-100 hover:bg-green-200 rounded-full transition-colors flex items-center\"\n                         title=\"Gestisci Sopralluoghi\"\n                       >\n                         <Eye className=\"h-3 w-3 mr-1\" />\n                         Sopralluoghi\n                       </button>\n                       <button\n                         onClick={() => setActiveManager({ type: 'reparto', siteId: site.id, siteName: site.siteName })}\n                         className=\"px-3 py-1.5 text-xs font-medium text-purple-700 bg-purple-100 hover:bg-purple-200 rounded-full transition-colors flex items-center\"\n                         title=\"Gestisci Reparti\"\n                       >\n                         <Users className=\"h-3 w-3 mr-1\" />\n                         Reparti\n                       </button>\n                       <button\n                         onClick={() => handleEdit(site)}\n                         className=\"px-3 py-1.5 text-xs font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 rounded-full transition-colors flex items-center\"\n                         title=\"Modifica sede\"\n                       >\n                         <Edit className=\"h-3 w-3 mr-1\" />\n                         Modifica\n                       </button>\n                       <button\n                         onClick={() => handleDelete(site.id)}\n                         className=\"px-3 py-1.5 text-xs font-medium text-red-700 bg-red-100 hover:bg-red-200 rounded-full transition-colors flex items-center\"\n                         title=\"Elimina sede\"\n                       >\n                         <Trash2 className=\"h-3 w-3 mr-1\" />\n                         Elimina\n                       </button>\n                     </div>\n                   </div>\n                 </div>\n               ))}\n             </div>\n           )}\n        </div>\n      )}\n\n      {/* Form Modal */}\n      {showForm && (\n        <CompanySiteForm\n          companyId={companyId}\n          site={editingSite}\n          onSuccess={handleFormSuccess}\n          onClose={handleFormClose}\n        />\n      )}\n\n      {/* Manager Modals */}\n      {activeManager.type === 'dvr' && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Gestione DVR - {activeManager.siteName}\n              </h3>\n              <button\n                onClick={() => setActiveManager({ type: null, siteId: '', siteName: '' })}\n                className=\"px-3 py-1.5 text-sm font-medium text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors\"\n              >\n                <span className=\"sr-only\">Chiudi</span>\n                ✕\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <DVRManager siteId={activeManager.siteId} siteName={activeManager.siteName} />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeManager.type === 'sopralluogo' && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Gestione Sopralluoghi - {activeManager.siteName}\n              </h3>\n              <button\n                onClick={() => setActiveManager({ type: null, siteId: '', siteName: '' })}\n                className=\"px-3 py-1.5 text-sm font-medium text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors\"\n              >\n                <span className=\"sr-only\">Chiudi</span>\n                ✕\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <SopralluogoManager siteId={activeManager.siteId} siteName={activeManager.siteName} />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeManager.type === 'reparto' && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Gestione Reparti - {activeManager.siteName}\n              </h3>\n              <button\n                onClick={() => setActiveManager({ type: null, siteId: '', siteName: '' })}\n                className=\"px-3 py-1.5 text-sm font-medium text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors\"\n              >\n                <span className=\"sr-only\">Chiudi</span>\n                ✕\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <RepartoManager siteId={activeManager.siteId} siteName={activeManager.siteName} />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CompanySites;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/EmployeesSection.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchEmployees'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, fetchEmployees]","fix":{"range":[667,678],"text":"[companyId, fetchEmployees]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Users } from 'lucide-react';\nimport { apiGet } from '../../services/api';\nimport { useToast } from '../../hooks/useToast';\n\ninterface Person {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  title?: string;\n  photo_url?: string;\n  siteId?: string;\n}\n\ninterface EmployeesSectionProps {\n  companyId: string;\n}\n\nconst EmployeesSection: React.FC<EmployeesSectionProps> = ({ companyId }) => {\n  const [employees, setEmployees] = useState<Person[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    fetchEmployees();\n  }, [companyId]);\n\n  const fetchEmployees = async () => {\n    try {\n      setLoading(true);\n      const response = await apiGet(`/api/v1/persons?companyId=${companyId}&roleType=EMPLOYEE`) as { persons?: Person[] };\n      setEmployees(response.persons || []);\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      showToast({ message: 'Errore nel caricamento delle persone', type: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"flex flex-col items-center space-y-2\">\n                <div className=\"w-16 h-16 bg-gray-200 rounded-full\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n          <Users className=\"h-5 w-5 mr-2\" />\n          Persone\n        </h2>\n        <span className=\"text-sm text-gray-500\">\n          {employees.length} persone\n        </span>\n      </div>\n      \n      <div className=\"p-6\">\n        {employees.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nessuna persona trovata</h3>\n            <p className=\"text-gray-500\">Non ci sono persone associate a questa azienda.</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n            {employees.map((employee) => (\n              <div key={employee.id} className=\"flex flex-col items-center space-y-3 group\">\n                {/* Avatar con foto o iniziali */}\n                <div className=\"relative\">\n                  {employee.photo_url ? (\n                    <img\n                      src={employee.photo_url}\n                      alt={`${employee.firstName} ${employee.lastName}`}\n                      className=\"w-16 h-16 rounded-full object-cover border-2 border-gray-200 group-hover:border-blue-300 transition-colors\"\n                    />\n                  ) : (\n                    <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center border-2 border-gray-200 group-hover:border-blue-300 transition-colors\">\n                      <span className=\"text-white font-semibold text-lg\">\n                        {getInitials(employee.firstName, employee.lastName)}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {/* Indicatore online/status */}\n                  <div className=\"absolute -bottom-1 -right-1 w-5 h-5 bg-green-400 border-2 border-white rounded-full\"></div>\n                </div>\n                \n                {/* Informazioni persona */}\n                <div className=\"text-center space-y-1\">\n                  <h3 className=\"text-sm font-medium text-gray-900 group-hover:text-blue-600 transition-colors\">\n                    {employee.firstName} {employee.lastName}\n                  </h3>\n                  <p className=\"text-xs text-gray-500 leading-tight\">\n                    {employee.title || 'Persona'}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeesSection;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/MultiSiteManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, fetchData]","fix":{"range":[1998,2009],"text":"[companyId, fetchData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Building2,\n  Plus,\n  Users\n} from 'lucide-react';\nimport { apiGet } from '../../services/api';\nimport { useToast } from '../../hooks/useToast';\nimport TabPills from '../ui/TabPills';\nimport SiteCard from './SiteCard';\nimport CompanySiteForm from './CompanySiteForm';\nimport { DVRManager, RepartoManager, SopralluogoManager } from '../managers';\n\ninterface CompanySite {\n  id: string;\n  siteName: string;\n  citta: string;\n  indirizzo: string;\n  cap: string;\n  provincia: string;\n  personaRiferimento?: string;\n  telefono?: string;\n  mail?: string;\n  dvr?: string;\n  rsppId?: string;\n  medicoCompetenteId?: string;\n  ultimoSopralluogo?: string;\n  prossimoSopralluogo?: string;\n  valutazioneSopralluogo?: string;\n  sopralluogoEseguitoDa?: string;\n  rspp?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  medicoCompetente?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  companyId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Employee {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  title?: string;\n  siteId?: string;\n}\n\ninterface MultiSiteManagerProps {\n  companyId: string;\n  companyName: string;\n}\n\nconst MultiSiteManager: React.FC<MultiSiteManagerProps> = ({ companyId }) => {\n  const [sites, setSites] = useState<CompanySite[]>([]);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('company');\n  const [showForm, setShowForm] = useState(false);\n  const [editingSite, setEditingSite] = useState<CompanySite | null>(null);\n  const [activeManager, setActiveManager] = useState<{\n    type: 'dvr' | 'sopralluogo' | 'reparto' | null;\n    siteId: string;\n    siteName: string;\n  }>({ type: null, siteId: '', siteName: '' });\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    fetchData();\n  }, [companyId]);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      \n      // Fetch sites\n      const sitesResponse = await apiGet(`/api/v1/company-sites/company/${companyId}`) as { sites: CompanySite[] };\n      const sitesData = sitesResponse.sites || [];\n      setSites(sitesData);\n      \n      // Fetch employees\n      const employeesResponse = await apiGet(`/api/v1/persons?companyId=${companyId}&roleType=EMPLOYEE`) as { persons?: Employee[] };\n      setEmployees(employeesResponse.persons || []);\n      \n      // Set default tab (company if no sites, first site if sites exist)\n      if (sitesData.length > 0 && activeTab === 'company') {\n        setActiveTab('company');\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      showToast({ message: 'Errore nel caricamento dei dati', type: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEdit = (site: CompanySite) => {\n    setEditingSite(site);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (siteId: string) => {\n    if (!confirm('Sei sicuro di voler eliminare questa sede?')) return;\n\n    try {\n      await apiGet(`/api/company-sites/${siteId}`, { method: 'DELETE' });\n      await fetchData();\n      showToast({ message: 'Sede eliminata con successo', type: 'success' });\n      \n      // Reset active tab if deleted site was selected\n      if (activeTab === siteId) {\n        setActiveTab('company');\n      }\n    } catch (error) {\n      console.error('Error deleting site:', error);\n      showToast({ message: 'Errore nell\\'eliminazione della sede', type: 'error' });\n    }\n  };\n\n  const handleFormClose = () => {\n    setShowForm(false);\n    setEditingSite(null);\n  };\n\n  const handleFormSuccess = () => {\n    fetchData();\n    handleFormClose();\n    showToast({ \n      message: editingSite ? 'Sede aggiornata con successo' : 'Sede creata con successo', \n      type: 'success' \n    });\n  };\n\n  // Prepare tabs\n  const tabs = [\n    {\n      id: 'company',\n      label: 'Azienda',\n      count: employees.length\n    },\n    ...sites.map((site, index) => ({\n      id: site.id,\n      label: `Sede ${index + 1}`,\n      count: employees.filter(emp => emp.siteId === site.id).length\n    }))\n  ];\n\n  // Filter data based on active tab\n  const getFilteredEmployees = () => {\n    if (activeTab === 'company') {\n      return employees;\n    }\n    return employees.filter(emp => emp.siteId === activeTab);\n  };\n\n  const getActiveSite = () => {\n    if (activeTab === 'company') return null;\n    return sites.find(site => site.id === activeTab);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"space-y-3\">\n            <div className=\"h-4 bg-gray-200 rounded\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n            <Building2 className=\"h-5 w-5 mr-2\" />\n            Gestione Sedi Aziendali\n          </h2>\n          <button\n            onClick={() => setShowForm(true)}\n            className=\"px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-full hover:bg-blue-700 transition-colors flex items-center\"\n          >\n            <Plus className=\"h-4 w-4 mr-1\" />\n            Aggiungi Sede\n          </button>\n        </div>\n\n        {/* Tab Pills - Show only if there are multiple sites */}\n        {sites.length > 0 && (\n          <div className=\"mb-6\">\n            <TabPills\n              tabs={tabs}\n              activeTab={activeTab}\n              onTabChange={setActiveTab}\n              className=\"mb-4\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Sites Grid */}\n      {sites.length === 0 ? (\n        <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n          <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n              <Building2 className=\"h-5 w-5 mr-2\" />\n              Sedi Aziendali\n            </h2>\n            <button\n              onClick={() => setShowForm(true)}\n              className=\"px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-full hover:bg-blue-700 transition-colors flex items-center\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Aggiungi Sede\n            </button>\n          </div>\n          <div className=\"px-6 py-8 text-center\">\n            <Building2 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nessuna sede trovata</h3>\n            <p className=\"text-gray-500 mb-4\">Aggiungi la prima sede per questa azienda.</p>\n            <button\n              onClick={() => setShowForm(true)}\n              className=\"px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-full hover:bg-blue-700 transition-colors flex items-center mx-auto\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Aggiungi Prima Sede\n            </button>\n          </div>\n        </div>\n      ) : (\n        <>\n          {/* Show sites when company tab is active or when specific site is selected */}\n          {activeTab === 'company' && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {sites.map((site, index) => (\n                <SiteCard\n                  key={site.id}\n                  site={site}\n                  isDefault={index === 0}\n                  onEdit={handleEdit}\n                  onDelete={handleDelete}\n                  onManageDVR={(siteId, siteName) => setActiveManager({ type: 'dvr', siteId, siteName })}\n                  onManageSopralluogo={(siteId, siteName) => setActiveManager({ type: 'sopralluogo', siteId, siteName })}\n                  onManageReparto={(siteId, siteName) => setActiveManager({ type: 'reparto', siteId, siteName })}\n                />\n              ))}\n            </div>\n          )}\n\n          {/* Show single site when specific site tab is active */}\n          {activeTab !== 'company' && getActiveSite() && (\n            <div className=\"grid grid-cols-1 gap-6\">\n              <SiteCard\n                site={getActiveSite()!}\n                isDefault={sites.findIndex(s => s.id === activeTab) === 0}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n                onManageDVR={(siteId, siteName) => setActiveManager({ type: 'dvr', siteId, siteName })}\n                onManageSopralluogo={(siteId, siteName) => setActiveManager({ type: 'sopralluogo', siteId, siteName })}\n                onManageReparto={(siteId, siteName) => setActiveManager({ type: 'reparto', siteId, siteName })}\n              />\n            </div>\n          )}\n        </>\n      )}\n\n      {/* Employees Section */}\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n          <h2 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n            <Users className=\"h-5 w-5 mr-2\" />\n            Dipendenti {activeTab === 'company' ? 'Azienda' : `- ${getActiveSite()?.siteName}`}\n          </h2>\n          <span className=\"text-sm text-gray-500\">\n            {getFilteredEmployees().length} dipendenti\n          </span>\n        </div>\n        <div className=\"divide-y divide-gray-200\">\n          {getFilteredEmployees().length === 0 ? (\n            <div className=\"px-6 py-8 text-center\">\n              <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Nessun dipendente trovato\n              </h3>\n              <p className=\"text-gray-500\">\n                {activeTab === 'company' \n                  ? 'Non ci sono dipendenti in questa azienda.'\n                  : 'Non ci sono dipendenti assegnati a questa sede.'\n                }\n              </p>\n            </div>\n          ) : (\n            getFilteredEmployees().map((employee) => (\n              <div key={employee.id} className=\"px-6 py-4 flex items-center hover:bg-gray-50\">\n                <div className=\"w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center\">\n                  <span className=\"text-sm font-medium text-blue-600\">\n                    {employee.firstName.charAt(0)}{employee.lastName.charAt(0)}\n                  </span>\n                </div>\n                <div className=\"ml-3 flex-grow\">\n                  <p className=\"text-sm font-medium text-gray-800\">\n                    {employee.firstName} {employee.lastName}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">{employee.title || 'Dipendente'}</p>\n                </div>\n                {employee.siteId && (\n                  <span className=\"px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\">\n                    {sites.find(s => s.id === employee.siteId)?.siteName || 'Sede'}\n                  </span>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Form Modal */}\n      {showForm && (\n        <CompanySiteForm\n          companyId={companyId}\n          site={editingSite}\n          onSuccess={handleFormSuccess}\n          onClose={handleFormClose}\n        />\n      )}\n\n      {/* Manager Modals */}\n      {activeManager.type === 'dvr' && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Gestione DVR - {activeManager.siteName}\n              </h3>\n              <button\n                onClick={() => setActiveManager({ type: null, siteId: '', siteName: '' })}\n                className=\"px-3 py-1.5 text-sm font-medium text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors\"\n              >\n                <span className=\"sr-only\">Chiudi</span>\n                ✕\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <DVRManager siteId={activeManager.siteId} siteName={activeManager.siteName} />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeManager.type === 'sopralluogo' && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Gestione Sopralluoghi - {activeManager.siteName}\n              </h3>\n              <button\n                onClick={() => setActiveManager({ type: null, siteId: '', siteName: '' })}\n                className=\"px-3 py-1.5 text-sm font-medium text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors\"\n              >\n                <span className=\"sr-only\">Chiudi</span>\n                ✕\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <SopralluogoManager siteId={activeManager.siteId} siteName={activeManager.siteName} />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeManager.type === 'reparto' && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Gestione Reparti - {activeManager.siteName}\n              </h3>\n              <button\n                onClick={() => setActiveManager({ type: null, siteId: '', siteName: '' })}\n                className=\"px-3 py-1.5 text-sm font-medium text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors\"\n              >\n                <span className=\"sr-only\">Chiudi</span>\n                ✕\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <RepartoManager siteId={activeManager.siteId} siteName={activeManager.siteName} />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MultiSiteManager;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/SiteCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/SiteTabsFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/company-import/CompanyImportConflictModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/company-import/CompanyImportRefactored.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[705,708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[705,708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[784,787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[784,787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[978,981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[978,981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4650,4653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4650,4653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6252,6255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6252,6255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport GenericImport, { defaultProcessFile } from '../../shared/GenericImport';\nimport { useToast } from '../../../hooks/useToast';\nimport CompanyImportConflictModal from './CompanyImportConflictModal';\nimport { CompanyImportProps } from './types';\nimport { csvHeaderMap, columnOrder } from './constants';\nimport { validateCompany, formatCompanyData, detectConflicts, convertToApiFormat } from './utils';\n\n/**\n * Componente per l'importazione di aziende da file CSV - Versione Refactorizzata\n */\nconst CompanyImportRefactored: React.FC<CompanyImportProps> = ({\n  onImport,\n  onClose,\n  existingCompanies = []\n}) => {\n  const [importData, setImportData] = useState<any[]>([]);\n  const { showToast } = useToast();\n  const [conflicts] = useState<any[]>([]);\n  const [showConflictModal, setShowConflictModal] = useState(false);\n\n  // Funzione personalizzata per processare il file CSV\n  const customProcessFile = async (file: File): Promise<any[]> => {\n    try {\n      console.log('Aziende esistenti ricevute:', existingCompanies?.length || 0, existingCompanies?.[0]);\n      \n      // Processa il file e ottieni i dati grezzi\n      const processedData = await defaultProcessFile(file, csvHeaderMap);\n      \n      // Applica formattazione e validazione\n      const formattedData = processedData.map(company => {\n        // Prima mappa i campi alias ai campi originali\n        const mappedCompany = { ...company };\n        \n        // Mappatura campi alias inglesi ai campi originali\n        const aliasMapping: Record<string, string> = {\n          companyName: 'ragioneSociale',\n          atecoCode: 'codiceAteco',\n          vatNumber: 'piva',\n          taxCode: 'codiceFiscale',\n          email: 'mail',\n          phone: 'telefono',\n          city: 'citta',\n          province: 'provincia',\n          zip: 'cap',\n          address: 'sedeAzienda',\n          contactPerson: 'personaRiferimento',\n          notes: 'note',\n          active: 'isActive',\n          siteName2: 'siteName',\n          siteAddress: 'siteIndirizzo',\n          siteCity2: 'siteCitta',\n          siteProvince2: 'siteProvincia',\n          siteZip: 'siteCap',\n          siteContact: 'sitePersonaRiferimento',\n          sitePhone2: 'siteTelefono',\n          siteEmail2: 'siteMail'\n        };\n        \n        // Applica la mappatura degli alias\n        Object.entries(aliasMapping).forEach(([alias, original]) => {\n          if (mappedCompany[alias] !== undefined && mappedCompany[original] === undefined) {\n            mappedCompany[original] = mappedCompany[alias];\n            delete mappedCompany[alias];\n          }\n        });\n        \n        // Se manca \"Nome Sede\", usa \"Città Sede\"\n        if (!mappedCompany.siteName && mappedCompany.siteCitta) {\n          mappedCompany.siteName = mappedCompany.siteCitta;\n        }\n        \n        // Rileva se ci sono campi sede specifici\n        const hasSiteSpecificFields = !!(\n          mappedCompany.siteName || \n          mappedCompany.siteIndirizzo || \n          mappedCompany.siteCitta || \n          mappedCompany.siteProvincia || \n          mappedCompany.siteCap || \n          mappedCompany.sitePersonaRiferimento || \n          mappedCompany.siteTelefono || \n          mappedCompany.siteMail\n        );\n        \n        if (hasSiteSpecificFields) {\n          mappedCompany._hasSiteData = true;\n        }\n        \n        return formatCompanyData(mappedCompany);\n      });\n      \n      // Verifica la presenza di dati basilari\n      if (formattedData.length === 0) {\n        throw new Error('Il file non contiene dati validi');\n      }\n      \n      // Conta quante righe hanno la ragione sociale\n      const validRowsCount = formattedData.filter(c => c.ragioneSociale).length;\n      if (validRowsCount === 0) {\n        throw new Error('Nessuna riga contiene la Ragione Sociale, che è un campo obbligatorio');\n      }\n      \n      // Verifica che almeno il 50% delle righe contenga la ragione sociale\n      if (validRowsCount < formattedData.length / 2) {\n        showToast({\n          message: `Attenzione: solo ${validRowsCount} su ${formattedData.length} righe contengono la Ragione Sociale`,\n          type: 'warning'\n        });\n      }\n      \n      // Rileva conflitti e duplicati\n      const dataWithConflicts = detectConflicts(formattedData, existingCompanies);\n      \n      // Salva i dati processati\n      setImportData(dataWithConflicts);\n      \n      return dataWithConflicts;\n    } catch (error) {\n      console.error('Errore durante il processamento del file:', error);\n      throw error;\n    }\n  };\n\n  // Gestione dell'importazione\n  const handleImport = async (selectedData: any[], overwriteIds?: string[]) => {\n    try {\n      // Filtra solo i dati selezionati che non sono duplicati\n      const dataToImport = selectedData.filter(company => !company._isDuplicateSite);\n      \n      if (dataToImport.length === 0) {\n        showToast({\n          message: 'Nessuna azienda valida da importare',\n          type: 'warning'\n        });\n        return;\n      }\n\n      // Valida tutti i dati prima dell'importazione\n      const validationErrors: string[] = [];\n      dataToImport.forEach((company, index) => {\n        const errors = validateCompany(company);\n        if (errors.length > 0) {\n          validationErrors.push(`Riga ${index + 1}: ${errors.join(', ')}`);\n        }\n      });\n\n      if (validationErrors.length > 0) {\n        showToast({\n          message: `Errori di validazione:\\n${validationErrors.join('\\n')}`,\n          type: 'error'\n        });\n        return;\n      }\n\n      // Converti i dati nel formato API\n      const apiData = dataToImport.map(convertToApiFormat);\n      \n      // Chiama la funzione di importazione\n      await onImport(apiData, overwriteIds);\n      \n      showToast({\n        message: `${dataToImport.length} aziende importate con successo`,\n        type: 'success'\n      });\n      \n      onClose();\n    } catch (error) {\n      console.error('Errore durante l\\'importazione:', error);\n      showToast({\n        message: `Errore durante l'importazione: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`,\n        type: 'error'\n      });\n    }\n  };\n\n  // Gestione dei conflitti\n  const handleConflictResolution = (resolutions: any[]) => {\n    const overwriteIds = resolutions\n      .filter(r => r.action === 'overwrite')\n      .map(r => r.companyId);\n    \n    setShowConflictModal(false);\n    handleImport(importData, overwriteIds);\n  };\n\n  return (\n    <>\n      <GenericImport\n        entityType=\"aziende\"\n        uniqueField=\"piva\"\n        title=\"Importa Aziende\"\n        subtitle=\"Carica un file CSV con i dati delle aziende da importare\"\n        columnOrder={columnOrder}\n        customProcessFile={customProcessFile}\n        onImport={handleImport}\n        onClose={onClose}\n        customValidation={validateCompany}\n        initialPreviewData={importData}\n        existingEntities={existingCompanies}\n      />\n      \n      <CompanyImportConflictModal\n        isOpen={showConflictModal}\n        onClose={() => setShowConflictModal(false)}\n        conflicts={conflicts}\n        onResolve={handleConflictResolution}\n      />\n    </>\n  );\n};\n\nexport default CompanyImportRefactored;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/company-import/CompanyPreviewTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/company-import/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/company-import/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/company-import/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/companies/company-import/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[206,209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[206,209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3933,3936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3933,3936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3939,3942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3939,3942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5015,5018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5015,5018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5041,5044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5041,5044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5054,5057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5054,5057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5737,5740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5737,5740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6256,6259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6256,6259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6262,6265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6262,6265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { titleCaseFields } from './constants';\nimport { applyTitleCaseToFields } from '../../../utils/textFormatters';\n\n// Validazione personalizzata per le aziende\nexport const validateCompany = (company: any): string[] => {\n  const errors: string[] = [];\n  \n  if (!company.ragioneSociale) {\n    errors.push('Ragione Sociale obbligatoria');\n  } else if (company.ragioneSociale.length > 250) {\n    errors.push('Ragione Sociale troppo lunga (max 250 caratteri)');\n  }\n  \n  // Verifica che ci sia almeno uno tra P.IVA e Codice Fiscale\n  if (!company.piva && !company.codiceFiscale) {\n    errors.push('P.IVA o Codice Fiscale obbligatori');\n  }\n  \n  // Verifica della P.IVA (se presente)\n  if (company.piva) {\n    if (company.piva.length < 8 || company.piva.length > 13) {\n      errors.push('P.IVA non valida (deve essere tra 8 e 13 caratteri)');\n    }\n    \n    // Verifica che contenga solo numeri\n    if (!/^\\d+$/.test(company.piva)) {\n      errors.push('P.IVA deve contenere solo numeri');\n    }\n  }\n  \n  // Verifica del Codice Fiscale SOLO se non c'è una P.IVA valida\n  if (!company.piva && company.codiceFiscale) {\n    // Se il codice fiscale è per un'azienda (11 caratteri) o una persona (16 caratteri)\n    if (company.codiceFiscale.length !== 16 && company.codiceFiscale.length !== 11) {\n      errors.push('Codice Fiscale non valido (deve essere 16 caratteri per persone fisiche o 11 per aziende)');\n    }\n  }\n  \n  // Verifica campi che potrebbero causare errori 500\n  if (company.sdi && company.sdi.length > 7) {\n    errors.push('Codice SDI troppo lungo (max 7 caratteri)');\n  }\n  \n  if (company.pec && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(company.pec)) {\n    errors.push('Formato PEC non valido');\n  }\n  \n  if (company.mail && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(company.mail)) {\n    errors.push('Formato Mail non valido');\n  }\n  \n  if (company.telefono && !/^[\\d\\s+\\-().]+$/.test(company.telefono)) {\n    errors.push('Formato Telefono non valido (sono consentiti solo numeri, spazi e caratteri +-(). )');\n  }\n  \n  // Validazione domini\n  if (company.domain && !/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/.test(company.domain)) {\n    errors.push('Formato Dominio non valido');\n  }\n  \n  // Validazione slug\n  if (company.slug && !/^[a-z0-9-]+$/.test(company.slug)) {\n    errors.push('Slug deve contenere solo lettere minuscole, numeri e trattini');\n  }\n  \n  // Validazione date\n  const dateFields = ['ultimoSopralluogo', 'prossimoSopralluogo', 'ultimoSopralluogoRSPP', 'prossimoSopralluogoRSPP', 'ultimoSopralluogoMedico', 'prossimoSopralluogoMedico'];\n  dateFields.forEach(field => {\n    if (company[field] && isNaN(Date.parse(company[field]))) {\n      errors.push(`Formato data non valido per ${field}`);\n    }\n  });\n  \n  // Validazione boolean\n  if (company.isActive && !['true', 'false', '1', '0', 'sì', 'no', 'si', 'yes', 'no'].includes(String(company.isActive).toLowerCase())) {\n    errors.push('Campo Attivo deve essere true/false, 1/0, sì/no, yes/no');\n  }\n  \n  // Verifica lunghezza eccessiva per campi comuni - ALLINEATI AL TEMPLATE\n  const maxLengthFields: [string, number][] = [\n    ['sedeAzienda', 250],\n    ['citta', 100],\n    ['provincia', 50],\n    ['cap', 10],\n    ['personaRiferimento', 100],\n    ['note', 1000],\n    ['siteName', 100],\n    ['indirizzo', 250],\n    ['dvr', 100],\n    ['valutazioneSopralluogo', 500],\n    ['sopralluogoEseguitoDa', 100],\n    ['noteSopralluogoRSPP', 500],\n    ['noteSopralluogoMedico', 500],\n    ['slug', 100],\n    ['domain', 100],\n    ['subscriptionPlan', 50],\n    ['codiceAteco', 20],\n    ['iban', 34],\n    ['pec', 100],\n    ['sdi', 7]\n  ];\n  \n  maxLengthFields.forEach(([field, maxLength]) => {\n    if (company[field] && company[field].length > maxLength) {\n      errors.push(`Il campo ${field} è troppo lungo (max ${maxLength} caratteri)`);\n    }\n  });\n  \n  return errors;\n};\n\n// Funzione per formattare i dati dell'azienda\nexport const formatCompanyData = (company: any): any => {\n  // Applica il Title Case ai campi specificati\n  const formattedCompany = applyTitleCaseToFields(company, titleCaseFields);\n  \n  // Conversioni specifiche per i campi booleani\n  if (formattedCompany.isActive) {\n    const activeValue = String(formattedCompany.isActive).toLowerCase();\n    formattedCompany.isActive = ['true', '1', 'sì', 'si', 'yes'].includes(activeValue);\n  }\n  \n  // Normalizza i campi numerici\n  if (formattedCompany.piva) {\n    formattedCompany.piva = formattedCompany.piva.replace(/\\D/g, ''); // Rimuovi caratteri non numerici\n  }\n  \n  if (formattedCompany.codiceFiscale) {\n    formattedCompany.codiceFiscale = formattedCompany.codiceFiscale.toUpperCase().replace(/\\s/g, '');\n  }\n  \n  // Normalizza le email\n  if (formattedCompany.mail) {\n    formattedCompany.mail = formattedCompany.mail.toLowerCase().trim();\n  }\n  \n  if (formattedCompany.pec) {\n    formattedCompany.pec = formattedCompany.pec.toLowerCase().trim();\n  }\n  \n  return formattedCompany;\n};\n\n// Funzione per rilevare conflitti e duplicati\nexport const detectConflicts = (companies: any[], existingCompanies: any[] = []): any[] => {\n  return companies.map((company) => {\n    const conflictInfo = { ...company };\n    \n    // Cerca aziende esistenti con stesso P.IVA o Codice Fiscale\n    const existingCompany = existingCompanies.find(existing => \n      (company.piva && existing.vatNumber === company.piva) ||\n      (company.codiceFiscale && existing.taxCode === company.codiceFiscale)\n    );\n    \n    if (existingCompany) {\n      conflictInfo._isExisting = true;\n      conflictInfo._existingId = existingCompany.id;\n      \n      // Verifica se è una nuova sede per un'azienda esistente\n      if (company.siteName || company.siteIndirizzo) {\n        const existingSite = existingCompany.sites?.find((site: any) => \n          site.name === company.siteName || \n          site.address === company.siteIndirizzo\n        );\n        \n        if (existingSite) {\n          conflictInfo._isDuplicateSite = true;\n        } else {\n          conflictInfo._isNewSite = true;\n        }\n      }\n    } else if (company.siteName || company.siteIndirizzo) {\n      conflictInfo._isNewCompanyWithSite = true;\n    }\n    \n    return conflictInfo;\n  });\n};\n\n// Funzione per convertire i dati per l'API\nexport const convertToApiFormat = (company: any): any => {\n  return {\n    name: company.ragioneSociale,\n    atecoCode: company.codiceAteco,\n    vatNumber: company.piva,\n    taxCode: company.codiceFiscale,\n    sdi: company.sdi,\n    pec: company.pec,\n    iban: company.iban,\n    address: company.sedeAzienda,\n    city: company.citta,\n    province: company.provincia,\n    postalCode: company.cap,\n    email: company.mail,\n    phone: company.telefono,\n    contactPerson: company.personaRiferimento,\n    notes: company.note,\n    slug: company.slug,\n    domain: company.domain,\n    settings: company.settings,\n    subscriptionPlan: company.subscriptionPlan,\n    isActive: company.isActive,\n    // Dati della sede se presenti\n    ...(company.siteName && {\n      sites: [{\n        name: company.siteName,\n        address: company.siteIndirizzo,\n        city: company.siteCitta,\n        province: company.siteProvincia,\n        postalCode: company.siteCap,\n        contactPerson: company.sitePersonaRiferimento,\n        phone: company.siteTelefono,\n        email: company.siteMail,\n        dvr: company.dvr,\n        rsppId: company.rsppId,\n        medicoCompetenteId: company.medicoCompetenteId,\n        ultimoSopralluogo: company.ultimoSopralluogo,\n        prossimoSopralluogo: company.prossimoSopralluogo,\n        valutazioneSopralluogo: company.valutazioneSopralluogo,\n        sopralluogoEseguitoDa: company.sopralluogoEseguitoDa,\n        ultimoSopralluogoRSPP: company.ultimoSopralluogoRSPP,\n        prossimoSopralluogoRSPP: company.prossimoSopralluogoRSPP,\n        noteSopralluogoRSPP: company.noteSopralluogoRSPP,\n        ultimoSopralluogoMedico: company.ultimoSopralluogoMedico,\n        prossimoSopralluogoMedico: company.prossimoSopralluogoMedico,\n        noteSopralluogoMedico: company.noteSopralluogoMedico\n      }]\n    })\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/courses/CourseDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/courses/CourseForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/courses/CourseImport.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5371,5374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5371,5374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport GenericImport, { defaultProcessFile } from '../shared/GenericImport';\nimport { applyTitleCaseToFields } from '../../utils/textFormatters';\nimport type { Course } from '../../types/courses';\nimport { useToast } from '../../hooks/useToast';\n\ninterface CourseImportData extends Partial<Course> {\n  _isExisting?: boolean;\n}\n\ninterface CourseImportProps {\n  onImport: (courses: CourseImportData[], overwriteIds?: string[]) => Promise<void>;\n  onClose: () => void;\n  existingCourses?: Course[];\n}\n\n// Definizione della mappatura dei campi CSV\nconst csvHeaderMap: Record<string, string> = {\n  'Corso': 'title',\n  'DurataCorso': 'duration',\n  'AnniValidita': 'validityYears',\n  'DurataCorsoAggiornamento': 'renewalDuration',\n  'EuroPersona': 'pricePerPerson',\n  'Certificazioni': 'certifications',\n  'MaxPersone': 'maxPeople',\n  'Normativa': 'regulation',\n  'Contenuti': 'contents',\n  'Codice': 'code',\n  'Descrizione': 'description',\n  'Categoria': 'category',\n};\n\n// Campi da formattare in title case\nconst titleCaseFields = [\n  'title',\n  'description',\n  'category'\n];\n\n// Campi numerici che richiedono conversione\nconst numericFields = [\n  'duration',\n  'validityYears',\n  'pricePerPerson',\n  'maxPeople',\n  'price'\n];\n\n// Normalizza un valore numerico, gestendo vari formati di input\nconst normalizeNumericValue = (value: unknown): string => {\n  if (value === null || value === undefined || value === '') return '';\n  \n  // Converti in stringa\n  let strValue = String(value).trim();\n  \n  // Gestisci formati con virgola come separatore decimale (es. \"1,5\")\n  if (/^\\d+,\\d+$/.test(strValue)) {\n    strValue = strValue.replace(',', '.');\n  }\n  \n  // Rimuovi caratteri non numerici (eccetto punto decimale)\n  strValue = strValue.replace(/[^\\d.]/g, '');\n  \n  return strValue;\n};\n\n// Validazione personalizzata per i corsi\nconst validateCourse = (course: Record<string, unknown>): string[] => {\n  const errors: string[] = [];\n  \n  if (!course.title) {\n    errors.push('Nome del corso obbligatorio');\n  }\n  \n  // Verifica per i campi numerici\n  numericFields.forEach(field => {\n    if (course[field] && isNaN(Number(normalizeNumericValue(course[field])))) {\n      errors.push(`${field} deve essere un numero`);\n    }\n  });\n  \n  return errors;\n};\n\n/**\n * Componente per l'importazione di corsi da file CSV\n */\nconst CourseImport: React.FC<CourseImportProps> = ({\n  onImport,\n  onClose,\n  existingCourses = []\n}) => {\n  const { showToast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Funzione personalizzata per processare il file CSV\n  const customProcessFile = async (file: File): Promise<CourseImportData[]> => {\n    try {\n      // Processa il file e ottieni i dati grezzi\n      const processedData = await defaultProcessFile(file, csvHeaderMap);\n      \n      // Converti i campi numerici in formato standard\n      const dataWithNormalizedNumbers = processedData.map(course => {\n        const normalized = { ...course };\n        \n        // Normalizza i campi numerici\n        numericFields.forEach(field => {\n          if (normalized[field] !== undefined && normalized[field] !== null && normalized[field] !== '') {\n            const normalizedValue = normalizeNumericValue(normalized[field]);\n            if (normalizedValue && !isNaN(Number(normalizedValue))) {\n              normalized[field] = normalizedValue;\n            }\n          }\n        });\n        \n        return normalized;\n      });\n      \n      // Applica il Title Case ai campi specificati\n      const formattedData = dataWithNormalizedNumbers.map(course => {\n        // Crea una copia dell'oggetto corso\n        return applyTitleCaseToFields({ ...course }, titleCaseFields);\n      });\n      \n      // Cerca corrispondenze con corsi esistenti tramite il codice (uniqueField)\n      const dataWithIds = formattedData.map(course => {\n        // Se il corso ha un codice, cerca corrispondenze\n        if (course.code) {\n          const normalizedCode = course.code.trim().toLowerCase();\n          const existingByCode = existingCourses?.find(existing => \n            existing.code && existing.code.trim().toLowerCase() === normalizedCode\n          );\n          \n          if (existingByCode) {\n            return { ...course, id: existingByCode.id, _isExisting: true };\n          }\n        }\n        \n        return course;\n      });\n      \n      return dataWithIds;\n    } catch (error) {\n      showToast({\n        message: `Errore durante il processing del file: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`,\n        type: 'error'\n      });\n      throw error;\n    }\n  };\n\n  // Handler personalizzato per l'importazione\n  const handleImport = async (data: CourseImportData[], overwriteIds?: string[]): Promise<void> => {\n    if (isProcessing) {\n      return;\n    }\n    \n    setIsProcessing(true);\n    \n    try {\n      // Verifica che i dati siano validi\n      if (!Array.isArray(data) || data.length === 0) {\n        showToast({\n          message: \"Nessun dato da importare\",\n          type: \"warning\"\n        });\n        setIsProcessing(false);\n        return;\n      }\n      \n      // Processa i dati per assicurarsi che i campi numerici siano numeri\n      const processedData = data.map(course => {\n        // Create completely new object to avoid reference issues\n        const cleanCourse: Record<string, any> = {};\n        \n        // Copy all non-numeric fields as is\n        Object.keys(course).forEach(key => {\n          if (key !== 'validityYears' && \n              key !== 'price' && \n              key !== 'pricePerPerson' && \n              key !== 'maxPeople') {\n            cleanCourse[key] = course[key];\n          }\n        });\n        \n        // Handle numeric fields explicitly\n        // validityYears: MUST be a number for Prisma\n        if (course.validityYears !== undefined) {\n          const validityYearsStr = String(course.validityYears);\n          const cleanValidityYears = validityYearsStr.replace(/[^\\d]/g, '');\n          cleanCourse.validityYears = cleanValidityYears ? parseInt(cleanValidityYears, 10) : null;\n        }\n        \n        // duration: String in the DB, but needs to be a valid number string\n        if (course.duration !== undefined) {\n          cleanCourse.duration = String(course.duration).replace(/[^\\d]/g, '');\n        }\n        \n        // price: Should be a number\n        if (course.price !== undefined) {\n          const priceStr = String(course.price);\n          const cleanPrice = priceStr.replace(/[^\\d.]/g, '');\n          cleanCourse.price = cleanPrice ? parseFloat(cleanPrice) : null;\n        }\n        \n        // pricePerPerson: Should be a number\n        if (course.pricePerPerson !== undefined) {\n          const pricePerPersonStr = String(course.pricePerPerson);\n          const cleanPricePerPerson = pricePerPersonStr.replace(/[^\\d.]/g, '');\n          cleanCourse.pricePerPerson = cleanPricePerPerson ? parseFloat(cleanPricePerPerson) : null;\n        }\n        \n        // maxPeople: Should be a number\n        if (course.maxPeople !== undefined) {\n          const maxPeopleStr = String(course.maxPeople);\n          const cleanMaxPeople = maxPeopleStr.replace(/[^\\d]/g, '');\n          cleanCourse.maxPeople = cleanMaxPeople ? parseInt(cleanMaxPeople, 10) : null;\n        }\n        \n        // renewalDuration should remain a string\n        if (course.renewalDuration !== undefined) {\n          cleanCourse.renewalDuration = String(course.renewalDuration);\n        }\n        \n        return cleanCourse;\n      });\n      \n      // Passa i dati processati alla funzione di import\n      await onImport(processedData, overwriteIds);\n      \n      showToast({\n        message: \"Importazione completata con successo\",\n        type: \"success\"\n      });\n      \n      onClose();\n    } catch (error) {\n      showToast({\n        message: `Errore durante l'importazione: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`,\n        type: \"error\"\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <GenericImport\n      entityType=\"corsi\"\n      uniqueField=\"code\"\n      onImport={handleImport}\n      onClose={onClose}\n      existingEntities={existingCourses || []}\n      csvHeaderMap={csvHeaderMap}\n      title=\"Importa Corsi\"\n      subtitle=\"Carica un file CSV con i dati dei corsi da importare\"\n      customValidation={validateCourse}\n      csvDelimiter=\";\"\n      customProcessFile={customProcessFile}\n    />\n  );\n};\n\nexport default CourseImport;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/courses/CourseParticipantsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/courses/CourseScheduleForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/courses/ParticipantsPDF.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/dashboard/ScheduleCalendar.tsx","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":3,"column":1,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":3,"endColumn":14,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[94,107],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[676,679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[676,679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[887,890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[887,890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1093,1096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1093,1096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentView'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [currentView, view]","fix":{"range":[3342,3348],"text":"[currentView, view]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3456,3459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3456,3459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3656,3659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3656,3659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3954,3957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3954,3957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8737,8740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8737,8740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8928,8931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8928,8931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9105,9108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9105,9108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":279,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10451,10454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10451,10454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n// @ts-ignore\nimport { Calendar, dateFnsLocalizer, Views } from 'react-big-calendar';\nimport { format, parse, startOfWeek, getDay } from 'date-fns';\nimport { it } from 'date-fns/locale/it';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport './ScheduleCalendar.custom.css';\n\nconst locales = {\n  'it-IT': it,\n};\n\nconst localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek: () => startOfWeek(new Date(), { weekStartsOn: 1 }),\n  getDay,\n  locales,\n});\n\nexport interface ScheduleEvent {\n  id: string;\n  title: string;\n  start: Date;\n  end: Date;\n  resource?: any;\n  scheduleId?: string;\n  tooltip?: string;\n  sessioniTooltipHtml?: string;\n  allDay?: boolean;\n  status?: string;\n}\n\ninterface ScheduleCalendarProps {\n  events: ScheduleEvent[];\n  onSelectSlot?: (slotInfo: any) => void;\n  onSelectEvent?: (event: ScheduleEvent) => void;\n  view?: string;\n  onView?: (view: string) => void;\n}\n\n\n\n// Custom toolbar\nfunction CustomToolbar({ label, onNavigate, onView, views, view }: any) {\n  return (\n    <div className=\"flex items-center justify-between mb-4\">\n      <div className=\"flex gap-2\">\n        <button onClick={() => onNavigate('TODAY')} className=\"px-3 py-1 rounded-full bg-blue-600 text-white font-medium shadow hover:bg-blue-700 transition\">Oggi</button>\n        <button onClick={() => onNavigate('PREV')} className=\"px-3 py-1 rounded-full bg-gray-100 text-gray-700 font-medium shadow hover:bg-gray-200 transition\">&lt;</button>\n        <button onClick={() => onNavigate('NEXT')} className=\"px-3 py-1 rounded-full bg-gray-100 text-gray-700 font-medium shadow hover:bg-gray-200 transition\">&gt;</button>\n      </div>\n      <span className=\"text-lg font-semibold text-gray-800\">{label}</span>\n      <div className=\"flex gap-2\">\n        {views.map((v: string) => (\n          <button\n            key={v}\n            onClick={() => onView(v)}\n            className={`px-3 py-1 rounded-lg font-medium transition ${view === v ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}\n          >\n            {v === Views.MONTH ? 'Mese' : v === Views.WEEK ? 'Settimana' : v === Views.DAY ? 'Giorno' : v}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Custom event renderer per tutte le viste\nfunction CustomEvent({ event }: { event: ScheduleEvent }) {\n  // Mostra titolo e orari solo se disponibili\n  const start = event.start instanceof Date ? event.start.toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' }) : '';\n  const end = event.end instanceof Date ? event.end.toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' }) : '';\n  return (\n    <div style={{ whiteSpace: 'nowrap', fontWeight: 500, fontSize: '0.98em', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n      {event.title}\n      {start && end && (\n        <span style={{ fontWeight: 400, marginLeft: 4, fontSize: '0.95em', color: '#2563eb' }}>\n          {` (${start} - ${end})`}\n        </span>\n      )}\n    </div>\n  );\n}\n\nconst ScheduleCalendar: React.FC<ScheduleCalendarProps> = ({ events, onSelectSlot, onSelectEvent, view, onView }) => {\n  const [currentView, setCurrentView] = useState(view || 'month');\n\n  useEffect(() => {\n    if (view && view !== currentView) setCurrentView(view);\n  }, [view]);\n\n  // Wrapper compatibile: clona il child e aggiunge solo overlay/tooltip\n  const EventWrapper = (props: any) => {\n    const { children, event } = props;\n    const [mouse, setMouse] = useState<{x: number, y: number} | null>(null);\n    const [hovered, setHovered] = useState(false);\n    const ref = useRef<any>(null);\n\n    useEffect(() => {\n      // Rimuovi il title nativo dal DOM\n      if (ref.current) {\n        const el = ref.current;\n        if (el.hasAttribute('title')) el.removeAttribute('title');\n        // Rimuovi anche dai figli\n        Array.from(el.querySelectorAll('[title]')).forEach((n: any) => n.removeAttribute('title'));\n      }\n    });\n\n    // Calcola colore di hover coerente con lo stato\n    let bg = '#2563eb';\n    let hoverBg = '#1d4ed8';\n    let textColor = '#fff';\n    let hoverTextColor = '#fff';\n    if (event.status === 'Preventivo') { bg = '#fef9c3'; hoverBg = '#fde047'; textColor = '#b45309'; hoverTextColor = '#b45309'; }\n    else if (event.status === 'Confermato') { bg = '#fef3c7'; hoverBg = '#fbbf24'; textColor = '#b45309'; hoverTextColor = '#b45309'; }\n    else if (event.status === 'Fatturato') { bg = '#dbeafe'; hoverBg = '#2563eb'; textColor = '#2563eb'; hoverTextColor = '#fff'; }\n    else if (event.status === 'Pagato') { bg = '#bbf7d0'; hoverBg = '#22c55e'; textColor = '#15803d'; hoverTextColor = '#fff'; }\n\n    // Tooltip overlay\n    const tooltip = hovered && event.tooltip && mouse ? ReactDOM.createPortal(\n      <div style={{\n        position: 'fixed',\n        zIndex: 9999,\n        background: '#fff',\n        color: '#1e293b',\n        border: '2px solid #2563eb',\n        padding: '12px 16px 12px 16px',\n        borderRadius: '10px',\n        fontSize: '0.98rem',\n        minWidth: 220,\n        maxWidth: 320,\n        whiteSpace: 'normal',\n        boxShadow: '0 4px 18px rgba(37,99,235,0.10)',\n        pointerEvents: 'none',\n        lineHeight: 1.5,\n        top: Math.min(mouse.y + 12, window.innerHeight - 220),\n        left: Math.min(mouse.x + 16, window.innerWidth - 320),\n      }}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: 6 }}>\n          <div style={{ fontWeight: 600, fontSize: '1.08em', color: '#2563eb', letterSpacing: 0.2, flex: 1, marginRight: 8 }}>{event.title}</div>\n          {/* Stato pillola colorata */}\n          {event.status && (\n            <span style={{\n              display: 'inline-block',\n              padding: '2px 10px',\n              borderRadius: '999px',\n              fontWeight: 600,\n              fontSize: '0.92em',\n              background: event.status === 'Preventivo' ? '#fef9c3'\n                        : event.status === 'Confermato' ? '#fef3c7'\n                        : event.status === 'Fatturato' ? '#dbeafe'\n                        : event.status === 'Pagato' ? '#bbf7d0'\n                        : '#e5e7eb',\n              color: event.status === 'Preventivo' ? '#b45309'\n                    : event.status === 'Confermato' ? '#b45309'\n                    : event.status === 'Fatturato' ? '#2563eb'\n                    : event.status === 'Pagato' ? '#15803d'\n                    : '#334155',\n              border: '1px solid #e5e7eb',\n              marginLeft: 4,\n              minWidth: 0,\n              textAlign: 'center',\n              whiteSpace: 'nowrap',\n            }}>{event.status}</span>\n          )}\n        </div>\n        {/* Aziende */}\n        {event.tooltip && (\n          <div style={{ marginBottom: 4 }}>\n            {(() => {\n              // Estrai solo la riga aziende\n              const lines = event.tooltip.split('\\n');\n              const az = lines.find((l: string) => l.startsWith('Aziende:'));\n              if (az) return <div style={{ marginBottom: 2 }}><b>Aziende:</b> {az.replace('Aziende: ', '')}</div>;\n              return null;\n            })()}\n          </div>\n        )}\n        {/* Luogo e Data */}\n        {event.tooltip && (() => {\n          const lines = event.tooltip.split('\\n');\n          const luogo = lines.find((l: string) => l.startsWith('Luogo:'));\n          const data = lines.find((l: string) => l.startsWith('Data:'));\n          return (\n            <div style={{ marginBottom: 4 }}>\n              {luogo && <div><b>Luogo:</b> {luogo.replace('Luogo: ', '')}</div>}\n              {data && <div><b>Data:</b> {data.replace('Data: ', '')}</div>}\n            </div>\n          );\n        })()}\n        {/* Sessioni HTML */}\n        {event.sessioniTooltipHtml && (\n          <div style={{ marginTop: 6 }} dangerouslySetInnerHTML={{ __html: event.sessioniTooltipHtml }} />\n        )}\n      </div>,\n      document.body\n    ) : null;\n\n    // Applica colore di stato e hover inline\n    const child = React.cloneElement(React.Children.only(children), {\n      ref,\n      style: {\n        ...(children.props.style || {}),\n        backgroundColor: hovered ? hoverBg : bg,\n        color: hovered ? hoverTextColor : textColor,\n        borderRadius: '0.5rem',\n        border: 'none',\n        padding: '2px 8px',\n        fontWeight: 400,\n        fontSize: '0.85rem',\n        boxShadow: '0 1px 4px rgba(0,0,0,0.04)',\n        cursor: 'pointer',\n        whiteSpace: event.view === 'month' ? 'nowrap' : 'normal',\n        maxWidth: event.view === 'month' ? 120 : '100%',\n        minWidth: 0,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      onMouseEnter: (e: any) => {\n        setHovered(true);\n        setMouse({ x: e.clientX, y: e.clientY });\n        if (children.props.onMouseEnter) children.props.onMouseEnter(e);\n      },\n      onMouseMove: (e: any) => {\n        if (hovered) setMouse({ x: e.clientX, y: e.clientY });\n        if (children.props.onMouseMove) children.props.onMouseMove(e);\n      },\n      onMouseLeave: (e: any) => {\n        setHovered(false);\n        if (children.props.onMouseLeave) children.props.onMouseLeave(e);\n      },\n    });\n\n    return (\n      <>\n        {child}\n        {tooltip}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n      <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Calendario Corsi Programmati</h2>\n      <Calendar\n        localizer={localizer}\n        events={events}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        style={{ height: 500, border: 'none', background: 'transparent' }}\n        selectable={!!onSelectSlot}\n        onSelectSlot={onSelectSlot}\n        onSelectEvent={onSelectEvent}\n        views={['month', 'week', 'day']}\n        view={currentView}\n        onView={(v: string) => {\n          setCurrentView(v);\n          if (onView) onView(v);\n        }}\n        messages={{\n          month: 'Mese',\n          week: 'Settimana',\n          day: 'Giorno',\n          today: 'Oggi',\n          previous: 'Precedente',\n          next: 'Successivo',\n          agenda: 'Agenda',\n          date: 'Data',\n          time: 'Ora',\n          event: 'Evento',\n          noEventsInRange: 'Nessun evento in questo intervallo',\n        }}\n        popup={false}\n        culture=\"it-IT\"\n        components={{\n          toolbar: CustomToolbar,\n          event: (props: any) => <CustomEvent {...props} />, // Usa sempre CustomEvent per tutte le viste\n          eventWrapper: EventWrapper\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ScheduleCalendar;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/dashboard/StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/employees/EmployeeFormNew.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/AuditTrailTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1985,1988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1985,1988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4058,4061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4058,4061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Audit Trail Tab Component\n * Displays GDPR audit logs and compliance tracking\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Alert,\n  Chip,\n  Stack,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  LinearProgress,\n  Tooltip,\n  IconButton,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Pagination,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Divider\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  Download as DownloadIcon,\n  FilterList as FilterIcon,\n  Clear as ClearIcon,\n  Visibility as VisibilityIcon,\n  Timeline as TimelineIcon,\n  Security as SecurityIcon,\n  Assessment as AssessmentIcon,\n  ExpandMore as ExpandMoreIcon,\n  Info as InfoIcon\n} from '@mui/icons-material';\nimport { UseAuditTrailReturn, AuditLogEntry, AuditTrailFilters } from '../../types/gdpr';\nimport { format, formatDistanceToNow } from 'date-fns';\n\ninterface AuditTrailTabProps {\n  hook: UseAuditTrailReturn;\n}\n\nexport const AuditTrailTab: React.FC<AuditTrailTabProps> = ({ hook }) => {\n  const {\n    auditLogs,\n    loading,\n    error,\n    pagination,\n    filters,\n    refreshAuditTrail,\n    goToPage,\n    applyFilters,\n    clearFilters,\n    getAuditStats,\n    exportToCSV,\n    exportToJSON,\n    hasFilters\n  } = hook;\n\n  const [filterDialog, setFilterDialog] = useState(false);\n  const [tempFilters, setTempFilters] = useState<AuditTrailFilters>(filters);\n  const [selectedEntry, setSelectedEntry] = useState<AuditLogEntry | null>(null);\n  const [detailDialog, setDetailDialog] = useState(false);\n  const [exporting, setExporting] = useState<'csv' | 'json' | null>(null);\n\n  const stats = getAuditStats();\n\n  // Update temp filters when filters change\n  useEffect(() => {\n    setTempFilters(filters);\n  }, [filters]);\n\n  const handleFilterChange = (field: keyof AuditTrailFilters, value: any) => {\n    setTempFilters(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleApplyFilters = () => {\n    applyFilters(tempFilters);\n    setFilterDialog(false);\n  };\n\n  const handleClearFilters = () => {\n    const emptyFilters: AuditTrailFilters = {\n      action: '',\n      startDate: '',\n      endDate: '',\n      ipAddress: '',\n      userAgent: ''\n    };\n    setTempFilters(emptyFilters);\n    clearFilters();\n    setFilterDialog(false);\n  };\n\n  const handleExport = async (format: 'csv' | 'json') => {\n    try {\n      setExporting(format);\n      if (format === 'csv') {\n        await exportToCSV();\n      } else {\n        await exportToJSON();\n      }\n    } catch (error) {\n      console.error(`Error exporting to ${format}:`, error);\n    } finally {\n      setExporting(null);\n    }\n  };\n\n  const getActionIcon = (action: string) => {\n    switch (action.toLowerCase()) {\n      case 'consent_granted':\n      case 'consent_withdrawn':\n        return <SecurityIcon />;\n      case 'data_export':\n        return <DownloadIcon />;\n      case 'deletion_request':\n        return <TimelineIcon />;\n      case 'privacy_settings_updated':\n        return <AssessmentIcon />;\n      default:\n        return <InfoIcon />;\n    }\n  };\n\n  const getActionColor = (action: string): 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' => {\n    switch (action.toLowerCase()) {\n      case 'consent_granted':\n        return 'success';\n      case 'consent_withdrawn':\n        return 'warning';\n      case 'data_export':\n        return 'info';\n      case 'deletion_request':\n        return 'error';\n      case 'privacy_settings_updated':\n        return 'primary';\n      default:\n        return 'default';\n    }\n  };\n\n  const formatActionLabel = (action: string) => {\n    return action\n      .split('_')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const handleViewDetails = (entry: AuditLogEntry) => {\n    setSelectedEntry(entry);\n    setDetailDialog(true);\n  };\n\n  const renderMetadata = (metadata: Record<string, any>) => {\n    if (!metadata || Object.keys(metadata).length === 0) {\n      return <Typography variant=\"body2\" color=\"text.secondary\">No additional data</Typography>;\n    }\n\n    return (\n      <Box>\n        {Object.entries(metadata).map(([key, value]) => (\n          <Box key={key} sx={{ mb: 1 }}>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {key.charAt(0).toUpperCase() + key.slice(1)}:\n            </Typography>\n            <Typography variant=\"body2\" sx={{ ml: 1 }}>\n              {typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value)}\n            </Typography>\n          </Box>\n        ))}\n      </Box>\n    );\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" component=\"h2\">\n          GDPR Audit Trail\n        </Typography>\n        \n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          {hasFilters() && (\n            <Chip\n              label=\"Filtered\"\n              color=\"primary\"\n              size=\"small\"\n              onDelete={handleClearFilters}\n            />\n          )}\n          \n          <Tooltip title=\"Apply filters\">\n            <IconButton onClick={() => setFilterDialog(true)} size=\"small\">\n              <FilterIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Tooltip title=\"Refresh audit trail\">\n            <IconButton onClick={refreshAuditTrail} disabled={loading} size=\"small\">\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Button\n            variant=\"outlined\"\n            startIcon={<DownloadIcon />}\n            onClick={() => handleExport('csv')}\n            disabled={loading || exporting === 'csv'}\n            size=\"small\"\n          >\n            Export CSV\n          </Button>\n          \n          <Button\n            variant=\"outlined\"\n            startIcon={<DownloadIcon />}\n            onClick={() => handleExport('json')}\n            disabled={loading || exporting === 'json'}\n            size=\"small\"\n          >\n            Export JSON\n          </Button>\n        </Stack>\n      </Stack>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Stats Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n                {stats.totalEntries}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Entries\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"success.main\" gutterBottom>\n                {stats.consentActions}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Consent Actions\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"info.main\" gutterBottom>\n                {stats.dataExports}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Data Exports\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"warning.main\" gutterBottom>\n                {stats.deletionRequests}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Deletion Requests\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Audit Trail Table */}\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Audit Log Entries\n          </Typography>\n          \n          {loading && auditLogs.length === 0 ? (\n            <Box sx={{ py: 3 }}>\n              <LinearProgress />\n              <Typography variant=\"body2\" sx={{ mt: 2, textAlign: 'center' }}>\n                Loading audit trail...\n              </Typography>\n            </Box>\n          ) : auditLogs.length === 0 ? (\n            <Box sx={{ py: 6, textAlign: 'center' }}>\n              <Typography variant=\"body1\" color=\"text.secondary\" gutterBottom>\n                No audit entries found\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {hasFilters() \n                  ? 'Try adjusting your filters to see more results.'\n                  : 'No GDPR-related activities have been logged yet.'\n                }\n              </Typography>\n            </Box>\n          ) : (\n            <>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Action</TableCell>\n                      <TableCell>Timestamp</TableCell>\n                      <TableCell>IP Address</TableCell>\n                      <TableCell>User Agent</TableCell>\n                      <TableCell align=\"right\">Details</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {auditLogs.map((entry) => (\n                      <TableRow key={entry.id} hover>\n                        <TableCell>\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            {getActionIcon(entry.action)}\n                            <Chip\n                              label={formatActionLabel(entry.action)}\n                              color={getActionColor(entry.action)}\n                              size=\"small\"\n                              variant=\"outlined\"\n                            />\n                          </Stack>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Typography variant=\"body2\">\n                            {format(new Date(entry.timestamp), 'MMM dd, yyyy HH:mm:ss')}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {formatDistanceToNow(new Date(entry.timestamp))} ago\n                          </Typography>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Typography variant=\"body2\" sx={{ fontFamily: 'monospace' }}>\n                            {entry.ipAddress || 'N/A'}\n                          </Typography>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Typography \n                            variant=\"body2\" \n                            sx={{ \n                              maxWidth: 200,\n                              overflow: 'hidden',\n                              textOverflow: 'ellipsis',\n                              whiteSpace: 'nowrap'\n                            }}\n                          >\n                            {entry.userAgent || 'N/A'}\n                          </Typography>\n                        </TableCell>\n                        \n                        <TableCell align=\"right\">\n                          <Tooltip title=\"View details\">\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => handleViewDetails(entry)}\n                            >\n                              <VisibilityIcon />\n                            </IconButton>\n                          </Tooltip>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              \n              {/* Pagination */}\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n                <Pagination\n                  count={pagination.totalPages}\n                  page={pagination.currentPage}\n                  onChange={(_, page) => goToPage(page)}\n                  color=\"primary\"\n                  showFirstButton\n                  showLastButton\n                />\n              </Box>\n              \n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block', textAlign: 'center', mt: 1 }}>\n                Showing {((pagination.currentPage - 1) * pagination.pageSize) + 1} to {Math.min(pagination.currentPage * pagination.pageSize, pagination.totalItems)} of {pagination.totalItems} entries\n              </Typography>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Information Accordion */}\n      <Accordion sx={{ mt: 3 }}>\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography variant=\"subtitle1\">\n            About GDPR Audit Trail\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography variant=\"body2\" paragraph>\n            The GDPR audit trail provides a comprehensive log of all privacy-related activities \n            in your account. This includes:\n          </Typography>\n          \n          <ul>\n            <li><strong>Consent Management:</strong> When you grant or withdraw consent for data processing</li>\n            <li><strong>Data Exports:</strong> Requests for personal data under the right of access</li>\n            <li><strong>Deletion Requests:</strong> Requests for data deletion under the right to be forgotten</li>\n            <li><strong>Privacy Settings:</strong> Changes to your privacy preferences and settings</li>\n          </ul>\n          \n          <Typography variant=\"body2\" paragraph>\n            Each entry includes technical details such as IP address and user agent to ensure \n            the integrity and traceability of all privacy-related actions.\n          </Typography>\n          \n          <Typography variant=\"body2\">\n            You can export this data at any time for your records or compliance purposes.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n\n      {/* Filter Dialog */}\n      <Dialog\n        open={filterDialog}\n        onClose={() => setFilterDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n            <FilterIcon />\n            Filter Audit Trail\n          </Stack>\n        </DialogTitle>\n        \n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Action Type</InputLabel>\n                <Select\n                  value={tempFilters.action || ''}\n                  onChange={(e) => handleFilterChange('action', e.target.value)}\n                  label=\"Action Type\"\n                >\n                  <MenuItem value=\"\">All Actions</MenuItem>\n                  <MenuItem value=\"consent_granted\">Consent Granted</MenuItem>\n                  <MenuItem value=\"consent_withdrawn\">Consent Withdrawn</MenuItem>\n                  <MenuItem value=\"data_export\">Data Export</MenuItem>\n                  <MenuItem value=\"deletion_request\">Deletion Request</MenuItem>\n                  <MenuItem value=\"privacy_settings_updated\">Privacy Settings Updated</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={6}>\n              <TextField\n                fullWidth\n                type=\"date\"\n                label=\"Start Date\"\n                value={tempFilters.startDate || ''}\n                onChange={(e) => handleFilterChange('startDate', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            \n            <Grid item xs={6}>\n              <TextField\n                fullWidth\n                type=\"date\"\n                label=\"End Date\"\n                value={tempFilters.endDate || ''}\n                onChange={(e) => handleFilterChange('endDate', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"IP Address\"\n                value={tempFilters.ipAddress || ''}\n                onChange={(e) => handleFilterChange('ipAddress', e.target.value)}\n                placeholder=\"e.g., 192.168.1.1\"\n              />\n            </Grid>\n            \n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"User Agent\"\n                value={tempFilters.userAgent || ''}\n                onChange={(e) => handleFilterChange('userAgent', e.target.value)}\n                placeholder=\"e.g., Chrome, Firefox, Safari\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={handleClearFilters} startIcon={<ClearIcon />}>\n            Clear All\n          </Button>\n          <Button onClick={() => setFilterDialog(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleApplyFilters} variant=\"contained\">\n            Apply Filters\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Entry Detail Dialog */}\n      <Dialog\n        open={detailDialog}\n        onClose={() => setDetailDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Audit Entry Details\n        </DialogTitle>\n        \n        <DialogContent>\n          {selectedEntry && (\n            <Box>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Action\n                  </Typography>\n                  <Chip\n                    label={formatActionLabel(selectedEntry.action)}\n                    color={getActionColor(selectedEntry.action)}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                \n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Timestamp\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    {format(new Date(selectedEntry.timestamp), 'MMMM dd, yyyy HH:mm:ss')}\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    IP Address\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ fontFamily: 'monospace' }}>\n                    {selectedEntry.ipAddress || 'Not recorded'}\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Entry ID\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ fontFamily: 'monospace' }}>\n                    {selectedEntry.id}\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    User Agent\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ fontFamily: 'monospace', wordBreak: 'break-all' }}>\n                    {selectedEntry.userAgent || 'Not recorded'}\n                  </Typography>\n                </Grid>\n              </Grid>\n              \n              <Divider sx={{ my: 3 }} />\n              \n              <Typography variant=\"subtitle2\" gutterBottom>\n                Additional Data\n              </Typography>\n              {renderMetadata(selectedEntry.metadata)}\n            </Box>\n          )}\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={() => setDetailDialog(false)}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default AuditTrailTab;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/ComplianceReport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/ComplianceScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/ConsentManagementTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2377,2380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2377,2380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Consent Management Tab Component\n * Handles GDPR consent management interface\n */\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Switch,\n  FormControlLabel,\n  Alert,\n  Chip,\n  Stack,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  LinearProgress,\n  Tooltip,\n  IconButton\n} from '@mui/material';\nimport {\n  Info as InfoIcon,\n  CheckCircle as CheckCircleIcon,\n  Cancel as CancelIcon,\n  Refresh as RefreshIcon\n} from '@mui/icons-material';\nimport { UseGDPRConsentReturn, ConsentType, CONSENT_TYPES } from '../../types/gdpr';\nimport { format } from 'date-fns';\n\ninterface ConsentManagementTabProps {\n  hook: UseGDPRConsentReturn;\n}\n\nexport const ConsentManagementTab: React.FC<ConsentManagementTabProps> = ({ hook }) => {\n  const {\n    consents,\n    loading,\n    error,\n    grantConsent,\n    withdrawConsent,\n    refreshConsents,\n    getConsentStats,\n    hasConsent,\n    getConsentByType\n  } = hook;\n\n  const [confirmDialog, setConfirmDialog] = useState<{\n    open: boolean;\n    type: ConsentType | null;\n    action: 'grant' | 'withdraw';\n  }>({ open: false, type: null, action: 'grant' });\n\n  const [processingConsent, setProcessingConsent] = useState<string | null>(null);\n\n  const stats = getConsentStats();\n\n  const handleConsentToggle = (type: ConsentType, currentStatus: boolean) => {\n    setConfirmDialog({\n      open: true,\n      type,\n      action: currentStatus ? 'withdraw' : 'grant'\n    });\n  };\n\n  const handleConfirmAction = async () => {\n    if (!confirmDialog.type) return;\n\n    try {\n      setProcessingConsent(confirmDialog.type);\n      \n      if (confirmDialog.action === 'grant') {\n        await grantConsent(confirmDialog.type);\n      } else {\n        await withdrawConsent(confirmDialog.type);\n      }\n    } catch (error) {\n      console.error('Error processing consent:', error);\n    } finally {\n      setProcessingConsent(null);\n      setConfirmDialog({ open: false, type: null, action: 'grant' });\n    }\n  };\n\n  const getConsentStatusColor = (type: ConsentType) => {\n    return hasConsent(type) ? 'success' : 'default';\n  };\n\n  const getConsentStatusIcon = (type: ConsentType) => {\n    return hasConsent(type) ? <CheckCircleIcon /> : <CancelIcon />;\n  };\n\n  const formatConsentDate = (consent: any) => {\n    if (!consent) return 'Never';\n    return format(new Date(consent.grantedAt || consent.withdrawnAt), 'PPp');\n  };\n\n  if (loading && consents.length === 0) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <LinearProgress />\n        <Typography variant=\"body2\" sx={{ mt: 2, textAlign: 'center' }}>\n          Loading consent information...\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" component=\"h2\">\n          Consent Management\n        </Typography>\n        \n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <Chip\n            label={`${stats.granted}/${stats.total} Granted`}\n            color={stats.granted === stats.total ? 'success' : 'warning'}\n            size=\"small\"\n          />\n          \n          <Tooltip title=\"Refresh consent data\">\n            <IconButton onClick={refreshConsents} disabled={loading} size=\"small\">\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Stack>\n      </Stack>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Overview Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n                {stats.granted}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Active Consents\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"warning.main\" gutterBottom>\n                {stats.withdrawn}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Withdrawn Consents\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"info.main\" gutterBottom>\n                {Math.round((stats.granted / stats.total) * 100)}%\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Compliance Rate\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Consent Types List */}\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Consent Preferences\n          </Typography>\n          \n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n            Manage your consent for different types of data processing. You can withdraw consent at any time.\n          </Typography>\n\n          <List>\n            {Object.entries(CONSENT_TYPES).map(([type, config], index) => {\n              const consentType = type as ConsentType;\n              const consent = getConsentByType(consentType);\n              const isGranted = hasConsent(consentType);\n              const isProcessing = processingConsent === consentType;\n\n              return (\n                <React.Fragment key={consentType}>\n                  <ListItem>\n                    <ListItemText\n                      primary={\n                        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                          <Typography variant=\"subtitle1\">\n                            {config.label}\n                          </Typography>\n                          <Chip\n                            icon={getConsentStatusIcon(consentType)}\n                            label={isGranted ? 'Granted' : 'Withdrawn'}\n                            color={getConsentStatusColor(consentType)}\n                            size=\"small\"\n                          />\n                        </Stack>\n                      }\n                      secondary={\n                        <Box sx={{ mt: 1 }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            {config.description}\n                          </Typography>\n                          {consent && (\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 0.5, display: 'block' }}>\n                              Last updated: {formatConsentDate(consent)}\n                            </Typography>\n                          )}\n                        </Box>\n                      }\n                    />\n                    \n                    <ListItemSecondaryAction>\n                      <FormControlLabel\n                        control={\n                          <Switch\n                            checked={isGranted}\n                            onChange={() => handleConsentToggle(consentType, isGranted)}\n                            disabled={isProcessing || loading}\n                            color=\"primary\"\n                          />\n                        }\n                        label=\"\"\n                      />\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  \n                  {index < Object.keys(CONSENT_TYPES).length - 1 && <Divider />}\n                </React.Fragment>\n              );\n            })}\n          </List>\n        </CardContent>\n      </Card>\n\n      {/* Information Alert */}\n      <Alert severity=\"info\" sx={{ mt: 3 }}>\n        <Stack direction=\"row\" spacing={1} alignItems=\"flex-start\">\n          <InfoIcon fontSize=\"small\" />\n          <Box>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Your Rights Under GDPR\n            </Typography>\n            <Typography variant=\"body2\">\n              You have the right to withdraw consent at any time. Withdrawing consent will not affect \n              the lawfulness of processing based on consent before its withdrawal. Some features may \n              become unavailable if you withdraw certain consents.\n            </Typography>\n          </Box>\n        </Stack>\n      </Alert>\n\n      {/* Confirmation Dialog */}\n      <Dialog\n        open={confirmDialog.open}\n        onClose={() => setConfirmDialog({ open: false, type: null, action: 'grant' })}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          {confirmDialog.action === 'grant' ? 'Grant Consent' : 'Withdraw Consent'}\n        </DialogTitle>\n        \n        <DialogContent>\n          {confirmDialog.type && (\n            <Box>\n              <Typography variant=\"body1\" gutterBottom>\n                Are you sure you want to {confirmDialog.action} consent for:\n              </Typography>\n              \n              <Typography variant=\"subtitle1\" color=\"primary\" gutterBottom>\n                {CONSENT_TYPES[confirmDialog.type]?.label}\n              </Typography>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                {CONSENT_TYPES[confirmDialog.type]?.description}\n              </Typography>\n              \n              {confirmDialog.action === 'withdraw' && (\n                <Alert severity=\"warning\">\n                  Withdrawing this consent may limit certain features or functionality.\n                </Alert>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n        \n        <DialogActions>\n          <Button \n            onClick={() => setConfirmDialog({ open: false, type: null, action: 'grant' })}\n            disabled={processingConsent !== null}\n          >\n            Cancel\n          </Button>\n          \n          <Button \n            onClick={handleConfirmAction}\n            variant=\"contained\"\n            disabled={processingConsent !== null}\n            color={confirmDialog.action === 'withdraw' ? 'warning' : 'primary'}\n          >\n            {processingConsent ? 'Processing...' : `${confirmDialog.action === 'grant' ? 'Grant' : 'Withdraw'} Consent`}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ConsentManagementTab;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/DataExportTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":453,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14851,14854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14851,14854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Data Export Tab Component\n * Handles GDPR data export requests and downloads\n */\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Alert,\n  Chip,\n  Stack,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  LinearProgress,\n  Tooltip,\n  IconButton,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Checkbox\n} from '@mui/material';\nimport {\n  Download as DownloadIcon,\n  Add as AddIcon,\n  Refresh as RefreshIcon,\n  Cancel as CancelIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Schedule as ScheduleIcon,\n  Info as InfoIcon\n} from '@mui/icons-material';\nimport { UseDataExportReturn, DataExportFormData, DataExportRequest } from '../../types/gdpr';\nimport { format, formatDistanceToNow } from 'date-fns';\n\ninterface DataExportTabProps {\n  hook: UseDataExportReturn;\n}\n\nexport const DataExportTab: React.FC<DataExportTabProps> = ({ hook }) => {\n  const {\n    exportRequests,\n    loading,\n    error,\n    requestExport,\n    downloadExport,\n    cancelExport,\n    refreshRequests,\n    getExportStats,\n    getLatestExport,\n    canRequestNewExport\n  } = hook;\n\n  const [newExportDialog, setNewExportDialog] = useState(false);\n  const [exportForm, setExportForm] = useState<DataExportFormData>({\n    format: 'json',\n    includeAuditTrail: true,\n    includeConsents: true\n  });\n  const [processingRequest, setProcessingRequest] = useState<string | null>(null);\n\n  const stats = getExportStats();\n  const latestExport = getLatestExport();\n\n  const handleRequestExport = async () => {\n    try {\n      setProcessingRequest('new');\n      await requestExport(exportForm);\n      setNewExportDialog(false);\n      // Reset form\n      setExportForm({\n        format: 'json',\n        includeAuditTrail: true,\n        includeConsents: true\n      });\n    } catch (error) {\n      console.error('Error requesting export:', error);\n    } finally {\n      setProcessingRequest(null);\n    }\n  };\n\n  const handleDownload = async (requestId: string) => {\n    try {\n      setProcessingRequest(requestId);\n      await downloadExport(requestId);\n    } catch (error) {\n      console.error('Error downloading export:', error);\n    } finally {\n      setProcessingRequest(null);\n    }\n  };\n\n  const handleCancel = async (requestId: string) => {\n    try {\n      setProcessingRequest(requestId);\n      await cancelExport(requestId);\n    } catch (error) {\n      console.error('Error cancelling export:', error);\n    } finally {\n      setProcessingRequest(null);\n    }\n  };\n\n  const getStatusIcon = (status: DataExportRequest['status']) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'failed':\n        return <ErrorIcon color=\"error\" />;\n      case 'processing':\n        return <ScheduleIcon color=\"info\" />;\n      case 'pending':\n        return <ScheduleIcon color=\"warning\" />;\n      default:\n        return <InfoIcon />;\n    }\n  };\n\n  const getStatusColor = (status: DataExportRequest['status']) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'failed':\n        return 'error';\n      case 'processing':\n        return 'info';\n      case 'pending':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const isExpired = (request: DataExportRequest) => {\n    return request.expiryDate && new Date() > new Date(request.expiryDate);\n  };\n\n  const canDownload = (request: DataExportRequest) => {\n    return request.status === 'completed' && request.downloadUrl && !isExpired(request);\n  };\n\n  const canCancel = (request: DataExportRequest) => {\n    return request.status === 'pending' || request.status === 'processing';\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" component=\"h2\">\n          Data Export\n        </Typography>\n        \n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <Chip\n            label={`${stats.available} Available`}\n            color={stats.available > 0 ? 'success' : 'default'}\n            size=\"small\"\n          />\n          \n          <Tooltip title=\"Refresh export requests\">\n            <IconButton onClick={refreshRequests} disabled={loading} size=\"small\">\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setNewExportDialog(true)}\n            disabled={!canRequestNewExport() || loading}\n          >\n            New Export\n          </Button>\n        </Stack>\n      </Stack>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Cannot Request Alert */}\n      {!canRequestNewExport() && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          You have reached the maximum number of concurrent export requests. \n          Please wait for existing requests to complete or cancel them.\n        </Alert>\n      )}\n\n      {/* Stats Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n                {stats.total}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Requests\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"success.main\" gutterBottom>\n                {stats.completed}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Completed\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"info.main\" gutterBottom>\n                {stats.processing + stats.pending}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                In Progress\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"warning.main\" gutterBottom>\n                {stats.expired}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Expired\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Latest Export Quick Access */}\n      {latestExport && canDownload(latestExport) && (\n        <Card sx={{ mb: 3, bgcolor: 'success.light' }}>\n          <CardContent>\n            <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n              <Box>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Latest Export Ready\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Requested {formatDistanceToNow(new Date(latestExport.requestDate))} ago • \n                  Format: {latestExport.format.toUpperCase()} • \n                  Expires {formatDistanceToNow(new Date(latestExport.expiryDate!))}\n                </Typography>\n              </Box>\n              \n              <Button\n                variant=\"contained\"\n                startIcon={<DownloadIcon />}\n                onClick={() => handleDownload(latestExport.id)}\n                disabled={processingRequest === latestExport.id}\n              >\n                Download\n              </Button>\n            </Stack>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Export Requests Table */}\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Export History\n          </Typography>\n          \n          {loading && exportRequests.length === 0 ? (\n            <Box sx={{ py: 3 }}>\n              <LinearProgress />\n              <Typography variant=\"body2\" sx={{ mt: 2, textAlign: 'center' }}>\n                Loading export requests...\n              </Typography>\n            </Box>\n          ) : exportRequests.length === 0 ? (\n            <Box sx={{ py: 6, textAlign: 'center' }}>\n              <Typography variant=\"body1\" color=\"text.secondary\" gutterBottom>\n                No export requests found\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Create your first data export to download your personal information.\n              </Typography>\n            </Box>\n          ) : (\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Format</TableCell>\n                    <TableCell>Requested</TableCell>\n                    <TableCell>Expires</TableCell>\n                    <TableCell>Size</TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {exportRequests.map((request) => (\n                    <TableRow key={request.id}>\n                      <TableCell>\n                        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                          {getStatusIcon(request.status)}\n                          <Chip\n                            label={request.status}\n                            color={getStatusColor(request.status)}\n                            size=\"small\"\n                            variant=\"outlined\"\n                          />\n                          {isExpired(request) && (\n                            <Chip\n                              label=\"Expired\"\n                              color=\"error\"\n                              size=\"small\"\n                              variant=\"outlined\"\n                            />\n                          )}\n                        </Stack>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <Typography variant=\"body2\" sx={{ textTransform: 'uppercase' }}>\n                          {request.format}\n                        </Typography>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {format(new Date(request.requestDate), 'PPp')}\n                        </Typography>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {request.expiryDate \n                            ? format(new Date(request.expiryDate), 'PPp')\n                            : 'N/A'\n                          }\n                        </Typography>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {request.fileSize ? `${(request.fileSize / 1024 / 1024).toFixed(2)} MB` : 'N/A'}\n                        </Typography>\n                      </TableCell>\n                      \n                      <TableCell align=\"right\">\n                        <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\">\n                          {canDownload(request) && (\n                            <Tooltip title=\"Download export\">\n                              <IconButton\n                                size=\"small\"\n                                onClick={() => handleDownload(request.id)}\n                                disabled={processingRequest === request.id}\n                                color=\"primary\"\n                              >\n                                <DownloadIcon />\n                              </IconButton>\n                            </Tooltip>\n                          )}\n                          \n                          {canCancel(request) && (\n                            <Tooltip title=\"Cancel export\">\n                              <IconButton\n                                size=\"small\"\n                                onClick={() => handleCancel(request.id)}\n                                disabled={processingRequest === request.id}\n                                color=\"error\"\n                              >\n                                <CancelIcon />\n                              </IconButton>\n                            </Tooltip>\n                          )}\n                        </Stack>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Information */}\n      <Alert severity=\"info\" sx={{ mt: 3 }}>\n        <Typography variant=\"subtitle2\" gutterBottom>\n          Data Export Information\n        </Typography>\n        <Typography variant=\"body2\">\n          • Export files are available for download for 7 days after completion<br/>\n          • You can have up to 3 concurrent export requests<br/>\n          • Exports include your personal data, consent history, and audit trail (if selected)<br/>\n          • Large exports may take several minutes to process\n        </Typography>\n      </Alert>\n\n      {/* New Export Dialog */}\n      <Dialog\n        open={newExportDialog}\n        onClose={() => setNewExportDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Request Data Export\n        </DialogTitle>\n        \n        <DialogContent>\n          <Box sx={{ mt: 2 }}>\n            <Typography variant=\"body1\" gutterBottom>\n              Request an export of your personal data. You will receive a downloadable file \n              containing all your information stored in our system.\n            </Typography>\n            \n            <Grid container spacing={3} sx={{ mt: 2 }}>\n              <Grid item xs={12} md={6}>\n                <FormControl component=\"fieldset\">\n                  <FormLabel component=\"legend\">Export Format</FormLabel>\n                  <RadioGroup\n                    value={exportForm.format}\n                    onChange={(e) => setExportForm(prev => ({ ...prev, format: e.target.value as any }))}\n                  >\n                    <FormControlLabel value=\"json\" control={<Radio />} label=\"JSON (Structured data)\" />\n                    <FormControlLabel value=\"csv\" control={<Radio />} label=\"CSV (Spreadsheet format)\" />\n                    <FormControlLabel value=\"pdf\" control={<Radio />} label=\"PDF (Human readable)\" />\n                  </RadioGroup>\n                </FormControl>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <FormControl component=\"fieldset\">\n                  <FormLabel component=\"legend\">Include Additional Data</FormLabel>\n                  <Box sx={{ mt: 1 }}>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={exportForm.includeAuditTrail}\n                          onChange={(e) => setExportForm(prev => ({ \n                            ...prev, \n                            includeAuditTrail: e.target.checked \n                          }))}\n                        />\n                      }\n                      label=\"Audit Trail (Activity logs)\"\n                    />\n                    \n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={exportForm.includeConsents}\n                          onChange={(e) => setExportForm(prev => ({ \n                            ...prev, \n                            includeConsents: e.target.checked \n                          }))}\n                        />\n                      }\n                      label=\"Consent History\"\n                    />\n                  </Box>\n                </FormControl>\n              </Grid>\n            </Grid>\n            \n            <Alert severity=\"info\" sx={{ mt: 3 }}>\n              <Typography variant=\"body2\">\n                Processing time depends on the amount of data and selected format. \n                You will be notified when your export is ready for download.\n              </Typography>\n            </Alert>\n          </Box>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button \n            onClick={() => setNewExportDialog(false)}\n            disabled={processingRequest === 'new'}\n          >\n            Cancel\n          </Button>\n          \n          <Button \n            onClick={handleRequestExport}\n            variant=\"contained\"\n            disabled={processingRequest === 'new'}\n            startIcon={processingRequest === 'new' ? <LinearProgress /> : <DownloadIcon />}\n          >\n            {processingRequest === 'new' ? 'Requesting...' : 'Request Export'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default DataExportTab;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/DeletionRequestTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AddIcon' is defined but never used.","line":42,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":53,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":16}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Deletion Request Tab Component\n * Handles \"Right to be Forgotten\" requests\n */\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Alert,\n  Chip,\n  Stack,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  LinearProgress,\n  Tooltip,\n  IconButton,\n  TextField,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  Delete as DeleteIcon,\n  Add as AddIcon,\n  Refresh as RefreshIcon,\n  Cancel as CancelIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Schedule as ScheduleIcon,\n  Warning as WarningIcon,\n  Info as InfoIcon,\n  ExpandMore as ExpandMoreIcon\n} from '@mui/icons-material';\nimport { UseDeletionRequestReturn, DeletionRequestFormData, DeletionRequest } from '../../types/gdpr';\nimport { format, formatDistanceToNow } from 'date-fns';\n\ninterface DeletionRequestTabProps {\n  hook: UseDeletionRequestReturn;\n}\n\nexport const DeletionRequestTab: React.FC<DeletionRequestTabProps> = ({ hook }) => {\n  const {\n    deletionRequests,\n    loading,\n    error,\n    submitDeletionRequest,\n    cancelDeletionRequest,\n    refreshRequests,\n    getDeletionStats,\n    getLatestRequest,\n    canSubmitNewRequest,\n    getStatusColor,\n    getStatusDescription,\n    formatRequestForDisplay,\n    validateFormData\n  } = hook;\n\n  const [newRequestDialog, setNewRequestDialog] = useState(false);\n  const [requestForm, setRequestForm] = useState<DeletionRequestFormData>({\n    reason: '',\n    confirmEmail: '',\n    additionalInfo: ''\n  });\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [processingRequest, setProcessingRequest] = useState<string | null>(null);\n  const [activeStep, setActiveStep] = useState(0);\n\n  const stats = getDeletionStats();\n  const latestRequest = getLatestRequest();\n\n  const handleFormChange = (field: keyof DeletionRequestFormData, value: string) => {\n    setRequestForm(prev => ({ ...prev, [field]: value }));\n    \n    // Clear error for this field\n    if (formErrors[field]) {\n      setFormErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const handleSubmitRequest = async () => {\n    const validation = validateFormData(requestForm);\n    \n    if (!validation.isValid) {\n      setFormErrors(validation.errors);\n      return;\n    }\n\n    try {\n      setProcessingRequest('new');\n      await submitDeletionRequest(requestForm);\n      setNewRequestDialog(false);\n      setActiveStep(0);\n      // Reset form\n      setRequestForm({\n        reason: '',\n        confirmEmail: '',\n        additionalInfo: ''\n      });\n      setFormErrors({});\n    } catch (error) {\n      console.error('Error submitting deletion request:', error);\n    } finally {\n      setProcessingRequest(null);\n    }\n  };\n\n  const handleCancelRequest = async (requestId: string) => {\n    try {\n      setProcessingRequest(requestId);\n      await cancelDeletionRequest(requestId);\n    } catch (error) {\n      console.error('Error cancelling deletion request:', error);\n    } finally {\n      setProcessingRequest(null);\n    }\n  };\n\n  const getStatusIcon = (status: DeletionRequest['status']) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'approved':\n        return <CheckCircleIcon color=\"info\" />;\n      case 'rejected':\n        return <ErrorIcon color=\"error\" />;\n      case 'cancelled':\n        return <CancelIcon color=\"disabled\" />;\n      case 'pending':\n        return <ScheduleIcon color=\"warning\" />;\n      default:\n        return <InfoIcon />;\n    }\n  };\n\n  const canCancel = (request: DeletionRequest) => {\n    return request.status === 'pending';\n  };\n\n  const steps = [\n    {\n      label: 'Provide Reason',\n      description: 'Explain why you want to delete your data'\n    },\n    {\n      label: 'Confirm Identity',\n      description: 'Verify your email address'\n    },\n    {\n      label: 'Review & Submit',\n      description: 'Review your request before submission'\n    }\n  ];\n\n  const handleNext = () => {\n    if (activeStep === 0) {\n      if (!requestForm.reason || requestForm.reason.trim().length < 10) {\n        setFormErrors({ reason: 'Please provide a detailed reason (minimum 10 characters)' });\n        return;\n      }\n    } else if (activeStep === 1) {\n      if (!requestForm.confirmEmail) {\n        setFormErrors({ confirmEmail: 'Email confirmation is required' });\n        return;\n      }\n    }\n    \n    setFormErrors({});\n    setActiveStep(prev => prev + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prev => prev - 1);\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" component=\"h2\">\n          Data Deletion Requests\n        </Typography>\n        \n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <Chip\n            label={`${stats.active} Active`}\n            color={stats.active > 0 ? 'warning' : 'default'}\n            size=\"small\"\n          />\n          \n          <Tooltip title=\"Refresh deletion requests\">\n            <IconButton onClick={refreshRequests} disabled={loading} size=\"small\">\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Button\n            variant=\"contained\"\n            startIcon={<DeleteIcon />}\n            onClick={() => setNewRequestDialog(true)}\n            disabled={!canSubmitNewRequest() || loading}\n            color=\"error\"\n          >\n            Request Deletion\n          </Button>\n        </Stack>\n      </Stack>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Cannot Submit Alert */}\n      {!canSubmitNewRequest() && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          You already have an active deletion request. Only one deletion request can be active at a time.\n        </Alert>\n      )}\n\n      {/* Warning Alert */}\n      <Alert severity=\"warning\" sx={{ mb: 3 }}>\n        <Typography variant=\"subtitle2\" gutterBottom>\n          Important: Data Deletion is Permanent\n        </Typography>\n        <Typography variant=\"body2\">\n          Once your data deletion request is approved and processed, all your personal information \n          will be permanently removed from our systems. This action cannot be undone.\n        </Typography>\n      </Alert>\n\n      {/* Stats Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n                {stats.total}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Requests\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"warning.main\" gutterBottom>\n                {stats.pending}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Pending Review\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"success.main\" gutterBottom>\n                {stats.completed}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Completed\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"error.main\" gutterBottom>\n                {stats.rejected}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Rejected\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Latest Request Status */}\n      {latestRequest && (\n        <Card sx={{ mb: 3 }}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Latest Request Status\n            </Typography>\n            \n            <Stack direction=\"row\" spacing={2} alignItems=\"center\" sx={{ mb: 2 }}>\n              {getStatusIcon(latestRequest.status)}\n              <Chip\n                label={latestRequest.status}\n                color={getStatusColor(latestRequest.status)}\n                variant=\"outlined\"\n              />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Submitted {formatDistanceToNow(new Date(latestRequest.requestDate))} ago\n              </Typography>\n            </Stack>\n            \n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              {getStatusDescription(latestRequest.status)}\n            </Typography>\n            \n            {latestRequest.adminNotes && (\n              <Alert severity=\"info\">\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Admin Notes:\n                </Typography>\n                <Typography variant=\"body2\">\n                  {latestRequest.adminNotes}\n                </Typography>\n              </Alert>\n            )}\n            \n            {canCancel(latestRequest) && (\n              <Box sx={{ mt: 2 }}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"error\"\n                  startIcon={<CancelIcon />}\n                  onClick={() => handleCancelRequest(latestRequest.id)}\n                  disabled={processingRequest === latestRequest.id}\n                >\n                  Cancel Request\n                </Button>\n              </Box>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Deletion Requests History */}\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Request History\n          </Typography>\n          \n          {loading && deletionRequests.length === 0 ? (\n            <Box sx={{ py: 3 }}>\n              <LinearProgress />\n              <Typography variant=\"body2\" sx={{ mt: 2, textAlign: 'center' }}>\n                Loading deletion requests...\n              </Typography>\n            </Box>\n          ) : deletionRequests.length === 0 ? (\n            <Box sx={{ py: 6, textAlign: 'center' }}>\n              <Typography variant=\"body1\" color=\"text.secondary\" gutterBottom>\n                No deletion requests found\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                You have not submitted any data deletion requests yet.\n              </Typography>\n            </Box>\n          ) : (\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Reason</TableCell>\n                    <TableCell>Submitted</TableCell>\n                    <TableCell>Processed</TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {deletionRequests.map((request) => {\n                    const formattedRequest = formatRequestForDisplay(request);\n                    \n                    return (\n                      <TableRow key={request.id}>\n                        <TableCell>\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            {getStatusIcon(request.status)}\n                            <Chip\n                              label={request.status}\n                              color={getStatusColor(request.status)}\n                              size=\"small\"\n                              variant=\"outlined\"\n                            />\n                          </Stack>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Typography variant=\"body2\" sx={{ maxWidth: 200 }}>\n                            {request.reason.length > 50 \n                              ? `${request.reason.substring(0, 50)}...`\n                              : request.reason\n                            }\n                          </Typography>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Typography variant=\"body2\">\n                            {formattedRequest.formattedRequestDate}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {formattedRequest.daysSinceRequest} days ago\n                          </Typography>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Typography variant=\"body2\">\n                            {formattedRequest.formattedProcessedDate || 'Not processed'}\n                          </Typography>\n                        </TableCell>\n                        \n                        <TableCell align=\"right\">\n                          {canCancel(request) && (\n                            <Tooltip title=\"Cancel request\">\n                              <IconButton\n                                size=\"small\"\n                                onClick={() => handleCancelRequest(request.id)}\n                                disabled={processingRequest === request.id}\n                                color=\"error\"\n                              >\n                                <CancelIcon />\n                              </IconButton>\n                            </Tooltip>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Information Accordion */}\n      <Accordion sx={{ mt: 3 }}>\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography variant=\"subtitle1\">\n            Right to be Forgotten - Information\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography variant=\"body2\" paragraph>\n            Under GDPR Article 17, you have the right to request the deletion of your personal data \n            in certain circumstances:\n          </Typography>\n          \n          <ul>\n            <li>The personal data is no longer necessary for the original purpose</li>\n            <li>You withdraw consent and there's no other legal basis for processing</li>\n            <li>Your personal data has been unlawfully processed</li>\n            <li>Deletion is required for compliance with a legal obligation</li>\n          </ul>\n          \n          <Typography variant=\"body2\" paragraph>\n            Please note that we may not be able to delete your data if:\n          </Typography>\n          \n          <ul>\n            <li>We need to keep it for legal compliance</li>\n            <li>It's necessary for the establishment, exercise, or defense of legal claims</li>\n            <li>There are legitimate interests that override your right to deletion</li>\n          </ul>\n        </AccordionDetails>\n      </Accordion>\n\n      {/* New Deletion Request Dialog */}\n      <Dialog\n        open={newRequestDialog}\n        onClose={() => setNewRequestDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n            <WarningIcon color=\"error\" />\n            Request Data Deletion\n          </Stack>\n        </DialogTitle>\n        \n        <DialogContent>\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Warning: This action is irreversible\n            </Typography>\n            <Typography variant=\"body2\">\n              Once approved, all your personal data will be permanently deleted from our systems.\n            </Typography>\n          </Alert>\n          \n          <Stepper activeStep={activeStep} orientation=\"vertical\">\n            {steps.map((step, index) => (\n              <Step key={step.label}>\n                <StepLabel>\n                  {step.label}\n                </StepLabel>\n                <StepContent>\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                    {step.description}\n                  </Typography>\n                  \n                  {index === 0 && (\n                    <TextField\n                      fullWidth\n                      multiline\n                      rows={4}\n                      label=\"Reason for deletion *\"\n                      value={requestForm.reason}\n                      onChange={(e) => handleFormChange('reason', e.target.value)}\n                      error={!!formErrors.reason}\n                      helperText={formErrors.reason || 'Please provide a detailed explanation (minimum 10 characters)'}\n                      placeholder=\"Please explain why you want to delete your data...\"\n                    />\n                  )}\n                  \n                  {index === 1 && (\n                    <Box>\n                      <TextField\n                        fullWidth\n                        label=\"Confirm your email address *\"\n                        type=\"email\"\n                        value={requestForm.confirmEmail}\n                        onChange={(e) => handleFormChange('confirmEmail', e.target.value)}\n                        error={!!formErrors.confirmEmail}\n                        helperText={formErrors.confirmEmail || 'Enter your account email to confirm your identity'}\n                        sx={{ mb: 2 }}\n                      />\n                      \n                      <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        label=\"Additional information (optional)\"\n                        value={requestForm.additionalInfo}\n                        onChange={(e) => handleFormChange('additionalInfo', e.target.value)}\n                        helperText=\"Any additional context or specific requests\"\n                        placeholder=\"Optional: Any additional information...\"\n                      />\n                    </Box>\n                  )}\n                  \n                  {index === 2 && (\n                    <Box>\n                      <Typography variant=\"subtitle2\" gutterBottom>\n                        Review Your Request:\n                      </Typography>\n                      \n                      <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>\n                        <Typography variant=\"body2\" gutterBottom>\n                          <strong>Reason:</strong> {requestForm.reason}\n                        </Typography>\n                        <Typography variant=\"body2\" gutterBottom>\n                          <strong>Email:</strong> {requestForm.confirmEmail}\n                        </Typography>\n                        {requestForm.additionalInfo && (\n                          <Typography variant=\"body2\">\n                            <strong>Additional Info:</strong> {requestForm.additionalInfo}\n                          </Typography>\n                        )}\n                      </Paper>\n                    </Box>\n                  )}\n                  \n                  <Box sx={{ mt: 2 }}>\n                    <Button\n                      variant=\"contained\"\n                      onClick={index === steps.length - 1 ? handleSubmitRequest : handleNext}\n                      disabled={processingRequest === 'new'}\n                    >\n                      {index === steps.length - 1 ? 'Submit Request' : 'Next'}\n                    </Button>\n                    \n                    {index > 0 && (\n                      <Button\n                        onClick={handleBack}\n                        sx={{ ml: 1 }}\n                        disabled={processingRequest === 'new'}\n                      >\n                        Back\n                      </Button>\n                    )}\n                  </Box>\n                </StepContent>\n              </Step>\n            ))}\n          </Stepper>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button \n            onClick={() => {\n              setNewRequestDialog(false);\n              setActiveStep(0);\n              setFormErrors({});\n            }}\n            disabled={processingRequest === 'new'}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default DeletionRequestTab;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/GDPROverviewCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/PrivacySettingsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SettingsIcon' is defined but never used.","line":36,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Privacy Settings Tab Component\n * Handles privacy preferences and GDPR settings\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Switch,\n  FormControlLabel,\n  Alert,\n  Chip,\n  Stack,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  LinearProgress,\n  Tooltip,\n  IconButton,\n  CircularProgress,\n  Paper\n} from '@mui/material';\nimport {\n  Settings as SettingsIcon,\n  Security as SecurityIcon,\n  Info as InfoIcon,\n  Save as SaveIcon,\n  Refresh as RefreshIcon,\n  Download as DownloadIcon,\n  RestoreFromTrash as RestoreIcon,\n  Warning as WarningIcon\n} from '@mui/icons-material';\nimport { UsePrivacySettingsReturn, PrivacySettingsFormData } from '../../types/gdpr';\n\ninterface PrivacySettingsTabProps {\n  hook: UsePrivacySettingsReturn;\n}\n\nexport const PrivacySettingsTab: React.FC<PrivacySettingsTabProps> = ({ hook }) => {\n  const {\n    settings,\n    loading,\n    error,\n    hasUnsavedChanges,\n    updatePrivacySettings,\n    updateSingleSetting,\n    resetToDefaults,\n    getComplianceScore,\n    getComplianceRecommendations,\n    checkForChanges,\n    getSettingDescription,\n    getSettingImpact,\n    exportSettings,\n    refreshSettings\n  } = hook;\n\n  const [localSettings, setLocalSettings] = useState<PrivacySettingsFormData | null>(null);\n  const [resetDialog, setResetDialog] = useState(false);\n  const [saving, setSaving] = useState(false);\n\n  // Initialize local settings when settings are loaded\n  useEffect(() => {\n    if (settings && !localSettings) {\n      setLocalSettings({\n        dataProcessingConsent: settings.dataProcessingConsent,\n        marketingConsent: settings.marketingConsent,\n        analyticsConsent: settings.analyticsConsent,\n        profileVisibility: settings.profileVisibility,\n        dataRetentionOptOut: settings.dataRetentionOptOut,\n        thirdPartySharing: settings.thirdPartySharing\n      });\n    }\n  }, [settings, localSettings]);\n\n  // Check for changes when local settings change\n  useEffect(() => {\n    if (localSettings) {\n      checkForChanges(localSettings);\n    }\n  }, [localSettings, checkForChanges]);\n\n  const handleSettingChange = (key: keyof PrivacySettingsFormData, value: boolean) => {\n    setLocalSettings(prev => prev ? { ...prev, [key]: value } : null);\n  };\n\n  const handleSave = async () => {\n    if (!localSettings) return;\n\n    try {\n      setSaving(true);\n      await updatePrivacySettings(localSettings);\n    } catch (error) {\n      console.error('Error saving privacy settings:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleReset = async () => {\n    try {\n      await resetToDefaults();\n      setResetDialog(false);\n      // Settings will be updated via the hook\n    } catch (error) {\n      console.error('Error resetting privacy settings:', error);\n    }\n  };\n\n  const handleQuickToggle = async (key: keyof PrivacySettingsFormData, value: boolean) => {\n    try {\n      await updateSingleSetting(key, value);\n    } catch (error) {\n      console.error('Error updating setting:', error);\n    }\n  };\n\n  const complianceScore = getComplianceScore();\n  const recommendations = getComplianceRecommendations();\n\n  const getScoreColor = (score: number) => {\n    if (score >= 90) return 'success';\n    if (score >= 70) return 'warning';\n    return 'error';\n  };\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'high': return 'error';\n      case 'medium': return 'warning';\n      case 'low': return 'success';\n      default: return 'default';\n    }\n  };\n\n  if (loading && !settings) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <LinearProgress />\n        <Typography variant=\"body2\" sx={{ mt: 2, textAlign: 'center' }}>\n          Loading privacy settings...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (!settings || !localSettings) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Unable to load privacy settings. Please try refreshing the page.\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" component=\"h2\">\n          Privacy Settings\n        </Typography>\n        \n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <Chip\n            icon={<SecurityIcon />}\n            label={`Compliance: ${complianceScore}%`}\n            color={getScoreColor(complianceScore)}\n            size=\"small\"\n          />\n          \n          <Tooltip title=\"Export settings\">\n            <IconButton onClick={exportSettings} size=\"small\">\n              <DownloadIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Tooltip title=\"Refresh settings\">\n            <IconButton onClick={refreshSettings} disabled={loading} size=\"small\">\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Stack>\n      </Stack>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Unsaved Changes Alert */}\n      {hasUnsavedChanges && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography variant=\"body2\">\n              You have unsaved changes to your privacy settings.\n            </Typography>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              startIcon={saving ? <CircularProgress size={16} /> : <SaveIcon />}\n              onClick={handleSave}\n              disabled={saving}\n            >\n              {saving ? 'Saving...' : 'Save Changes'}\n            </Button>\n          </Stack>\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {/* Settings Panel */}\n        <Grid item xs={12} lg={8}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Privacy Preferences\n              </Typography>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n                Configure your privacy settings to control how your data is processed and shared.\n              </Typography>\n\n              <List>\n                {Object.entries(localSettings).map(([key, value], index) => {\n                  const settingKey = key as keyof PrivacySettingsFormData;\n                  const description = getSettingDescription(settingKey);\n                  const impact = getSettingImpact(settingKey);\n                  const isBoolean = typeof value === 'boolean';\n\n                  if (!isBoolean) return null;\n\n                  return (\n                    <React.Fragment key={settingKey}>\n                      <ListItem>\n                        <ListItemText\n                          primary={\n                            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                              <Typography variant=\"subtitle1\">\n                                {settingKey.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                              </Typography>\n                              <Chip\n                                label={impact}\n                                color={getImpactColor(impact)}\n                                size=\"small\"\n                                variant=\"outlined\"\n                              />\n                            </Stack>\n                          }\n                          secondary={\n                            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 0.5 }}>\n                              {description}\n                            </Typography>\n                          }\n                        />\n                        \n                        <ListItemSecondaryAction>\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            {/* Quick toggle for immediate save */}\n                            <Tooltip title=\"Apply immediately\">\n                              <IconButton\n                                size=\"small\"\n                                onClick={() => handleQuickToggle(settingKey, !value)}\n                                disabled={loading}\n                              >\n                                <SaveIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            \n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={value}\n                                  onChange={(e) => handleSettingChange(settingKey, e.target.checked)}\n                                  disabled={loading}\n                                  color=\"primary\"\n                                />\n                              }\n                              label=\"\"\n                            />\n                          </Stack>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                      \n                      {index < Object.keys(localSettings).length - 1 && <Divider />}\n                    </React.Fragment>\n                  );\n                })}\n              </List>\n            </CardContent>\n            \n            <CardActions sx={{ justifyContent: 'space-between', px: 2, pb: 2 }}>\n              <Button\n                startIcon={<RestoreIcon />}\n                onClick={() => setResetDialog(true)}\n                disabled={loading}\n                color=\"warning\"\n              >\n                Reset to Defaults\n              </Button>\n              \n              <Stack direction=\"row\" spacing={1}>\n                <Button\n                  variant=\"outlined\"\n                  onClick={refreshSettings}\n                  disabled={loading}\n                >\n                  Refresh\n                </Button>\n                \n                <Button\n                  variant=\"contained\"\n                  startIcon={saving ? <CircularProgress size={16} /> : <SaveIcon />}\n                  onClick={handleSave}\n                  disabled={!hasUnsavedChanges || saving}\n                >\n                  {saving ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </Stack>\n            </CardActions>\n          </Card>\n        </Grid>\n\n        {/* Compliance Panel */}\n        <Grid item xs={12} lg={4}>\n          <Stack spacing={3}>\n            {/* Compliance Score */}\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Compliance Score\n                </Typography>\n                \n                <Box sx={{ textAlign: 'center', mb: 2 }}>\n                  <Typography variant=\"h3\" color={getScoreColor(complianceScore)}>\n                    {complianceScore}%\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    GDPR Compliance\n                  </Typography>\n                </Box>\n                \n                <LinearProgress\n                  variant=\"determinate\"\n                  value={complianceScore}\n                  color={getScoreColor(complianceScore)}\n                  sx={{ height: 8, borderRadius: 4 }}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Recommendations */}\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Recommendations\n                </Typography>\n                \n                {recommendations.length > 0 ? (\n                  <List dense>\n                    {recommendations.map((recommendation, index) => (\n                      <ListItem key={index} sx={{ px: 0 }}>\n                        <ListItemText\n                          primary={\n                            <Typography variant=\"body2\">\n                              {recommendation}\n                            </Typography>\n                          }\n                        />\n                      </ListItem>\n                    ))}\n                  </List>\n                ) : (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    No recommendations at this time. Your settings look good!\n                  </Typography>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Privacy Info */}\n            <Paper sx={{ p: 2, bgcolor: 'info.light', color: 'info.contrastText' }}>\n              <Stack direction=\"row\" spacing={1} alignItems=\"flex-start\">\n                <InfoIcon fontSize=\"small\" />\n                <Box>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Privacy Notice\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    These settings control how we process your personal data. \n                    Changes take effect immediately and are logged for compliance.\n                  </Typography>\n                </Box>\n              </Stack>\n            </Paper>\n          </Stack>\n        </Grid>\n      </Grid>\n\n      {/* Reset Confirmation Dialog */}\n      <Dialog\n        open={resetDialog}\n        onClose={() => setResetDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n            <WarningIcon color=\"warning\" />\n            Reset Privacy Settings\n          </Stack>\n        </DialogTitle>\n        \n        <DialogContent>\n          <Typography variant=\"body1\" gutterBottom>\n            Are you sure you want to reset all privacy settings to their default values?\n          </Typography>\n          \n          <Alert severity=\"warning\" sx={{ mt: 2 }}>\n            This action cannot be undone. All your current privacy preferences will be lost.\n          </Alert>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={() => setResetDialog(false)}>\n            Cancel\n          </Button>\n          \n          <Button \n            onClick={handleReset}\n            variant=\"contained\"\n            color=\"warning\"\n            disabled={loading}\n          >\n            Reset Settings\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default PrivacySettingsTab;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/gdpr/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/layouts/EntityListLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/layouts/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/layouts/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/layouts/PageHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subtitle' is defined but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filterOptions' is defined but never used.","line":87,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onToggleFilters' is defined but never used.","line":88,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":18}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { \n  ArrowUpDown,\n  CheckSquare,\n  Filter,\n  LayoutGrid,\n  List,\n  Plus,\n  Search\n} from 'lucide-react';\n\nexport interface PageHeaderProps {\n  /** Main page title */\n  title: string;\n  /** Subtitle/description text */\n  subtitle: string;\n  /** View mode: 'table' or 'grid' */\n  viewMode: 'table' | 'grid';\n  /** Function to toggle between view modes */\n  onViewModeChange: (mode: 'table' | 'grid') => void;\n  /** Whether the page is in selection mode */\n  selectionMode: boolean;\n  /** Function to toggle selection mode */\n  onToggleSelectionMode: () => void;\n  /** Current search value */\n  searchValue: string;\n  /** Function to handle search value changes */\n  onSearchChange: (value: string) => void;\n  /** Whether any filters are active */\n  filtersActive?: boolean;\n  /** Primary action button text (Add, Create, etc.) */\n  primaryActionText?: string;\n  /** Primary action function */\n  onPrimaryAction?: () => void;\n  /** Primary action button icon */\n  primaryActionIcon?: React.ReactNode;\n  /** Primary action dropdown options */\n  primaryActionDropdownOptions?: Array<{\n    label: string;\n    icon?: React.ReactNode;\n    onClick: () => void;\n  }>;\n  /** Content for the selection mode toolbar */\n  selectionToolbar?: React.ReactNode;\n  /** Additional filter components */\n  filterComponents?: React.ReactNode;\n  /** Function to handle sorting */\n  onSort?: () => void;\n  /** Sort options for dropdown menu */\n  sortOptions?: Array<{\n    label: string;\n    onClick: () => void;\n  }>;\n  /** Filter options for dropdown menu */\n  filterOptions?: Array<{\n    label: string;\n    onClick: () => void;\n  }>;\n  /** Function to toggle filters */\n  onToggleFilters?: () => void;\n  description?: string;\n  children?: React.ReactNode;\n}\n\n/**\n * Standardized page header component with consistent styling\n * Includes title, description, view controls, search, and primary action\n */\nconst PageHeader: React.FC<PageHeaderProps> = ({\n  title,\n  subtitle,\n  viewMode,\n  onViewModeChange,\n  selectionMode,\n  onToggleSelectionMode,\n  searchValue,\n  onSearchChange,\n  filtersActive = false,\n  primaryActionText = 'Aggiungi',\n  onPrimaryAction,\n  primaryActionIcon = <Plus className=\"h-5 w-5\" />,\n  primaryActionDropdownOptions,\n  selectionToolbar,\n  filterComponents,\n  onSort,\n  sortOptions,\n  filterOptions,\n  onToggleFilters,\n  description,\n  children,\n}) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [sortDropdownOpen, setSortDropdownOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const sortDropdownRef = useRef<HTMLDivElement>(null);\n  \n  // Close dropdowns when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setDropdownOpen(false);\n      }\n      if (sortDropdownRef.current && !sortDropdownRef.current.contains(event.target as Node)) {\n        setSortDropdownOpen(false);\n      }\n    };\n    \n    if (dropdownOpen || sortDropdownOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n    \n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [dropdownOpen, sortDropdownOpen]);\n  \n  return (\n    <div className=\"space-y-4 mb-6\">\n      {/* Title row with actions */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">{title}</h1>\n          {description && (\n            <p className=\"text-gray-500\">{description}</p>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          {/* Selection Mode Toggle (Modify) */}\n          <button\n            onClick={onToggleSelectionMode}\n            className={`px-4 h-10 rounded-full border flex items-center gap-2 transition ${\n              selectionMode ? 'bg-blue-100 text-blue-700 border-blue-400' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n            }`}\n          >\n            <CheckSquare className=\"h-4 w-4\" />\n            Modifica\n          </button>\n          \n          {/* View Mode Toggle */}\n          <div className=\"flex items-center bg-gray-100 rounded-full p-1 relative h-10 w-40\">\n            <button\n              className={`flex-1 h-8 z-10 relative transition-colors duration-300 flex items-center justify-center gap-1.5 ${viewMode === 'grid' ? 'text-blue-700' : 'text-gray-600'}`}\n              onClick={() => onViewModeChange('grid')}\n            >\n              <LayoutGrid className=\"h-4 w-4\" />\n              <span className=\"text-xs font-medium\">Card</span>\n            </button>\n            <button\n              className={`flex-1 h-8 z-10 relative transition-colors duration-300 flex items-center justify-center gap-1.5 ${viewMode === 'table' ? 'text-blue-700' : 'text-gray-600'}`}\n              onClick={() => onViewModeChange('table')}\n            >\n              <List className=\"h-4 w-4\" />\n              <span className=\"text-xs font-medium\">Table</span>\n            </button>\n            <span\n              className={`absolute top-1 bottom-1 h-8 bg-white rounded-full shadow transition-transform duration-300 ${\n                viewMode === 'table' ? 'right-1 left-[50%]' : 'left-1 right-[50%]'\n              }`}\n              style={{ zIndex: 0 }}\n            />\n          </div>\n          \n          {/* Primary Action Button/Dropdown */}\n          {(onPrimaryAction || primaryActionDropdownOptions) && (\n            <div className=\"relative\" ref={dropdownRef}>\n              <button\n                onClick={primaryActionDropdownOptions ? () => setDropdownOpen(!dropdownOpen) : onPrimaryAction}\n                className=\"px-4 h-10 rounded-full bg-blue-600 text-white flex items-center gap-2 shadow-sm hover:bg-blue-700 focus:outline-none\"\n              >\n                {primaryActionIcon}\n                {primaryActionText}\n                {primaryActionDropdownOptions && (\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                )}\n              </button>\n              \n              {dropdownOpen && primaryActionDropdownOptions && (\n                <div className=\"absolute right-0 mt-2 py-2 w-56 bg-white rounded-lg shadow-lg z-50 border border-gray-200\">\n                  {primaryActionDropdownOptions.map((option, idx) => (\n                    <button\n                      key={idx}\n                      className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2\"\n                      onClick={() => { setDropdownOpen(false); option.onClick(); }}\n                    >\n                      {option.icon}\n                      <span>{option.label}</span>\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Search and filters row */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center gap-3\">\n        <div className=\"relative flex-grow\">\n          <input\n            type=\"text\"\n            value={searchValue}\n            onChange={(e) => onSearchChange(e.target.value)}\n            placeholder=\"Cerca...\"\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n          <Search className=\"h-4 w-4 absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\" />\n          {searchValue && (\n            <button\n              className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n              onClick={() => onSearchChange('')}\n            >\n              ×\n            </button>\n          )}\n        </div>\n        \n        {onSort && (\n          <div className=\"relative\" ref={sortDropdownRef}>\n            <button \n              onClick={sortOptions ? () => setSortDropdownOpen(!sortDropdownOpen) : onSort} \n              className=\"px-3 py-1.5 rounded-full border border-gray-300 text-gray-700 hover:bg-gray-50 flex items-center gap-1.5\"\n            >\n              <ArrowUpDown className=\"h-3.5 w-3.5\" />\n              Sort By\n              {sortOptions && (\n                <svg className=\"w-3.5 h-3.5 ml-1\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              )}\n            </button>\n            \n            {sortDropdownOpen && sortOptions && (\n              <div className=\"absolute right-0 mt-2 py-2 w-40 bg-white rounded-lg shadow-lg z-50 border border-gray-200\">\n                {sortOptions.map((option, idx) => (\n                  <button\n                    key={idx}\n                    className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                    onClick={() => { \n                      setSortDropdownOpen(false); \n                      option.onClick(); \n                    }}\n                  >\n                    {option.label}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n        \n        <button \n          className={`px-3 py-1.5 rounded-full ${filtersActive \n            ? 'bg-blue-100 text-blue-700' \n            : 'border border-gray-300 text-gray-700 hover:bg-gray-50'} flex items-center gap-1.5`}\n        >\n          <Filter className=\"h-3.5 w-3.5\" />\n          {filtersActive ? 'Filtri attivi' : 'Filters'}\n        </button>\n        \n        {filterComponents}\n      </div>\n      \n      {/* Selection mode toolbar - shown right below the search bar */}\n      {selectionMode && selectionToolbar}\n      \n      {children && <div className=\"mt-3 sm:mt-0\">{children}</div>}\n    </div>\n  );\n};\n\nexport default PageHeader;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/layouts/SelectionToolbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalCount' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CheckSquare, Square, Trash2 } from 'lucide-react';\n\ninterface SelectionToolbarProps {\n  /** Number of selected items */\n  selectedCount: number;\n  /** Total items available */\n  totalCount: number;\n  /** Select all handler */\n  onSelectAll: () => void;\n  /** Deselect all handler */\n  onDeselectAll: () => void;\n  /** Delete selected items handler */\n  onDelete?: () => void;\n  /** Delete selected items handler (legacy name) */\n  onDeleteSelected?: () => void;\n  /** Custom actions to add to the toolbar */\n  extraActions?: React.ReactNode;\n}\n\n/**\n * Standardized toolbar for selection mode actions\n * Displays consistent selection actions across all pages\n */\nconst SelectionToolbar: React.FC<SelectionToolbarProps> = ({\n  selectedCount,\n  totalCount,\n  onSelectAll,\n  onDeselectAll,\n  onDeleteSelected,\n  onDelete,\n  extraActions,\n}) => {\n  // Usa onDelete se disponibile, altrimenti onDeleteSelected (per compatibilità)\n  const handleDelete = onDelete || onDeleteSelected;\n\n  return (\n    <div className=\"flex flex-wrap items-center gap-2 py-2\">\n      <button\n        onClick={onSelectAll}\n        className=\"px-3 py-1 rounded-full bg-blue-100 text-blue-700 text-xs font-medium flex items-center gap-1\"\n        aria-label=\"Seleziona tutti\"\n      >\n        <CheckSquare className=\"h-3 w-3\" />\n        Seleziona tutti\n      </button>\n      \n      <button\n        onClick={onDeselectAll}\n        className=\"px-3 py-1 rounded-full bg-gray-100 text-gray-700 text-xs font-medium flex items-center gap-1\"\n        aria-label=\"Deseleziona tutti\"\n      >\n        <Square className=\"h-3 w-3\" />\n        Deseleziona tutti\n      </button>\n      \n      {handleDelete && (\n        <button\n          onClick={handleDelete}\n          disabled={selectedCount === 0}\n          className={`px-3 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${\n            selectedCount > 0 \n              ? 'bg-red-100 text-red-700 hover:bg-red-200' \n              : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n          }`}\n          aria-label=\"Elimina selezionati\"\n        >\n          <Trash2 className=\"h-3 w-3\" />\n          Elimina selezionati {selectedCount > 0 && `(${selectedCount})`}\n        </button>\n      )}\n      \n      {extraActions}\n    </div>\n  );\n};\n\nexport default SelectionToolbar;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/layouts/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShieldCheck' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resource' is defined but never used.","line":33,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'action' is defined but never used.","line":33,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":72}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect } from 'react';\nimport { useLocation, NavLink } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\nimport { \n  Building2,\n  Calendar,\n  ClipboardList,\n  FileText,\n  Folder,\n  Globe,\n  GraduationCap,\n  LayoutDashboard,\n  Settings,\n  Shield,\n  ShieldCheck,\n  UserCheck,\n  UserCog,\n  Users,\n  X\n} from 'lucide-react';\n\ninterface SidebarProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}\n\nconst Sidebar: React.FC<SidebarProps> = ({ open, setOpen }) => {\n  const location = useLocation();\n  const { pathname } = location;\n  const { user, isAuthenticated, hasPermission: authHasPermission, permissions, isLoading } = useAuth();\n  \n  // Usa direttamente l'AuthContext per i permessi\n  const hasPermission = authHasPermission || ((resource: string, action: string): boolean => false);\n  const userRole = user?.role || 'Employee';\n  \n  // Debug log per monitorare il ruolo utente nella Sidebar\n  console.log('🎭 Sidebar: User role and permissions from AuthContext:', {\n    userRole,\n    isLoading,\n    permissionsCount: Object.keys(permissions || {}).length,\n    isAdmin: userRole === 'Admin' || userRole === 'Administrator',\n    timestamp: new Date().toISOString()\n  });\n  \n  // Debug logging per capire cosa sta succedendo\n  console.log('🔍 Sidebar Debug:', {\n    userRole,\n    permissionsCount: Object.keys(permissions || {}).length,\n    isLoading,\n    hasPermissionFunction: typeof hasPermission,\n    isAuthenticated,\n    userId: user?.id\n  });\n  \n  // Test specifici per i permessi\n  console.log('🎯 Permission Tests:', {\n    companiesRead: hasPermission('companies', 'read'),\n    employeesRead: hasPermission('employees', 'read'),\n    trainersRead: hasPermission('trainers', 'read'),\n    personsRead: hasPermission('persons', 'read')\n  });\n  \n  // Debug specifico per le condizioni del menu\n  console.log('🎯 Menu Visibility Debug:', {\n    companiesVisible: (userRole === 'Admin' || userRole === 'Administrator') || hasPermission('companies', 'read'),\n    employeesVisible: (userRole === 'Admin' || userRole === 'Administrator') || hasPermission('employees', 'read'),\n    trainersVisible: (userRole === 'Admin' || userRole === 'Administrator') || hasPermission('trainers', 'read'),\n    personsVisible: (userRole === 'Admin' || userRole === 'Administrator') || hasPermission('persons', 'read'),\n    tenantsVisible: userRole === 'Admin',\n    adminGdprVisible: userRole === 'Admin'\n  });\n  \n  const trigger = useRef<HTMLButtonElement>(null);\n  const sidebar = useRef<HTMLDivElement>(null);\n\n  // Close if the esc key is pressed\n  useEffect(() => {\n    const keyHandler = ({ keyCode }: KeyboardEvent) => {\n      if (!open || keyCode !== 27) return;\n      setOpen(false);\n    };\n    document.addEventListener('keydown', keyHandler);\n    return () => document.removeEventListener('keydown', keyHandler);\n  });\n\n  // Close on click outside\n  useEffect(() => {\n    const clickHandler = ({ target }: MouseEvent) => {\n      if (!sidebar.current || !trigger.current) return;\n      if (\n        !open ||\n        sidebar.current.contains(target as Node) ||\n        trigger.current.contains(target as Node)\n      )\n        return;\n      setOpen(false);\n    };\n    document.addEventListener('click', clickHandler);\n    return () => document.removeEventListener('click', clickHandler);\n  });\n\n  return (\n    <>\n      {/* Sidebar backdrop (mobile only) */}\n      <div\n        className={`fixed inset-0 bg-gray-900 bg-opacity-30 z-40 xl:hidden xl:z-auto transition-opacity duration-200 ${\n          open ? 'opacity-100' : 'opacity-0 pointer-events-none'\n        }`}\n        aria-hidden=\"true\"\n      ></div>\n\n      {/* Sidebar */}\n      <div\n        id=\"sidebar\"\n        ref={sidebar}\n        className={`flex flex-col absolute z-40 left-0 top-0 xl:static xl:left-auto xl:top-auto xl:translate-x-0 transform h-screen overflow-y-scroll xl:overflow-y-auto no-scrollbar w-64 xl:w-72 xl:sidebar-expanded:!w-72 2xl:!w-72 shrink-0 bg-white p-4 transition-all duration-200 ease-in-out ${\n          open ? 'translate-x-0' : '-translate-x-64'\n        }`}\n      >\n        {/* Sidebar header */}\n        <div className=\"flex justify-between mb-10 pr-3 sm:px-2\">\n          {/* Logo */}\n          <NavLink to=\"/\" className=\"block\">\n            <div className=\"flex items-center\">\n              <svg \n                className=\"w-8 h-8 text-primary-600\" \n                viewBox=\"0 0 24 24\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                strokeWidth=\"2\" \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\" />\n              </svg>\n              <span className=\"ml-2 text-xl font-bold text-gray-800\">ElementSoftware</span>\n            </div>\n          </NavLink>\n          {/* Close button */}\n          <button\n            ref={trigger}\n            className=\"xl:hidden text-gray-500 hover:text-gray-600\"\n            onClick={() => setOpen(!open)}\n            aria-controls=\"sidebar\"\n            aria-expanded={open}\n          >\n            <span className=\"sr-only\">Close sidebar</span>\n            <X className=\"w-6 h-6 fill-current\" />\n          </button>\n        </div>\n\n        {/* Links */}\n        <div className=\"space-y-8\">\n          {/* Pages group */}\n          <div>\n            <h3 className=\"text-xs uppercase text-gray-500 font-semibold pl-3\">\n              Main\n            </h3>\n            <ul className=\"mt-3\">\n              <li className=\"mb-1 last:mb-0\">\n                <NavLink\n                  end\n                  to=\"/dashboard\"\n                  className={({ isActive }) =>\n                    `block transition duration-150 truncate ${\n                      isActive\n                        ? 'text-primary-600 font-medium'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`\n                  }\n                >\n                  <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                    <LayoutDashboard className=\"shrink-0 h-5 w-5 mr-3\" />\n                    <span className=\"text-sm\">Dashboard</span>\n                  </div>\n                </NavLink>\n              </li>\n              {((userRole === 'Admin' || userRole === 'Administrator') || hasPermission('companies', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/companies\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/companies')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <Building2 className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Companies</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {(userRole === 'Admin' || userRole === 'Administrator' || hasPermission('persons', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/persons\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/persons')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <Users className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Persone</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {(userRole === 'Admin' || userRole === 'Administrator' || hasPermission('employees', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/employees\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/employees')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <UserCog className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Dipendenti</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {((userRole === 'Admin' || userRole === 'Administrator') || hasPermission('courses', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/courses\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/courses')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <GraduationCap className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Courses</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {((userRole === 'Admin' || userRole === 'Administrator') || hasPermission('trainers', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/trainers\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/trainers')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <UserCheck className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Formatori</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {((userRole === 'Admin' || userRole === 'Administrator') || hasPermission('courses', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/scheduled-courses\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/scheduled-courses')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <Calendar className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Scheduled Courses</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {((userRole === 'Admin' || userRole === 'Administrator') || hasPermission('documents', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/documents-corsi\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/documents-corsi')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <Folder className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Documenti Corsi</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {(userRole === 'Admin' || userRole === 'Administrator') && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/quotes-invoices\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/quotes-invoices')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <FileText className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Preventivi e Fatture</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {((userRole === 'Admin' || userRole === 'Administrator') || hasPermission('form_templates', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/forms\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/forms')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <ClipboardList className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Forms</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n\n            </ul>\n          </div>\n          {/* Settings group */}\n          <div>\n            <h3 className=\"text-xs uppercase text-gray-500 font-semibold pl-3\">\n              Settings\n            </h3>\n            <ul className=\"mt-3\">\n              {userRole === 'Admin' && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/tenants\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <Globe className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Tenants</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              {((userRole === 'Admin' || userRole === 'Administrator') || hasPermission('PUBLIC_CMS', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/settings/cms\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/settings/cms')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <Globe className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Frontend Pubblico</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              <li className=\"mb-1 last:mb-0\">\n                <NavLink\n                  to=\"/gdpr\"\n                  className={({ isActive }) =>\n                    `block transition duration-150 truncate ${\n                      isActive || pathname.includes('/gdpr')\n                        ? 'text-primary-600 font-medium'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`\n                  }\n                >\n                  <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                    <Shield className=\"shrink-0 h-5 w-5 mr-3\" />\n                    <span className=\"text-sm\">GDPR & Privacy</span>\n                  </div>\n                </NavLink>\n              </li>\n              {((userRole === 'Admin') || hasPermission('gdpr', 'read')) && (\n                <li className=\"mb-1 last:mb-0\">\n                  <NavLink\n                    to=\"/admin/gdpr\"\n                    className={({ isActive }) =>\n                      `block transition duration-150 truncate ${\n                        isActive || pathname.includes('/admin/gdpr')\n                          ? 'text-primary-600 font-medium'\n                          : 'text-gray-600 hover:text-gray-900'\n                      }`\n                    }\n                  >\n                    <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                      <Shield className=\"shrink-0 h-5 w-5 mr-3\" />\n                      <span className=\"text-sm\">Admin GDPR</span>\n                    </div>\n                  </NavLink>\n                </li>\n              )}\n              <li className=\"mb-1 last:mb-0\">\n                <NavLink\n                  to=\"/settings\"\n                  className={({ isActive }) =>\n                    `block transition duration-150 truncate ${\n                      isActive\n                        ? 'text-primary-600 font-medium'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`\n                  }\n                >\n                  <div className=\"flex items-center p-2 rounded-xl hover:bg-gray-100\">\n                    <Settings className=\"shrink-0 h-5 w-5 mr-3\" />\n                    <span className=\"text-sm\">Settings</span>\n                  </div>\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        {/* User info */}\n        <div className=\"mt-auto pt-3 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between px-3 py-2\">\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center justify-center bg-primary-100 rounded-full w-10 h-10\">\n                <span className=\"text-sm font-medium text-primary-600\">JD</span>\n              </div>\n              <div className=\"ml-3\">\n                <div className=\"text-sm font-medium text-gray-800\">John Doe</div>\n                <div className=\"text-xs text-gray-500\">Administrator</div>\n              </div>\n            </div>\n            <button className=\"text-gray-400 hover:text-gray-500\">\n              <span className=\"sr-only\">Log out</span>\n              <svg className=\"w-4 h-4 fill-current\" viewBox=\"0 0 16 16\">\n                <path d=\"M6.5 14.5A7.5 7.5 0 0 1 6.5 1.5m3.25 7h-9.5\" />\n                <path d=\"M10.982 9.762L13.5 7.244l-2.518-2.518\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Sidebar;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/layouts/SidebarLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onSidebarToggle' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport { cn } from '../../design-system/utils';\n\ninterface SidebarLayoutProps {\n  children: ReactNode;\n  sidebar?: ReactNode;\n  sidebarWidth?: number;\n  sidebarCollapsed?: boolean;\n  onSidebarToggle?: () => void;\n  className?: string;\n}\n\nexport const SidebarLayout: React.FC<SidebarLayoutProps> = ({\n  children,\n  sidebar,\n  sidebarWidth = 300,\n  sidebarCollapsed = false,\n  onSidebarToggle,\n  className\n}) => {\n  return (\n    <div className={cn('flex h-full', className)}>\n      {sidebar && (\n        <div \n          className={cn(\n            'transition-all duration-300 border-r border-gray-200',\n            sidebarCollapsed ? 'w-0 overflow-hidden' : 'flex-shrink-0'\n          )}\n          style={{ width: sidebarCollapsed ? 0 : sidebarWidth }}\n        >\n          <div className=\"h-full overflow-y-auto p-4\">\n            {sidebar}\n          </div>\n        </div>\n      )}\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full overflow-y-auto p-6\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarLayout;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/layouts/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/lazy/LazyCalendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense } from 'react';\nimport { ErrorBoundary } from '../ui/ErrorBoundary';\nimport { LoadingFallback } from '../ui/LoadingFallback';\n\n/**\n * Lazy-loaded Calendar component\n * Week 11 Implementation - Component Lazy Loading\n */\n\n// Lazy load the FullCalendar component\nconst FullCalendar = React.lazy(() => import('@fullcalendar/react'));\n\ninterface LazyCalendarProps {\n  [key: string]: any;\n}\n\nexport const LazyCalendar: React.FC<LazyCalendarProps> = (props) => {\n  return (\n    <ErrorBoundary>\n      <Suspense fallback={\n        <div className=\"h-96 flex items-center justify-center border rounded-lg\">\n          <LoadingFallback message=\"Loading Calendar...\" size=\"lg\" />\n        </div>\n      }>\n        <FullCalendar {...props} />\n      </Suspense>\n    </ErrorBoundary>\n  );\n};\n\nexport default LazyCalendar;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/lazy/LazyChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[775,778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[775,778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1624,1627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1624,1627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1807,1810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1807,1810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1989,1992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1989,1992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2176,2179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2176,2179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense } from 'react';\nimport { ErrorBoundary } from '../ui/ErrorBoundary';\nimport { LoadingFallback } from '../ui/LoadingFallback';\n\n/**\n * Lazy-loaded Chart components\n * Week 11 Implementation - Component Lazy Loading\n */\n\n// Lazy load Chart.js components\nconst Line = React.lazy(() => import('react-chartjs-2').then(module => ({ default: module.Line })));\nconst Bar = React.lazy(() => import('react-chartjs-2').then(module => ({ default: module.Bar })));\nconst Pie = React.lazy(() => import('react-chartjs-2').then(module => ({ default: module.Pie })));\nconst Doughnut = React.lazy(() => import('react-chartjs-2').then(module => ({ default: module.Doughnut })));\n\ninterface LazyChartProps {\n  type: 'line' | 'bar' | 'pie' | 'doughnut';\n  [key: string]: any;\n}\n\nconst ChartFallback = () => (\n  <div className=\"h-64 flex items-center justify-center border rounded-lg bg-gray-50\">\n    <LoadingFallback message=\"Loading Chart...\" size=\"lg\" />\n  </div>\n);\n\nexport const LazyChart: React.FC<LazyChartProps> = ({ type, ...props }) => {\n  const renderChart = () => {\n    switch (type) {\n      case 'line':\n        return <Line {...props} />;\n      case 'bar':\n        return <Bar {...props} />;\n      case 'pie':\n        return <Pie {...props} />;\n      case 'doughnut':\n        return <Doughnut {...props} />;\n      default:\n        return <div>Unsupported chart type</div>;\n    }\n  };\n\n  return (\n    <ErrorBoundary>\n      <Suspense fallback={<ChartFallback />}>\n        {renderChart()}\n      </Suspense>\n    </ErrorBoundary>\n  );\n};\n\n// Individual lazy chart components\nexport const LazyLineChart: React.FC<any> = (props) => (\n  <ErrorBoundary>\n    <Suspense fallback={<ChartFallback />}>\n      <Line {...props} />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport const LazyBarChart: React.FC<any> = (props) => (\n  <ErrorBoundary>\n    <Suspense fallback={<ChartFallback />}>\n      <Bar {...props} />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport const LazyPieChart: React.FC<any> = (props) => (\n  <ErrorBoundary>\n    <Suspense fallback={<ChartFallback />}>\n      <Pie {...props} />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport const LazyDoughnutChart: React.FC<any> = (props) => (\n  <ErrorBoundary>\n    <Suspense fallback={<ChartFallback />}>\n      <Doughnut {...props} />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport default LazyChart;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/lazy/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/managers/DVRManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDvrs'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDvrs, siteId]","fix":{"range":[1433,1441],"text":"[fetchDvrs, siteId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../design-system/molecules/Card';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Input } from '../../design-system/atoms/Input';\nimport { Label } from '../../design-system/atoms/Label';\nimport { Badge } from '../../design-system/atoms/Badge';\nimport { \n  AlertTriangle,\n  Calendar,\n  CheckCircle,\n  Edit,\n  FileText,\n  Plus,\n  Trash2\n} from 'lucide-react';\nimport { apiGet, apiDelete } from '../../services/api';\nimport { useToast } from '../../hooks/useToast';\n\ninterface DVR {\n  id: string;\n  titolo: string;\n  descrizione: string;\n  dataCreazione: string;\n  dataScadenza: string;\n  stato: 'attivo' | 'scaduto' | 'in_revisione';\n  responsabile: string;\n  versione: string;\n  note?: string;\n}\n\ninterface DVRManagerProps {\n  siteId: string;\n  siteName: string;\n}\n\nexport const DVRManager: React.FC<DVRManagerProps> = ({ siteId, siteName }) => {\n  const [dvrs, setDvrs] = useState<DVR[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingDvr, setEditingDvr] = useState<DVR | null>(null);\n  const [formData, setFormData] = useState({\n    titolo: '',\n    descrizione: '',\n    dataScadenza: '',\n    responsabile: '',\n    versione: '',\n    note: ''\n  });\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    fetchDvrs();\n  }, [siteId]);\n\n  const fetchDvrs = async () => {\n    try {\n      setLoading(true);\n      const response = await apiGet(`/api/v1/dvr/site/${siteId}`) as { dvrs?: DVR[] };\n      setDvrs(response.dvrs || []);\n    } catch (error) {\n      console.error('Error fetching DVRs:', error);\n      showToast({ message: 'Errore nel caricamento dei DVR', type: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const payload = {\n        ...formData,\n        siteId,\n        dataCreazione: editingDvr ? editingDvr.dataCreazione : new Date().toISOString(),\n        stato: editingDvr ? editingDvr.stato : 'attivo'\n      };\n\n      if (editingDvr) {\n        await apiPut(`/api/v1/dvr/${editingDvr.id}`, payload);\n        showToast({ message: 'DVR aggiornato con successo', type: 'success' });\n      } else {\n        await apiPost('/api/v1/dvr', payload);\n        showToast({ message: 'DVR creato con successo', type: 'success' });\n      }\n\n      await fetchDvrs();\n      handleCloseForm();\n    } catch (error) {\n      console.error('Error saving DVR:', error);\n      showToast({ message: 'Errore nel salvataggio del DVR', type: 'error' });\n    }\n  };\n\n  const handleEdit = (dvr: DVR) => {\n    setEditingDvr(dvr);\n    setFormData({\n      titolo: dvr.titolo,\n      descrizione: dvr.descrizione,\n      dataScadenza: dvr.dataScadenza.split('T')[0],\n      responsabile: dvr.responsabile,\n      versione: dvr.versione,\n      note: dvr.note || ''\n    });\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Sei sicuro di voler eliminare questo DVR?')) return;\n\n    try {\n      await apiDelete(`/api/v1/dvr/${id}`);\n      showToast({ message: 'DVR eliminato con successo', type: 'success' });\n      await fetchDvrs();\n    } catch (error) {\n      console.error('Error deleting DVR:', error);\n      showToast({ message: 'Errore nell\\'eliminazione del DVR', type: 'error' });\n    }\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingDvr(null);\n    setFormData({\n      titolo: '',\n      descrizione: '',\n      dataScadenza: '',\n      responsabile: '',\n      versione: '',\n      note: ''\n    });\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const getStatoBadgeVariant = (stato: string) => {\n    switch (stato) {\n      case 'attivo': return 'default';\n      case 'scaduto': return 'destructive';\n      case 'in_revisione': return 'secondary';\n      default: return 'default';\n    }\n  };\n\n  const getStatoIcon = (stato: string) => {\n    switch (stato) {\n      case 'attivo': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'scaduto': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'in_revisione': return <AlertTriangle className=\"h-4 w-4\" />;\n      default: return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-gray-500\">Caricamento DVR...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">DVR - {siteName}</h2>\n          <p className=\"text-gray-600\">Gestione Documenti di Valutazione dei Rischi</p>\n        </div>\n        <Button onClick={() => setShowForm(true)} variant=\"primary\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Nuovo DVR\n        </Button>\n      </div>\n\n      {dvrs.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nessun DVR presente</h3>\n            <p className=\"text-gray-500 mb-4\">Inizia creando il primo documento di valutazione dei rischi per questa sede.</p>\n            <Button onClick={() => setShowForm(true)} variant=\"primary\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Crea primo DVR\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {dvrs.map((dvr) => (\n            <Card key={dvr.id}>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      {getStatoIcon(dvr.stato)}\n                      {dvr.titolo}\n                      <Badge variant={getStatoBadgeVariant(dvr.stato)}>\n                        {dvr.stato.replace('_', ' ')}\n                      </Badge>\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 mt-1\">Versione {dvr.versione}</p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(dvr)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(dvr.id)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <p className=\"text-gray-700\">{dvr.descrizione}</p>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                    <div className=\"flex items-center text-gray-600\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      <span>Creato: {new Date(dvr.dataCreazione).toLocaleDateString()}</span>\n                    </div>\n                    <div className=\"flex items-center text-gray-600\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      <span>Scadenza: {new Date(dvr.dataScadenza).toLocaleDateString()}</span>\n                    </div>\n                    <div className=\"flex items-center text-gray-600\">\n                      <User className=\"h-4 w-4 mr-2\" />\n                      <span>Responsabile: {dvr.responsabile}</span>\n                    </div>\n                  </div>\n\n                  {dvr.note && (\n                    <div className=\"mt-3 p-3 bg-gray-50 rounded-lg\">\n                      <p className=\"text-sm text-gray-700\">{dvr.note}</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Form Modal */}\n      {showForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                {editingDvr ? 'Modifica DVR' : 'Nuovo DVR'}\n              </h3>\n              <button\n                onClick={handleCloseForm}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <span className=\"sr-only\">Chiudi</span>\n                ×\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\n              <div>\n                <Label htmlFor=\"titolo\">Titolo *</Label>\n                <Input\n                  id=\"titolo\"\n                  name=\"titolo\"\n                  value={formData.titolo}\n                  onChange={handleChange}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"descrizione\">Descrizione *</Label>\n                <textarea\n                  id=\"descrizione\"\n                  name=\"descrizione\"\n                  value={formData.descrizione}\n                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleChange(e)}\n                  required\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"versione\">Versione *</Label>\n                <Input\n                  id=\"versione\"\n                  name=\"versione\"\n                  value={formData.versione}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"es. 1.0\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"responsabile\">Responsabile *</Label>\n                <Input\n                  id=\"responsabile\"\n                  name=\"responsabile\"\n                  value={formData.responsabile}\n                  onChange={handleChange}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"dataScadenza\">Data Scadenza *</Label>\n                <Input\n                  id=\"dataScadenza\"\n                  name=\"dataScadenza\"\n                  type=\"date\"\n                  value={formData.dataScadenza}\n                  onChange={handleChange}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"note\">Note</Label>\n                <textarea\n                  id=\"note\"\n                  name=\"note\"\n                  value={formData.note}\n                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleChange(e)}\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleCloseForm}>\n                  Annulla\n                </Button>\n                <Button type=\"submit\" variant=\"primary\">\n                  {editingDvr ? 'Aggiorna' : 'Crea'} DVR\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/managers/RepartoManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReparti'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadReparti, siteId]","fix":{"range":[1402,1410],"text":"[loadReparti, siteId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../design-system/molecules/Card';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Input } from '../../design-system/atoms/Input';\nimport { Label } from '../../design-system/atoms/Label';\nimport { Badge } from '../../design-system/atoms/Badge';\nimport { apiGet, apiDelete } from '../../services/api';\nimport { toast } from 'react-hot-toast';\n\ninterface Reparto {\n  id: string;\n  nome: string;\n  responsabileId?: string;\n  createdAt: string;\n  updatedAt: string;\n  site: {\n    id: string;\n    siteName: string;\n    company: {\n      id: string;\n      name: string;\n    };\n  };\n  responsabile?: {\n    id: string;\n    nome: string;\n    cognome: string;\n  };\n}\n\ninterface RepartoFormData {\n  nome: string;\n  responsabileId?: string;\n}\n\ninterface RepartoManagerProps {\n  siteId: string;\n  siteName: string;\n}\n\nconst RepartoManager: React.FC<RepartoManagerProps> = ({ siteId, siteName }) => {\n  const [reparti, setReparti] = useState<Reparto[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingReparto, setEditingReparto] = useState<Reparto | null>(null);\n  const [formData, setFormData] = useState<RepartoFormData>({\n    nome: '',\n    responsabileId: ''\n  });\n\n  useEffect(() => {\n    loadReparti();\n  }, [siteId]);\n\n  const loadReparti = async () => {\n    try {\n      setLoading(true);\n      const response = await apiGet(`/api/v1/reparto/site/${siteId}`) as { reparti?: Reparto[] };\n      setReparti(response.reparti || []);\n    } catch (error) {\n      console.error('Error loading reparti:', error);\n      toast.error('Errore nel caricamento dei reparti');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      if (editingReparto) {\n        // Update existing reparto\n        await apiPut(`/api/v1/reparto/${editingReparto.id}`, formData);\n        toast.success('Reparto aggiornato con successo');\n      } else {\n        // Create new reparto\n        await apiPost(`/api/v1/reparto/site/${siteId}`, formData);\n        toast.success('Reparto creato con successo');\n      }\n      \n      resetForm();\n      loadReparti();\n    } catch (error) {\n      console.error('Error saving reparto:', error);\n      toast.error('Errore nel salvataggio del reparto');\n    }\n  };\n\n  const handleEdit = (reparto: Reparto) => {\n    setEditingReparto(reparto);\n    setFormData({\n      nome: reparto.nome,\n      responsabileId: reparto.responsabileId || ''\n    });\n    setShowForm(true);\n  };\n\n  const handleDelete = async (repartoId: string) => {\n    if (!confirm('Sei sicuro di voler eliminare questo reparto?')) {\n      return;\n    }\n\n    try {\n      await apiDelete(`/api/v1/reparto/${repartoId}`);\n      toast.success('Reparto eliminato con successo');\n      loadReparti();\n    } catch (error) {\n      console.error('Error deleting reparto:', error);\n      toast.error('Errore nell\\'eliminazione del reparto');\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      nome: '',\n      responsabileId: ''\n    });\n    setEditingReparto(null);\n    setShowForm(false);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('it-IT');\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Reparti - {siteName}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">Caricamento reparti...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Reparti - {siteName}</CardTitle>\n          <Button \n            onClick={() => setShowForm(!showForm)}\n            variant={showForm ? \"outline\" : \"primary\"}\n          >\n            {showForm ? 'Annulla' : 'Nuovo Reparto'}\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {showForm && (\n            <form onSubmit={handleSubmit} className=\"space-y-4 mb-6 p-4 border rounded-lg bg-gray-50\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"nome\">Nome Reparto *</Label>\n                  <Input\n                    id=\"nome\"\n                    type=\"text\"\n                    value={formData.nome}\n                    onChange={(e) => setFormData({ ...formData, nome: e.target.value })}\n                    required\n                    placeholder=\"Nome del reparto\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"responsabileId\">ID Responsabile</Label>\n                  <Input\n                    id=\"responsabileId\"\n                    type=\"text\"\n                    value={formData.responsabileId}\n                    onChange={(e) => setFormData({ ...formData, responsabileId: e.target.value })}\n                    placeholder=\"ID della persona responsabile (opzionale)\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\">\n                  {editingReparto ? 'Aggiorna Reparto' : 'Crea Reparto'}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Annulla\n                </Button>\n              </div>\n            </form>\n          )}\n\n          {reparti.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>Nessun reparto registrato per questa sede.</p>\n              <p className=\"text-sm mt-2\">Clicca su \"Nuovo Reparto\" per aggiungerne uno.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {reparti.map((reparto) => (\n                <div key={reparto.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h3 className=\"font-semibold text-lg\">\n                          {reparto.nome}\n                        </h3>\n                        <Badge variant=\"secondary\">Reparto</Badge>\n                      </div>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        {reparto.responsabile ? (\n                          <p>\n                            <strong>Responsabile:</strong> {reparto.responsabile.nome} {reparto.responsabile.cognome}\n                          </p>\n                        ) : (\n                          <p className=\"text-gray-400\">\n                            <strong>Responsabile:</strong> Non assegnato\n                          </p>\n                        )}\n                        <p>\n                          <strong>Creato il:</strong> {formatDate(reparto.createdAt)}\n                        </p>\n                        {reparto.updatedAt !== reparto.createdAt && (\n                          <p>\n                            <strong>Ultimo aggiornamento:</strong> {formatDate(reparto.updatedAt)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2 ml-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleEdit(reparto)}\n                      >\n                        Modifica\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => handleDelete(reparto.id)}\n                      >\n                        Elimina\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default RepartoManager;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/managers/SopralluogoManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSopralluoghi'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadSopralluoghi, siteId]","fix":{"range":[1520,1528],"text":"[loadSopralluoghi, siteId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../design-system/molecules/Card';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Input } from '../../design-system/atoms/Input';\nimport { Label } from '../../design-system/atoms/Label';\nimport { Badge } from '../../design-system/atoms/Badge';\nimport { apiGet, apiDelete } from '../../services/api';\nimport { toast } from 'react-hot-toast';\n\ninterface Sopralluogo {\n  id: string;\n  esecutoreId: string;\n  dataEsecuzione: string;\n  note?: string;\n  createdAt: string;\n  updatedAt: string;\n  site: {\n    id: string;\n    siteName: string;\n    company: {\n      id: string;\n      name: string;\n    };\n  };\n  esecutore: {\n    id: string;\n    nome: string;\n    cognome: string;\n  };\n}\n\ninterface SopralluogoFormData {\n  esecutoreId: string;\n  dataEsecuzione: string;\n  note?: string;\n}\n\ninterface SopralluogoManagerProps {\n  siteId: string;\n  siteName: string;\n}\n\nconst SopralluogoManager: React.FC<SopralluogoManagerProps> = ({ siteId, siteName }) => {\n  const [sopralluoghi, setSopralluoghi] = useState<Sopralluogo[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingSopralluogo, setEditingSopralluogo] = useState<Sopralluogo | null>(null);\n  const [formData, setFormData] = useState<SopralluogoFormData>({\n    esecutoreId: '',\n    dataEsecuzione: '',\n    note: ''\n  });\n\n  useEffect(() => {\n    loadSopralluoghi();\n  }, [siteId]);\n\n  const loadSopralluoghi = async () => {\n    try {\n      setLoading(true);\n      const response = await apiGet(`/api/v1/sopralluogo/site/${siteId}`) as { sopralluoghi?: Sopralluogo[] };\n      setSopralluoghi(response.sopralluoghi || []);\n    } catch (error) {\n      console.error('Error loading sopralluoghi:', error);\n      toast.error('Errore nel caricamento dei sopralluoghi');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      if (editingSopralluogo) {\n        // Update existing sopralluogo\n        await apiPut(`/api/v1/sopralluogo/${editingSopralluogo.id}`, formData);\n        toast.success('Sopralluogo aggiornato con successo');\n      } else {\n        // Create new sopralluogo\n        await apiPost(`/api/v1/sopralluogo/site/${siteId}`, formData);\n        toast.success('Sopralluogo creato con successo');\n      }\n      \n      resetForm();\n      loadSopralluoghi();\n    } catch (error) {\n      console.error('Error saving sopralluogo:', error);\n      toast.error('Errore nel salvataggio del sopralluogo');\n    }\n  };\n\n  const handleEdit = (sopralluogo: Sopralluogo) => {\n    setEditingSopralluogo(sopralluogo);\n    setFormData({\n      esecutoreId: sopralluogo.esecutoreId,\n      dataEsecuzione: sopralluogo.dataEsecuzione.split('T')[0], // Format for date input\n      note: sopralluogo.note || ''\n    });\n    setShowForm(true);\n  };\n\n  const handleDelete = async (sopralluogoId: string) => {\n    if (!confirm('Sei sicuro di voler eliminare questo sopralluogo?')) {\n      return;\n    }\n\n    try {\n      await apiDelete(`/api/v1/sopralluogo/${sopralluogoId}`);\n      toast.success('Sopralluogo eliminato con successo');\n      loadSopralluoghi();\n    } catch (error) {\n      console.error('Error deleting sopralluogo:', error);\n      toast.error('Errore nell\\'eliminazione del sopralluogo');\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      esecutoreId: '',\n      dataEsecuzione: '',\n      note: ''\n    });\n    setEditingSopralluogo(null);\n    setShowForm(false);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('it-IT');\n  };\n\n  const isRecentSopralluogo = (dateString: string) => {\n    const sopralluogoDate = new Date(dateString);\n    const now = new Date();\n    const diffInDays = Math.floor((now.getTime() - sopralluogoDate.getTime()) / (1000 * 60 * 60 * 24));\n    return diffInDays <= 30; // Recent if within 30 days\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Sopralluoghi - {siteName}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">Caricamento sopralluoghi...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Sopralluoghi - {siteName}</CardTitle>\n          <Button \n            onClick={() => setShowForm(!showForm)}\n            variant={showForm ? \"outline\" : \"primary\"}\n          >\n            {showForm ? 'Annulla' : 'Nuovo Sopralluogo'}\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {showForm && (\n            <form onSubmit={handleSubmit} className=\"space-y-4 mb-6 p-4 border rounded-lg bg-gray-50\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"esecutoreId\">ID Esecutore *</Label>\n                  <Input\n                    id=\"esecutoreId\"\n                    type=\"text\"\n                    value={formData.esecutoreId}\n                    onChange={(e) => setFormData({ ...formData, esecutoreId: e.target.value })}\n                    required\n                    placeholder=\"ID della persona che esegue il sopralluogo\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"dataEsecuzione\">Data Esecuzione *</Label>\n                  <Input\n                    id=\"dataEsecuzione\"\n                    type=\"date\"\n                    value={formData.dataEsecuzione}\n                    onChange={(e) => setFormData({ ...formData, dataEsecuzione: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"note\">Note</Label>\n                <textarea\n                  id=\"note\"\n                  value={formData.note}\n                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setFormData({ ...formData, note: e.target.value })}\n                  placeholder=\"Note aggiuntive sul sopralluogo...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\">\n                  {editingSopralluogo ? 'Aggiorna Sopralluogo' : 'Crea Sopralluogo'}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                  Annulla\n                </Button>\n              </div>\n            </form>\n          )}\n\n          {sopralluoghi.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>Nessun sopralluogo registrato per questa sede.</p>\n              <p className=\"text-sm mt-2\">Clicca su \"Nuovo Sopralluogo\" per aggiungerne uno.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {sopralluoghi.map((sopralluogo) => (\n                <div key={sopralluogo.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h3 className=\"font-semibold\">\n                          Sopralluogo del {formatDate(sopralluogo.dataEsecuzione)}\n                        </h3>\n                        {isRecentSopralluogo(sopralluogo.dataEsecuzione) && (\n                          <Badge variant=\"default\">Recente</Badge>\n                        )}\n                      </div>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <p>\n                          <strong>Esecutore:</strong> {sopralluogo.esecutore.nome} {sopralluogo.esecutore.cognome}\n                        </p>\n                        {sopralluogo.note && (\n                          <p>\n                            <strong>Note:</strong> {sopralluogo.note}\n                          </p>\n                        )}\n                        <p>\n                          <strong>Creato il:</strong> {formatDate(sopralluogo.createdAt)}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2 ml-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleEdit(sopralluogo)}\n                      >\n                        Modifica\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => handleDelete(sopralluogo.id)}\n                      >\n                        Elimina\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default SopralluogoManager;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/managers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/PersonImportConflictModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[242,245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[242,245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[337,340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[337,340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[365,368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[365,368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[512,515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[512,515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isOpen'. Either include it or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [conflicts, isOpen]","fix":{"range":[3040,3051],"text":"[conflicts, isOpen]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3763,3766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3763,3766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  AlertTriangle,\n  Building2,\n  Search,\n  Users,\n  X\n} from 'lucide-react';\nimport { Button } from '../../design-system/atoms/Button/Button';\n\ninterface PersonConflict {\n  person: any;\n  index: number;\n  type: 'duplicate' | 'invalid_company' | 'multiple';\n  existingPerson?: any;\n  suggestedCompanies?: any[];\n}\n\ninterface PersonImportConflictModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  conflicts: PersonConflict[];\n  existingCompanies: any[];\n  onResolve: (resolutions: ConflictResolution[]) => void;\n}\n\ninterface ConflictResolution {\n  index: number;\n  action: 'skip' | 'overwrite' | 'assign_company';\n  companyId?: string;\n  companyName?: string;\n}\n\nconst PersonImportConflictModal: React.FC<PersonImportConflictModalProps> = ({\n  isOpen,\n  onClose,\n  conflicts,\n  existingCompanies,\n  onResolve\n}) => {\n  const [resolutions, setResolutions] = useState<{ [index: number]: ConflictResolution }>({});\n  const [searchTerms, setSearchTerms] = useState<{ [index: number]: string }>({});\n\n  // Debug log per verificare quando il componente viene renderizzato\n  console.log('🎭 PersonImportConflictModal render START:', {\n    isOpen,\n    conflictsLength: conflicts?.length || 0,\n    existingCompaniesLength: existingCompanies?.length || 0,\n    conflicts: conflicts,\n    timestamp: new Date().toISOString()\n  });\n\n  // Log dettagliato dei conflitti ricevuti\n  if (conflicts && conflicts.length > 0) {\n    console.log('📋 Conflicts details:');\n    conflicts.forEach((conflict, idx) => {\n      console.log(`  Conflict ${idx}:`, {\n        index: conflict.index,\n        type: conflict.type,\n        person: conflict.person,\n        existingPerson: conflict.existingPerson,\n        suggestedCompanies: conflict.suggestedCompanies\n      });\n    });\n  }\n\n  // Inizializza le risoluzioni\n  useEffect(() => {\n    console.log('🔄 PersonImportConflictModal useEffect triggered:', {\n      isOpen,\n      conflictsLength: conflicts.length\n    });\n    \n    const initialResolutions: { [index: number]: ConflictResolution } = {};\n    conflicts.forEach(conflict => {\n      if (conflict.type === 'duplicate') {\n        initialResolutions[conflict.index] = { index: conflict.index, action: 'skip' };\n      } else if (conflict.type === 'invalid_company') {\n        // Se c'è un suggerimento automatico, usalo come default\n        if (conflict.suggestedCompanies && conflict.suggestedCompanies.length > 0) {\n          initialResolutions[conflict.index] = {\n            index: conflict.index,\n            action: 'assign_company',\n            companyId: conflict.suggestedCompanies[0].id\n          };\n        } else {\n          initialResolutions[conflict.index] = { index: conflict.index, action: 'skip' };\n        }\n      } else if (conflict.type === 'multiple') {\n        // Per conflitti multipli, priorità al duplicato (skip di default)\n        initialResolutions[conflict.index] = { index: conflict.index, action: 'skip' };\n      }\n    });\n    setResolutions(initialResolutions);\n  }, [conflicts]);\n\n  // Filtra le aziende in base al termine di ricerca\n  const getFilteredCompanies = (searchTerm: string) => {\n    if (!searchTerm.trim()) return existingCompanies;\n    \n    const term = searchTerm.toLowerCase();\n    return existingCompanies.filter(company => {\n      const name = (company.ragioneSociale || company.name || '').toLowerCase();\n      return name.includes(term);\n    });\n  };\n\n  // Aggiorna una risoluzione\n  const updateResolution = (index: number, updates: Partial<ConflictResolution>) => {\n    setResolutions(prev => ({\n      ...prev,\n      [index]: { ...prev[index], ...updates }\n    }));\n  };\n\n  // Gestisce la selezione di un'azienda\n  const handleCompanySelect = (index: number, company: any) => {\n    updateResolution(index, {\n      action: 'assign_company',\n      companyId: company.id,\n      companyName: company.ragioneSociale || company.name\n    });\n  };\n\n  // Gestisce la conferma delle risoluzioni\n  const handleConfirm = () => {\n    const resolvedConflicts = Object.values(resolutions).filter(r => r.action !== 'skip');\n    onResolve(resolvedConflicts);\n  };\n\n  // Conta i conflitti per tipo\n  const duplicateConflicts = conflicts.filter(c => c.type === 'duplicate');\n  const companyConflicts = conflicts.filter(c => c.type === 'invalid_company');\n  const multipleConflicts = conflicts.filter(c => c.type === 'multiple');\n\n  if (!isOpen) {\n    console.log('❌ PersonImportConflictModal not rendering - isOpen is false');\n    return null;\n  }\n\n  console.log('✅ PersonImportConflictModal rendering modal...');\n  console.log('🎯 Modal data:', {\n    duplicateConflicts: duplicateConflicts.length,\n    companyConflicts: companyConflicts.length,\n    multipleConflicts: multipleConflicts.length,\n    totalConflicts: duplicateConflicts.length + companyConflicts.length + multipleConflicts.length\n  });\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-hidden\"\n           style={{ zIndex: 10001 }}>\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <AlertTriangle className=\"h-6 w-6 text-amber-500\" />\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">\n                Risolvi Conflitti di Importazione\n              </h2>\n              <p className=\"text-sm text-gray-600\">\n                {duplicateConflicts.length} duplicati, {companyConflicts.length} aziende non valide e {multipleConflicts.length} conflitti multipli trovati\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-200px)]\">\n          {/* Duplicati */}\n          {duplicateConflicts.length > 0 && (\n            <div className=\"mb-8\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Users className=\"h-5 w-5 text-blue-500\" />\n                <h3 className=\"text-lg font-medium text-gray-900\">\n                  Duplicati Codice Fiscale ({duplicateConflicts.length})\n                </h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {duplicateConflicts.map(conflict => (\n                  <div key={conflict.index} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      {/* Persona nel CSV */}\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Nel CSV</h4>\n                        <div className=\"bg-blue-50 p-3 rounded\">\n                          <p><strong>Nome:</strong> {conflict.person.firstName} {conflict.person.lastName}</p>\n                          <p><strong>CF:</strong> {conflict.person.taxCode}</p>\n                          <p><strong>Email:</strong> {conflict.person.email || 'Non specificata'}</p>\n                          <p><strong>Telefono:</strong> {conflict.person.phone || 'Non specificato'}</p>\n                          <p><strong>Azienda:</strong> {conflict.person.companyName || 'Non specificata'}</p>\n                        </div>\n                      </div>\n                      \n                      {/* Persona esistente */}\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Nel Database</h4>\n                        <div className=\"bg-gray-50 p-3 rounded\">\n                          <p><strong>Nome:</strong> {conflict.existingPerson?.firstName} {conflict.existingPerson?.lastName}</p>\n                          <p><strong>CF:</strong> {conflict.existingPerson?.taxCode}</p>\n                          <p><strong>Email:</strong> {conflict.existingPerson?.email || 'Non specificata'}</p>\n                          <p><strong>Telefono:</strong> {conflict.existingPerson?.phone || 'Non specificato'}</p>\n                          <p><strong>Azienda:</strong> {conflict.existingPerson?.companyName || 'Non specificata'}</p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Azioni */}\n                    <div className=\"mt-4 flex space-x-3\">\n                      <label className=\"flex items-center\">\n                        <input\n                          type=\"radio\"\n                          name={`duplicate-${conflict.index}`}\n                          checked={resolutions[conflict.index]?.action === 'skip'}\n                          onChange={() => updateResolution(conflict.index, { action: 'skip' })}\n                          className=\"mr-2\"\n                        />\n                        Salta (mantieni esistente)\n                      </label>\n                      <label className=\"flex items-center\">\n                        <input\n                          type=\"radio\"\n                          name={`duplicate-${conflict.index}`}\n                          checked={resolutions[conflict.index]?.action === 'overwrite'}\n                          onChange={() => updateResolution(conflict.index, { action: 'overwrite' })}\n                          className=\"mr-2\"\n                        />\n                        Sovrascrivi con dati CSV\n                      </label>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Conflitti multipli */}\n          {multipleConflicts.length > 0 && (\n            <div className=\"mb-8\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n                <h3 className=\"text-lg font-medium text-gray-900\">\n                  Conflitti Multipli ({multipleConflicts.length})\n                </h3>\n                <span className=\"text-sm text-gray-600\">\n                  (Duplicato + Azienda non valida)\n                </span>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {multipleConflicts.map(conflict => (\n                  <div key={conflict.index} className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                    <div className=\"mb-4\">\n                      <h4 className=\"font-medium text-gray-900 flex items-center space-x-2\">\n                        <span>{conflict.person.firstName} {conflict.person.lastName}</span>\n                        <span className=\"bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full\">\n                          Duplicato + Azienda non valida\n                        </span>\n                      </h4>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mb-4\">\n                      {/* Problema duplicato */}\n                      <div className=\"border border-blue-200 rounded p-3 bg-blue-50\">\n                        <h5 className=\"font-medium text-blue-900 mb-2\">🔄 Duplicato Codice Fiscale</h5>\n                        <div className=\"text-sm space-y-1\">\n                          <p><strong>CF:</strong> {conflict.person.taxCode}</p>\n                          <p><strong>Esistente:</strong> {conflict.existingPerson?.firstName} {conflict.existingPerson?.lastName}</p>\n                        </div>\n                      </div>\n\n                      {/* Problema azienda */}\n                      <div className=\"border border-orange-200 rounded p-3 bg-orange-50\">\n                        <h5 className=\"font-medium text-orange-900 mb-2\">🏢 Azienda Non Trovata</h5>\n                        <div className=\"text-sm space-y-1\">\n                          <p><strong>Cercata:</strong> \"{conflict.person.companyName}\"</p>\n                          {conflict.suggestedCompanies && conflict.suggestedCompanies.length > 0 && (\n                            <p><strong>Suggerita:</strong> {conflict.suggestedCompanies[0].ragioneSociale || conflict.suggestedCompanies[0].name}</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Suggerimenti automatici per azienda */}\n                    {conflict.suggestedCompanies && conflict.suggestedCompanies.length > 0 && (\n                      <div className=\"mb-4\">\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Aziende simili trovate:</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {conflict.suggestedCompanies.map(company => (\n                            <button\n                              key={company.id}\n                              onClick={() => handleCompanySelect(conflict.index, company)}\n                              className={`px-3 py-1 text-sm rounded-full border transition-colors ${\n                                resolutions[conflict.index]?.companyId === company.id\n                                  ? 'bg-blue-100 border-blue-300 text-blue-700'\n                                  : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                              }`}\n                            >\n                              {company.ragioneSociale || company.name}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Ricerca aziende */}\n                    <div className=\"mb-4\">\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                        <input\n                          type=\"text\"\n                          placeholder=\"Cerca un'azienda...\"\n                          value={searchTerms[conflict.index] || ''}\n                          onChange={(e) => setSearchTerms(prev => ({\n                            ...prev,\n                            [conflict.index]: e.target.value\n                          }))}\n                          className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        />\n                      </div>\n                      \n                      {searchTerms[conflict.index] && (\n                        <div className=\"mt-2 max-h-40 overflow-y-auto border border-gray-200 rounded-lg\">\n                          {getFilteredCompanies(searchTerms[conflict.index]).map(company => (\n                            <button\n                              key={company.id}\n                              onClick={() => handleCompanySelect(conflict.index, company)}\n                              className={`w-full text-left px-3 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0 ${\n                                resolutions[conflict.index]?.companyId === company.id\n                                  ? 'bg-blue-50 text-blue-700'\n                                  : 'text-gray-700'\n                              }`}\n                            >\n                              {company.ragioneSociale || company.name}\n                            </button>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Azioni */}\n                    <div className=\"space-y-2\">\n                      <label className=\"flex items-center\">\n                        <input\n                          type=\"radio\"\n                          name={`multiple-${conflict.index}`}\n                          checked={resolutions[conflict.index]?.action === 'skip'}\n                          onChange={() => updateResolution(conflict.index, { action: 'skip' })}\n                          className=\"mr-2\"\n                        />\n                        Salta questa persona (mantieni esistente)\n                      </label>\n                      <label className=\"flex items-center\">\n                        <input\n                          type=\"radio\"\n                          name={`multiple-${conflict.index}`}\n                          checked={resolutions[conflict.index]?.action === 'overwrite'}\n                          onChange={() => updateResolution(conflict.index, { action: 'overwrite' })}\n                          className=\"mr-2\"\n                        />\n                        Sovrascrivi duplicato con dati CSV (richiede azienda valida)\n                      </label>\n                      {resolutions[conflict.index]?.companyId && (\n                        <label className=\"flex items-center\">\n                          <input\n                            type=\"radio\"\n                            name={`multiple-${conflict.index}`}\n                            checked={resolutions[conflict.index]?.action === 'assign_company'}\n                            onChange={() => updateResolution(conflict.index, { action: 'assign_company' })}\n                            className=\"mr-2\"\n                          />\n                          Sovrascrivi e assegna a: {resolutions[conflict.index]?.companyName}\n                        </label>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Aziende non valide */}\n          {companyConflicts.length > 0 && (\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Building2 className=\"h-5 w-5 text-orange-500\" />\n                <h3 className=\"text-lg font-medium text-gray-900\">\n                  Aziende Non Trovate ({companyConflicts.length})\n                </h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {companyConflicts.map(conflict => (\n                  <div key={conflict.index} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"mb-4\">\n                      <h4 className=\"font-medium text-gray-900\">\n                        {conflict.person.firstName} {conflict.person.lastName}\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Azienda cercata: <span className=\"font-medium text-red-600\">\"{conflict.person.companyName}\"</span>\n                      </p>\n                    </div>\n\n                    {/* Suggerimenti automatici */}\n                    {conflict.suggestedCompanies && conflict.suggestedCompanies.length > 0 && (\n                      <div className=\"mb-4\">\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Aziende simili trovate:</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {conflict.suggestedCompanies.map(company => (\n                            <button\n                              key={company.id}\n                              onClick={() => handleCompanySelect(conflict.index, company)}\n                              className={`px-3 py-1 text-sm rounded-full border transition-colors ${\n                                resolutions[conflict.index]?.companyId === company.id\n                                  ? 'bg-blue-100 border-blue-300 text-blue-700'\n                                  : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                              }`}\n                            >\n                              {company.ragioneSociale || company.name}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Ricerca aziende */}\n                    <div className=\"mb-4\">\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                        <input\n                          type=\"text\"\n                          placeholder=\"Cerca un'azienda...\"\n                          value={searchTerms[conflict.index] || ''}\n                          onChange={(e) => setSearchTerms(prev => ({\n                            ...prev,\n                            [conflict.index]: e.target.value\n                          }))}\n                          className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        />\n                      </div>\n                      \n                      {searchTerms[conflict.index] && (\n                        <div className=\"mt-2 max-h-40 overflow-y-auto border border-gray-200 rounded-lg\">\n                          {getFilteredCompanies(searchTerms[conflict.index]).map(company => (\n                            <button\n                              key={company.id}\n                              onClick={() => handleCompanySelect(conflict.index, company)}\n                              className={`w-full text-left px-3 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0 ${\n                                resolutions[conflict.index]?.companyId === company.id\n                                  ? 'bg-blue-50 text-blue-700'\n                                  : 'text-gray-700'\n                              }`}\n                            >\n                              {company.ragioneSociale || company.name}\n                            </button>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Azioni */}\n                    <div className=\"flex space-x-3\">\n                      <label className=\"flex items-center\">\n                        <input\n                          type=\"radio\"\n                          name={`company-${conflict.index}`}\n                          checked={resolutions[conflict.index]?.action === 'skip'}\n                          onChange={() => updateResolution(conflict.index, { action: 'skip' })}\n                          className=\"mr-2\"\n                        />\n                        Salta questa persona\n                      </label>\n                      {resolutions[conflict.index]?.companyId && (\n                        <label className=\"flex items-center\">\n                          <input\n                            type=\"radio\"\n                            name={`company-${conflict.index}`}\n                            checked={resolutions[conflict.index]?.action === 'assign_company'}\n                            onChange={() => updateResolution(conflict.index, { action: 'assign_company' })}\n                            className=\"mr-2\"\n                          />\n                          Assegna a: {resolutions[conflict.index]?.companyName}\n                        </label>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50\">\n          <div className=\"text-sm text-gray-600\">\n            {Object.values(resolutions).filter(r => r.action !== 'skip').length} conflitti risolti\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"secondary\"\n              onClick={onClose}\n            >\n              Annulla\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={handleConfirm}\n            >\n              Applica Risoluzioni\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PersonImportConflictModal;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/import/ConflictResolutionPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/import/SearchableSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/person-import/PersonImportRefactored.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[917,920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[917,920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1010,1013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1010,1013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1039,1042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1039,1042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1319,1322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1319,1322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2632,2635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2632,2635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":78,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":103,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'companyOptions' is assigned a value but never used.","line":107,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":23}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Componente PersonImport refactorizzato - Versione modulare e ottimizzata\n * \n * Questo componente è stato refactorizzato per migliorare:\n * - Manutenibilità: Codice diviso in moduli specializzati\n * - Leggibilità: Logica separata per responsabilità\n * - Testabilità: Funzioni pure e componenti isolati\n * - Performance: Ottimizzazione delle operazioni sui dati\n */\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport ImportModal from '../../shared/modals/ImportModal';\nimport PersonImportConflictModal from '../PersonImportConflictModal';\n\n// Import dei moduli specializzati\nimport { PREVIEW_COLUMNS } from './constants';\nimport { validatePersons } from './validationUtils';\nimport { ConflictInfo } from './conflictUtils';\nimport { \n  processPersonImportFile, \n  prepareDataForImport, \n  formatPersonsForAPI \n} from './dataProcessing';\n\ninterface PersonImportProps {\n  onImport: (persons: any[], overwriteIds?: string[]) => Promise<void>;\n  onClose: () => void;\n  existingPersons?: any[];\n  existingCompanies?: any[];\n  onRefreshData?: () => Promise<void>;\n}\n\nconst PersonImportRefactored: React.FC<PersonImportProps> = ({\n  onImport,\n  onClose,\n  existingPersons = [],\n  existingCompanies = [],\n  onRefreshData\n}) => {\n  // State management\n  const [previewData, setPreviewData] = useState<any[]>([]);\n  const [conflicts, setConflicts] = useState<{ [index: number]: ConflictInfo }>({});\n  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());\n\n  // Inizializza tutte le righe come selezionate quando cambiano i dati di preview\n  useEffect(() => {\n    if (previewData.length > 0) {\n      setSelectedRows(new Set(Array.from({ length: previewData.length }, (_, i) => i)));\n    }\n  }, [previewData]);\n\n  // Gestore per il cambio di selezione delle righe\n  const handleRowSelectionChange = (newSelectedRows: Set<number>) => {\n    setSelectedRows(newSelectedRows);\n  };\n\n  // Funzione personalizzata per processare il file\n  const customProcessFile = useCallback(async (file: File) => {\n    const result = await processPersonImportFile(file, existingCompanies, existingPersons);\n    \n    setConflicts(result.conflicts);\n    setPreviewData(result.data);\n    setSelectedRows(result.selectedRows);\n    \n    return result.data;\n  }, [existingCompanies, existingPersons]);\n\n  // Aggiorna la risoluzione di un conflitto\n  const updateConflictResolution = (index: number, resolution: Partial<ConflictInfo>) => {\n    setConflicts(prev => ({\n      ...prev,\n      [index]: { ...prev[index], ...resolution }\n    }));\n  };\n\n  // Gestione dell'import\n  const handleImport = useCallback(async (persons: any[], overwriteIds?: string[], importSelectedRows?: Set<number>) => {\n    try {\n      // Usa le righe selezionate passate dal modal, con fallback allo state locale\n      const activeSelectedRows = importSelectedRows || selectedRows;\n      \n      // Prepara i dati applicando le risoluzioni dei conflitti\n      const { resolvedPersons, finalOverwriteIds } = prepareDataForImport(\n        persons,\n        conflicts,\n        activeSelectedRows,\n        overwriteIds\n      );\n\n      // Formatta i dati per l'API\n      const formattedPersons = formatPersonsForAPI(resolvedPersons);\n\n      await onImport(formattedPersons, finalOverwriteIds);\n      \n      // Aggiorna i dati esistenti dopo l'importazione per rilevare nuovi duplicati\n      if (onRefreshData) {\n        await onRefreshData();\n      }\n      \n      onClose();\n    } catch (error) {\n      throw error;\n    }\n  }, [conflicts, selectedRows, onImport, onClose, onRefreshData]);\n\n  // Opzioni per le aziende\n  const companyOptions = existingCompanies.map(company => ({\n    value: company.id,\n    label: company.ragioneSociale || company.name || 'Azienda senza nome'\n  }));\n\n  // Gestione dell'assegnazione delle aziende tramite dropdown\n  const handleCompanyChange = useCallback((selectedRowIds: string[], companyId: string) => {\n    // Trova l'azienda selezionata\n    const selectedCompany = existingCompanies.find(c => c.id === companyId);\n    if (!selectedCompany) {\n      return;\n    }\n    \n    const companyName = selectedCompany.ragioneSociale || selectedCompany.name;\n    \n    // Aggiorna i dati di preview per le righe selezionate\n    setPreviewData(prevData => {\n      const newData = [...prevData];\n      \n      selectedRowIds.forEach(rowIdStr => {\n        const rowIndex = parseInt(rowIdStr);\n        \n        if (rowIndex >= 0 && rowIndex < newData.length) {\n          newData[rowIndex] = {\n            ...newData[rowIndex],\n            companyId: companyId,\n            companyName: companyName\n          };\n          \n          // Rimuovi eventuali conflitti di azienda non valida per questa riga\n          if (conflicts[rowIndex] && conflicts[rowIndex].type === 'invalid_company') {\n            setConflicts(prevConflicts => {\n              const newConflicts = { ...prevConflicts };\n              delete newConflicts[rowIndex];\n              return newConflicts;\n            });\n          }\n        }\n      });\n      \n      return newData;\n    });\n  }, [existingCompanies, conflicts]);\n\n  // Controlli extra per il modal (vuoti come richiesto)\n  const extraControls = (\n    <div className=\"mb-4\">\n      {/* Sezione rimossa come richiesto dall'utente */}\n    </div>\n  );\n\n  return (\n    <>\n      <ImportModal\n        title=\"Importa Persone\"\n        subtitle=\"Carica un file CSV per importare le persone nel sistema\"\n        onImport={handleImport}\n        onClose={onClose}\n        processFile={customProcessFile}\n        uniqueKey=\"taxCode\"\n        existingData={existingPersons}\n        previewColumns={PREVIEW_COLUMNS}\n        validateRows={validatePersons}\n        supportedFormats={['.csv']}\n        formatsMessage=\"Formato supportato: CSV (separatore punto e virgola)\"\n        showBulkSelectButtons={true}\n        extraControls={extraControls}\n        hidePreviewTable={false}\n        useSingleCheckboxColumn={false}\n        initialPreviewData={previewData}\n        conflicts={conflicts}\n        onConflictResolutionChange={updateConflictResolution}\n        selectedRows={selectedRows}\n        onRowSelectionChange={handleRowSelectionChange}\n        availableCompanies={existingCompanies}\n        onCompanyChange={handleCompanyChange}\n      />\n      \n      {/* Modal per gestire i conflitti di duplicati */}\n      {Object.keys(conflicts).length > 0 && (\n        <PersonImportConflictModal\n          isOpen={Object.keys(conflicts).length > 0}\n          conflicts={Object.entries(conflicts).map(([index, conflictInfo]) => ({\n            person: previewData[parseInt(index)],\n            index: parseInt(index),\n            type: conflictInfo.type,\n            existingPerson: conflictInfo.existingPerson,\n            suggestedCompanies: conflictInfo.suggestedCompanies\n          }))}\n          onResolve={(resolutions) => {\n            // Converte le risoluzioni dal formato del modal al formato interno\n            resolutions.forEach(resolution => {\n              updateConflictResolution(resolution.index, {\n                resolution: resolution.action,\n                selectedCompanyId: resolution.companyId,\n                selectedCompanyName: resolution.companyName\n              });\n            });\n          }}\n          onClose={() => {\n            // Chiudi il modal dei conflitti ma mantieni aperto l'ImportModal\n          }}\n          existingCompanies={existingCompanies}\n        />\n      )}\n    </>\n  );\n};\n\nexport default PersonImportRefactored;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/person-import/SearchableSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/person-import/conflictUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168,171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168,171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[196,199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[196,199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[419,422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[419,422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[446,449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[446,449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[475,478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[475,478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4419,4422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4419,4422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility per la gestione dei conflitti nell'importazione persone\n */\n\nexport interface ConflictInfo {\n  type: 'duplicate' | 'invalid_company';\n  existingPerson?: any;\n  suggestedCompanies?: any[];\n  resolution?: 'skip' | 'overwrite' | 'assign_company';\n  selectedCompanyId?: string;\n  selectedCompanyName?: string;\n}\n\n/**\n * Rileva conflitti nei dati delle persone\n */\nexport const detectConflicts = (\n  persons: any[], \n  existingPersons: any[], \n  existingCompanies: any[]\n): { [index: number]: ConflictInfo } => {\n  const detectedConflicts: { [index: number]: ConflictInfo } = {};\n  \n  persons.forEach((person, index) => {\n    // Controlla duplicati di codice fiscale\n    if (person.taxCode) {\n      const existingPerson = existingPersons.find(ep => \n        ep.taxCode && ep.taxCode.toLowerCase().trim() === person.taxCode.toLowerCase().trim()\n      );\n      \n      if (existingPerson) {\n        detectedConflicts[index] = {\n          type: 'duplicate',\n          existingPerson: {\n            id: existingPerson.id,\n            firstName: existingPerson.firstName,\n            lastName: existingPerson.lastName,\n            email: existingPerson.email,\n            phone: existingPerson.phone,\n            taxCode: existingPerson.taxCode,\n            birthDate: existingPerson.birthDate,\n            address: existingPerson.address,\n            city: existingPerson.city,\n            province: existingPerson.province,\n            postalCode: existingPerson.postalCode,\n            roleType: existingPerson.personRoles?.[0]?.roleType || 'N/A',\n            companyName: existingPerson.company?.ragioneSociale || existingPerson.company?.name || 'N/A'\n          }\n          // Rimuovo la risoluzione automatica 'skip' per permettere all'utente di scegliere\n        };\n      }\n    }\n    \n    // Controlla aziende non valide\n    if (person.companyName && !person.companyId) {\n      // Trova aziende simili\n      const suggestedCompanies = existingCompanies.filter(c => {\n        const companyName = c.ragioneSociale || c.name || '';\n        return companyName.toLowerCase().includes(person.companyName.toLowerCase()) ||\n               person.companyName.toLowerCase().includes(companyName.toLowerCase());\n      });\n      \n      detectedConflicts[index] = {\n        type: 'invalid_company',\n        suggestedCompanies,\n        resolution: suggestedCompanies.length > 0 ? 'assign_company' : 'skip',\n        selectedCompanyId: suggestedCompanies.length > 0 ? suggestedCompanies[0].id : undefined,\n        selectedCompanyName: suggestedCompanies.length > 0 ? (suggestedCompanies[0].ragioneSociale || suggestedCompanies[0].name) : undefined\n      };\n    }\n  });\n  \n  return detectedConflicts;\n};\n\n/**\n * Risolve automaticamente tutti i duplicati con l'azione specificata\n */\nexport const resolveAllDuplicates = (\n  conflicts: { [index: number]: ConflictInfo },\n  action: 'skip' | 'overwrite'\n): { [index: number]: ConflictInfo } => {\n  const updated = { ...conflicts };\n  Object.keys(updated).forEach(indexStr => {\n    const index = parseInt(indexStr);\n    if (updated[index] && updated[index].type === 'duplicate') {\n      updated[index] = { ...updated[index], resolution: action };\n    }\n  });\n  return updated;\n};\n\n/**\n * Risolve automaticamente tutte le aziende non valide con l'azione specificata\n */\nexport const resolveAllInvalidCompanies = (\n  conflicts: { [index: number]: ConflictInfo },\n  action: 'skip' | 'assign_first'\n): { [index: number]: ConflictInfo } => {\n  const updated = { ...conflicts };\n  Object.keys(updated).forEach(indexStr => {\n    const index = parseInt(indexStr);\n    if (updated[index] && updated[index].type === 'invalid_company') {\n      if (action === 'skip') {\n        updated[index] = { ...updated[index], resolution: 'skip' };\n      } else if (action === 'assign_first' && updated[index].suggestedCompanies && updated[index].suggestedCompanies!.length > 0) {\n        const firstCompany = updated[index].suggestedCompanies![0];\n        updated[index] = { \n          ...updated[index], \n          resolution: 'assign_company',\n          selectedCompanyId: firstCompany.id,\n          selectedCompanyName: firstCompany.ragioneSociale || firstCompany.name\n        };\n      }\n    }\n  });\n  return updated;\n};\n\n/**\n * Converte i conflitti dal formato interno al formato del modal\n */\nexport const convertConflictsForModal = (\n  conflicts: { [index: number]: ConflictInfo },\n  previewData: any[]\n) => {\n  return Object.entries(conflicts).map(([index, conflict]) => ({\n    person: previewData[parseInt(index)],\n    index: parseInt(index),\n    type: conflict.type,\n    existingPerson: conflict.existingPerson,\n    suggestedCompanies: conflict.suggestedCompanies || []\n  }));\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/person-import/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/person-import/dataProcessing.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[660,663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[660,663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[686,689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[686,689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[713,716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[713,716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1132,1135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1132,1135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1290,1293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1290,1293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3339,3342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3339,3342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3477,3480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3477,3480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3547,3550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3547,3550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5165,5168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5165,5168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5173,5176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5173,5176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5238,5241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5238,5241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility per il processamento dei dati nell'importazione persone\n */\n\nimport { defaultProcessFile } from '../../shared/GenericImport';\nimport { applyTitleCaseToFields } from '../../../utils/textFormatters';\nimport { extractBirthDateFromTaxCode } from './dateUtils';\nimport { detectConflicts, ConflictInfo } from './conflictUtils';\nimport { normalizePersonStatus } from './validationUtils';\nimport { formatDateForAPI } from './dateUtils';\nimport { CSV_HEADER_MAP, TITLE_CASE_FIELDS } from './constants';\n\n/**\n * Processa il file CSV e prepara i dati per l'importazione\n */\nexport const processPersonImportFile = async (\n  file: File,\n  existingCompanies: any[],\n  existingPersons: any[]\n): Promise<{\n  data: any[];\n  conflicts: { [index: number]: ConflictInfo };\n  selectedRows: Set<number>;\n}> => {\n  // Prima processa il file con la funzione standard\n  const data = await defaultProcessFile(file, CSV_HEADER_MAP, ';');\n  \n  if (data.length === 0) {\n    return { data: [], conflicts: {}, selectedRows: new Set() };\n  }\n  \n  // Applica Title Case ai campi specificati per ogni persona\n  const processedData = data.map((person: any) => \n    applyTitleCaseToFields(person, TITLE_CASE_FIELDS)\n  );\n  \n  // Risolvi i nomi delle aziende in ID\n  const finalData = processedData.map((person: any) => {\n    // Normalizza il codice fiscale\n    if (person.taxCode) {\n      person.taxCode = person.taxCode.toUpperCase().trim();\n    }\n    \n    // Se c'è un codice fiscale ma non una data di nascita, prova a estrarla\n    if (person.taxCode && !person.birthDate) {\n      const extractedDate = extractBirthDateFromTaxCode(person.taxCode);\n      if (extractedDate) {\n        person.birthDate = extractedDate;\n      }\n    }\n    \n    if (person.companyName && typeof person.companyName === 'string') {\n      const company = existingCompanies.find(c => \n        (c.ragioneSociale && c.ragioneSociale.toLowerCase().trim() === person.companyName.toLowerCase().trim()) ||\n        (c.name && c.name.toLowerCase().trim() === person.companyName.toLowerCase().trim())\n      );\n      \n      if (company) {\n        person.companyId = company.id;\n        person.companyName = company.ragioneSociale || company.name;\n      } else {\n        // NON assegnare companyId se non trovato - questo dovrebbe attivare il conflict detection\n        person.companyId = undefined;\n      }\n    }\n    \n    return person;\n  });\n  \n  // Rileva conflitti\n  const detectedConflicts = detectConflicts(finalData, existingPersons, existingCompanies);\n  \n  // Deseleziona automaticamente le righe con conflitti di duplicato\n  let selectedRows: Set<number>;\n  if (Object.keys(detectedConflicts).length > 0) {\n    selectedRows = new Set<number>();\n    finalData.forEach((_, index) => {\n      const conflict = detectedConflicts[index];\n      // Seleziona solo le righe senza conflitti di duplicato\n      if (!conflict || conflict.type !== 'duplicate') {\n        selectedRows.add(index);\n      }\n    });\n  } else {\n    // Se non ci sono conflitti, seleziona tutte le righe\n    selectedRows = new Set(Array.from({ length: finalData.length }, (_, i) => i));\n  }\n  \n  return {\n    data: finalData,\n    conflicts: detectedConflicts,\n    selectedRows\n  };\n};\n\n/**\n * Prepara i dati per l'importazione applicando le risoluzioni dei conflitti\n */\nexport const prepareDataForImport = (\n  persons: any[],\n  conflicts: { [index: number]: ConflictInfo },\n  selectedRows: Set<number>,\n  overwriteIds: string[] = []\n): {\n  resolvedPersons: any[];\n  finalOverwriteIds: string[];\n} => {\n  const resolvedPersons: any[] = [];\n  const finalOverwriteIds = [...overwriteIds];\n  \n  // Itera attraverso tutte le persone per applicare le risoluzioni dei conflitti\n  persons.forEach((person, index) => {\n    // Se la riga non è selezionata, saltala\n    if (!selectedRows.has(index)) {\n      return;\n    }\n    \n    const conflict = conflicts[index];\n    \n    // Se non c'è conflitto, aggiungi la persona\n    if (!conflict) {\n      resolvedPersons.push(person);\n      return;\n    }\n\n    // Gestione dei duplicati\n    if (conflict.type === 'duplicate') {\n      if (!conflict.resolution) {\n        return; // Salta questo duplicato\n      }\n      \n      if (conflict.resolution === 'skip') {\n        return; // Salta questo duplicato\n      }\n      \n      if (conflict.resolution === 'overwrite' && conflict.existingPerson) {\n        finalOverwriteIds.push(conflict.existingPerson.id);\n        resolvedPersons.push(person);\n        return;\n      }\n    }\n\n    // Gestione delle aziende non valide\n    if (conflict.type === 'invalid_company') {\n      if (conflict.resolution === 'skip') {\n        return; // Salta questa persona\n      }\n\n      if (conflict.resolution === 'assign_company' && conflict.selectedCompanyId) {\n        resolvedPersons.push({\n          ...person,\n          companyId: conflict.selectedCompanyId,\n          companyName: conflict.selectedCompanyName\n        });\n        return;\n      }\n    }\n\n    // Se arriviamo qui, c'è un conflitto non risolto - salta la persona\n  });\n\n  return { resolvedPersons, finalOverwriteIds };\n};\n\n/**\n * Formatta i dati delle persone per l'API\n */\nexport const formatPersonsForAPI = (persons: any[]): any[] => {\n  return persons.map(person => {\n    const formatted: any = {};\n    \n    // Copia tutti i campi necessari\n    ['firstName', 'lastName', 'email', 'phone', 'taxCode', 'birthDate',\n      'residenceAddress', 'city', 'province', 'postalCode', 'title', 'companyId', 'username', 'notes', 'status'].forEach(field => {\n      if (person[field] !== undefined && person[field] !== null && person[field] !== '') {\n        formatted[field] = person[field];\n      }\n    });\n\n    // Gestione speciale per il campo status\n    formatted.status = normalizePersonStatus(person.status);\n\n    // Formatta la data di nascita se presente\n    if (formatted.birthDate) {\n      formatted.birthDate = formatDateForAPI(formatted.birthDate);\n    }\n\n    // Assicurati che il roleType sia valido\n    if (!formatted.roleType) {\n      formatted.roleType = 'EMPLOYEE'; // Default\n    }\n\n    return formatted;\n  });\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/person-import/dateUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":122,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":200,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":235,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":235,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility per la gestione e formattazione delle date nell'importazione persone\n */\n\nimport { MONTH_MAP } from './constants';\n\n/**\n * Formatta una data per la visualizzazione (dd/mm/yyyy)\n */\nexport const formatDateForDisplay = (dateString: string): string => {\n  if (!dateString) return '';\n  \n  try {\n    let date: Date;\n    \n    // Se è già in formato dd/mm/yyyy, restituiscilo così com'è\n    if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString)) {\n      const parts = dateString.split('/');\n      const day = parseInt(parts[0]);\n      const month = parseInt(parts[1]);\n      const year = parseInt(parts[2]);\n      \n      // Verifica che sia una data valida\n      if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {\n        date = new Date(year, month - 1, day);\n        if (date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year) {\n          return dateString; // È già nel formato corretto\n        }\n      }\n    }\n    \n    // Se è in formato YYYY-MM-DD, convertilo\n    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\n      date = new Date(dateString);\n      if (!isNaN(date.getTime())) {\n        const day = date.getDate().toString().padStart(2, '0');\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const year = date.getFullYear();\n        return `${day}/${month}/${year}`;\n      }\n    }\n    \n    // Se è in formato dd-mm-yyyy, convertilo\n    if (/^\\d{1,2}-\\d{1,2}-\\d{4}$/.test(dateString)) {\n      const parts = dateString.split('-');\n      const day = parseInt(parts[0]);\n      const month = parseInt(parts[1]);\n      const year = parseInt(parts[2]);\n      \n      if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {\n        date = new Date(year, month - 1, day);\n        if (date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year) {\n          const dayStr = day.toString().padStart(2, '0');\n          const monthStr = month.toString().padStart(2, '0');\n          return `${dayStr}/${monthStr}/${year}`;\n        }\n      }\n    }\n    \n    // Fallback: prova a parsare come Date\n    date = new Date(dateString);\n    if (!isNaN(date.getTime())) {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    }\n    \n    return dateString; // Se non riesce a parsare, restituisce l'originale\n  } catch (error) {\n    console.warn(`Errore nella formattazione della data: ${dateString}`, error);\n    return dateString;\n  }\n};\n\n/**\n * Valida una data con supporto per più formati\n */\nexport const isValidDate = (dateString: string): boolean => {\n  if (!dateString) return false;\n  \n  try {\n    // Se è in formato dd/mm/yyyy\n    if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString)) {\n      const parts = dateString.split('/');\n      const day = parseInt(parts[0]);\n      const month = parseInt(parts[1]);\n      const year = parseInt(parts[2]);\n      \n      // Verifica che i valori siano validi\n      if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {\n        const date = new Date(year, month - 1, day);\n        // Verifica che la data creata corrisponda ai valori inseriti\n        return date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year;\n      }\n      return false;\n    }\n    \n    // Se è in formato YYYY-MM-DD\n    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\n      const date = new Date(dateString);\n      return !isNaN(date.getTime());\n    }\n    \n    // Se è in formato dd-mm-yyyy\n    if (/^\\d{1,2}-\\d{1,2}-\\d{4}$/.test(dateString)) {\n      const parts = dateString.split('-');\n      const day = parseInt(parts[0]);\n      const month = parseInt(parts[1]);\n      const year = parseInt(parts[2]);\n      \n      if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {\n        const date = new Date(year, month - 1, day);\n        return date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year;\n      }\n      return false;\n    }\n    \n    // Fallback: prova a parsare direttamente\n    const date = new Date(dateString);\n    return !isNaN(date.getTime());\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Formatta una data per l'API (YYYY-MM-DD)\n */\nexport const formatDateForAPI = (dateString: string): string => {\n  if (!dateString) return '';\n  \n  // Normalizza la stringa rimuovendo spazi extra\n  const cleanDateStr = dateString.toString().trim();\n  \n  // Prova diversi formati di data\n  const formats = [\n    /^\\d{4}-\\d{2}-\\d{2}$/, // YYYY-MM-DD (già nel formato corretto)\n    /^\\d{2}\\/\\d{2}\\/\\d{4}$/, // DD/MM/YYYY\n    /^\\d{2}-\\d{2}-\\d{4}$/, // DD-MM-YYYY\n    /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/, // D/M/YYYY o DD/M/YYYY\n    /^\\d{1,2}-\\d{1,2}-\\d{4}$/, // D-M-YYYY o DD-M-YYYY\n  ];\n\n  // Se è già nel formato YYYY-MM-DD, verifica che sia valido\n  if (formats[0].test(cleanDateStr)) {\n    const date = new Date(cleanDateStr);\n    if (!isNaN(date.getTime()) && date.getFullYear() >= 1900 && date.getFullYear() <= 2100) {\n      return cleanDateStr;\n    }\n  }\n\n  // Prova gli altri formati\n  for (let i = 1; i < formats.length; i++) {\n    const format = formats[i];\n    if (format.test(cleanDateStr)) {\n      let date: Date;\n      \n      if (cleanDateStr.includes('/')) {\n        const parts = cleanDateStr.split('/');\n        if (parts.length === 3) {\n          const day = parseInt(parts[0]);\n          const month = parseInt(parts[1]);\n          const year = parseInt(parts[2]);\n          \n          // Verifica che i valori siano validi\n          if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {\n            date = new Date(year, month - 1, day);\n            // Verifica che la data creata corrisponda ai valori inseriti\n            if (date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year) {\n              return date.toISOString().split('T')[0]; // Ritorna YYYY-MM-DD\n            }\n          }\n        }\n      } else if (cleanDateStr.includes('-')) {\n        // DD-MM-YYYY\n        const parts = cleanDateStr.split('-');\n        if (parts.length === 3) {\n          const day = parseInt(parts[0]);\n          const month = parseInt(parts[1]);\n          const year = parseInt(parts[2]);\n          \n          if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {\n            date = new Date(year, month - 1, day);\n            if (date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year) {\n              return date.toISOString().split('T')[0]; // Ritorna YYYY-MM-DD\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Fallback: prova a parsare direttamente\n  try {\n    const date = new Date(cleanDateStr);\n    if (!isNaN(date.getTime()) && date.getFullYear() >= 1900 && date.getFullYear() <= 2100) {\n      return date.toISOString().split('T')[0]; // Ritorna YYYY-MM-DD\n    }\n  } catch (error) {\n    console.warn(`Impossibile formattare la data: ${cleanDateStr}`);\n  }\n\n  return cleanDateStr; // Ritorna il valore originale se non può essere formattato\n};\n\n/**\n * Estrae la data di nascita dal codice fiscale\n */\nexport const extractBirthDateFromTaxCode = (taxCode: string): string | null => {\n  if (!taxCode || taxCode.length !== 16) return null;\n  \n  try {\n    const yearPart = taxCode.substring(6, 8);\n    const monthPart = taxCode.substring(8, 9);\n    const dayPart = taxCode.substring(9, 11);\n    \n    const month = MONTH_MAP[monthPart];\n    if (!month) return null;\n    \n    // Determina l'anno (assumendo che anni 00-30 siano 2000-2030, 31-99 siano 1931-1999)\n    const currentYear = new Date().getFullYear();\n    const currentCentury = Math.floor(currentYear / 100) * 100;\n    const year = parseInt(yearPart) <= 30 ? currentCentury + parseInt(yearPart) : currentCentury - 100 + parseInt(yearPart);\n    \n    // Per le donne, il giorno è aumentato di 40\n    let day = parseInt(dayPart);\n    if (day > 31) {\n      day -= 40;\n    }\n    \n    const dayStr = day.toString().padStart(2, '0');\n    \n    return `${year}-${month}-${dayStr}`;\n  } catch (error) {\n    return null;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/person-import/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/persons/person-import/validationUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[379,382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[379,382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1258,1261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1258,1261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2457,2460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2457,2460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility per la validazione dei dati delle persone nell'importazione\n */\n\nimport { isValidCodiceFiscale } from '../../../lib/utils';\nimport { isValidDate, extractBirthDateFromTaxCode, formatDateForDisplay } from './dateUtils';\nimport { VALID_PERSON_STATUSES } from './constants';\n\n/**\n * Valida una singola persona\n */\nexport const validatePerson = (person: Record<string, any>): string[] => {\n  const errors: string[] = [];\n\n  if (!person.firstName?.trim()) {\n    errors.push('Nome è obbligatorio');\n  }\n\n  if (!person.lastName?.trim()) {\n    errors.push('Cognome è obbligatorio');\n  }\n\n  if (!person.taxCode?.trim()) {\n    errors.push('Codice fiscale è obbligatorio');\n  } else if (!isValidCodiceFiscale(person.taxCode)) {\n    errors.push('Codice fiscale non valido (formato non corretto)');\n  }\n\n  // Email opzionale ma se presente deve essere valida\n  if (person.email?.trim() && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(person.email)) {\n    errors.push('Email non valida');\n  }\n\n  if (person.birthDate && !isValidDate(person.birthDate)) {\n    errors.push('Data di nascita non valida');\n  }\n\n  return errors;\n};\n\n/**\n * Validazione personalizzata che include l'estrazione della data di nascita\n */\nexport const validatePersons = (persons: Record<string, any>[]): { [rowIdx: number]: string[] } => {\n  const errors: { [rowIdx: number]: string[] } = {};\n  \n  persons.forEach((person, index) => {\n    // Controlla se è un template vuoto (tutti i campi obbligatori sono vuoti)\n    const isEmptyTemplate = !person.firstName?.trim() && \n                           !person.lastName?.trim() && \n                           !person.taxCode?.trim();\n    \n    // Se è un template vuoto, salta la validazione\n    if (isEmptyTemplate) {\n      return;\n    }\n    \n    // Se c'è un codice fiscale ma non una data di nascita, prova a estrarla\n    if (person.taxCode && !person.birthDate) {\n      const extractedDate = extractBirthDateFromTaxCode(person.taxCode);\n      if (extractedDate) {\n        person.birthDate = extractedDate;\n      }\n    }\n    \n    // Formatta la data di nascita per la visualizzazione\n    if (person.birthDate) {\n      person.birthDate = formatDateForDisplay(person.birthDate);\n    }\n    \n    const personErrors = validatePerson(person);\n    if (personErrors.length > 0) {\n      errors[index] = personErrors;\n    }\n  });\n  \n  return errors;\n};\n\n/**\n * Normalizza e valida lo status di una persona\n */\nexport const normalizePersonStatus = (status: any): string => {\n  if (status !== undefined) {\n    const statusValue = status?.toString().trim();\n    if (!statusValue || statusValue === '') {\n      return 'ACTIVE';\n    } else {\n      // Verifica che il valore sia uno dei valori validi dell'enum PersonStatus\n      const upperStatusValue = statusValue.toUpperCase();\n      if (VALID_PERSON_STATUSES.includes(upperStatusValue)) {\n        return upperStatusValue;\n      } else {\n        return 'ACTIVE';\n      }\n    }\n  } else {\n    // Se il campo status non è presente nel CSV, imposta il default\n    return 'ACTIVE';\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/ConsentBanner.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/ConsentBanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2160,2163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2160,2163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Cookie,\n  Settings,\n  X\n} from 'lucide-react';\nimport { PublicButton } from './PublicButton';\nimport { PublicBadge } from './PublicBadge';\n\ninterface CookiePreferences {\n  necessary: boolean;\n  analytics: boolean;\n  marketing: boolean;\n}\n\n/**\n * Consent Banner per il frontend pubblico\n * Gestisce consensi GDPR in modo elegante e poco invasivo\n */\nexport const ConsentBanner: React.FC = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [preferences, setPreferences] = useState<CookiePreferences>({\n    necessary: true, // Sempre true, non modificabile\n    analytics: false,\n    marketing: false\n  });\n\n  useEffect(() => {\n    // Controlla se l'utente ha già dato il consenso\n    const cookieConsent = localStorage.getItem('cookie-consent');\n    if (!cookieConsent) {\n      // Mostra il banner dopo un breve delay per non essere invasivo\n      const timer = setTimeout(() => {\n        setIsVisible(true);\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  const handleAcceptAll = () => {\n    const allAccepted = {\n      necessary: true,\n      analytics: true,\n      marketing: true,\n      timestamp: new Date().toISOString()\n    };\n    \n    localStorage.setItem('cookie-consent', JSON.stringify(allAccepted));\n    setIsVisible(false);\n    \n    // Qui potresti inizializzare i servizi di analytics/marketing\n    initializeServices(allAccepted);\n  };\n\n  const handleAcceptSelected = () => {\n    const selectedPreferences = {\n      ...preferences,\n      timestamp: new Date().toISOString()\n    };\n    \n    localStorage.setItem('cookie-consent', JSON.stringify(selectedPreferences));\n    setIsVisible(false);\n    \n    initializeServices(selectedPreferences);\n  };\n\n  const handleRejectAll = () => {\n    const onlyNecessary = {\n      necessary: true,\n      analytics: false,\n      marketing: false,\n      timestamp: new Date().toISOString()\n    };\n    \n    localStorage.setItem('cookie-consent', JSON.stringify(onlyNecessary));\n    setIsVisible(false);\n  };\n\n  const initializeServices = (consent: any) => {\n    // Qui inizializzeresti i servizi basati sui consensi\n    if (consent.analytics) {\n      // Inizializza Google Analytics, etc.\n      console.log('Analytics enabled');\n    }\n    if (consent.marketing) {\n      // Inizializza pixel di marketing, etc.\n      console.log('Marketing enabled');\n    }\n  };\n\n  const togglePreference = (key: keyof CookiePreferences) => {\n    if (key === 'necessary') return; // Non modificabile\n    \n    setPreferences(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 shadow-lg\">\n      <div className=\"container mx-auto px-4 py-4\">\n        {!showSettings ? (\n          // Banner principale\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"bg-gray-100 p-2 rounded-full\">\n                <Cookie className=\"w-6 h-6 text-gray-700 flex-shrink-0\" />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <h3 className=\"font-semibold text-gray-900\">\n                    Utilizziamo i cookie\n                  </h3>\n                  <PublicBadge variant=\"blue\" size=\"sm\">GDPR</PublicBadge>\n                </div>\n                <p className=\"text-sm text-gray-600 leading-relaxed\">\n                  Utilizziamo cookie tecnici necessari per il funzionamento del sito e, \n                  con il tuo consenso, cookie di analisi e marketing per migliorare i nostri servizi.\n                  <button \n                    onClick={() => setShowSettings(true)}\n                    className=\"text-gray-700 hover:text-gray-900 underline ml-1 font-medium\"\n                  >\n                    Personalizza le preferenze\n                  </button>\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-2 lg:flex-shrink-0\">\n              <PublicButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleRejectAll}\n                className=\"text-gray-600 border-gray-300 hover:bg-gray-50\"\n              >\n                Solo necessari\n              </PublicButton>\n              <PublicButton\n                variant=\"primary\"\n                size=\"sm\"\n                onClick={handleAcceptAll}\n              >\n                Accetta tutti\n              </PublicButton>\n            </div>\n          </div>\n        ) : (\n          // Pannello impostazioni\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"bg-gray-100 p-1.5 rounded-full\">\n                  <Settings className=\"w-5 h-5 text-gray-700\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900\">\n                  Preferenze Cookie\n                </h3>\n                <PublicBadge variant=\"gray\" size=\"sm\">Personalizza</PublicBadge>\n              </div>\n              <button\n                onClick={() => setShowSettings(false)}\n                className=\"p-1 text-gray-400 hover:text-gray-600\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {/* Cookie necessari */}\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900\">Cookie Necessari</h4>\n                  <p className=\"text-sm text-gray-600\">\n                    Essenziali per il funzionamento del sito\n                  </p>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"text-sm text-gray-500 mr-2\">Sempre attivi</span>\n                  <div className=\"w-10 h-6 bg-green-600 rounded-full flex items-center justify-end px-1\">\n                    <div className=\"w-4 h-4 bg-white rounded-full shadow-sm\"></div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Cookie analytics */}\n              <div className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900\">Cookie di Analisi</h4>\n                  <p className=\"text-sm text-gray-600\">\n                    Ci aiutano a migliorare il sito analizzando l'utilizzo\n                  </p>\n                </div>\n                <button\n                  onClick={() => togglePreference('analytics')}\n                  className={`w-10 h-6 rounded-full flex items-center transition-colors ${\n                    preferences.analytics \n                      ? 'bg-green-600 justify-end' \n                      : 'bg-gray-300 justify-start'\n                  }`}\n                >\n                  <div className=\"w-4 h-4 bg-white rounded-full mx-1 shadow-sm\"></div>\n                </button>\n              </div>\n              \n              {/* Cookie marketing */}\n              <div className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900\">Cookie di Marketing</h4>\n                  <p className=\"text-sm text-gray-600\">\n                    Per mostrarti contenuti personalizzati e pubblicità rilevante\n                  </p>\n                </div>\n                <button\n                  onClick={() => togglePreference('marketing')}\n                  className={`w-10 h-6 rounded-full flex items-center transition-colors ${\n                    preferences.marketing \n                      ? 'bg-green-600 justify-end' \n                      : 'bg-gray-300 justify-start'\n                  }`}\n                >\n                  <div className=\"w-4 h-4 bg-white rounded-full mx-1 shadow-sm\"></div>\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-2 pt-2\">\n              <PublicButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleRejectAll}\n                className=\"text-gray-600 border-gray-300 hover:bg-gray-50\"\n              >\n                Rifiuta tutti\n              </PublicButton>\n              <PublicButton\n                variant=\"primary\"\n                size=\"sm\"\n                onClick={handleAcceptSelected}\n                className=\"flex-1\"\n              >\n                Salva preferenze\n              </PublicButton>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ConsentBanner;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/ContactForm.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/ContactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/CourseCard.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { fn } from '@storybook/test';\nimport { BrowserRouter } from 'react-router-dom';\nimport { CourseCard } from './CourseCard';\n\n// Mock functions per le label\nconst mockGetRiskLevelLabel = (riskLevel: string) => {\n  switch (riskLevel) {\n    case 'ALTO':\n    case 'A':\n      return 'Rischio Alto';\n    case 'MEDIO':\n    case 'B':\n      return 'Rischio Medio';\n    case 'BASSO':\n    case 'C':\n      return 'Rischio Basso';\n    default:\n      return riskLevel;\n  }\n};\n\nconst mockGetCourseTypeLabel = (courseType: string) => {\n  switch (courseType) {\n    case 'PRIMO_CORSO':\n      return 'Primo Corso';\n    case 'AGGIORNAMENTO':\n      return 'Aggiornamento';\n    default:\n      return courseType;\n  }\n};\n\n// Mock course data\nconst mockCourse = {\n  id: '1',\n  title: 'Corso di Formazione per Lavoratori - Sicurezza Generale',\n  shortDescription: 'Corso di formazione generale per lavoratori secondo il D.Lgs. 81/08. Fornisce le conoscenze di base sui rischi e le misure di prevenzione negli ambienti di lavoro.',\n  category: 'Sicurezza sul Lavoro',\n  subcategory: 'Formazione Generale',\n  riskLevel: 'MEDIO' as const,\n  courseType: 'PRIMO_CORSO' as const,\n  duration: 8,\n  maxParticipants: 25,\n  image1Url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=300&fit=crop',\n  slug: 'corso-formazione-lavoratori-sicurezza-generale'\n};\n\nconst meta = {\n  title: 'Public/Molecules/CourseCard',\n  component: CourseCard,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'Card per visualizzare un corso nella pagina pubblica con design moderno e informazioni essenziali.',\n      },\n    },\n  },\n  decorators: [\n    (Story) => (\n      <BrowserRouter>\n        <div className=\"max-w-sm\">\n          <Story />\n        </div>\n      </BrowserRouter>\n    ),\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    course: {\n      description: 'Oggetto corso con tutte le informazioni necessarie',\n    },\n    getRiskLevelLabel: {\n      description: 'Funzione per ottenere la label del livello di rischio',\n    },\n    getCourseTypeLabel: {\n      description: 'Funzione per ottenere la label del tipo di corso',\n    },\n  },\n  args: {\n    getRiskLevelLabel: mockGetRiskLevelLabel,\n    getCourseTypeLabel: mockGetCourseTypeLabel,\n  },\n} satisfies Meta<typeof CourseCard>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Story principale\nexport const Default: Story = {\n  args: {\n    course: mockCourse,\n  },\n};\n\n// Varianti per livello di rischio\nexport const RischioAlto: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      title: 'Corso Sicurezza Cantieri - Rischio Alto',\n      riskLevel: 'ALTO',\n      category: 'Edilizia',\n      subcategory: 'Cantieri',\n    },\n  },\n};\n\nexport const RischioBasso: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      title: 'Corso Sicurezza Uffici - Rischio Basso',\n      riskLevel: 'BASSO',\n      category: 'Uffici',\n      subcategory: 'Amministrativo',\n    },\n  },\n};\n\n// Varianti per tipo di corso\nexport const Aggiornamento: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      title: 'Aggiornamento Sicurezza Lavoratori',\n      courseType: 'AGGIORNAMENTO',\n      duration: 6,\n    },\n  },\n};\n\n// Varianti per sistema di classificazione A/B/C\nexport const RischioA: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      title: 'Corso Sicurezza - Classificazione A',\n      riskLevel: 'A',\n      category: 'Industria',\n    },\n  },\n};\n\nexport const RischioB: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      title: 'Corso Sicurezza - Classificazione B',\n      riskLevel: 'B',\n      category: 'Commercio',\n    },\n  },\n};\n\nexport const RischioC: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      title: 'Corso Sicurezza - Classificazione C',\n      riskLevel: 'C',\n      category: 'Servizi',\n    },\n  },\n};\n\n// Senza immagine\nexport const SenzaImmagine: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      image1Url: undefined,\n      title: 'Corso senza Immagine di Copertina',\n    },\n  },\n};\n\n// Senza sottocategoria\nexport const SenzaSottocategoria: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      subcategory: undefined,\n      title: 'Corso senza Sottocategoria',\n    },\n  },\n};\n\n// Titolo lungo\nexport const TitoloLungo: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      title: 'Corso di Formazione Completo per Lavoratori sulla Sicurezza nei Luoghi di Lavoro con Approfondimenti Specifici',\n      shortDescription: 'Descrizione molto lunga che dovrebbe essere troncata dopo tre righe per mantenere un layout consistente e leggibile in tutte le card dei corsi. Questo testo serve per testare il comportamento del componente con contenuti più lunghi del normale.',\n    },\n  },\n};\n\n// Corso con durata lunga\nexport const DurataLunga: Story = {\n  args: {\n    course: {\n      ...mockCourse,\n      title: 'Corso Intensivo di Specializzazione',\n      duration: 40,\n      maxParticipants: 12,\n    },\n  },\n};\n\n// Grid di card (esempio di utilizzo)\nexport const GridExample: Story = {\n  args: {\n    course: mockCourse,\n  },\n  render: (args) => (\n    <BrowserRouter>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6 bg-gray-50\">\n        <CourseCard {...args} />\n        <CourseCard \n          {...args} \n          course={{\n            ...args.course,\n            id: '2',\n            title: 'Corso RSPP - Responsabile Servizio Prevenzione',\n            riskLevel: 'ALTO',\n            courseType: 'PRIMO_CORSO',\n            category: 'RSPP',\n            duration: 48,\n          }}\n        />\n        <CourseCard \n          {...args} \n          course={{\n            ...args.course,\n            id: '3',\n            title: 'Aggiornamento Primo Soccorso',\n            riskLevel: 'BASSO',\n            courseType: 'AGGIORNAMENTO',\n            category: 'Primo Soccorso',\n            duration: 4,\n            image1Url: undefined,\n          }}\n        />\n      </div>\n    </BrowserRouter>\n  ),\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        story: 'Esempio di utilizzo delle card in una griglia responsive.',\n      },\n    },\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/CourseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/GroupedCourseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/HeroSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicButton.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicFooter.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicHeader.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicLayout.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/PublicLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/ServiceCard.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/ServiceCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/public/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/AdvancedPermissionManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EntityField' is defined but never used.","line":26,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[645,648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[645,648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2893,2896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2893,2896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6125,6128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6125,6128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasPermission' is assigned a value but never used.","line":176,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6315,6318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6315,6318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7665,7668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7665,7668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":260,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9449,9452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9449,9452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { \n  BookOpen,\n  Building,\n  Building2,\n  Check,\n  ChevronRight,\n  Database,\n  Edit,\n  Eye,\n  FileText,\n  Filter,\n  Globe,\n  Layers,\n  Lock,\n  MessageSquare,\n  RefreshCw,\n  Save,\n  Search,\n  Shield,\n  Trash2,\n  TreePine,\n  X\n} from 'lucide-react';\nimport { advancedPermissionsService } from '../../services/advancedPermissions';\nimport type { EntityDefinition, EntityPermission, EntityField } from '../../services/advancedPermissions';\n\ninterface Role {\n  type: string;\n  name: string;\n  description: string;\n  userCount: number;\n  isActive?: boolean;\n  persons?: any[];\n  permissions?: string[];\n}\n\ninterface AdvancedPermissionManagerProps {\n  selectedRole: Role | null;\n  onPermissionsChange: (permissions: EntityPermission[]) => void;\n}\n\nconst AdvancedPermissionManager: React.FC<AdvancedPermissionManagerProps> = ({\n  selectedRole,\n  onPermissionsChange\n}) => {\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [entities, setEntities] = useState<EntityDefinition[]>([]);\n  const [selectedEntity, setSelectedEntity] = useState<EntityDefinition | null>(null);\n  const [permissions, setPermissions] = useState<EntityPermission[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  // Definizione delle azioni CRUD ottimizzata\n  const actions = useMemo(() => [\n    { id: 'create', name: 'create', displayName: 'Creare', icon: Plus, color: 'text-green-600', bgColor: 'bg-green-50', borderColor: 'border-green-200' },\n    { id: 'read', name: 'read', displayName: 'Visualizzare', icon: Eye, color: 'text-blue-600', bgColor: 'bg-blue-50', borderColor: 'border-blue-200' },\n    { id: 'update', name: 'update', displayName: 'Modificare', icon: Edit, color: 'text-yellow-600', bgColor: 'bg-yellow-50', borderColor: 'border-yellow-200' },\n    { id: 'delete', name: 'delete', displayName: 'Eliminare', icon: Trash2, color: 'text-red-600', bgColor: 'bg-red-50', borderColor: 'border-red-200' }\n  ], []);\n\n  // Definizione degli scope ottimizzata\n  const scopes = useMemo(() => [\n    { id: 'all', name: 'all', displayName: 'Tutti i record', icon: Globe, description: 'Accesso a tutti i record del sistema', color: 'text-purple-600' },\n    { id: 'tenant', name: 'tenant', displayName: 'Solo del proprio tenant', icon: Building, description: 'Accesso limitato ai record del proprio tenant', color: 'text-blue-600' },\n    { id: 'own', name: 'own', displayName: 'Solo i propri record', icon: User, description: 'Accesso limitato ai propri record', color: 'text-green-600' }\n  ], []);\n\n  // Mappa delle icone per le entità ottimizzata\n  const entityIcons: Record<string, React.ComponentType<any>> = useMemo(() => ({\n    persons: Users,\n    companies: Building2,\n    courses: BookOpen,\n    trainings: Calendar,\n    roles: Shield,\n    hierarchy: TreePine,\n    documents: Database,\n    sites: Building,\n    reparti: Layers,\n    form_templates: FileText,\n    form_submissions: MessageSquare,\n    public_cms: Globe,\n    templates: FileText\n  }), []);\n\n  // Funzione per ottenere l'icona dell'entità\n  const getEntityIcon = useCallback((entityName: string) => {\n    return entityIcons[entityName] || Settings;\n  }, [entityIcons]);\n\n  // Entità filtrate per la ricerca (memoizzata)\n  const filteredEntities = useMemo(() => {\n    return entities.filter(entity =>\n      entity.displayName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      entity.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [entities, searchTerm]);\n\n  // Statistiche permessi (memoizzate)\n  const permissionStats = useMemo(() => {\n    const totalEntities = entities.length;\n    const entitiesWithPermissions = new Set(permissions.map(p => p.entity)).size;\n    const totalPermissions = permissions.length;\n    \n    return {\n      totalEntities,\n      entitiesWithPermissions,\n      totalPermissions,\n      coverage: totalEntities > 0 ? Math.round((entitiesWithPermissions / totalEntities) * 100) : 0\n    };\n  }, [entities, permissions]);\n\n  // Carica le entità disponibili\n  useEffect(() => {\n    const loadEntities = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const entityDefinitions = await advancedPermissionsService.getEntityDefinitions();\n        \n        // Aggiungo le icone alle entità\n        const entitiesWithIcons = entityDefinitions.map(entity => ({\n          ...entity,\n          icon: getEntityIcon(entity.name)\n        }));\n        \n        setEntities(entitiesWithIcons);\n        \n        // Seleziona automaticamente la prima entità se non ce n'è una selezionata\n        if (entitiesWithIcons.length > 0 && !selectedEntity) {\n          setSelectedEntity(entitiesWithIcons[0]);\n        }\n      } catch (error) {\n        console.error('Error loading entities:', error);\n        setError('Errore nel caricamento delle entità');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadEntities();\n  }, [selectedEntity, getEntityIcon]);\n\n  // Carica i permessi del ruolo selezionato\n  useEffect(() => {\n    const loadRolePermissions = async () => {\n      if (!selectedRole?.type) {\n        setPermissions([]);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        const rolePermissions = await advancedPermissionsService.getRolePermissions(selectedRole.type);\n        setPermissions(rolePermissions);\n      } catch (error) {\n        console.error('Error loading role permissions:', error);\n        setError('Errore nel caricamento dei permessi del ruolo');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadRolePermissions();\n  }, [selectedRole]);\n\n  // Funzioni di utilità per gestire i permessi (ottimizzate con useCallback)\n  const getPermission = useCallback((entity: string, action: string): EntityPermission | undefined => {\n    return permissions.find(p => p.entity === entity && p.action === action as any);\n  }, [permissions]);\n\n  const hasPermission = useCallback((entity: string, action: string): boolean => {\n    return permissions.some(p => p.entity === entity && p.action === action as any);\n  }, [permissions]);\n\n  const updatePermission = useCallback(async (entity: string, action: string, scope: 'all' | 'tenant' | 'own' | 'none', fields?: string[]) => {\n    if (isUpdating) return; // Previeni click multipli\n    \n    setIsUpdating(true);\n    console.log('Permissions changed:', { entity, action, scope, fields });\n    \n    try {\n      if (scope === 'none') {\n        // Rimuovi il permesso se esiste\n        const newPermissions = permissions.filter(p => !(p.entity === entity && p.action === action));\n        setPermissions(newPermissions);\n        onPermissionsChange(newPermissions);\n        return;\n      }\n\n      const existingPermissionIndex = permissions.findIndex(p => p.entity === entity && p.action === action);\n      \n      if (existingPermissionIndex >= 0) {\n        // Aggiorna permesso esistente\n        const newPermissions = [...permissions];\n        newPermissions[existingPermissionIndex] = {\n          ...newPermissions[existingPermissionIndex],\n          scope: scope as 'all' | 'tenant' | 'own',\n          fields: fields || newPermissions[existingPermissionIndex].fields\n        };\n        setPermissions(newPermissions);\n        onPermissionsChange(newPermissions);\n      } else {\n        // Crea nuovo permesso\n        const newPermission: EntityPermission = {\n          entity,\n          action: action as any,\n          scope: scope as 'all' | 'tenant' | 'own',\n          fields: fields || []\n        };\n        const newPermissions = [...permissions, newPermission];\n        setPermissions(newPermissions);\n        onPermissionsChange(newPermissions);\n      }\n    } finally {\n      // Rilascia il lock dopo un breve delay per permettere l'aggiornamento del DOM\n      setTimeout(() => setIsUpdating(false), 100);\n    }\n  }, [permissions, onPermissionsChange, isUpdating]);\n\n  const toggleField = useCallback((entity: string, action: string, fieldId: string) => {\n    const permission = getPermission(entity, action);\n    if (!permission) return;\n\n    const currentFields = permission.fields || [];\n    const newFields = currentFields.includes(fieldId)\n      ? currentFields.filter(f => f !== fieldId)\n      : [...currentFields, fieldId];\n\n    updatePermission(entity, action, permission.scope, newFields);\n  }, [getPermission, updatePermission]);\n\n  const savePermissions = useCallback(async () => {\n    if (!selectedRole?.type) return;\n\n    try {\n      setSaving(true);\n      setError(null);\n      await advancedPermissionsService.updateRolePermissions(selectedRole.type, permissions);\n    } catch (error) {\n      console.error('Error saving permissions:', error);\n      setError('Errore nel salvataggio dei permessi');\n    } finally {\n      setSaving(false);\n    }\n  }, [selectedRole, permissions]);\n\n  // Funzione per applicare permessi rapidi\n  const applyQuickPermissions = useCallback((entity: string, permissionType: 'full' | 'readonly' | 'none') => {\n    const newPermissions = permissions.filter(p => p.entity !== entity);\n    \n    if (permissionType === 'full') {\n      actions.forEach(action => {\n        newPermissions.push({\n          entity,\n          action: action.name as any,\n          scope: 'all',\n          fields: []\n        });\n      });\n    } else if (permissionType === 'readonly') {\n      newPermissions.push({\n        entity,\n        action: 'read',\n        scope: 'all',\n        fields: []\n      });\n    }\n    \n    setPermissions(newPermissions);\n    onPermissionsChange(newPermissions);\n  }, [permissions, actions, onPermissionsChange]);\n\n  if (loading && entities.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-gray-600\">Caricamento...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 m-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <X className=\"h-5 w-5 text-red-500 mr-2\" />\n            <span className=\"text-red-700\">{error}</span>\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => window.location.reload()}\n            className=\"text-red-600 hover:text-red-800 p-1\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!selectedRole) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-gradient-to-br from-gray-50 to-blue-50\">\n        <div className=\"text-center p-8\">\n          <Shield className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Seleziona un ruolo</h3>\n          <p className=\"text-gray-600\">Scegli un ruolo dalla lista per gestire i permessi avanzati</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-white overflow-hidden\">\n      {/* Header ottimizzato con statistiche */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-2 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg\">\n              <Shield className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">\n                Gestione Permessi - {selectedRole.name}\n              </h2>\n              <div className=\"flex items-center space-x-4 mt-1\">\n                <span className=\"text-sm text-gray-600\">\n                  {permissionStats.entitiesWithPermissions}/{permissionStats.totalEntities} entità configurate\n                </span>\n                <span className=\"text-sm text-gray-600\">\n                  {permissionStats.totalPermissions} permessi totali\n                </span>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${permissionStats.coverage}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"text-xs text-gray-500\">{permissionStats.coverage}%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <button\n              type=\"button\"\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className={`px-4 py-2 rounded-lg border transition-colors ${\n                showAdvanced \n                  ? 'bg-blue-50 border-blue-200 text-blue-700' \n                  : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50'\n              }`}\n            >\n              <Filter className=\"w-4 h-4 mr-2 inline\" />\n              Vista Avanzata\n            </button>\n            <button\n              type=\"button\"\n              onClick={savePermissions}\n              disabled={saving}\n              className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-6 py-2 rounded-lg flex items-center space-x-2 transition-colors font-medium\"\n            >\n              <Save className=\"h-4 w-4\" />\n              <span>{saving ? 'Salvataggio...' : 'Salva Permessi'}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Layout ottimizzato a 2 colonne */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Colonna sinistra: Entità e ricerca */}\n        <div className=\"w-1/3 border-r border-gray-200 flex flex-col bg-gray-50\">\n          {/* Header ricerca */}\n          <div className=\"p-4 border-b border-gray-200 bg-white\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Cerca entità...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n          \n          {/* Lista entità ottimizzata */}\n          <div className=\"flex-1 overflow-y-auto\">\n            {filteredEntities.map((entity) => {\n              const IconComponent = entity.icon;\n              const entityPermissions = permissions.filter(p => p.entity === entity.name);\n              const hasPermissions = entityPermissions.length > 0;\n              \n              return (\n                <div\n                  key={entity.id}\n                  className={`border-b border-gray-200 ${\n                    selectedEntity?.id === entity.id ? 'bg-blue-50 border-blue-200' : 'bg-white hover:bg-gray-50'\n                  }`}\n                >\n                  <button\n                    type=\"button\"\n                    onClick={() => setSelectedEntity(entity)}\n                    className=\"w-full text-left p-4 transition-colors\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`p-2 rounded-lg ${hasPermissions ? 'bg-green-100' : 'bg-gray-100'}`}>\n                          {IconComponent && <IconComponent className={`w-4 h-4 ${hasPermissions ? 'text-green-600' : 'text-gray-600'}`} />}\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-gray-900\">{entity.displayName}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            {entityPermissions.length} permessi • {entity.fields.length} campi\n                          </div>\n                        </div>\n                      </div>\n                      <ChevronRight className={`w-4 h-4 ${selectedEntity?.id === entity.id ? 'text-blue-600' : 'text-gray-400'}`} />\n                    </div>\n                  </button>\n                  \n                  {/* Azioni rapide */}\n                  <div className=\"px-4 pb-3 flex space-x-2\">\n                    <button\n                      type=\"button\"\n                      onClick={() => applyQuickPermissions(entity.name, 'full')}\n                      className=\"text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors\"\n                    >\n                      Completo\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => applyQuickPermissions(entity.name, 'readonly')}\n                      className=\"text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors\"\n                    >\n                      Solo Lettura\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => applyQuickPermissions(entity.name, 'none')}\n                      className=\"text-xs px-2 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors\"\n                    >\n                      Nessuno\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Colonna destra: Configurazione permessi */}\n        <div className=\"flex-1 flex flex-col\">\n          {selectedEntity ? (\n            <>\n              {/* Header entità selezionata */}\n              <div className=\"p-4 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-purple-50\">\n                <div className=\"flex items-center space-x-3\">\n                  {selectedEntity.icon && React.createElement(selectedEntity.icon, { className: \"w-5 h-5 text-blue-600\" })}\n                  <div>\n                     <h3 className=\"font-semibold text-gray-900\">{selectedEntity.displayName}</h3>\n                     <p className=\"text-sm text-gray-600\">Configura permessi CRUD e scope per questa entità</p>\n                   </div>\n                </div>\n              </div>\n              \n              {/* Configurazione permessi ottimizzata */}\n              <div className=\"flex-1 overflow-y-auto p-6\">\n                <div className=\"grid gap-6\">\n                  {actions.map((action) => {\n                    const permission = getPermission(selectedEntity.name, action.name);\n                    const ActionIcon = action.icon;\n                    \n                    return (\n                      <div key={action.id} className={`border rounded-xl p-4 ${action.borderColor} ${action.bgColor}`}>\n                        <div className=\"flex items-center justify-between mb-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"p-2 bg-white rounded-lg shadow-sm\">\n                              <ActionIcon className={`w-5 h-5 ${action.color}`} />\n                            </div>\n                            <div>\n                              <h4 className=\"font-semibold text-gray-900\">{action.displayName}</h4>\n                              <p className=\"text-sm text-gray-600\">Configura scope e campi per questa azione</p>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {/* Scope selection */}\n                        <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                          {scopes.map((scope) => {\n                            const ScopeIcon = scope.icon;\n                            const isSelected = permission?.scope === scope.name;\n                            \n                            return (\n                              <button\n                                type=\"button\"\n                                key={scope.id}\n                                disabled={isUpdating}\n                                onClick={() => updatePermission(selectedEntity.name, action.name, scope.name as 'all' | 'tenant' | 'own')}\n                                className={`p-3 rounded-lg border-2 transition-all duration-200 text-left ${\n                                  isUpdating \n                                    ? 'opacity-50 cursor-not-allowed border-gray-200 bg-gray-50'\n                                    : isSelected \n                                      ? 'border-blue-500 bg-blue-50 shadow-md' \n                                      : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                                }`}\n                              >\n                                <div className=\"flex items-center space-x-2 mb-1\">\n                                  <ScopeIcon className={`w-4 h-4 ${isUpdating ? 'text-gray-400' : isSelected ? 'text-blue-600' : 'text-gray-500'}`} />\n                                  <span className={`font-medium ${isUpdating ? 'text-gray-400' : isSelected ? 'text-blue-900' : 'text-gray-900'}`}>\n                                    {scope.displayName}\n                                  </span>\n                                  {isSelected && !isUpdating && <Check className=\"w-4 h-4 text-blue-600 ml-auto\" />}\n                                </div>\n                                <p className=\"text-xs text-gray-600\">{scope.description}</p>\n                              </button>\n                            );\n                          })}\n                          \n                          <button\n                            type=\"button\"\n                            disabled={isUpdating}\n                            onClick={() => updatePermission(selectedEntity.name, action.name, 'none')}\n                            className={`p-3 rounded-lg border-2 transition-all duration-200 text-left ${\n                              isUpdating \n                                ? 'opacity-50 cursor-not-allowed border-gray-200 bg-gray-50'\n                                : !permission \n                                  ? 'border-red-500 bg-red-50 shadow-md' \n                                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                            }`}\n                          >\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <X className={`w-4 h-4 ${isUpdating ? 'text-gray-400' : !permission ? 'text-red-600' : 'text-gray-500'}`} />\n                              <span className={`font-medium ${isUpdating ? 'text-gray-400' : !permission ? 'text-red-900' : 'text-gray-900'}`}>\n                                Nessun accesso\n                              </span>\n                              {!permission && !isUpdating && <Check className=\"w-4 h-4 text-red-600 ml-auto\" />}\n                            </div>\n                            <p className=\"text-xs text-gray-600\">Rimuovi completamente questo permesso</p>\n                          </button>\n                        </div>\n                        \n                        {/* Campi specifici (solo se avanzato e permesso attivo) */}\n                        {showAdvanced && permission && (\n                          <div className=\"border-t pt-4\">\n                            <h5 className=\"font-medium text-gray-900 mb-3 flex items-center\">\n                              <Lock className=\"w-4 h-4 mr-2\" />\n                              Campi Specifici\n                            </h5>\n                            <div className=\"grid grid-cols-2 gap-2 max-h-32 overflow-y-auto\">\n                              {selectedEntity.fields.map((field) => {\n                                const isSelected = permission.fields?.includes(field.id) ?? true;\n                                \n                                return (\n                                  <button\n                                    type=\"button\"\n                                    key={field.id}\n                                    onClick={() => toggleField(selectedEntity.name, action.name, field.id)}\n                                    className={`p-2 rounded border text-left transition-colors ${\n                                      isSelected \n                                        ? 'border-green-500 bg-green-50 text-green-900' \n                                        : 'border-gray-200 hover:border-gray-300 text-gray-700'\n                                    }`}\n                                  >\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"flex items-center space-x-2\">\n                                        {field.sensitive && <Lock className=\"w-3 h-3 text-orange-500\" />}\n                                        <span className=\"text-sm font-medium\">{field.displayName}</span>\n                                      </div>\n                                      {isSelected ? (\n                                        <Check className=\"w-3 h-3 text-green-600\" />\n                                      ) : (\n                                        <X className=\"w-3 h-3 text-gray-400\" />\n                                      )}\n                                    </div>\n                                    <div className=\"text-xs text-gray-500 mt-1\">\n                                      {field.type} {field.sensitive && '• Sensibile'}\n                                    </div>\n                                  </button>\n                                );\n                              })}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center p-8\">\n                <Database className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Seleziona un'entità</h3>\n                <p className=\"text-gray-600\">Scegli un'entità dalla lista per configurare i permessi</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdvancedPermissionManager;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/DeleteRoleModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Shield' is defined but never used.","line":6,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasUsers' is assigned a value but never used.","line":25,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSystemRole' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":32,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Modal } from '@/design-system/molecules/Modal';\nimport { Button } from '@/design-system/atoms/Button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, AlertTriangle, Shield } from 'lucide-react';\n\ninterface DeleteRoleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => Promise<void>;\n  role: any;\n  loading?: boolean;\n}\n\nconst DeleteRoleModal: React.FC<DeleteRoleModalProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  role,\n  loading = false\n}) => {\n  if (!role) return null;\n\n  const hasUsers = role.userCount > 0;\n  const isSystemRole = role.isSystemRole;\n\n  const handleConfirm = async () => {\n    try {\n      await onConfirm();\n      onClose();\n    } catch (error) {\n      // L'errore viene gestito dal componente padre\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Elimina Ruolo\"\n      size=\"medium\"\n    >\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-3 p-4 bg-red-50 rounded-lg\">\n          <AlertTriangle className=\"h-6 w-6 text-red-600 flex-shrink-0\" />\n          <div>\n            <h3 className=\"font-medium text-red-900\">Attenzione: Azione irreversibile</h3>\n            <p className=\"text-sm text-red-700 mt-1\">\n              Questa azione eliminerà permanentemente il ruolo e non può essere annullata.\n            </p>\n          </div>\n        </div>\n\n        {role && (\n          <div className=\"space-y-3\">\n            <div>\n              <span className=\"text-sm font-medium text-gray-700\">Ruolo da eliminare:</span>\n              <div className=\"mt-1 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium\">{role.name}</span>\n                  <span className=\"text-xs bg-gray-200 px-2 py-1 rounded\">\n                    Livello {role.level}\n                  </span>\n                </div>\n                {role.description && (\n                  <p className=\"text-sm text-gray-600 mt-1\">{role.description}</p>\n                )}\n              </div>\n            </div>\n\n            {role.userCount && role.userCount > 0 && (\n              <Alert variant=\"destructive\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Attenzione:</strong> Questo ruolo è attualmente assegnato a {role.userCount} utente{role.userCount > 1 ? 'i' : ''}. \n                  L'eliminazione rimuoverà il ruolo da tutti gli utenti associati.\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"text-sm text-gray-600\">\n              <p>Conseguenze dell'eliminazione:</p>\n              <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                <li>Il ruolo verrà rimosso da tutti gli utenti</li>\n                <li>I permessi associati verranno revocati</li>\n                <li>Le configurazioni di gerarchia verranno aggiornate</li>\n                <li>L'azione non può essere annullata</li>\n              </ul>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-end space-x-3 mt-6 pt-4 border-t\">\n        <Button\n          variant=\"outline\"\n          onClick={onClose}\n          disabled={loading}\n        >\n          Annulla\n        </Button>\n        <Button\n          variant=\"destructive\"\n          onClick={handleConfirm}\n          disabled={loading}\n        >\n          {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          Elimina Ruolo\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default DeleteRoleModal;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/HierarchyTreeView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getCurrentUserRoleHierarchy' is defined but never used.","line":20,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[870,873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[870,873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[937,940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[937,940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hierarchy' is assigned a value but never used.","line":53,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'expandChildrenRecursively' and 'loadHierarchyData'. Either include them or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [expandChildrenRecursively, externalHierarchy, loadHierarchyData]","fix":{"range":[2719,2738],"text":"[expandChildrenRecursively, externalHierarchy, loadHierarchyData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3824,3827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3824,3827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7805,7808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7805,7808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Award,\n  Building,\n  ChevronDown,\n  ChevronRight,\n  Crown,\n  Edit3,\n  Move,\n  Plus,\n  Save,\n  Settings,\n  Shield,\n  Star,\n  Trash2,\n  UserCheck,\n  Users,\n  X\n} from 'lucide-react';\nimport { getRoleHierarchy, getCurrentUserRoleHierarchy } from '../../services/roles';\nimport { isAuthenticated } from '../../services/auth';\nimport type { RoleHierarchy as RoleHierarchyType, UserRoleHierarchy } from '../../services/roles';\n\ninterface TreeNode {\n  id: string;\n  name: string;\n  description: string;\n  level: number;\n  roleType: string;\n  children: TreeNode[];\n  permissions: string[];\n  assignableRoles: string[];\n  parentId?: string;\n}\n\ninterface HierarchyTreeViewProps {\n  hierarchy?: RoleHierarchyType;\n  currentUserHierarchy: UserRoleHierarchy | null;\n  onRoleCreate?: (parentId: string | null, roleData: any) => Promise<void>;\n  onRoleUpdate?: (roleId: string, roleData: any) => Promise<void>;\n  onRoleDelete?: (roleId: string) => Promise<void>;\n  onRoleMove?: (roleId: string, newParentId: string | null) => Promise<void>;\n}\n\nconst HierarchyTreeView: React.FC<HierarchyTreeViewProps> = ({\n  hierarchy: externalHierarchy,\n  currentUserHierarchy,\n  onRoleCreate,\n  onRoleUpdate,\n  onRoleDelete,\n  onRoleMove\n}) => {\n  const [hierarchy, setHierarchy] = useState<RoleHierarchyType>({});\n  const [treeData, setTreeData] = useState<TreeNode[]>([]);\n  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());\n  const [editingNode, setEditingNode] = useState<string | null>(null);\n  const [creatingChild, setCreatingChild] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [draggedNode, setDraggedNode] = useState<string | null>(null);\n\n  // Form state per editing/creating\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    roleType: '',\n    permissions: [] as string[],\n    level: 1\n  });\n\n  useEffect(() => {\n    if (externalHierarchy && Object.keys(externalHierarchy).length > 0) {\n      // Usa la gerarchia fornita come prop\n      setHierarchy(externalHierarchy);\n      const tree = buildTreeStructure(externalHierarchy);\n      setTreeData(tree);\n      \n      // Espandi i primi livelli per default\n      const initialExpanded = new Set<string>();\n      tree.forEach(node => {\n        if (node.level <= 2) {\n          initialExpanded.add(node.id);\n          expandChildrenRecursively(node, initialExpanded, 3);\n        }\n      });\n      setExpandedNodes(initialExpanded);\n      setLoading(false);\n    } else {\n      // Carica la gerarchia internamente se non fornita\n      loadHierarchyData();\n    }\n  }, [externalHierarchy]);\n\n  const loadHierarchyData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!isAuthenticated()) {\n        setError('Accesso non autorizzato. Effettua il login per visualizzare la gerarchia dei ruoli.');\n        return;\n      }\n      \n      const hierarchyData = await getRoleHierarchy();\n      \n      // Controllo se i dati della gerarchia sono validi\n      if (!hierarchyData) {\n        setError('Nessun dato di gerarchia disponibile. Verifica la configurazione dei ruoli.');\n        return;\n      }\n      \n      setHierarchy(hierarchyData);\n      \n      // Converti i dati della gerarchia in struttura ad albero\n      const tree = buildTreeStructure(hierarchyData);\n      setTreeData(tree);\n      \n      // Espandi i primi livelli per default\n      const initialExpanded = new Set<string>();\n      tree.forEach(node => {\n        if (node.level <= 2) {\n          initialExpanded.add(node.id);\n          expandChildrenRecursively(node, initialExpanded, 3);\n        }\n      });\n      setExpandedNodes(initialExpanded);\n      \n    } catch (err: any) {\n      console.error('Error loading hierarchy data:', err);\n      setError('Errore nel caricamento della gerarchia dei ruoli. Riprova più tardi.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const expandChildrenRecursively = (node: TreeNode, expanded: Set<string>, maxLevel: number) => {\n    if (node.level < maxLevel) {\n      node.children.forEach(child => {\n        expanded.add(child.id);\n        expandChildrenRecursively(child, expanded, maxLevel);\n      });\n    }\n  };\n\n  const buildTreeStructure = (hierarchyData: RoleHierarchyType): TreeNode[] => {\n    // Controllo se hierarchyData è valido\n    if (!hierarchyData || typeof hierarchyData !== 'object') {\n      console.warn('buildTreeStructure: hierarchyData is invalid:', hierarchyData);\n      return [];\n    }\n\n    const nodes: { [key: string]: TreeNode } = {};\n    const rootNodes: TreeNode[] = [];\n\n    // Crea tutti i nodi\n    Object.entries(hierarchyData).forEach(([roleType, data]) => {\n      const node: TreeNode = {\n        id: roleType,\n        name: data.name,\n        description: data.description,\n        level: data.level,\n        roleType: roleType,\n        children: [],\n        permissions: data.permissions || [],\n        assignableRoles: data.assignableRoles || [],\n        parentId: undefined\n      };\n      nodes[roleType] = node;\n    });\n\n    // Determina le relazioni parent-child basandosi sui livelli\n    // Un nodo è figlio del nodo di livello immediatamente superiore più vicino\n    Object.values(nodes).forEach(node => {\n      if (node.level === 0) {\n        // Livello 0 è sempre root\n        rootNodes.push(node);\n      } else {\n        // Trova il parent con il livello immediatamente superiore\n        const potentialParents = Object.values(nodes).filter(\n          parent => parent.level === node.level - 1\n        );\n        \n        if (potentialParents.length > 0) {\n          // Se ci sono più potenziali parent dello stesso livello, \n          // usa il primo o implementa una logica più specifica\n          const parent = potentialParents[0];\n          node.parentId = parent.id;\n          parent.children.push(node);\n        } else {\n          // Se non trova un parent del livello immediatamente superiore,\n          // cerca il parent di livello più alto disponibile\n          const allPotentialParents = Object.values(nodes).filter(\n            parent => parent.level < node.level\n          );\n          \n          if (allPotentialParents.length > 0) {\n            // Ordina per livello decrescente e prendi il primo\n            allPotentialParents.sort((a, b) => b.level - a.level);\n            const parent = allPotentialParents[0];\n            node.parentId = parent.id;\n            parent.children.push(node);\n          } else {\n            // Se non trova nessun parent, è un root node\n            rootNodes.push(node);\n          }\n        }\n      }\n    });\n\n    // Ordina per livello e nome\n    const sortNodes = (nodeArray: TreeNode[]) => {\n      nodeArray.sort((a, b) => {\n        if (a.level !== b.level) return a.level - b.level;\n        return a.name.localeCompare(b.name);\n      });\n      nodeArray.forEach(node => sortNodes(node.children));\n    };\n\n    sortNodes(rootNodes);\n    return rootNodes;\n  };\n\n  const toggleNode = (nodeId: string) => {\n    const newExpanded = new Set(expandedNodes);\n    if (newExpanded.has(nodeId)) {\n      newExpanded.delete(nodeId);\n    } else {\n      newExpanded.add(nodeId);\n    }\n    setExpandedNodes(newExpanded);\n  };\n\n  const canEditRole = (roleType: string): boolean => {\n    if (!currentUserHierarchy) return false;\n    // Se l'utente ha ALL_PERMISSIONS o è SUPER_ADMIN, può modificare tutto\n    if (currentUserHierarchy.assignablePermissions?.includes('ALL_PERMISSIONS') ||\n        currentUserHierarchy.userRoles?.includes('SUPER_ADMIN')) {\n      return true;\n    }\n    \n    // I ruoli assegnabili potrebbero essere oggetti con proprietà type/name\n    return currentUserHierarchy.assignableRoles?.some((role: any) => {\n      const roleTypeToCheck = typeof role === 'object' ? (role.type || role.name) : role;\n      return roleTypeToCheck === roleType;\n    }) || false;\n  };\n\n  const hasPermission = (permission: string): boolean => {\n    console.log('🔍 Checking permission:', permission);\n    console.log('📊 currentUserHierarchy:', currentUserHierarchy);\n    \n    if (!currentUserHierarchy) {\n      console.log('❌ No currentUserHierarchy found');\n      return false;\n    }\n    \n    // Se l'utente ha ALL_PERMISSIONS o è SUPER_ADMIN, ha tutti i permessi\n    if (currentUserHierarchy.assignablePermissions?.includes('ALL_PERMISSIONS') ||\n        currentUserHierarchy.userRoles?.includes('SUPER_ADMIN')) {\n      console.log('✅ User has ALL_PERMISSIONS or SUPER_ADMIN');\n      return true;\n    }\n    \n    const hasPermissionResult = currentUserHierarchy.assignablePermissions?.includes(permission) || false;\n    console.log(`🎯 Permission ${permission} result:`, hasPermissionResult);\n    console.log('📋 Available permissions:', currentUserHierarchy.assignablePermissions);\n    \n    return hasPermissionResult;\n  };\n\n  const startEditing = (node: TreeNode) => {\n    if (!canEditRole(node.roleType)) return;\n    \n    setEditingNode(node.id);\n    setFormData({\n      name: node.name,\n      description: node.description,\n      roleType: node.roleType,\n      permissions: node.permissions,\n      level: node.level\n    });\n  };\n\n  const startCreating = (parentId: string | null) => {\n    if (!hasPermission('CREATE_ROLES')) return;\n    \n    const parentNode = parentId ? findNodeById(treeData, parentId) : null;\n    const newLevel = parentNode ? parentNode.level + 1 : 1;\n    \n    setCreatingChild(parentId);\n    setFormData({\n      name: '',\n      description: '',\n      roleType: '',\n      permissions: [],\n      level: newLevel\n    });\n  };\n\n  const findNodeById = (nodes: TreeNode[], id: string): TreeNode | null => {\n    for (const node of nodes) {\n      if (node.id === id) return node;\n      const found = findNodeById(node.children, id);\n      if (found) return found;\n    }\n    return null;\n  };\n\n  const saveRole = async () => {\n    try {\n      if (editingNode) {\n        // Modifica ruolo esistente\n        if (onRoleUpdate) {\n          await onRoleUpdate(editingNode, formData);\n        }\n      } else if (creatingChild !== null) {\n        // Crea nuovo ruolo\n        if (onRoleCreate) {\n          await onRoleCreate(creatingChild, formData);\n        }\n      }\n      \n      // Ricarica i dati\n      await loadHierarchyData();\n      cancelEditing();\n    } catch (error) {\n      console.error('Error saving role:', error);\n    }\n  };\n\n  const deleteRole = async (nodeId: string) => {\n    if (!canEditRole(nodeId) || !hasPermission('DELETE_ROLES')) return;\n    \n    if (window.confirm('Sei sicuro di voler eliminare questo ruolo? Questa azione non può essere annullata.')) {\n      try {\n        if (onRoleDelete) {\n          await onRoleDelete(nodeId);\n        }\n        await loadHierarchyData();\n      } catch (error) {\n        console.error('Error deleting role:', error);\n      }\n    }\n  };\n\n  const cancelEditing = () => {\n    setEditingNode(null);\n    setCreatingChild(null);\n    setFormData({\n      name: '',\n      description: '',\n      roleType: '',\n      permissions: [],\n      level: 1\n    });\n  };\n\n  const handleDragStart = (nodeId: string) => {\n    setDraggedNode(nodeId);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = async (e: React.DragEvent, targetNodeId: string | null) => {\n    e.preventDefault();\n    \n    if (!draggedNode || !hasPermission('EDIT_HIERARCHY')) return;\n    \n    try {\n      if (onRoleMove) {\n        await onRoleMove(draggedNode, targetNodeId);\n      }\n      await loadHierarchyData();\n    } catch (error) {\n      console.error('Error moving role:', error);\n    } finally {\n      setDraggedNode(null);\n    }\n  };\n\n  const getRoleIcon = (level: number, roleType: string) => {\n    if (roleType.includes('SUPER_ADMIN')) return <Crown className=\"w-4 h-4 text-purple-600\" />;\n    if (roleType.includes('ADMIN')) return <Star className=\"w-4 h-4 text-red-600\" />;\n    if (roleType.includes('MANAGER')) return <Award className=\"w-4 h-4 text-orange-600\" />;\n    if (roleType.includes('TRAINER')) return <UserCheck className=\"w-4 h-4 text-blue-600\" />;\n    if (level <= 2) return <Building className=\"w-4 h-4 text-indigo-600\" />;\n    return <Users className=\"w-4 h-4 text-green-600\" />;\n  };\n\n  const renderTreeNode = (node: TreeNode, depth: number = 0): React.ReactNode => {\n    const isExpanded = expandedNodes.has(node.id);\n    const isEditing = editingNode === node.id;\n    const isCreating = creatingChild === node.id;\n    const hasChildren = node.children.length > 0;\n    const canEdit = canEditRole(node.roleType);\n    const canCreate = hasPermission('CREATE_ROLES');\n    const canDelete = canEditRole(node.roleType) && hasPermission('DELETE_ROLES');\n\n    // Debug log per capire perché i pulsanti sono disabilitati\n    console.log(`🔍 Debug pulsanti per nodo ${node.name} (${node.roleType}):`);\n    console.log(`  - canEdit: ${canEdit}`);\n    console.log(`  - canCreate: ${canCreate}`);\n    console.log(`  - canDelete: ${canDelete}`);\n    console.log(`  - hasChildren: ${hasChildren}`);\n    console.log(`  - currentUserHierarchy:`, currentUserHierarchy);\n\n    return (\n      <div key={node.id} className=\"select-none\">\n        {/* Nodo principale */}\n        <div\n          className={`flex items-center py-2 px-3 rounded-lg hover:bg-gray-50 transition-colors ${\n            draggedNode === node.id ? 'opacity-50' : ''\n          }`}\n          style={{ marginLeft: `${depth * 24}px` }}\n          draggable={canEdit}\n          onDragStart={() => handleDragStart(node.id)}\n          onDragOver={handleDragOver}\n          onDrop={(e) => handleDrop(e, node.id)}\n        >\n          {/* Icona espansione */}\n          <div className=\"w-6 h-6 flex items-center justify-center\">\n            {hasChildren && (\n              <button\n                onClick={() => toggleNode(node.id)}\n                className=\"p-1 hover:bg-gray-200 rounded\"\n              >\n                {isExpanded ? (\n                  <ChevronDown className=\"w-4 h-4 text-gray-600\" />\n                ) : (\n                  <ChevronRight className=\"w-4 h-4 text-gray-600\" />\n                )}\n              </button>\n            )}\n          </div>\n\n          {/* Icona ruolo */}\n          <div className=\"mr-3\">\n            {getRoleIcon(node.level, node.roleType)}\n          </div>\n\n          {/* Contenuto nodo */}\n          <div className=\"flex-1 min-w-0\">\n            {isEditing ? (\n              <div className=\"space-y-2\">\n                <input\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm\"\n                  placeholder=\"Nome ruolo\"\n                />\n                <input\n                  type=\"text\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm\"\n                  placeholder=\"Descrizione\"\n                />\n              </div>\n            ) : (\n              <div>\n                <div className=\"font-medium text-gray-900 truncate\">{node.name}</div>\n                <div className=\"text-sm text-gray-500 truncate\">{node.description}</div>\n                <div className=\"text-xs text-gray-400\">\n                  Livello {node.level} • {node.permissions.length} permessi\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Azioni - Stile uguale alla visualizzazione a lista */}\n          <div className=\"flex items-center space-x-0.5 ml-4\">\n            {isEditing ? (\n              <>\n                <button\n                  onClick={saveRole}\n                  className=\"p-1 text-green-600 hover:bg-green-100 rounded transition-colors\"\n                  title=\"Salva\"\n                >\n                  <Save className=\"w-3 h-3\" />\n                </button>\n                <button\n                  onClick={cancelEditing}\n                  className=\"p-1 text-gray-600 hover:bg-gray-100 rounded transition-colors\"\n                  title=\"Annulla\"\n                >\n                  <X className=\"w-3 h-3\" />\n                </button>\n              </>\n            ) : (\n              <>\n                {/* Pulsante Aggiungi sotto-ruolo */}\n                <button\n                  onClick={canCreate ? () => startCreating(node.id) : undefined}\n                  disabled={!canCreate}\n                  className={`p-1 transition-colors rounded bg-transparent border-0 shadow-none ${\n                    canCreate \n                      ? 'text-green-600 hover:bg-green-100 cursor-pointer' \n                      : 'text-gray-400 opacity-50 cursor-not-allowed'\n                  }`}\n                  title={canCreate ? \"Aggiungi sotto-ruolo\" : \"Non hai permessi per creare ruoli\"}\n                >\n                  <Plus className=\"w-3 h-3\" />\n                </button>\n                \n                {/* Pulsante Modifica */}\n                <button\n                  onClick={canEdit ? () => startEditing(node) : undefined}\n                  disabled={!canEdit}\n                  className={`p-1 transition-colors rounded bg-transparent border-0 shadow-none ${\n                    canEdit \n                      ? 'text-blue-600 hover:bg-blue-100 cursor-pointer' \n                      : 'text-gray-400 opacity-50 cursor-not-allowed'\n                  }`}\n                  title={canEdit ? \"Modifica\" : \"Non hai permessi per modificare questo ruolo\"}\n                >\n                  <Edit3 className=\"w-3 h-3\" />\n                </button>\n                \n                {/* Pulsante Elimina */}\n                <button\n                  onClick={(canDelete && node.children.length === 0) ? () => deleteRole(node.id) : undefined}\n                  disabled={!(canDelete && node.children.length === 0)}\n                  className={`p-1 transition-colors rounded bg-transparent border-0 shadow-none ${\n                    canDelete && node.children.length === 0\n                      ? 'text-red-600 hover:bg-red-100 cursor-pointer' \n                      : 'text-gray-400 opacity-50 cursor-not-allowed'\n                  }`}\n                  title={\n                    !canDelete \n                      ? \"Non hai permessi per eliminare questo ruolo\" \n                      : node.children.length > 0 \n                        ? \"Non puoi eliminare un ruolo con sotto-ruoli\" \n                        : \"Elimina\"\n                  }\n                >\n                  <Trash2 className=\"w-3 h-3\" />\n                </button>\n                \n                {/* Pulsante Trascina */}\n                <button \n                  disabled={!canEdit}\n                  className={`p-1 transition-colors rounded bg-transparent border-0 shadow-none ${\n                    canEdit \n                      ? 'text-amber-600 hover:bg-amber-100 cursor-move' \n                      : 'text-gray-400 opacity-50 cursor-not-allowed'\n                  }`} \n                  title={canEdit ? \"Trascina per riordinare\" : \"Non hai permessi per riordinare\"}\n                >\n                  <Move className=\"w-3 h-3\" />\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Form per creare nuovo figlio */}\n        {isCreating && (\n          <div\n            className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-2\"\n            style={{ marginLeft: `${(depth + 1) * 24}px` }}\n          >\n            <div className=\"space-y-2\">\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm\"\n                placeholder=\"Nome nuovo ruolo\"\n              />\n              <input\n                type=\"text\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm\"\n                placeholder=\"Descrizione\"\n              />\n              <input\n                type=\"text\"\n                value={formData.roleType}\n                onChange={(e) => setFormData({ ...formData, roleType: e.target.value })}\n                className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm\"\n                placeholder=\"Tipo ruolo (es: ADMIN_LAVORO_FORMAZIONE)\"\n              />\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={saveRole}\n                  className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700\"\n                >\n                  Crea\n                </button>\n                <button\n                  onClick={cancelEditing}\n                  className=\"px-3 py-1 bg-gray-300 text-gray-700 rounded text-sm hover:bg-gray-400\"\n                >\n                  Annulla\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Figli */}\n        {isExpanded && hasChildren && (\n          <div>\n            {node.children.map(child => renderTreeNode(child, depth + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-4 border-blue-600 border-t-transparent\"></div>\n        <span className=\"ml-3 text-gray-600\">Caricamento gerarchia...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-red-600 mb-4\">⚠️</div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Errore</h3>\n        <p className=\"text-gray-600 mb-4\">{error}</p>\n        <button\n          onClick={loadHierarchyData}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n        >\n          Riprova\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header con azioni globali */}\n      <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <Shield className=\"w-5 h-5 text-blue-600\" />\n          <h3 className=\"font-semibold text-gray-900\">Vista ad Albero della Gerarchia</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {hasPermission('CREATE_ROLES') && (\n            <button\n              onClick={() => startCreating(null)}\n              className=\"px-3 py-1.5 bg-blue-600 text-white rounded-full hover:bg-blue-700 flex items-center space-x-1.5 transition-colors text-sm\"\n            >\n              <Plus className=\"w-3 h-3\" />\n              <span>Nuovo Ruolo Radice</span>\n            </button>\n          )}\n          <button\n            onClick={loadHierarchyData}\n            className=\"px-3 py-1.5 bg-gray-200 text-gray-700 rounded-full hover:bg-gray-300 flex items-center space-x-1.5 transition-colors text-sm\"\n          >\n            <Settings className=\"w-3 h-3\" />\n            <span>Aggiorna</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Contenuto principale */}\n      <div className=\"bg-white border border-gray-200 rounded-lg\">\n        <div className=\"p-4\">\n          {/* Form per nuovo ruolo radice */}\n          {creatingChild === null && editingNode === null && formData.name !== '' && (\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 mb-4\">\n              <div className=\"space-y-2\">\n                <input\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm\"\n                  placeholder=\"Nome nuovo ruolo radice\"\n                />\n                <input\n                  type=\"text\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm\"\n                  placeholder=\"Descrizione\"\n                />\n                <input\n                  type=\"text\"\n                  value={formData.roleType}\n                  onChange={(e) => setFormData({ ...formData, roleType: e.target.value })}\n                  className=\"w-full px-2 py-1 border border-gray-300 rounded text-sm\"\n                  placeholder=\"Tipo ruolo (es: ADMIN_LAVORO_FORMAZIONE)\"\n                />\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={saveRole}\n                    className=\"px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700\"\n                  >\n                    Crea Ruolo Radice\n                  </button>\n                  <button\n                    onClick={cancelEditing}\n                    className=\"px-3 py-1 bg-gray-300 text-gray-700 rounded text-sm hover:bg-gray-400\"\n                  >\n                    Annulla\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Albero della gerarchia */}\n          <div \n            className=\"space-y-1\"\n            onDragOver={handleDragOver}\n            onDrop={(e) => handleDrop(e, null)}\n          >\n            {treeData.map(node => renderTreeNode(node))}\n          </div>\n\n          {treeData.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Shield className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <p>Nessun ruolo trovato nella gerarchia.</p>\n              {hasPermission('CREATE_ROLES') && (\n                <button\n                  onClick={() => startCreating(null)}\n                  className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n                >\n                  Crea il primo ruolo\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HierarchyTreeView;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/MoveRoleModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Loader2s' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[698,701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[698,701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[731,734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[731,734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2016,2019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2016,2019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":87,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":170,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":34}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Modal } from '../../design-system/molecules/Modal/Modal';\nimport { Button } from '../../design-system/atoms/Button/Button';\nimport { Badge } from '../../design-system/atoms/Badge/Badge';\nimport { Label } from '../../design-system/atoms/Label/Label';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { \n  AlertCircle,\n  ChevronDown,\n  ChevronRight,\n  Loader2s,\n  MoveVertical,\n  Users\n} from 'lucide-react';\nimport { moveRoleInHierarchy } from '../../services/roles';\n\ninterface MoveRoleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onMove: (targetLevel: number, parentRoleType?: string) => Promise<void>;\n  role: any;\n  hierarchy: Record<string, any>;\n  currentLevel: number;\n}\n\nconst MoveRoleModal: React.FC<MoveRoleModalProps> = ({\n  isOpen,\n  onClose,\n  onMove,\n  role,\n  hierarchy,\n  currentLevel\n}) => {\n  const [selectedLevel, setSelectedLevel] = useState<number | null>(null);\n  const [selectedParentRole, setSelectedParentRole] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [expandedLevels, setExpandedLevels] = useState<Set<number>>(new Set());\n\n  // Reset lo stato quando si apre il modal\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedLevel(null);\n      setSelectedParentRole(null);\n      setError(null);\n      setExpandedLevels(new Set());\n    }\n  }, [isOpen]);\n\n  const handleMove = async () => {\n    if (selectedLevel === null) {\n      setError('Seleziona un livello di destinazione');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Usa il nuovo servizio per spostare il ruolo\n      await moveRoleInHierarchy(role.roleType || role.type, selectedLevel, selectedParentRole || undefined);\n      \n      // Chiama anche la callback originale per compatibilità\n      await onMove(selectedLevel, selectedParentRole || undefined);\n      onClose();\n    } catch (error: any) {\n      console.error('Error moving role:', error);\n      setError(error.message || 'Errore nello spostamento del ruolo');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Prepara i livelli disponibili per lo spostamento\n  const availableLevels = Object.keys(hierarchy)\n    .map(roleType => {\n      const roleData = hierarchy[roleType];\n      return roleData?.level;\n    })\n    .filter((level): level is number => typeof level === 'number' && level !== currentLevel)\n    .filter((level, index, array) => array.indexOf(level) === index) // Rimuovi duplicati\n    .sort((a, b) => a - b);\n\n  // Ottieni i ruoli disponibili come genitori per il livello selezionato\n  const getAvailableParentRoles = (targetLevel: number) => {\n    return Object.entries(hierarchy)\n      .filter(([_, roleData]) => roleData?.level === targetLevel - 1) // Genitori sono al livello precedente\n      .map(([roleType, roleData]) => ({ roleType, ...roleData }));\n  };\n\n  const toggleLevelExpansion = (level: number) => {\n    const newExpanded = new Set(expandedLevels);\n    if (newExpanded.has(level)) {\n      newExpanded.delete(level);\n    } else {\n      newExpanded.add(level);\n    }\n    setExpandedLevels(newExpanded);\n  };\n\n  if (!role) return null;\n\n  const modalFooter = (\n    <>\n      <Button\n        variant=\"outline\"\n        onClick={onClose}\n        disabled={loading}\n      >\n        Annulla\n      </Button>\n      <Button\n        onClick={handleMove}\n        disabled={loading || selectedLevel === null || availableLevels.length === 0}\n      >\n        {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n        <MoveVertical className=\"mr-2 h-4 w-4\" />\n        Sposta Ruolo\n      </Button>\n    </>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Sposta Ruolo nella Gerarchia\"\n      size=\"md\"\n      className=\"z-50\"\n      footer={modalFooter}\n    >\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center space-x-3 p-4 bg-blue-50 rounded-lg\">\n          <MoveVertical className=\"h-6 w-6 text-blue-600 flex-shrink-0\" />\n          <div>\n            <h3 className=\"font-medium text-blue-900\">Modifica Posizione Gerarchica</h3>\n            <p className=\"text-sm text-blue-700 mt-1\">\n              Seleziona il nuovo livello gerarchico e, opzionalmente, il ruolo genitore per \"{role?.name}\".\n            </p>\n          </div>\n        </div>\n\n        {role && (\n          <div className=\"space-y-4\">\n            <div className=\"p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-medium\">{role.name}</span>\n                <Badge variant=\"outline\">Livello {currentLevel}</Badge>\n              </div>\n              {role.description && (\n                <p className=\"text-sm text-gray-600 mt-1\">{role.description}</p>\n              )}\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Nuovo Livello Gerarchico</Label>\n              \n              <div className=\"space-y-3 max-h-80 overflow-y-auto border rounded-lg p-4\">\n                {availableLevels.length > 0 ? (\n                  availableLevels.map((level) => {\n                    // Trova tutti i ruoli a questo livello\n                    const rolesAtLevel = Object.entries(hierarchy)\n                      .filter(([_, roleData]) => roleData?.level === level)\n                      .map(([roleType, roleData]) => ({ roleType, ...roleData }));\n                    \n                    const isHigher = level < currentLevel;\n                    const isExpanded = expandedLevels.has(level);\n                    const availableParents = getAvailableParentRoles(level);\n                    \n                    return (\n                      <div key={level} className=\"space-y-3 border-b pb-3 last:border-b-0\">\n                        <div className=\"flex items-center space-x-3\">\n                          <input\n                            type=\"radio\"\n                            name=\"newLevel\"\n                            value={level.toString()}\n                            checked={selectedLevel === level}\n                            onChange={() => {\n                              setSelectedLevel(level);\n                              setSelectedParentRole(null); // Reset parent selection\n                              if (!isExpanded) {\n                                toggleLevelExpansion(level);\n                              }\n                            }}\n                            className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300\"\n                          />\n                          <Label className=\"flex-1 cursor-pointer\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"font-medium\">Livello {level}</span>\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge variant={isHigher ? \"default\" : \"secondary\"}>\n                                  {isHigher ? \"Superiore\" : \"Inferiore\"}\n                                </Badge>\n                                <Badge variant=\"outline\" className=\"flex items-center space-x-1\">\n                                  <Users className=\"h-3 w-3\" />\n                                  <span>{rolesAtLevel.length}</span>\n                                </Badge>\n                              </div>\n                            </div>\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              {level < currentLevel ? 'Promozione' : level > currentLevel ? 'Retrocessione' : 'Nessun cambiamento'}\n                            </p>\n                          </Label>\n                          {selectedLevel === level && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleLevelExpansion(level)}\n                              className=\"p-1\"\n                            >\n                              {isExpanded ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n                            </Button>\n                          )}\n                        </div>\n                        \n                        {selectedLevel === level && isExpanded && (\n                          <div className=\"ml-6 space-y-3\">\n                            {/* Selezione del genitore */}\n                            {availableParents.length > 0 && (\n                              <div className=\"space-y-2\">\n                                <Label className=\"text-sm font-medium text-gray-700\">\n                                  Seleziona Ruolo Genitore (Livello {level - 1})\n                                </Label>\n                                <div className=\"space-y-2\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <input\n                                      type=\"radio\"\n                                      name=\"parentRole\"\n                                      value=\"\"\n                                      checked={selectedParentRole === null}\n                                      onChange={() => setSelectedParentRole(null)}\n                                      className=\"h-3 w-3 text-blue-600 focus:ring-blue-500 border-gray-300\"\n                                    />\n                                    <Label className=\"text-sm text-gray-600\">Nessun genitore specifico</Label>\n                                  </div>\n                                  {availableParents.map((parentRole) => (\n                                    <div key={parentRole.roleType} className=\"flex items-center space-x-2\">\n                                      <input\n                                        type=\"radio\"\n                                        name=\"parentRole\"\n                                        value={parentRole.roleType}\n                                        checked={selectedParentRole === parentRole.roleType}\n                                        onChange={() => setSelectedParentRole(parentRole.roleType)}\n                                        className=\"h-3 w-3 text-blue-600 focus:ring-blue-500 border-gray-300\"\n                                      />\n                                      <Label className=\"text-sm\">\n                                        <Badge variant=\"outline\" className=\"mr-2\">\n                                          {parentRole.name || parentRole.roleType}\n                                        </Badge>\n                                        <span className=\"text-gray-600\">{parentRole.description}</span>\n                                      </Label>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                            \n                            {/* Ruoli esistenti a questo livello */}\n                            {rolesAtLevel.length > 0 && (\n                              <div className=\"space-y-2\">\n                                <Label className=\"text-sm font-medium text-gray-700\">\n                                  Ruoli esistenti a questo livello:\n                                </Label>\n                                <div className=\"flex flex-wrap gap-2\">\n                                  {rolesAtLevel.map((roleData, index) => (\n                                    <Badge \n                                      key={`${level}-${roleData.roleType || index}`} \n                                      variant=\"outline\" \n                                      className=\"text-xs\"\n                                    >\n                                      {roleData.name || roleData.roleType}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })\n                ) : (\n                  <div className=\"py-8 text-center text-gray-500\">\n                    <MoveVertical className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                    <p>Non ci sono altri livelli disponibili nella gerarchia</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {selectedLevel !== null && selectedLevel !== currentLevel && (\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Nota:</strong> Spostare il ruolo dal livello {currentLevel} al livello {selectedLevel} \n                  {selectedLevel < currentLevel ? ' aumenterà' : ' diminuirà'} la sua autorità nella gerarchia.\n                  {selectedParentRole && (\n                    <span className=\"block mt-1\">\n                      Il ruolo sarà subordinato a: <strong>{hierarchy[selectedParentRole]?.name || selectedParentRole}</strong>\n                    </span>\n                  )}\n                  <span className=\"block mt-1 text-sm text-gray-600\">\n                    Questo potrebbe influire sui permessi e sulle relazioni gerarchiche esistenti.\n                  </span>\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default MoveRoleModal;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/OptimizedPermissionManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/PermissionAssignment.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAssignableData'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadAssignableData, targetUserRole]","fix":{"range":[1271,1287],"text":"[loadAssignableData, targetUserRole]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4986,4989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4986,4989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Shield, Check, X, AlertCircle, \n  ChevronDown, ChevronUp, Filter, Search \n} from 'lucide-react';\nimport { getAssignableRolesAndPermissions, assignPermissionsWithHierarchy } from '../../services/roles';\nimport type { AssignableRolesAndPermissions } from '../../services/roles';\n\ninterface PermissionAssignmentProps {\n  targetUserId: string;\n  targetUserName: string;\n  targetUserRole: string;\n  onClose: () => void;\n  onSuccess?: () => void;\n}\n\nconst PermissionAssignment: React.FC<PermissionAssignmentProps> = ({\n  targetUserId,\n  targetUserName,\n  targetUserRole,\n  onClose,\n  onSuccess\n}) => {\n  const [assignableData, setAssignableData] = useState<AssignableRolesAndPermissions | null>(null);\n  const [selectedPermissions, setSelectedPermissions] = useState<Set<string>>(new Set());\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadAssignableData();\n  }, [targetUserRole]);\n\n  const loadAssignableData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const data = await getAssignableRolesAndPermissions(targetUserRole);\n      setAssignableData(data);\n      \n      // Espandi automaticamente le categorie che hanno permessi\n      const categories = new Set<string>();\n      data.assignablePermissions.forEach(permission => {\n        const category = getPermissionCategory(permission);\n        categories.add(category);\n      });\n      setExpandedCategories(categories);\n      \n    } catch (err) {\n      console.error('Error loading assignable data:', err);\n      setError('Errore nel caricamento dei permessi assegnabili');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getPermissionCategory = (permission: string): string => {\n    if (permission.includes('ROLE')) return 'roles';\n    if (permission.includes('USER')) return 'users';\n    if (permission.includes('COMPAN')) return 'companies';\n    if (permission.includes('COURSE')) return 'courses';\n    if (permission.includes('DOCUMENT')) return 'documents';\n    if (permission.includes('REPORT')) return 'reports';\n    return 'other';\n  };\n\n  const getCategoryDisplayName = (category: string): string => {\n    const names = {\n      roles: 'Gestione Ruoli',\n      users: 'Gestione Utenti',\n      companies: 'Gestione Aziende',\n      courses: 'Gestione Corsi',\n      documents: 'Gestione Documenti',\n      reports: 'Report e Analytics',\n      other: 'Altri Permessi'\n    };\n    return names[category as keyof typeof names] || category;\n  };\n\n  const getPermissionDisplayName = (permission: string): string => {\n    const names = {\n      'ROLE_MANAGEMENT': 'Gestione Ruoli Completa',\n      'VIEW_ROLES': 'Visualizza Ruoli',\n      'CREATE_ROLES': 'Crea Ruoli',\n      'EDIT_ROLES': 'Modifica Ruoli',\n      'DELETE_ROLES': 'Elimina Ruoli',\n      'USER_MANAGEMENT': 'Gestione Utenti Completa',\n      'VIEW_USERS': 'Visualizza Utenti',\n      'CREATE_USERS': 'Crea Utenti',\n      'EDIT_USERS': 'Modifica Utenti',\n      'DELETE_USERS': 'Elimina Utenti',\n      'VIEW_COMPANIES': 'Visualizza Aziende',\n      'CREATE_COMPANIES': 'Crea Aziende',\n      'EDIT_COMPANIES': 'Modifica Aziende',\n      'DELETE_COMPANIES': 'Elimina Aziende',\n      'VIEW_COURSES': 'Visualizza Corsi',\n      'CREATE_COURSES': 'Crea Corsi',\n      'EDIT_COURSES': 'Modifica Corsi',\n      'DELETE_COURSES': 'Elimina Corsi',\n      'VIEW_DOCUMENTS': 'Visualizza Documenti',\n      'CREATE_DOCUMENTS': 'Crea Documenti',\n      'EDIT_DOCUMENTS': 'Modifica Documenti',\n      'DELETE_DOCUMENTS': 'Elimina Documenti',\n      'VIEW_REPORTS': 'Visualizza Report',\n      'CREATE_REPORTS': 'Crea Report'\n    };\n    return names[permission as keyof typeof names] || permission;\n  };\n\n  const togglePermission = (permission: string) => {\n    const newSelected = new Set(selectedPermissions);\n    if (newSelected.has(permission)) {\n      newSelected.delete(permission);\n    } else {\n      newSelected.add(permission);\n    }\n    setSelectedPermissions(newSelected);\n  };\n\n  const toggleCategory = (category: string) => {\n    const newExpanded = new Set(expandedCategories);\n    if (newExpanded.has(category)) {\n      newExpanded.delete(category);\n    } else {\n      newExpanded.add(category);\n    }\n    setExpandedCategories(newExpanded);\n  };\n\n  const handleAssignPermissions = async () => {\n    if (selectedPermissions.size === 0) {\n      setError('Seleziona almeno un permesso da assegnare');\n      return;\n    }\n\n    try {\n      setSaving(true);\n      setError(null);\n\n      await assignPermissionsWithHierarchy(targetUserId, Array.from(selectedPermissions));\n      \n      onSuccess?.();\n      onClose();\n    } catch (err: any) {\n      console.error('Error assigning permissions:', err);\n      setError(err.message || 'Errore nell\\'assegnazione dei permessi');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const getFilteredPermissions = () => {\n    if (!assignableData) return {};\n\n    const permissionsByCategory: { [category: string]: string[] } = {};\n    \n    assignableData.assignablePermissions.forEach(permission => {\n      const category = getPermissionCategory(permission);\n      \n      // Filtro per categoria\n      if (selectedCategory !== 'all' && category !== selectedCategory) return;\n      \n      // Filtro per ricerca\n      if (searchTerm && !getPermissionDisplayName(permission).toLowerCase().includes(searchTerm.toLowerCase())) {\n        return;\n      }\n      \n      if (!permissionsByCategory[category]) {\n        permissionsByCategory[category] = [];\n      }\n      permissionsByCategory[category].push(permission);\n    });\n\n    return permissionsByCategory;\n  };\n\n  const categories = assignableData ? \n    Array.from(new Set(assignableData.assignablePermissions.map(getPermissionCategory))) : [];\n\n  if (loading) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n        <div className=\"bg-white rounded-lg p-6 max-w-2xl w-full mx-4\">\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            <span className=\"ml-2\">Caricamento permessi...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && !assignableData) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n        <div className=\"bg-white rounded-lg p-6 max-w-2xl w-full mx-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Assegnazione Permessi</h2>\n            <button type=\"button\" onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\n              <X className=\"h-6 w-6\" />\n            </button>\n          </div>\n          <div className=\"text-center py-8\">\n            <div className=\"text-red-600 mb-2\">⚠️ Errore</div>\n            <p className=\"text-gray-600\">{error}</p>\n            <button\n              type=\"button\"\n              onClick={loadAssignableData}\n              className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n              Riprova\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const filteredPermissions = getFilteredPermissions();\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center\">\n            <Shield className=\"h-6 w-6 text-blue-600 mr-2\" />\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">Assegnazione Permessi</h2>\n              <p className=\"text-sm text-gray-600\">\n                Utente: <span className=\"font-medium\">{targetUserName}</span> ({targetUserRole})\n              </p>\n            </div>\n          </div>\n          <button type=\"button\" onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"h-5 w-5 text-red-600 mr-2\" />\n              <span className=\"text-red-800\">{error}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Filtri */}\n        <div className=\"mb-6 space-y-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Cerca permessi...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div className=\"sm:w-48\">\n              <select\n                value={selectedCategory}\n                onChange={(e) => setSelectedCategory(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">Tutte le categorie</option>\n                {categories.map(category => (\n                  <option key={category} value={category}>\n                    {getCategoryDisplayName(category)}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Informazioni sui permessi assegnabili */}\n        {assignableData && (\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            <h3 className=\"font-medium text-blue-900 mb-2\">Permessi disponibili per l'assegnazione</h3>\n            <div className=\"text-sm text-blue-800\">\n              Puoi assegnare <span className=\"font-medium\">{assignableData.assignablePermissions.length}</span> permessi\n              a questo utente in base alla gerarchia dei ruoli.\n            </div>\n          </div>\n        )}\n\n        {/* Lista permessi per categoria */}\n        <div className=\"space-y-4 mb-6\">\n          {Object.entries(filteredPermissions).map(([category, permissions]) => (\n            <div key={category} className=\"border border-gray-200 rounded-lg\">\n              <button\n                type=\"button\"\n                onClick={() => toggleCategory(category)}\n                className=\"w-full p-4 text-left flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-t-lg\"\n              >\n                <div className=\"flex items-center\">\n                  <Filter className=\"h-5 w-5 text-gray-600 mr-2\" />\n                  <span className=\"font-medium text-gray-900\">\n                    {getCategoryDisplayName(category)}\n                  </span>\n                  <span className=\"ml-2 text-sm text-gray-600\">\n                    ({permissions.length} permess{permissions.length !== 1 ? 'i' : 'o'})\n                  </span>\n                </div>\n                {expandedCategories.has(category) ? (\n                  <ChevronUp className=\"h-5 w-5 text-gray-600\" />\n                ) : (\n                  <ChevronDown className=\"h-5 w-5 text-gray-600\" />\n                )}\n              </button>\n              \n              {expandedCategories.has(category) && (\n                <div className=\"p-4 border-t border-gray-200\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {permissions.map(permission => (\n                      <div\n                        key={permission}\n                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                          selectedPermissions.has(permission)\n                            ? 'border-blue-500 bg-blue-50'\n                            : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                        }`}\n                        onClick={() => togglePermission(permission)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center\">\n                              <div className={`w-4 h-4 rounded border-2 mr-3 flex items-center justify-center ${\n                                selectedPermissions.has(permission)\n                                  ? 'border-blue-500 bg-blue-500'\n                                  : 'border-gray-300'\n                              }`}>\n                                {selectedPermissions.has(permission) && (\n                                  <Check className=\"h-3 w-3 text-white\" />\n                                )}\n                              </div>\n                              <span className=\"font-medium text-gray-900\">\n                                {getPermissionDisplayName(permission)}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-gray-600 mt-1 ml-7\">\n                              {permission}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {Object.keys(filteredPermissions).length === 0 && (\n          <div className=\"text-center py-8\">\n            <div className=\"text-gray-400 mb-2\">\n              <Filter className=\"h-12 w-12 mx-auto\" />\n            </div>\n            <p className=\"text-gray-600\">\n              {searchTerm || selectedCategory !== 'all' \n                ? 'Nessun permesso trovato con i filtri applicati'\n                : 'Nessun permesso disponibile per l\\'assegnazione'\n              }\n            </p>\n          </div>\n        )}\n\n        {/* Footer con azioni */}\n        <div className=\"flex items-center justify-between pt-6 border-t border-gray-200\">\n          <div className=\"text-sm text-gray-600\">\n            {selectedPermissions.size > 0 && (\n              <span>\n                {selectedPermissions.size} permess{selectedPermissions.size !== 1 ? 'i' : 'o'} selezionat{selectedPermissions.size !== 1 ? 'i' : 'o'}\n              </span>\n            )}\n          </div>\n          <div className=\"flex space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200\"\n              disabled={saving}\n            >\n              Annulla\n            </button>\n            <button\n              type=\"button\"\n              onClick={handleAssignPermissions}\n              disabled={selectedPermissions.size === 0 || saving}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n            >\n              {saving ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Assegnazione...\n                </>\n              ) : (\n                'Assegna Permessi'\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PermissionAssignment;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/PermissionsGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[429,432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[429,432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  Building2,\n  Edit,\n  Eye,\n  FileText,\n  Layers,\n  Plus,\n  Target,\n  Trash2\n} from 'lucide-react';\nimport { Role } from '../../hooks/useRoles';\nimport { RolePermission } from '../../hooks/usePermissions';\nimport { Tenant } from '../../hooks/useTenants';\n\ninterface PermissionsGridProps {\n  selectedRole: Role | null;\n  entities: Array<{ key: string; label: string; icon: React.ComponentType<any> }>;\n  rolePermissions: Record<string, RolePermission>;\n  tenants: Tenant[];\n  tenantsLoading: boolean;\n  fieldPermissions: Record<string, Array<{ key: string; label: string }>>;\n  onPermissionChange: (permissionId: string, granted: boolean, scope?: string) => void;\n  onTenantChange: (permissionId: string, tenantId: number, selected: boolean) => void;\n  onFieldRestrictionChange: (permissionId: string, field: string, restricted: boolean) => void;\n  getPermissionKey: (entity: string, action: string) => string;\n  getPermissionsByEntity: (entity: string) => Array<{ id: string; name: string; description: string; category: string; entity: string; action: string }>;\n  translatePermissionAction: (action: string) => string;\n}\n\nexport const PermissionsGrid: React.FC<PermissionsGridProps> = ({\n  selectedRole,\n  entities,\n  rolePermissions,\n  tenants,\n  tenantsLoading,\n  fieldPermissions,\n  onPermissionChange,\n  onTenantChange,\n  onFieldRestrictionChange,\n  getPermissionKey,\n  getPermissionsByEntity,\n  translatePermissionAction\n}) => {\n  if (!selectedRole) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-gradient-to-br from-gray-50 to-blue-50\">\n        <div className=\"text-center p-8\">\n          <div className=\"p-6 bg-gradient-to-br from-blue-600 to-purple-600 rounded-2xl shadow-lg mb-6 inline-block\">\n            <Eye className=\"w-16 h-16 text-white\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Seleziona un ruolo</h3>\n          <p className=\"text-gray-600 text-base mb-4\">Gestisci permessi e accessi per gli utenti</p>\n          <p className=\"text-gray-500 text-sm\">Scegli un ruolo dalla lista a sinistra per iniziare</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Icone moderne per le azioni CRUD con colori\n  const actionIcons: Record<string, JSX.Element> = {\n    view: <Eye className=\"w-4 h-4 text-blue-600\" />,\n    create: <Plus className=\"w-4 h-4 text-green-600\" />,\n    edit: <Edit className=\"w-4 h-4 text-amber-600\" />,\n    delete: <Trash2 className=\"w-4 h-4 text-red-600\" />\n  };\n\n  const actionColors: Record<string, string> = {\n    view: 'bg-blue-50 border-blue-200',\n    create: 'bg-green-50 border-green-200',\n    edit: 'bg-amber-50 border-amber-200',\n    delete: 'bg-red-50 border-red-200'\n  };\n\n  const ringColors: Record<string, string> = {\n    view: 'ring-blue-300',\n    create: 'ring-green-300',\n    edit: 'ring-amber-300',\n    delete: 'ring-red-300'\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {entities.map((entity) => {\n        const IconComponent = entity.icon;\n        const entityPermissions = getPermissionsByEntity(entity.key);\n\n        return (\n          <div key={entity.key} id={`entity-${entity.key}`} className=\"scroll-mt-20\">\n            <h4 className=\"text-lg font-semibold text-gray-900 mb-6 flex items-center space-x-3 sticky top-0 bg-white/95 backdrop-blur-sm py-3 z-10 border-b border-gray-200\">\n              <div className=\"p-2 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl shadow-md\">\n                <IconComponent className=\"w-5 h-5 text-white\" />\n              </div>\n              <span>{entity.label}</span>\n            </h4>\n              \n            {/* LAYOUT CRUD 2x2 - OTTIMIZZATO */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              {entityPermissions.map((permission) => {\n                if (!permission.entity || !permission.action) {\n                  return null;\n                }\n                \n                const permissionKey = getPermissionKey(permission.entity, permission.action);\n                const rolePermission = rolePermissions[permissionKey];\n                const isGranted = rolePermission?.granted || false;\n                const scope = rolePermission?.scope || 'all';\n                const tenantIds = rolePermission?.tenantIds || [];\n                const fieldRestrictions = rolePermission?.fieldRestrictions || [];\n\n                const colorClass = actionColors[permission.action] || 'bg-gray-50 border-gray-200';\n                const ringClass = ringColors[permission.action] || 'ring-gray-300';\n\n                return (\n                  <div \n                    key={permissionKey} \n                    className={`${colorClass} rounded-xl p-4 border hover:shadow-md transition-all duration-300 ${\n                      isGranted ? `ring-2 ring-opacity-50 ${ringClass}` : ''\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <input\n                          type=\"checkbox\"\n                          checked={isGranted}\n                          onChange={(e) => onPermissionChange(permissionKey, e.target.checked)}\n                          className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded transition-all duration-200\"\n                        />\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"p-1.5 bg-white rounded-lg shadow-sm\">\n                            {actionIcons[permission.action] || <FileText className=\"w-4 h-4 text-gray-600\" />}\n                          </div>\n                          <span className=\"font-medium text-gray-900 text-sm\">\n                            {translatePermissionAction(permission.action)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {isGranted && (\n                      <div className=\"space-y-3 ml-6\">\n                        {/* Scope selection - DROPDOWN A PILLOLA OTTIMIZZATO */}\n                        <div>\n                          <label className=\"block text-xs font-medium text-gray-700 mb-1.5 flex items-center\">\n                            <Target className=\"w-3 h-3 mr-1 text-blue-600\" />\n                            Ambito di applicazione\n                          </label>\n                          <div className=\"relative\">\n                            <select\n                              value={scope}\n                              onChange={(e) => onPermissionChange(permissionKey, true, e.target.value)}\n                              className=\"w-full px-3 py-1.5 text-xs border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white appearance-none cursor-pointer hover:border-gray-400 transition-colors\"\n                              style={{\n                                backgroundImage: `url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\")`,\n                                backgroundPosition: 'right 0.5rem center',\n                                backgroundRepeat: 'no-repeat',\n                                backgroundSize: '1.2em 1.2em',\n                                paddingRight: '2rem'\n                              }}\n                            >\n                              <option value=\"all\">🌐 Tutti i record</option>\n                              <option value=\"own\">👤 Solo i propri record</option>\n                              <option value=\"tenant\">🏢 Per tenant specifici</option>\n                            </select>\n                          </div>\n                        </div>\n\n                        {/* Tenant selection */}\n                        {scope === 'tenant' && (\n                          <div>\n                            <label className=\"block text-xs font-medium text-gray-700 mb-1.5 flex items-center\">\n                              <Building2 className=\"w-3 h-3 mr-1 text-blue-600\" />\n                              Tenant autorizzati\n                            </label>\n                            {tenantsLoading ? (\n                              <div className=\"text-xs text-gray-500 p-2 flex items-center\">\n                                <Layers className=\"w-3 h-3 mr-1 animate-spin\" />\n                                Caricamento tenant...\n                              </div>\n                            ) : (\n                              <div className=\"space-y-1.5 max-h-24 overflow-y-auto bg-white border border-gray-200 rounded-lg p-2\">\n                                {tenants.map((tenant) => (\n                                  <label key={tenant.id} className=\"flex items-center hover:bg-gray-50 p-1 rounded cursor-pointer\">\n                                    <input\n                                      type=\"checkbox\"\n                                      checked={tenantIds.includes(tenant.id)}\n                                      onChange={(e) => onTenantChange(permissionKey, tenant.id, e.target.checked)}\n                                      className=\"mr-2 h-3 w-3 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                                    />\n                                    <span className=\"text-xs text-gray-700\">{tenant.name}</span>\n                                  </label>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        )}\n\n                        {/* Field restrictions */}\n                        {fieldPermissions[entity.key] && (\n                          <div>\n                            <label className=\"block text-xs font-medium text-gray-700 mb-1.5 flex items-center\">\n                              <Eye className=\"w-3 h-3 mr-1 text-blue-600\" />\n                              Campi visibili\n                            </label>\n                            <div className=\"space-y-1.5 max-h-24 overflow-y-auto bg-white border border-gray-200 rounded-lg p-2\">\n                              {fieldPermissions[entity.key].map((field) => (\n                                <label key={field.key} className=\"flex items-center hover:bg-gray-50 p-1 rounded cursor-pointer\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={!fieldRestrictions.includes(field.key)}\n                                    onChange={(e) => onFieldRestrictionChange(permissionKey, field.key, !e.target.checked)}\n                                    className=\"mr-2 h-3 w-3 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                                  />\n                                  <span className=\"text-xs text-gray-700\">{field.label}</span>\n                                </label>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/RoleHierarchy.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertDescription' is defined but never used.","line":6,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":7,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":7,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":7,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormField' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Loader2' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UserPlus' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'advancedPermissionsService' is defined but never used.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EntityPermission' is defined but never used.","line":37,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2718,2721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2718,2721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2781,2784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2781,2784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2840,2843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2840,2843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3626,3629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3626,3629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4869,4872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4869,4872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleCreateRole' is assigned a value but never used.","line":209,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":209,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9325,9328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9325,9328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10244,10247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10244,10247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10321,10324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10321,10324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10499,10502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10499,10502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":368,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14549,14552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14549,14552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":389,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15126,15129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15126,15129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":411,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15850,15853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15850,15853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":600,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":600,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24039,24042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24039,24042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card } from '../../design-system/molecules/Card';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Input } from '../../design-system/atoms/Input';\nimport { Badge } from '../../design-system/atoms/Badge';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../design-system/molecules/Tabs';\nimport { Select } from '../../design-system/atoms/Select';\nimport { FormField } from '../../design-system/molecules/FormField';\nimport { Separator } from '../ui/separator';\nimport { useToast } from '../../hooks/useToast';\nimport { \n  Shield, \n  Search, \n  Filter, \n  ChevronDown,\n  Edit,\n  Trash2,\n  Move,\n  AlertCircle,\n  Loader2,\n  Eye,\n  EyeOff,\n  UserPlus,\n  Crown,\n  Award,\n  Building,\n  TreePine,\n  Users,\n  Star,\n  UserCheck,\n  Plus,\n  ChevronRight\n} from 'lucide-react';\nimport { rolesService, moveRoleInHierarchy, createRole, deleteRole, updateRole, updateSystemRolePermissions } from '../../services/roles';\nimport { getRoleHierarchy, getCurrentUserRoleHierarchy } from '../../services/roles';\nimport { advancedPermissionsService, type EntityPermission } from '../../services/advancedPermissions';\nimport { isAuthenticated } from '../../services/auth';\nimport type { RoleHierarchy as RoleHierarchyType, UserRoleHierarchy } from '../../services/roles';\nimport HierarchyTreeView from './HierarchyTreeView';\nimport RoleModal from './RoleModal';\nimport DeleteRoleModal from './DeleteRoleModal';\nimport MoveRoleModal from './MoveRoleModal';\n\ninterface RoleHierarchyProps {\n  onRoleAssignment?: (targetUserId: string, roleType: string) => void;\n}\n\nconst RoleHierarchy: React.FC<RoleHierarchyProps> = ({ onRoleAssignment }) => {\n  const { showToast } = useToast();\n  const [hierarchy, setHierarchy] = useState<RoleHierarchyType>({});\n  const [currentUserHierarchy, setCurrentUserHierarchy] = useState<UserRoleHierarchy | null>(null);\n  const [expandedLevels, setExpandedLevels] = useState<Set<number>>(new Set([1, 2, 3, 4, 5]));\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showOnlyAssignable, setShowOnlyAssignable] = useState(false);\n  const [selectedRole, setSelectedRole] = useState<string | null>(null);\n  const [viewMode, setViewMode] = useState<'list' | 'tree'>('tree');\n  \n  // Stati per i modali CRUD\n  const [isRoleModalOpen, setIsRoleModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const [editingRole, setEditingRole] = useState<any>(null);\n  const [roleToDelete, setRoleToDelete] = useState<any>(null);\n  const [roleToMove, setRoleToMove] = useState<any>(null);\n\n  useEffect(() => {\n    loadHierarchyData();\n  }, []);\n\n  const loadHierarchyData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!isAuthenticated()) {\n        setError('Accesso non autorizzato. Effettua il login per visualizzare la gerarchia dei ruoli.');\n        setHierarchy({});\n        setCurrentUserHierarchy(null);\n        return;\n      }\n      \n      const [hierarchyData, userHierarchyData] = await Promise.all([\n        getRoleHierarchy(),\n        getCurrentUserRoleHierarchy()\n      ]);\n      \n      // Verifica che hierarchyData sia un oggetto valido\n      setHierarchy(hierarchyData && typeof hierarchyData === 'object' ? hierarchyData : {});\n      setCurrentUserHierarchy(userHierarchyData || null);\n    } catch (err: any) {\n      console.error('Error loading hierarchy data:', err);\n      \n      // Assicurati che hierarchy rimanga un oggetto vuoto in caso di errore\n      setHierarchy({});\n      setCurrentUserHierarchy(null);\n      \n      if (err?.response?.status === 401 || err?.message?.includes('Authentication required')) {\n        setError('Accesso non autorizzato. Effettua il login per visualizzare la gerarchia dei ruoli.');\n      } else if (err?.response?.status === 403) {\n        setError('Non hai i permessi necessari per visualizzare la gerarchia dei ruoli.');\n      } else if (err?.response?.status === 404) {\n        setError('Endpoint della gerarchia dei ruoli non trovato. Contatta l\\'amministratore di sistema.');\n      } else {\n        setError('Errore nel caricamento della gerarchia dei ruoli. Riprova più tardi.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleLevel = (level: number) => {\n    const newExpanded = new Set(expandedLevels);\n    if (newExpanded.has(level)) {\n      newExpanded.delete(level);\n    } else {\n      newExpanded.add(level);\n    }\n    setExpandedLevels(newExpanded);\n  };\n\n  const getRolesByLevel = () => {\n    const rolesByLevel: { [level: number]: Array<{ roleType: string; data: any }> } = {};\n    \n    // Verifica di sicurezza per hierarchy\n    if (!hierarchy || typeof hierarchy !== 'object') {\n      return rolesByLevel;\n    }\n    \n    Object.entries(hierarchy).forEach(([roleType, roleData]) => {\n      const level = roleData.level;\n      if (!rolesByLevel[level]) {\n        rolesByLevel[level] = [];\n      }\n      \n      // Applica filtri\n      const matchesSearch = !searchTerm || \n        roleData.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        roleData.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        roleType.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesAssignable = !showOnlyAssignable || canAssignRole(roleType);\n      \n      if (matchesSearch && matchesAssignable) {\n        rolesByLevel[level].push({ roleType, data: roleData });\n      }\n    });\n    \n    return rolesByLevel;\n  };\n\n  const canAssignRole = (roleType: string): boolean => {\n    if (!currentUserHierarchy || !currentUserHierarchy.assignableRoles) return false;\n    return currentUserHierarchy.assignableRoles.includes(roleType);\n  };\n\n  const isCurrentUserRole = (roleType: string): boolean => {\n    if (!currentUserHierarchy || !currentUserHierarchy.userRoles) return false;\n    return currentUserHierarchy.userRoles.includes(roleType);\n  };\n\n  const getLevelColor = (level: number): string => {\n    const colors = {\n      0: 'bg-gradient-to-r from-purple-100 to-purple-200 border-purple-400 text-purple-900',\n      1: 'bg-gradient-to-r from-red-100 to-red-200 border-red-400 text-red-900',\n      2: 'bg-gradient-to-r from-orange-100 to-orange-200 border-orange-400 text-orange-900',\n      3: 'bg-gradient-to-r from-yellow-100 to-yellow-200 border-yellow-400 text-yellow-900',\n      4: 'bg-gradient-to-r from-blue-100 to-blue-200 border-blue-400 text-blue-900',\n      5: 'bg-gradient-to-r from-green-100 to-green-200 border-green-400 text-green-900'\n    };\n    return colors[level as keyof typeof colors] || 'bg-gradient-to-r from-gray-100 to-gray-200 border-gray-400 text-gray-900';\n  };\n\n  const getLevelIcon = (level: number) => {\n    const icons = {\n      0: <Crown className=\"w-5 h-5\" />,\n      1: <Star className=\"w-5 h-5\" />,\n      2: <Award className=\"w-5 h-5\" />,\n      3: <Building className=\"w-5 h-5\" />,\n      4: <UserCheck className=\"w-5 h-5\" />,\n      5: <Users className=\"w-5 h-5\" />\n    };\n    return icons[level as keyof typeof icons] || <Shield className=\"w-5 h-5\" />;\n  };\n\n  const getLevelName = (level: number): string => {\n    const names = {\n      0: 'Super Amministratore',\n      1: 'Amministratore',\n      2: 'Amministratore Aziendale',\n      3: 'Manager',\n      4: 'Formatore',\n      5: 'Dipendente'\n    };\n    return names[level as keyof typeof names] || `Livello ${level}`;\n  };\n\n  const getRoleIcon = (roleType: string) => {\n    if (roleType.includes('SUPER_ADMIN')) return <Crown className=\"w-4 h-4 text-purple-600\" />;\n    if (roleType.includes('ADMIN')) return <Star className=\"w-4 h-4 text-red-600\" />;\n    if (roleType.includes('MANAGER')) return <Award className=\"w-4 h-4 text-orange-600\" />;\n    if (roleType.includes('TRAINER')) return <UserCheck className=\"w-4 h-4 text-blue-600\" />;\n    return <Users className=\"w-4 h-4 text-green-600\" />;\n  };\n\n  // Funzioni CRUD\n  const handleCreateRole = () => {\n    setEditingRole(null);\n    setIsRoleModalOpen(true);\n  };\n\n  const handleEditRole = (roleType: string) => {\n    if (!hierarchy || !hierarchy[roleType]) {\n      showToast({\n        message: \"Ruolo non trovato nella gerarchia.\",\n        type: \"error\"\n      });\n      return;\n    }\n    const roleData = hierarchy[roleType];\n    setEditingRole({ roleType, ...roleData });\n    setIsRoleModalOpen(true);\n  };\n\n  const handleDeleteRole = (roleType: string) => {\n    if (!hierarchy || !hierarchy[roleType]) {\n      showToast({\n        message: \"Ruolo non trovato nella gerarchia.\",\n        type: \"error\"\n      });\n      return;\n    }\n    const roleData = hierarchy[roleType];\n    setRoleToDelete({ roleType, ...roleData });\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleMoveRole = (roleType: string) => {\n    if (!hierarchy || !hierarchy[roleType]) {\n      showToast({\n        message: \"Ruolo non trovato nella gerarchia.\",\n        type: \"error\"\n      });\n      return;\n    }\n    const roleData = hierarchy[roleType];\n    setRoleToMove({ roleType, ...roleData });\n    setIsMoveModalOpen(true);\n  };\n\n  const handleRoleSubmit = async (roleData: any) => {\n    try {\n      // Converte i permessi dal formato del modal al formato atteso dal backend\n      let permissions: string[] = [];\n      let fullPermissions: Array<{ permissionId: string; granted: boolean; scope: string; tenantIds: string[]; fieldRestrictions: string[] }> = [];\n      \n      console.log('🔧 Original permissions from modal:', roleData.permissions);\n      \n      if (roleData.permissions) {\n        if (Array.isArray(roleData.permissions)) {\n          // Se è già un array di oggetti con il formato corretto, usalo direttamente\n           if (roleData.permissions.length > 0 && typeof roleData.permissions[0] === 'object' && 'permissionId' in roleData.permissions[0]) {\n             fullPermissions = roleData.permissions as Array<{ permissionId: string; granted: boolean; scope: string; tenantIds: string[]; fieldRestrictions: string[] }>;\n             permissions = fullPermissions.filter((p: any) => p.granted && p.permissionId && p.permissionId.trim() !== '').map((p: any) => p.permissionId.trim());\n          } else {\n            // Se è un array di stringhe, convertilo\n            permissions = roleData.permissions\n               .map((perm: any) => typeof perm === 'string' ? perm : perm.permissionId)\n               .filter((p: string) => p && typeof p === 'string' && p.trim() !== '')\n               .map((p: string) => p.trim());\n            fullPermissions = permissions.map(permissionId => ({\n              permissionId,\n              granted: true,\n              scope: 'all',\n              tenantIds: [],\n              fieldRestrictions: []\n            }));\n          }\n        } else if (typeof roleData.permissions === 'object') {\n          // Se è un oggetto Record<string, boolean>, convertilo\n          permissions = Object.entries(roleData.permissions)\n            .filter(([permissionId, granted]) => granted && permissionId && permissionId.trim() !== '')\n            .map(([permissionId]) => permissionId.trim());\n          fullPermissions = Object.entries(roleData.permissions)\n            .filter(([permissionId]) => permissionId && permissionId.trim() !== '')\n            .map(([permissionId, granted]) => ({\n              permissionId: permissionId.trim(),\n              granted: Boolean(granted),\n              scope: 'all',\n              tenantIds: [],\n              fieldRestrictions: []\n            }));\n        }\n      }\n\n      console.log('🔧 Processed permissions:', permissions);\n      console.log('🔧 Permissions count:', permissions.length);\n      console.log('🔧 Full permissions:', fullPermissions);\n\n      if (editingRole) {\n        // Aggiorna ruolo esistente\n        console.log('🔧 Updating role with data:', { ...roleData, permissions });\n        \n        // Per i ruoli personalizzati, aggiorna sia i dati base che i permessi\n        if (editingRole.roleType.startsWith('CUSTOM_')) {\n          // Estrai l'ID del ruolo personalizzato\n          const customRoleId = editingRole.roleType.replace('CUSTOM_', '');\n          \n          // Aggiorna il ruolo personalizzato con i permessi (usa array di stringhe)\n          const updateData = {\n            name: roleData.name,\n            description: roleData.description,\n            permissions: permissions // Array di stringhe per ruoli personalizzati\n          };\n          \n          await rolesService.updateCustomRole(customRoleId, updateData);\n        } else {\n          // Per i ruoli di sistema, aggiorna prima i dati base\n          await updateRole(editingRole.roleType, {\n            name: roleData.name,\n            description: roleData.description\n          });\n          \n          // Prepara il formato corretto per l'endpoint /permissions dei ruoli di sistema\n          // Il backend si aspetta un array di oggetti con permissionId, granted, scope, etc.\n          const systemRolePermissions = permissions.map(permissionId => ({\n            permissionId: permissionId.trim().toUpperCase(), // Normalizza il permissionId\n            granted: true,\n            scope: 'all',\n            tenantIds: [],\n            fieldRestrictions: []\n          }));\n          \n          console.log('🔧 Formatted permissions for backend:', systemRolePermissions);\n          \n          // Usa updateSystemRolePermissions che chiama l'endpoint /permissions\n          await updateSystemRolePermissions(editingRole.roleType, systemRolePermissions);\n        }\n        \n        showToast({\n          message: \"Il ruolo è stato aggiornato con successo.\",\n          type: \"success\"\n        });\n      } else {\n        // Crea nuovo custom role (usa array di stringhe)\n        const customRoleData = {\n          name: roleData.name,\n          description: roleData.description,\n          level: roleData.level || 1,\n          parentRoleType: roleData.parentRoleType || null,\n          permissions: permissions\n        };\n        \n        console.log('🔧 Creating role with data:', customRoleData);\n        await createRole(customRoleData);\n        showToast({\n          message: \"Il nuovo ruolo è stato creato con successo.\",\n          type: \"success\"\n        });\n      }\n      \n      // Ricarica i dati\n      await loadHierarchyData();\n      setIsRoleModalOpen(false);\n      setEditingRole(null);\n    } catch (error: any) {\n      console.error('❌ Error in handleRoleSubmit:', error);\n      showToast({\n        message: error.message || \"Si è verificato un errore durante l'operazione.\",\n        type: \"error\"\n      });\n    }\n  };\n\n  const handleRoleDelete = async (roleType: string) => {\n    try {\n      await deleteRole(roleType);\n      showToast({\n        message: \"Il ruolo è stato eliminato con successo.\",\n        type: \"success\"\n      });\n      \n      // Ricarica i dati\n      await loadHierarchyData();\n      setIsDeleteModalOpen(false);\n      setRoleToDelete(null);\n    } catch (error: any) {\n      showToast({\n        message: error.message || \"Si è verificato un errore durante l'eliminazione.\",\n        type: \"error\"\n      });\n    }\n  };\n\n  const handleRoleMove = async (roleType: string, newLevel: number, parentRoleType?: string) => {\n    try {\n      // Usa il nuovo servizio per spostare il ruolo\n      await moveRoleInHierarchy(roleType, newLevel, parentRoleType);\n      \n      showToast({\n        message: `Il ruolo è stato spostato con successo al livello ${newLevel}${parentRoleType ? ` sotto ${parentRoleType}` : ''}.`,\n        type: \"success\"\n      });\n      \n      // Ricarica i dati\n      await loadHierarchyData();\n      setIsMoveModalOpen(false);\n      setRoleToMove(null);\n    } catch (error: any) {\n      showToast({\n        message: error.message || \"Si è verificato un errore durante lo spostamento.\",\n        type: \"error\"\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent\"></div>\n          <span className=\"ml-4 text-lg font-medium text-gray-700\">Caricamento gerarchia...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    const isAuthError = error.includes('Accesso non autorizzato') || error.includes('login');\n    \n    return (\n      <div className=\"p-8\">\n        <div className=\"text-center py-12\">\n          <div className=\"text-red-600 mb-4 text-4xl\">⚠️</div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Errore di Accesso</h3>\n          <p className=\"text-gray-600 mb-6\">{error}</p>\n          <div className=\"flex gap-3 justify-center\">\n            {isAuthError ? (\n              <button\n                onClick={() => window.location.href = '/login'}\n                className=\"px-6 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:scale-105\"\n              >\n                Vai al Login\n              </button>\n            ) : (\n              <button\n                onClick={loadHierarchyData}\n                className=\"px-6 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:scale-105\"\n              >\n                Riprova\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const rolesByLevel = getRolesByLevel();\n  const sortedLevels = Object.keys(rolesByLevel).map(Number).sort((a, b) => a - b);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header con controlli - Layout compatto */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n        <div className=\"flex flex-col space-y-3\">\n          {/* Prima riga: Tab di navigazione e controlli principali */}\n          <div className=\"flex items-center justify-between\">\n            {/* Selettore modalità vista compatto */}\n            <div className=\"flex space-x-1 bg-gray-100 p-0.5 rounded-full\">\n              <button\n                onClick={() => setViewMode('tree')}\n                className={`px-3 py-1.5 rounded-full text-sm font-medium transition-all duration-200 flex items-center space-x-1.5 ${\n                  viewMode === 'tree'\n                    ? 'bg-blue-600 text-white shadow-sm'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-200'\n                }`}\n              >\n                <TreePine className=\"w-3.5 h-3.5\" />\n                <span>Albero</span>\n              </button>\n              <button\n                onClick={() => setViewMode('list')}\n                className={`px-3 py-1.5 rounded-full text-sm font-medium transition-all duration-200 flex items-center space-x-1.5 ${\n                  viewMode === 'list'\n                    ? 'bg-blue-600 text-white shadow-sm'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-200'\n                }`}\n              >\n                <Shield className=\"w-3.5 h-3.5\" />\n                <span>Lista</span>\n              </button>\n            </div>\n\n            {/* Controlli di destra */}\n            <div className=\"flex items-center space-x-3\">\n              {/* Statistiche compatte */}\n              <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                <span className=\"flex items-center\">\n                  <Users className=\"w-3 h-3 mr-1\" />\n                  {Object.keys(hierarchy).length} totali\n                </span>\n                <span className=\"flex items-center\">\n                  <UserCheck className=\"w-3 h-3 mr-1\" />\n                  {currentUserHierarchy?.assignableRoles?.length || 0} assegnabili\n                </span>\n              </div>\n\n              {/* Pulsante Nuovo Ruolo compatto */}\n              <button\n                onClick={() => {\n                  setEditingRole(null);\n                  setIsRoleModalOpen(true);\n                }}\n                className=\"px-3 py-1.5 bg-green-600 text-white rounded-full hover:bg-green-700 transition-all duration-200 text-sm font-medium flex items-center space-x-1.5\"\n              >\n                <Plus className=\"w-3.5 h-3.5\" />\n                <span>Nuovo</span>\n              </button>\n            </div>\n          </div>\n\n          {/* Seconda riga: Controlli specifici per modalità (solo se vista lista) */}\n          {viewMode === 'list' && (\n            <div className=\"flex items-center space-x-3 pt-2 border-t border-gray-100\">\n              {/* Barra di ricerca compatta */}\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-2.5 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Cerca ruoli...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-8 pr-3 py-1.5 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200\"\n                />\n              </div>\n\n              {/* Filtro ruoli assegnabili compatto */}\n              <button\n                onClick={() => setShowOnlyAssignable(!showOnlyAssignable)}\n                className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 flex items-center space-x-1.5 whitespace-nowrap ${\n                  showOnlyAssignable\n                    ? 'bg-green-100 text-green-800 border border-green-300'\n                    : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'\n                }`}\n              >\n                <Filter className=\"w-3.5 h-3.5\" />\n                <span>Solo Assegnabili</span>\n              </button>\n            </div>\n          )}\n\n          {/* Informazioni utente corrente compatte */}\n          {currentUserHierarchy && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n              <div className=\"flex items-center space-x-3\">\n                <UserCheck className=\"w-4 h-4 text-blue-600 flex-shrink-0\" />\n                <div className=\"flex items-center space-x-4 text-xs\">\n                  <span className=\"text-blue-800\">\n                    <strong>Ruolo:</strong> {currentUserHierarchy.highestRole}\n                  </span>\n                  <span className=\"text-blue-800\">\n                    <strong>Livello:</strong> {currentUserHierarchy.userLevel}\n                  </span>\n                  <span className=\"text-blue-800\">\n                    <strong>Assegnabili:</strong> {currentUserHierarchy.assignableRoles?.length || 0}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Contenuto principale */}\n      {viewMode === 'tree' ? (\n        <HierarchyTreeView\n          hierarchy={hierarchy}\n          currentUserHierarchy={currentUserHierarchy}\n          onRoleCreate={async (parentId, roleData) => {\n            try {\n              // Prepara i dati per il backend come custom role\n              const roleDataForBackend = {\n                name: roleData.name,\n                description: roleData.description,\n                permissions: roleData.permissions || []\n              };\n              \n              console.log('Creating custom role with data:', roleDataForBackend);\n              await createRole(roleDataForBackend);\n              \n              showToast({\n                message: \"Il nuovo ruolo è stato creato con successo.\",\n                type: \"success\"\n              });\n              \n              await loadHierarchyData();\n            } catch (error: any) {\n              console.error('Error creating role:', error);\n              showToast({\n                message: error.message || \"Si è verificato un errore durante la creazione del ruolo.\",\n                type: \"error\"\n              });\n            }\n          }}\n          onRoleUpdate={async (roleId, roleData) => {\n            try {\n              await handleRoleSubmit(roleData);\n              await loadHierarchyData();\n            } catch (error) {\n              console.error('Error updating role:', error);\n            }\n          }}\n          onRoleDelete={async (roleId) => {\n            try {\n              await handleRoleDelete(roleId);\n            } catch (error) {\n              console.error('Error deleting role:', error);\n            }\n          }}\n          onRoleMove={async (roleId, newParentId) => {\n            try {\n              // Trova il nuovo livello basato sul parent\n              const newLevel = newParentId && hierarchy[newParentId] ? hierarchy[newParentId].level + 1 : 1;\n              await handleRoleMove(roleId, newLevel);\n            } catch (error) {\n              console.error('Error moving role:', error);\n            }\n          }}\n        />\n      ) : (\n        /* Vista lista esistente */\n        <div className=\"space-y-3\">\n          {sortedLevels.map((level) => {\n            const isExpanded = expandedLevels.has(level);\n            const roles = rolesByLevel[level];\n            \n            if (!roles || roles.length === 0) return null;\n            \n            return (\n              <div key={level} className=\"bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden\">\n                <button\n                  onClick={() => toggleLevel(level)}\n                  className={`w-full p-3 text-left flex items-center justify-between transition-all duration-300 ${getLevelColor(level)} ${!isExpanded ? 'rounded-lg' : 'rounded-t-lg'}`}\n                >\n                  <div className=\"flex items-center\">\n                    {isExpanded ? (\n                      <ChevronDown className=\"h-4 w-4 mr-2\" />\n                    ) : (\n                      <ChevronRight className=\"h-4 w-4 mr-2\" />\n                    )}\n                    <div className=\"mr-2\">\n                      {React.cloneElement(getLevelIcon(level), { className: \"w-4 h-4\" })}\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-sm\">\n                        Livello {level}: {getLevelName(level)}\n                      </span>\n                      <div className=\"text-xs opacity-80 mt-0.5\">\n                        {roles?.length || 0} ruol{(roles?.length || 0) !== 1 ? 'i' : 'o'} disponibil{(roles?.length || 0) !== 1 ? 'i' : 'e'}\n                      </div>\n                    </div>\n                  </div>\n                </button>\n                \n                {isExpanded && (\n                  <div className=\"p-4 bg-white border-t border-gray-200\">\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-3\">\n                      {roles.map(({ roleType, data }) => (\n                        <div\n                          key={roleType}\n                          className={`p-3 border-2 rounded-lg transition-all duration-300 cursor-pointer hover:shadow-md transform hover:scale-101 ${\n                            isCurrentUserRole(roleType)\n                              ? 'border-blue-500 bg-blue-50 shadow-sm'\n                              : canAssignRole(roleType)\n                              ? 'border-green-400 bg-green-50 hover:border-green-500'\n                              : 'border-gray-200 bg-gray-50 hover:border-gray-300'\n                          } ${selectedRole === roleType ? 'ring-2 ring-blue-300' : ''}`}\n                          onClick={() => setSelectedRole(selectedRole === roleType ? null : roleType)}\n                        >\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex items-center\">\n                              {React.cloneElement(getRoleIcon(roleType), { className: \"w-3.5 h-3.5\" })}\n                              <h4 className=\"font-medium text-sm text-gray-900 ml-1.5\">{data.name}</h4>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              {isCurrentUserRole(roleType) && (\n                                <span className=\"text-xs bg-blue-500 text-white px-1.5 py-0.5 rounded-full font-medium\">\n                                  TUO\n                                </span>\n                              )}\n                              \n                              {/* Pulsanti azioni CRUD */}\n                              <div className=\"flex space-x-0.5\">\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleEditRole(roleType);\n                                  }}\n                                  className=\"p-1 text-blue-600 hover:bg-blue-100 rounded transition-colors\"\n                                  title=\"Modifica ruolo\"\n                                >\n                                  <Edit className=\"w-3 h-3\" />\n                                </button>\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleMoveRole(roleType);\n                                  }}\n                                  className=\"p-1 text-amber-600 hover:bg-amber-100 rounded transition-colors\"\n                                  title=\"Sposta ruolo\"\n                                >\n                                  <Move className=\"w-3 h-3\" />\n                                </button>\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleDeleteRole(roleType);\n                                  }}\n                                  className=\"p-1 text-red-600 hover:bg-red-100 rounded transition-colors\"\n                                  title=\"Elimina ruolo\"\n                                >\n                                  <Trash2 className=\"w-3 h-3\" />\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-xs text-gray-600 mb-3 line-clamp-2\">{data.description}</p>\n                          \n                          <div className=\"space-y-2\">\n                            <div>\n                              <span className=\"text-xs font-medium text-gray-700 block mb-1\">Ruoli assegnabili:</span>\n                              <div className=\"text-xs text-gray-600\">\n                                {data.assignableRoles && data.assignableRoles.length > 0 ? (\n                                  <div className=\"flex flex-wrap gap-1\">\n                                    {data.assignableRoles.slice(0, 2).map((role: string) => (\n                                      <span key={role} className=\"bg-gray-100 px-1.5 py-0.5 rounded text-xs\">\n                                        {role}\n                                      </span>\n                                    ))}\n                                    {data.assignableRoles.length > 2 && (\n                                      <span className=\"text-gray-500 px-1.5 py-0.5 text-xs\">\n                                        +{data.assignableRoles.length - 2}\n                                      </span>\n                                    )}\n                                  </div>\n                                ) : (\n                                  <span className=\"text-gray-400 italic text-xs\">Nessuno</span>\n                                )}\n                              </div>\n                            </div>\n                            \n                            <div>\n                              <span className=\"text-xs font-medium text-gray-700 block mb-1\">Permessi:</span>\n                              <div className=\"text-xs text-gray-600\">\n                                {data.permissions?.length > 0 ? (\n                                  <span className=\"bg-blue-100 text-blue-800 px-1.5 py-0.5 rounded text-xs\">\n                                    {data.permissions.length} permess{data.permissions.length !== 1 ? 'i' : 'o'}\n                                  </span>\n                                ) : (\n                                  <span className=\"text-gray-400 italic text-xs\">Nessuno</span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {canAssignRole(roleType) && onRoleAssignment && (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                onRoleAssignment('', roleType);\n                              }}\n                              className=\"mt-3 w-full text-xs bg-gradient-to-r from-green-600 to-emerald-600 text-white px-3 py-1.5 rounded hover:from-green-700 hover:to-emerald-700 transition-all duration-300 font-medium shadow-sm hover:shadow-md transform hover:scale-105\"\n                            >\n                              Assegna Ruolo\n                            </button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      )}\n      \n      {/* Modali CRUD */}\n      <RoleModal\n        isOpen={isRoleModalOpen}\n        onClose={() => {\n          setIsRoleModalOpen(false);\n          setEditingRole(null);\n        }}\n        onSave={handleRoleSubmit}\n        role={editingRole}\n        mode={editingRole ? 'edit' : 'create'}\n        hierarchy={hierarchy}\n      />\n      \n      <DeleteRoleModal\n        isOpen={isDeleteModalOpen}\n        onClose={() => {\n          setIsDeleteModalOpen(false);\n          setRoleToDelete(null);\n        }}\n        onConfirm={() => roleToDelete && handleRoleDelete(roleToDelete.roleType)}\n        role={roleToDelete}\n      />\n      \n      <MoveRoleModal\n        isOpen={isMoveModalOpen}\n        onClose={() => {\n          setIsMoveModalOpen(false);\n          setRoleToMove(null);\n        }}\n        onMove={(newLevel) => roleToMove && handleRoleMove(roleToMove.roleType, newLevel)}\n        role={roleToMove}\n        hierarchy={hierarchy}\n        currentLevel={roleToMove?.level || 0}\n      />\n    </div>\n  );\n};\n\nexport default RoleHierarchy;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/RoleList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/RoleModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1169,1172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1169,1172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1201,1204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1201,1204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1262,1265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1262,1265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entities' is assigned a value but never used.","line":71,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2217,2220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2217,2220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":398,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":398,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12784,12787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12784,12787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":511,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":511,"endColumn":34}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Modal } from '../../design-system/molecules/Modal';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Input } from '../../design-system/atoms/Input';\nimport { Label } from '../../design-system/atoms/Label';\nimport { FormField } from '../../design-system/molecules/FormField';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { \n  Loader2, \n  AlertCircle, \n  Shield, \n  Database,\n  Building2,\n  BookOpen,\n  TreePine,\n  Building,\n  Layers,\n  MessageSquare,\n  Globe,\n  Users,\n  Calendar,\n  FileText,\n  Settings,\n  ChevronRight\n} from 'lucide-react';\nimport { rolesService } from '../../services/roles';\nimport { advancedPermissionsService, EntityDefinition } from '../../services/advancedPermissions';\n\ninterface Permission {\n  key: string;\n  label: string;\n  description: string;\n}\n\ninterface PermissionGroup {\n  label: string;\n  description: string;\n  permissions: Permission[];\n}\n\ninterface EntityGroup {\n  entity: EntityDefinition;\n  permissions: Permission[];\n}\n\ninterface RoleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (roleData: any) => Promise<void>;\n  role?: any;\n  mode: 'create' | 'edit';\n  hierarchy?: Record<string, any>; // Aggiunto per la selezione del genitore\n}\n\nconst RoleModal: React.FC<RoleModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n  role,\n  mode,\n  hierarchy = {}\n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    level: '1',\n    parentRoleType: '',\n    permissions: {} as Record<string, boolean>\n  });\n  const [availablePermissions, setAvailablePermissions] = useState<Record<string, PermissionGroup>>({});\n  const [entities, setEntities] = useState<EntityDefinition[]>([]);\n  const [entityGroups, setEntityGroups] = useState<EntityGroup[]>([]);\n  const [selectedPermissionGroup, setSelectedPermissionGroup] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [loadingPermissions, setLoadingPermissions] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Mappa delle icone per le entità\n  const entityIcons: Record<string, React.ComponentType<any>> = useMemo(() => ({\n    persons: Users,\n    companies: Building2,\n    courses: BookOpen,\n    trainings: Calendar,\n    roles: Shield,\n    hierarchy: TreePine,\n    documents: Database,\n    sites: Building,\n    reparti: Layers,\n    form_templates: FileText,\n    form_submissions: MessageSquare,\n    public_cms: Globe,\n    templates: FileText\n  }), []);\n\n  // Funzione per ottenere l'icona dell'entità\n  const getEntityIcon = useCallback((entityName: string) => {\n    return entityIcons[entityName] || Database;\n  }, [entityIcons]);\n\n  // Carica i permessi disponibili\n  useEffect(() => {\n    if (isOpen) {\n      loadAvailablePermissions();\n    }\n  }, [isOpen]);\n\n  // Inizializza il form quando si apre il modal\n  useEffect(() => {\n    if (isOpen) {\n      if (mode === 'edit' && role) {\n        setFormData({\n          name: role.name || '',\n          description: role.description || '',\n          level: (role.level || 1).toString(),\n          parentRoleType: role.parentRoleType || '',\n          permissions: {} // Inizializza vuoto, verrà caricato separatamente\n        });\n        // Carica i permessi del ruolo dal backend\n        loadRolePermissions(role.roleType);\n      } else {\n        setFormData({\n          name: '',\n          description: '',\n          level: '1',\n          parentRoleType: '',\n          permissions: {}\n        });\n      }\n      setError(null);\n    }\n  }, [isOpen, mode, role]);\n\n  const loadRolePermissions = async (roleType: string) => {\n    try {\n      setLoadingPermissions(true);\n      console.log('🔍 [RoleModal] Loading permissions for role:', roleType);\n      \n      const rolePermissions = await rolesService.getRolePermissions(roleType);\n      console.log('🔍 [RoleModal] Received permissions from API:', rolePermissions);\n      console.log('🔍 [RoleModal] Permissions type:', typeof rolePermissions);\n      console.log('🔍 [RoleModal] Is array:', Array.isArray(rolePermissions));\n      console.log('🔍 [RoleModal] Length:', rolePermissions?.length);\n      \n      // Converte l'array di permessi in un oggetto Record<string, boolean>\n      const permissionsMap: Record<string, boolean> = {};\n      if (Array.isArray(rolePermissions)) {\n        rolePermissions.forEach((permission: string) => {\n          console.log('🔍 [RoleModal] Processing permission:', permission);\n          // Il backend restituisce i permessi già normalizzati (maiuscoli)\n          // Li usiamo direttamente come chiavi\n          permissionsMap[permission] = true;\n        });\n      } else {\n        console.warn('🔍 [RoleModal] Permissions is not an array:', rolePermissions);\n      }\n      \n      console.log('🔍 [RoleModal] Final permissions map:', permissionsMap);\n      console.log('🔍 [RoleModal] Permissions map keys:', Object.keys(permissionsMap));\n      \n      // Aggiorna il form con i permessi caricati\n      setFormData(prev => {\n        const newFormData = {\n          ...prev,\n          permissions: permissionsMap\n        };\n        console.log('🔍 [RoleModal] Updated form data:', newFormData);\n        return newFormData;\n      });\n      \n      console.log('🔍 [RoleModal] Form data updated with permissions successfully');\n    } catch (error) {\n      console.error('❌ [RoleModal] Error loading role permissions:', error);\n      setError('Errore nel caricamento dei permessi del ruolo');\n    } finally {\n      setLoadingPermissions(false);\n    }\n  };\n\n  const loadAvailablePermissions = async () => {\n    try {\n      setLoadingPermissions(true);\n      \n      // Carica sia i permessi che le entità\n      const [permissions, entitiesData] = await Promise.all([\n        rolesService.getPermissions(),\n        advancedPermissionsService.getEntityDefinitions()\n      ]);\n      \n      console.log('🔍 [RoleModal] Entità caricate:', entitiesData.length);\n      console.log('🔍 [RoleModal] Lista entità:', entitiesData.map(e => e.name));\n      \n      // Verifica se le entità critiche sono presenti\n      const criticalEntities = ['form_templates', 'form_submissions', 'public_cms'];\n      const foundCriticalEntities = criticalEntities.filter(entity => \n        entitiesData.some(e => e.name === entity)\n      );\n      console.log('🔍 [RoleModal] Entità critiche trovate:', foundCriticalEntities);\n      \n      // Raggruppa i permessi per categoria (mantenendo la logica esistente)\n      const groupedPermissions: Record<string, PermissionGroup> = {};\n      permissions.forEach(permission => {\n        const category = permission.category || 'general';\n        if (!groupedPermissions[category]) {\n          // Gestione sicura per evitare errori toUpperCase su undefined\n          const categoryLabel = category && typeof category === 'string' \n            ? category.charAt(0).toUpperCase() + category.slice(1)\n            : 'General';\n          \n          groupedPermissions[category] = {\n            label: categoryLabel,\n            description: `Permessi per ${category}`,\n            permissions: []\n          };\n        }\n        groupedPermissions[category].permissions.push({\n          key: permission.id,\n          label: permission.name,\n          description: permission.description || ''\n        });\n      });\n      \n      // Crea gruppi di entità con permessi CRUD\n      const entityGroupsData: EntityGroup[] = entitiesData.map(entity => {\n        // Normalizza il nome dell'entità come fa il backend\n        const normalizedEntityName = entity.name.trim().toUpperCase();\n        \n        const crudPermissions: Permission[] = [\n          {\n            key: `CREATE_${normalizedEntityName}`,\n            label: `Crea ${entity.displayName}`,\n            description: `Permesso per creare nuovi record di ${entity.displayName}`\n          },\n          {\n            key: `VIEW_${normalizedEntityName}`,\n            label: `Visualizza ${entity.displayName}`,\n            description: `Permesso per visualizzare i record di ${entity.displayName}`\n          },\n          {\n            key: `EDIT_${normalizedEntityName}`,\n            label: `Modifica ${entity.displayName}`,\n            description: `Permesso per modificare i record di ${entity.displayName}`\n          },\n          {\n            key: `DELETE_${normalizedEntityName}`,\n            label: `Elimina ${entity.displayName}`,\n            description: `Permesso per eliminare i record di ${entity.displayName}`\n          }\n        ];\n        \n        return {\n          entity,\n          permissions: crudPermissions\n        };\n      });\n      \n      console.log('🔍 [RoleModal] Gruppi entità creati:', entityGroupsData.length);\n      console.log('🔍 [RoleModal] Entità nei gruppi:', entityGroupsData.map(g => g.entity.name));\n      \n      setAvailablePermissions(groupedPermissions);\n      setEntities(entitiesData);\n      setEntityGroups(entityGroupsData);\n    } catch (error) {\n      console.error('Error loading permissions:', error);\n      setError('Errore nel caricamento dei permessi');\n    } finally {\n      setLoadingPermissions(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handlePermissionChange = (permissionKey: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      permissions: {\n        ...prev.permissions,\n        [permissionKey]: checked\n      }\n    }));\n  };\n\n  const handleSelectAllPermissions = () => {\n    const allPermissions: Record<string, boolean> = {};\n    \n    // Seleziona tutti i permessi delle categorie esistenti\n    Object.values(availablePermissions).forEach(group => {\n      group.permissions.forEach(permission => {\n        allPermissions[permission.key] = true;\n      });\n    });\n    \n    // Seleziona tutti i permessi delle entità\n    entityGroups.forEach(entityGroup => {\n      entityGroup.permissions.forEach(permission => {\n        allPermissions[permission.key] = true;\n      });\n    });\n    \n    setFormData(prev => ({\n      ...prev,\n      permissions: allPermissions\n    }));\n  };\n\n  const handleSelectNoPermissions = () => {\n    setFormData(prev => ({\n      ...prev,\n      permissions: {}\n    }));\n  };\n\n  const handleSelectGroupPermissions = (groupKey: string, selectAll: boolean) => {\n    const newPermissions = { ...formData.permissions };\n    \n    if (groupKey.startsWith('entity_')) {\n      // Gestione per gruppi di entità\n      const entityIndex = parseInt(groupKey.replace('entity_', ''));\n      const entityGroup = entityGroups[entityIndex];\n      if (entityGroup) {\n        entityGroup.permissions.forEach(permission => {\n          if (selectAll) {\n            newPermissions[permission.key] = true;\n          } else {\n            delete newPermissions[permission.key];\n          }\n        });\n      }\n    } else {\n      // Gestione per gruppi di permessi esistenti\n      const group = availablePermissions[groupKey];\n      if (group) {\n        group.permissions.forEach(permission => {\n          if (selectAll) {\n            newPermissions[permission.key] = true;\n          } else {\n            delete newPermissions[permission.key];\n          }\n        });\n      }\n    }\n    \n    setFormData(prev => ({\n      ...prev,\n      permissions: newPermissions\n    }));\n  };\n\n  const getSelectedPermissionsCount = (groupPermissions: Permission[]) => {\n    return groupPermissions.filter(perm => formData.permissions[perm.key]).length;\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Validazione\n      if (!formData.name.trim()) {\n        setError('Il nome del ruolo è obbligatorio');\n        return;\n      }\n\n      if (!formData.description.trim()) {\n        setError('La descrizione del ruolo è obbligatoria');\n        return;\n      }\n\n      // Prepara i dati per l'API\n      // Il backend si aspetta sempre un array di oggetti con { permissionId, granted, scope, ... }\n      const permissions = Object.entries(formData.permissions)\n        .map(([permissionId, granted]) => ({\n          permissionId: permissionId.trim().toUpperCase(),\n          granted: Boolean(granted),\n          scope: 'all',\n          tenantIds: [],\n          fieldRestrictions: []\n        }));\n\n      console.log('🔧 RoleModal - Sending permissions:', permissions);\n\n      const roleData = {\n        name: formData.name.trim(),\n        description: formData.description.trim(),\n        permissions: permissions,\n        ...(mode === 'create' && {\n          level: parseInt(formData.level),\n          parentRoleType: formData.parentRoleType || null\n        })\n      };\n\n      await onSave(roleData);\n      onClose();\n    } catch (error: any) {\n      console.error('Error saving role:', error);\n      setError(error.message || 'Errore nel salvataggio del ruolo');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const totalSelectedPermissions = Object.values(formData.permissions).filter(Boolean).length;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={mode === 'create' ? 'Crea Nuovo Ruolo' : 'Modifica Ruolo'}\n      size=\"lg\"\n    >\n      <div className=\"space-y-6\">\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Informazioni base */}\n        <div className=\"space-y-4\">\n          <FormField\n            label=\"Nome Ruolo *\"\n            name=\"name\"\n            type=\"text\"\n            value={formData.name}\n            onChange={(e) => handleInputChange('name', e.target.value)}\n            placeholder=\"Es. Manager Vendite\"\n            disabled={loading}\n            required\n          />\n\n          <FormField\n            label=\"Descrizione *\"\n            name=\"description\"\n            type=\"textarea\"\n            value={formData.description}\n            onChange={(e) => handleInputChange('description', e.target.value)}\n            placeholder=\"Descrizione del ruolo e delle sue responsabilità\"\n            rows={3}\n            disabled={loading}\n            required\n          />\n\n          {mode === 'create' && (\n            <>\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"level\" className=\"text-sm font-medium text-gray-700\">\n                  Livello Gerarchico *\n                </Label>\n                <div className=\"grid grid-cols-6 gap-2\">\n                  {[1, 2, 3, 4, 5, 6].map((level) => (\n                    <button\n                      key={level}\n                      type=\"button\"\n                      onClick={() => handleInputChange('level', level.toString())}\n                      className={`\n                        relative p-3 rounded-lg border-2 transition-all duration-200 text-center\n                        ${parseInt(formData.level) === level\n                          ? 'border-blue-500 bg-blue-50 text-blue-700 shadow-md'\n                          : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300 hover:bg-gray-50'\n                        }\n                      `}\n                      disabled={loading}\n                    >\n                      <div className=\"text-lg font-bold\">{level}</div>\n                      <div className=\"text-xs mt-1\">\n                        {level === 1 ? 'CEO' : \n                         level === 2 ? 'Dir.' : \n                         level === 3 ? 'Mgr' : \n                         level === 4 ? 'Lead' : \n                         level === 5 ? 'Sr.' : 'Jr.'}\n                      </div>\n                      {parseInt(formData.level) === level && (\n                        <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full\"></div>\n                      )}\n                    </button>\n                  ))}\n                </div>\n                <p className=\"text-xs text-gray-500\">\n                  Seleziona il livello gerarchico (1 = più alto, 6 = più basso)\n                </p>\n              </div>\n\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"parentRoleType\" className=\"text-sm font-medium text-gray-700\">\n                  Ruolo Genitore\n                </Label>\n                \n                {parseInt(formData.level) > 1 ? (\n                  <div className=\"space-y-3 max-h-48 overflow-y-auto border rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <input\n                        type=\"radio\"\n                        name=\"parentRole\"\n                        value=\"\"\n                        checked={!formData.parentRoleType}\n                        onChange={() => handleInputChange('parentRoleType', '')}\n                        className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300\"\n                        disabled={loading}\n                      />\n                      <Label className=\"text-sm text-gray-600 cursor-pointer\">\n                        Nessun genitore specifico\n                      </Label>\n                    </div>\n                    \n                    {Object.entries(hierarchy)\n                      .filter(([_, roleData]) => roleData?.level === parseInt(formData.level) - 1)\n                      .map(([roleType, roleData]) => (\n                        <div key={roleType} className=\"flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors\">\n                          <input\n                            type=\"radio\"\n                            name=\"parentRole\"\n                            value={roleType}\n                            checked={formData.parentRoleType === roleType}\n                            onChange={() => handleInputChange('parentRoleType', roleType)}\n                            className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 mt-1\"\n                            disabled={loading}\n                          />\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Label className=\"font-medium text-gray-900 cursor-pointer\">\n                                {roleData?.name || roleType}\n                              </Label>\n                              <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                                Livello {roleData?.level}\n                              </span>\n                            </div>\n                            {roleData?.description && (\n                              <p className=\"text-sm text-gray-500 mt-1\">\n                                {roleData.description}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                  </div>\n                ) : (\n                  <div className=\"p-4 bg-gray-50 rounded-lg text-center\">\n                    <p className=\"text-sm text-gray-600\">\n                      I ruoli di livello 1 non possono avere un genitore\n                    </p>\n                  </div>\n                )}\n                \n                <p className=\"text-xs text-gray-500\">\n                  {parseInt(formData.level) > 1 \n                    ? `Seleziona un ruolo genitore dal livello ${parseInt(formData.level) - 1} (opzionale)`\n                    : 'I ruoli di livello 1 sono ruoli radice'\n                  }\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Permessi - Layout a colonne */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5 text-blue-600\" />\n              <Label className=\"text-base font-medium\">Permessi</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {totalSelectedPermissions > 0 && (\n                <span className=\"text-sm text-gray-600\">\n                  {totalSelectedPermissions} permessi selezionati\n                </span>\n              )}\n              <div className=\"flex space-x-2\">\n                <button\n                  type=\"button\"\n                  onClick={handleSelectAllPermissions}\n                  className=\"px-4 py-2 bg-blue-500 text-white rounded-full text-xs font-medium hover:bg-blue-600 transition-all duration-200 shadow-sm hover:shadow-md\"\n                >\n                  Seleziona Tutti\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={handleSelectNoPermissions}\n                  className=\"px-4 py-2 bg-gray-500 text-white rounded-full text-xs font-medium hover:bg-gray-600 transition-all duration-200 shadow-sm hover:shadow-md\"\n                >\n                  Deseleziona Tutti\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {loadingPermissions ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n              <span className=\"ml-2\">Caricamento permessi...</span>\n            </div>\n          ) : (\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n              {/* Header */}\n              <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-b border-gray-200\">\n                <div className=\"grid grid-cols-2 h-12\">\n                  {/* Header Entità */}\n                  <div className=\"flex items-center px-4 border-r border-gray-200\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Database className=\"w-4 h-4 text-green-600\" />\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 text-sm\">Entità del Sistema</h4>\n                        <p className=\"text-xs text-gray-600\">{entityGroups.length + Object.keys(availablePermissions).length} categorie</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Header Permessi */}\n                  <div className=\"flex items-center px-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Settings className=\"w-4 h-4 text-orange-600\" />\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 text-sm\">Permessi</h4>\n                        <p className=\"text-xs text-gray-600\">Seleziona permessi specifici</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Contenuto principale */}\n              <div className=\"grid grid-cols-2 h-80\">\n                {/* Colonna 1: Lista Entità */}\n                <div className=\"border-r border-gray-200 overflow-hidden\">\n                  <div className=\"overflow-y-auto h-full\">\n                    {/* Entità del sistema */}\n                    {entityGroups.map((entityGroup, index) => {\n                      const groupKey = `entity_${index}`;\n                      const selectedCount = getSelectedPermissionsCount(entityGroup.permissions);\n                      const hasPermissions = selectedCount > 0;\n                      const EntityIcon = getEntityIcon(entityGroup.entity.name);\n                      \n                      return (\n                        <button\n                          key={groupKey}\n                          type=\"button\"\n                          onClick={() => setSelectedPermissionGroup(groupKey)}\n                          className={`w-full text-left p-3 border-b border-gray-100 transition-colors ${\n                            selectedPermissionGroup === groupKey \n                              ? 'bg-blue-50 border-blue-200' \n                              : 'hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`p-2 rounded-lg ${hasPermissions ? 'bg-green-100' : 'bg-gray-100'}`}>\n                              <EntityIcon className={`w-4 h-4 ${hasPermissions ? 'text-green-600' : 'text-gray-600'}`} />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"font-medium text-gray-900 text-sm truncate\">{entityGroup.entity.displayName}</div>\n                              <div className=\"text-xs text-gray-500\">\n                                {selectedCount}/{entityGroup.permissions.length} selezionati\n                              </div>\n                            </div>\n                            {selectedPermissionGroup === groupKey && (\n                              <ChevronRight className=\"w-4 h-4 text-blue-600\" />\n                            )}\n                          </div>\n                        </button>\n                      );\n                    })}\n                    \n                    {/* Categorie di permessi esistenti */}\n                    {Object.entries(availablePermissions).map(([groupKey, group]) => {\n                      const selectedCount = getSelectedPermissionsCount(group.permissions);\n                      const hasPermissions = selectedCount > 0;\n                      \n                      return (\n                        <button\n                          key={groupKey}\n                          type=\"button\"\n                          onClick={() => setSelectedPermissionGroup(groupKey)}\n                          className={`w-full text-left p-3 border-b border-gray-100 transition-colors ${\n                            selectedPermissionGroup === groupKey \n                              ? 'bg-blue-50 border-blue-200' \n                              : 'hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`p-2 rounded-lg ${hasPermissions ? 'bg-green-100' : 'bg-gray-100'}`}>\n                              <Shield className={`w-4 h-4 ${hasPermissions ? 'text-green-600' : 'text-gray-600'}`} />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"font-medium text-gray-900 text-sm truncate\">{group.label}</div>\n                              <div className=\"text-xs text-gray-500\">\n                                {selectedCount}/{group.permissions.length} selezionati\n                              </div>\n                            </div>\n                            {selectedPermissionGroup === groupKey && (\n                              <ChevronRight className=\"w-4 h-4 text-blue-600\" />\n                            )}\n                          </div>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                {/* Colonna 2: Permessi del gruppo selezionato */}\n                <div className=\"overflow-hidden\">\n                  {selectedPermissionGroup ? (\n                    <div className=\"h-full overflow-y-auto\">\n                      {selectedPermissionGroup.startsWith('entity_') ? (\n                        // Gestione entità\n                        (() => {\n                          const entityIndex = parseInt(selectedPermissionGroup.replace('entity_', ''));\n                          const entityGroup = entityGroups[entityIndex];\n                          if (!entityGroup) return null;\n                          \n                          return (\n                            <>\n                              <div className=\"p-3 border-b border-gray-200 bg-gray-50\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div>\n                                    <h5 className=\"font-medium text-gray-900 text-sm\">\n                                      {entityGroup.entity.displayName}\n                                    </h5>\n                                    <p className=\"text-xs text-gray-600\">\n                                      Permessi CRUD per {entityGroup.entity.displayName}\n                                    </p>\n                                  </div>\n                                  <div className=\"flex space-x-2\">\n                                    <button\n                                      type=\"button\"\n                                      onClick={() => handleSelectGroupPermissions(selectedPermissionGroup, true)}\n                                      className=\"px-3 py-1.5 bg-blue-500 text-white rounded-full text-xs font-medium hover:bg-blue-600 transition-all duration-200 shadow-sm hover:shadow-md\"\n                                    >\n                                      Tutti\n                                    </button>\n                                    <button\n                                      type=\"button\"\n                                      onClick={() => handleSelectGroupPermissions(selectedPermissionGroup, false)}\n                                      className=\"px-3 py-1.5 bg-gray-500 text-white rounded-full text-xs font-medium hover:bg-gray-600 transition-all duration-200 shadow-sm hover:shadow-md\"\n                                    >\n                                      Nessuno\n                                    </button>\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <div className=\"p-3 space-y-1\">\n                                {entityGroup.permissions.map((permission) => {\n                                  const isChecked = formData.permissions[permission.key] || false;\n                                  \n                                  return (\n                                    <label \n                                      key={permission.key} \n                                      className={`flex items-start space-x-3 p-3 rounded-lg cursor-pointer transition-all duration-200 border ${\n                                        isChecked \n                                          ? 'bg-blue-50 border-blue-200 hover:bg-blue-100' \n                                          : 'bg-white border-gray-200 hover:bg-gray-50 hover:border-gray-300'\n                                      }`}\n                                    >\n                                      <input\n                                        type=\"checkbox\"\n                                        name={`permission-${permission.key}`}\n                                        checked={isChecked}\n                                        onChange={(e) => {\n                                          const checked = e.target.checked;\n                                          handlePermissionChange(permission.key, checked);\n                                        }}\n                                        className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                                      />\n                                      <div className=\"flex-1 min-w-0\">\n                                        <div className={`text-sm font-medium ${isChecked ? 'text-blue-900' : 'text-gray-900'}`}>\n                                          {permission.label}\n                                        </div>\n                                        <p className={`text-xs mt-1 ${isChecked ? 'text-blue-700' : 'text-gray-500'}`}>\n                                          {permission.description}\n                                        </p>\n                                      </div>\n                                      {isChecked && (\n                                        <div className=\"flex-shrink-0\">\n                                          <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                                        </div>\n                                      )}\n                                    </label>\n                                  );\n                                })}\n                              </div>\n                            </>\n                          );\n                        })()\n                      ) : availablePermissions[selectedPermissionGroup] ? (\n                        // Gestione categorie di permessi esistenti\n                        <>\n                          <div className=\"p-3 border-b border-gray-200 bg-gray-50\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <h5 className=\"font-medium text-gray-900 text-sm\">\n                                  {availablePermissions[selectedPermissionGroup].label}\n                                </h5>\n                                <p className=\"text-xs text-gray-600\">\n                                  {availablePermissions[selectedPermissionGroup].description}\n                                </p>\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <button\n                                  type=\"button\"\n                                  onClick={() => handleSelectGroupPermissions(selectedPermissionGroup, true)}\n                                  className=\"px-3 py-1.5 bg-blue-500 text-white rounded-full text-xs font-medium hover:bg-blue-600 transition-all duration-200 shadow-sm hover:shadow-md\"\n                                >\n                                  Tutti\n                                </button>\n                                <button\n                                  type=\"button\"\n                                  onClick={() => handleSelectGroupPermissions(selectedPermissionGroup, false)}\n                                  className=\"px-3 py-1.5 bg-gray-500 text-white rounded-full text-xs font-medium hover:bg-gray-600 transition-all duration-200 shadow-sm hover:shadow-md\"\n                                >\n                                  Nessuno\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"p-3 space-y-1\">\n                            {availablePermissions[selectedPermissionGroup].permissions.map((permission) => {\n                              const isChecked = formData.permissions[permission.key] || false;\n                              \n                              return (\n                                <label \n                                  key={permission.key} \n                                  className={`flex items-start space-x-3 p-3 rounded-lg cursor-pointer transition-all duration-200 border ${\n                                    isChecked \n                                      ? 'bg-blue-50 border-blue-200 hover:bg-blue-100' \n                                      : 'bg-white border-gray-200 hover:bg-gray-50 hover:border-gray-300'\n                                  }`}\n                                >\n                                  <input\n                                    type=\"checkbox\"\n                                    name={`permission-${permission.key}`}\n                                    checked={isChecked}\n                                    onChange={(e) => {\n                                      const checked = e.target.checked;\n                                      handlePermissionChange(permission.key, checked);\n                                    }}\n                                    className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                                  />\n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className={`text-sm font-medium ${isChecked ? 'text-blue-900' : 'text-gray-900'}`}>\n                                      {permission.label}\n                                    </div>\n                                    <p className={`text-xs mt-1 ${isChecked ? 'text-blue-700' : 'text-gray-500'}`}>\n                                      {permission.description}\n                                    </p>\n                                  </div>\n                                  {isChecked && (\n                                    <div className=\"flex-shrink-0\">\n                                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                                    </div>\n                                  )}\n                                </label>\n                              );\n                            })}\n                          </div>\n                        </>\n                      ) : null}\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full text-gray-500\">\n                      <div className=\"text-center\">\n                        <Shield className=\"w-8 h-8 mx-auto mb-2 text-gray-400\" />\n                        <p className=\"text-sm\">Seleziona una categoria di permessi</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {!loadingPermissions && Object.keys(availablePermissions).length === 0 && entityGroups.length === 0 && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Nessun permesso disponibile. Contatta l'amministratore di sistema.\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-3 mt-6 pt-4 border-t\">\n        <Button variant=\"outline\" onClick={onClose} disabled={loading}>\n          Annulla\n        </Button>\n        <Button onClick={handleSubmit} disabled={loading || loadingPermissions}>\n          {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          {mode === 'create' ? 'Crea Ruolo' : 'Salva Modifiche'}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default RoleModal;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/VirtualEntityPermissionManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Loader2s' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VirtualEntityPermission' is defined but never used.","line":22,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":34},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRolePermissions'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadRolePermissions, roleId]","fix":{"range":[2265,2273],"text":"[loadRolePermissions, roleId]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { \n  Loader2s,\n  Save,\n  Users,\n  X\n} from 'lucide-react';\nimport { advancedPermissionsService } from '../../services/advancedPermissions';\n\ninterface VirtualEntityPermissionManagerProps {\n  roleId: string;\n  roleName: string;\n  onClose?: () => void;\n  onPermissionsSaved?: () => void;\n  onPermissionsSaveError?: (error: string) => void;\n}\n\ninterface VirtualEntityPermission {\n  virtualEntityName: 'EMPLOYEES' | 'TRAINERS' | 'FORM_TEMPLATES' | 'FORM_SUBMISSIONS' | 'PUBLIC_CMS' | 'TEMPLATES';\n  permissions: string[];\n}\n\nconst VirtualEntityPermissionManager: React.FC<VirtualEntityPermissionManagerProps> = ({\n  roleId,\n  roleName,\n  onClose,\n  onPermissionsSaved,\n  onPermissionsSaveError\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  const [employeePermissions, setEmployeePermissions] = useState<string[]>([]);\n  const [trainerPermissions, setTrainerPermissions] = useState<string[]>([]);\n\n  const availablePermissions = [\n    { id: 'VIEW_VIRTUAL_EMPLOYEES', label: 'Visualizza', description: 'Visualizzare i dipendenti' },\n    { id: 'CREATE_VIRTUAL_EMPLOYEES', label: 'Crea', description: 'Creare nuovi dipendenti' },\n    { id: 'EDIT_VIRTUAL_EMPLOYEES', label: 'Modifica', description: 'Modificare i dipendenti esistenti' },\n    { id: 'DELETE_VIRTUAL_EMPLOYEES', label: 'Elimina', description: 'Eliminare i dipendenti' }\n  ];\n\n  const availableTrainerPermissions = [\n    { id: 'VIEW_VIRTUAL_TRAINERS', label: 'Visualizza', description: 'Visualizzare i formatori' },\n    { id: 'CREATE_VIRTUAL_TRAINERS', label: 'Crea', description: 'Creare nuovi formatori' },\n    { id: 'EDIT_VIRTUAL_TRAINERS', label: 'Modifica', description: 'Modificare i formatori esistenti' },\n    { id: 'DELETE_VIRTUAL_TRAINERS', label: 'Elimina', description: 'Eliminare i formatori' }\n  ];\n\n  useEffect(() => {\n    loadRolePermissions();\n  }, [roleId]);\n\n  const loadRolePermissions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const permissions = await advancedPermissionsService.getRoleVirtualEntityPermissions(roleId);\n      \n      // Filtra i permessi per dipendenti e formatori\n      const employeePerms = permissions\n        .filter(p => p.virtualEntityName === 'EMPLOYEES')\n        .flatMap(p => p.permissions || []);\n      \n      const trainerPerms = permissions\n        .filter(p => p.virtualEntityName === 'TRAINERS')\n        .flatMap(p => p.permissions || []);\n      \n      setEmployeePermissions(employeePerms);\n      setTrainerPermissions(trainerPerms);\n    } catch (err) {\n      console.error('Errore nel caricamento permessi:', err);\n      setError('Errore nel caricamento dei permessi del ruolo');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEmployeePermissionChange = (permissionId: string, checked: boolean) => {\n    setEmployeePermissions(prev => \n      checked \n        ? [...prev, permissionId]\n        : prev.filter(p => p !== permissionId)\n    );\n  };\n\n  const handleTrainerPermissionChange = (permissionId: string, checked: boolean) => {\n    setTrainerPermissions(prev => \n      checked \n        ? [...prev, permissionId]\n        : prev.filter(p => p !== permissionId)\n    );\n  };\n\n  const savePermissions = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n      setSuccess(null);\n\n      // Salva i permessi per i dipendenti\n      if (employeePermissions.length > 0) {\n        await advancedPermissionsService.assignVirtualEntityPermissions(\n          roleId, \n          'EMPLOYEES', \n          employeePermissions\n        );\n      }\n\n      // Salva i permessi per i formatori\n      if (trainerPermissions.length > 0) {\n        await advancedPermissionsService.assignVirtualEntityPermissions(\n          roleId, \n          'TRAINERS', \n          trainerPermissions\n        );\n      }\n\n      setSuccess('Permessi salvati con successo');\n      onPermissionsSaved?.();\n      \n      // Ricarica i permessi per confermare il salvataggio\n      setTimeout(() => {\n        loadRolePermissions();\n      }, 1000);\n\n    } catch (err) {\n      console.error('Errore nel salvataggio permessi:', err);\n      const errorMessage = 'Errore nel salvataggio dei permessi';\n      setError(errorMessage);\n      onPermissionsSaveError?.(errorMessage);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardContent className=\"flex items-center justify-center p-8\">\n          <Loader2 className=\"h-8 w-8 animate-spin mr-2\" />\n          <span>Caricamento permessi...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Gestione Permessi Entità Virtuali - {roleName}\n          </CardTitle>\n          {onClose && (\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        \n        {success && (\n          <Alert>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Permessi Dipendenti */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5 text-blue-600\" />\n            <h3 className=\"text-lg font-semibold\">Permessi Dipendenti</h3>\n            <Badge variant=\"secondary\">\n              {employeePermissions.length} permessi attivi\n            </Badge>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {availablePermissions.map(permission => (\n              <div key={permission.id} className=\"flex items-start space-x-3 p-3 border rounded-lg\">\n                <input\n                  type=\"checkbox\"\n                  id={`employee-${permission.id}`}\n                  checked={employeePermissions.includes(permission.id)}\n                  onChange={(e) => \n                    handleEmployeePermissionChange(permission.id, e.target.checked)\n                  }\n                  className=\"mt-1\"\n                />\n                <div className=\"flex-1\">\n                  <label \n                    htmlFor={`employee-${permission.id}`}\n                    className=\"text-sm font-medium cursor-pointer\"\n                  >\n                    {permission.label}\n                  </label>\n                  <p className=\"text-xs text-gray-600 mt-1\">\n                    {permission.description}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Permessi Formatori */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <GraduationCap className=\"h-5 w-5 text-green-600\" />\n            <h3 className=\"text-lg font-semibold\">Permessi Formatori</h3>\n            <Badge variant=\"secondary\">\n              {trainerPermissions.length} permessi attivi\n            </Badge>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {availableTrainerPermissions.map(permission => (\n              <div key={permission.id} className=\"flex items-start space-x-3 p-3 border rounded-lg\">\n                <input\n                  type=\"checkbox\"\n                  id={`trainer-${permission.id}`}\n                  checked={trainerPermissions.includes(permission.id)}\n                  onChange={(e) => \n                    handleTrainerPermissionChange(permission.id, e.target.checked)\n                  }\n                  className=\"mt-1\"\n                />\n                <div className=\"flex-1\">\n                  <label \n                    htmlFor={`trainer-${permission.id}`}\n                    className=\"text-sm font-medium cursor-pointer\"\n                  >\n                    {permission.label}\n                  </label>\n                  <p className=\"text-xs text-gray-600 mt-1\">\n                    {permission.description}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Azioni */}\n        <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n          <Button\n            onClick={savePermissions}\n            disabled={saving}\n            className=\"flex items-center gap-2\"\n          >\n            {saving ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Save className=\"h-4 w-4\" />\n            )}\n            {saving ? 'Salvataggio...' : 'Salva Permessi'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default VirtualEntityPermissionManager;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/permission-manager/EntityList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/permission-manager/FieldsSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Check, X, Eye, EyeOff } from 'lucide-react';\nimport { EntityDefinition, EntityPermission } from '../../../services/advancedPermissions';\nimport { getPermission } from './utils';\n\ninterface FieldsSectionProps {\n  entity: EntityDefinition;\n  selectedAction: string | null;\n  permissions: EntityPermission[];\n  bulkMode: boolean;\n  selectedActions: Set<string>;\n  onFieldToggle: (entity: string, action: string, fieldId: string, add: boolean) => void;\n  onBulkFieldsApply: (fieldIds: string[], add: boolean) => void;\n}\n\nconst FieldsSection: React.FC<FieldsSectionProps> = ({\n  entity,\n  selectedAction,\n  permissions,\n  bulkMode,\n  selectedActions,\n  onFieldToggle,\n  onBulkFieldsApply\n}) => {\n  // Mostra sempre i campi quando un'entità è selezionata\n  const showAllFields = !selectedAction && !bulkMode;\n\n  const getFieldPermissions = (fieldId: string): { [action: string]: boolean } => {\n    const result: { [action: string]: boolean } = {};\n    \n    if (bulkMode) {\n      selectedActions.forEach(action => {\n        const permission = getPermission(permissions, entity.name, action);\n        result[action] = permission?.fields?.includes(fieldId) || false;\n      });\n    } else if (selectedAction) {\n      const permission = getPermission(permissions, entity.name, selectedAction);\n      result[selectedAction] = permission?.fields?.includes(fieldId) || false;\n    } else if (showAllFields) {\n      // Quando nessuna azione è selezionata, mostra lo stato per tutte le azioni CRUD\n      ['create', 'read', 'update', 'delete'].forEach(action => {\n        const permission = getPermission(permissions, entity.name, action);\n        result[action] = permission?.fields?.includes(fieldId) || false;\n      });\n    }\n    \n    return result;\n  };\n\n  const isFieldSelectedInAllActions = (fieldId: string): boolean => {\n    if (!bulkMode || selectedActions.size === 0) return false;\n    \n    return Array.from(selectedActions).every(action => {\n      const permission = getPermission(permissions, entity.name, action);\n      return permission?.fields?.includes(fieldId) || false;\n    });\n  };\n\n  const isFieldSelectedInSomeActions = (fieldId: string): boolean => {\n    if (!bulkMode || selectedActions.size === 0) return false;\n    \n    return Array.from(selectedActions).some(action => {\n      const permission = getPermission(permissions, entity.name, action);\n      return permission?.fields?.includes(fieldId) || false;\n    });\n  };\n\n  return (\n    <div className=\"bg-white h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h4 className=\"font-medium text-gray-900\">\n              {bulkMode \n                ? 'Campi per Azioni Multiple' \n                : selectedAction \n                  ? `Campi per ${selectedAction}` \n                  : 'Campi Disponibili'\n              }\n            </h4>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              {entity.fields.length} campi disponibili per {entity.displayName}\n              {showAllFields && ' (tutte le azioni)'}\n            </p>\n          </div>\n          \n          {bulkMode && selectedActions.size > 0 && (\n            <div className=\"flex space-x-2\">\n              <button\n                type=\"button\"\n                onClick={() => onBulkFieldsApply(entity.fields.map(f => f.name), true)}\n                className=\"text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200\"\n              >\n                Aggiungi Tutti\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => onBulkFieldsApply(entity.fields.map(f => f.name), false)}\n                className=\"text-xs px-2 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200\"\n              >\n                Rimuovi Tutti\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Lista campi */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        <div className=\"space-y-2\">\n          {entity.fields.map((field) => {\n            const fieldPermissions = getFieldPermissions(field.name);\n            const isSelected = bulkMode \n              ? isFieldSelectedInAllActions(field.name)\n              : fieldPermissions[selectedAction!] || false;\n            const isPartiallySelected = bulkMode && isFieldSelectedInSomeActions(field.name) && !isFieldSelectedInAllActions(field.name);\n            \n            return (\n              <div\n                key={field.name}\n                className={`border rounded-lg p-3 transition-colors ${\n                  isSelected \n                    ? 'border-blue-300 bg-blue-50' \n                    : isPartiallySelected\n                    ? 'border-yellow-300 bg-yellow-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"flex-shrink-0\">\n                        {isSelected ? (\n                          <div className=\"w-5 h-5 bg-blue-600 rounded flex items-center justify-center\">\n                            <Check className=\"w-3 h-3 text-white\" />\n                          </div>\n                        ) : isPartiallySelected ? (\n                          <div className=\"w-5 h-5 bg-yellow-500 rounded flex items-center justify-center\">\n                            <div className=\"w-2 h-2 bg-white rounded\" />\n                          </div>\n                        ) : (\n                          <div className=\"w-5 h-5 border-2 border-gray-300 rounded\" />\n                        )}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-gray-900 truncate\">\n                          {field.displayName}\n                        </p>\n                        <p className=\"text-xs text-gray-500 truncate\">\n                          {field.name} • {field.type || 'string'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex-shrink-0 ml-3\">\n                    {bulkMode ? (\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          const shouldAdd = !isFieldSelectedInAllActions(field.name);\n                          onBulkFieldsApply([field.name], shouldAdd);\n                        }}\n                        className={`p-1 rounded transition-colors ${\n                          isSelected \n                            ? 'text-blue-600 hover:bg-blue-100' \n                            : isPartiallySelected\n                            ? 'text-yellow-600 hover:bg-yellow-100'\n                            : 'text-gray-400 hover:bg-gray-100'\n                        }`}\n                      >\n                        {isSelected ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </button>\n                    ) : (\n                      <button\n                        type=\"button\"\n                        onClick={() => onFieldToggle(entity.name, selectedAction!, field.name, !isSelected)}\n                        className={`p-1 rounded transition-colors ${\n                          isSelected \n                            ? 'text-blue-600 hover:bg-blue-100' \n                            : 'text-gray-400 hover:bg-gray-100'\n                        }`}\n                      >\n                        {isSelected ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </button>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Dettagli per modalità bulk */}\n                {bulkMode && selectedActions.size > 1 && (\n                  <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                    <div className=\"flex flex-wrap gap-1\">\n                      {Array.from(selectedActions).map(action => {\n                        const hasField = fieldPermissions[action];\n                        return (\n                          <span\n                            key={action}\n                            className={`text-xs px-2 py-1 rounded ${\n                              hasField \n                                ? 'bg-green-100 text-green-700' \n                                : 'bg-gray-100 text-gray-600'\n                            }`}\n                          >\n                            {action}\n                          </span>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Dettagli per visualizzazione di tutti i campi */}\n                {showAllFields && (\n                  <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                    <div className=\"flex flex-wrap gap-1\">\n                      {['create', 'read', 'update', 'delete'].map(action => {\n                        const hasField = fieldPermissions[action];\n                        return (\n                          <span\n                            key={action}\n                            className={`text-xs px-2 py-1 rounded ${\n                              hasField \n                                ? 'bg-green-100 text-green-700' \n                                : 'bg-gray-100 text-gray-600'\n                            }`}\n                          >\n                            {action}\n                          </span>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FieldsSection;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/permission-manager/OptimizedPermissionManagerRefactored.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, role.name]","fix":{"range":[1884,1895],"text":"[loadData, role.name]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Role } from '../../../hooks/useRoles';\nimport { Tenant } from '../../../hooks/useTenants';\nimport { EntityDefinition, EntityPermission, advancedPermissionsService } from '../../../services/advancedPermissions';\nimport { \n  updatePermissionInArray, \n  updatePermissionFields, \n  updatePermissionTenants,\n  applyBulkPermissions,\n  getAllActionNames,\n  filterEntities\n} from './utils';\n\n// Importa i componenti modulari\nimport PermissionManagerHeader from './PermissionManagerHeader';\nimport RoleInfoSection from './RoleInfoSection';\nimport EntityList from './EntityList';\nimport PermissionsSection from './PermissionsSection';\nimport FieldsSection from './FieldsSection';\n\ninterface OptimizedPermissionManagerRefactoredProps {\n  role: Role;\n  tenants: Tenant[];\n  onBack: () => void;\n}\n\nconst OptimizedPermissionManagerRefactored: React.FC<OptimizedPermissionManagerRefactoredProps> = ({\n  role,\n  tenants,\n  onBack\n}) => {\n  // Stati principali\n  const [entities, setEntities] = useState<EntityDefinition[]>([]);\n  const [permissions, setPermissions] = useState<EntityPermission[]>([]);\n  const [selectedEntity, setSelectedEntity] = useState<EntityDefinition | null>(null);\n  const [selectedAction, setSelectedAction] = useState<string | null>(null);\n  \n  // Stati per modalità bulk\n  const [bulkMode, setBulkMode] = useState(false);\n  const [selectedActions, setSelectedActions] = useState<Set<string>>(new Set());\n  \n  // Stati di caricamento e errore\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Stato per ricerca entità\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Caricamento iniziale dei dati\n  useEffect(() => {\n    loadData();\n  }, [role.name]);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [entitiesData, permissionsData] = await Promise.all([\n        advancedPermissionsService.getEntityDefinitions(),\n        advancedPermissionsService.getRolePermissions(role.name)\n      ]);\n      \n      setEntities(entitiesData);\n      setPermissions(permissionsData);\n    } catch (err) {\n      console.error('Errore nel caricamento dei dati:', err);\n      setError('Errore nel caricamento dei dati');\n      toast.error('Errore nel caricamento dei dati');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Gestione selezione entità\n  const handleEntitySelect = useCallback((entity: EntityDefinition) => {\n    setSelectedEntity(entity);\n    setSelectedAction(null);\n    setBulkMode(false);\n    setSelectedActions(new Set());\n  }, []);\n\n  // Gestione aggiornamento permessi\n  const updatePermission = useCallback((\n    entity: string, \n    action: string, \n    scope: 'all' | 'tenant' | 'own' | 'none'\n  ) => {\n    setPermissions(prev => updatePermissionInArray(prev, entity, action, scope));\n  }, []);\n\n  // Gestione toggle azioni per modalità bulk\n  const toggleActionSelection = useCallback((action: string) => {\n    setSelectedActions(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(action)) {\n        newSet.delete(action);\n      } else {\n        newSet.add(action);\n      }\n      return newSet;\n    });\n  }, []);\n\n  const selectAllActions = useCallback(() => {\n    setSelectedActions(getAllActionNames());\n  }, []);\n\n  const clearActionSelection = useCallback(() => {\n    setSelectedActions(new Set());\n  }, []);\n\n  // Gestione operazioni bulk\n  const applyBulkScope = useCallback((scope: 'all' | 'tenant' | 'own' | 'none') => {\n    if (!selectedEntity || selectedActions.size === 0) return;\n    \n    setPermissions(prev => \n      applyBulkPermissions(prev, selectedEntity.name, selectedActions, 'scope', scope)\n    );\n  }, [selectedEntity, selectedActions]);\n\n  const applyBulkFields = useCallback((fieldIds: string[], add: boolean) => {\n    if (!selectedEntity || selectedActions.size === 0) return;\n    \n    setPermissions(prev => \n      applyBulkPermissions(prev, selectedEntity.name, selectedActions, 'fields', fieldIds, add)\n    );\n  }, [selectedEntity, selectedActions]);\n\n  const applyBulkTenants = useCallback((tenantIds: number[], add: boolean) => {\n    if (!selectedEntity || selectedActions.size === 0) return;\n    \n    setPermissions(prev => \n      applyBulkPermissions(prev, selectedEntity.name, selectedActions, 'tenants', tenantIds, add)\n    );\n  }, [selectedEntity, selectedActions]);\n\n  // Gestione campi specifici\n  const handleFieldToggle = useCallback((entity: string, action: string, fieldId: string, add: boolean) => {\n    setPermissions(prev => updatePermissionFields(prev, entity, action, fieldId, add));\n  }, []);\n\n  // Gestione tenant\n  const handleTenantChange = useCallback((entity: string, action: string, tenantId: number, selected: boolean) => {\n    setPermissions(prev => updatePermissionTenants(prev, entity, action, tenantId, selected));\n  }, []);\n\n  // Salvataggio permessi\n  const savePermissions = async () => {\n    try {\n      setSaving(true);\n      await advancedPermissionsService.updateRolePermissions(role.name, permissions);\n      toast.success('Permessi aggiornati con successo');\n    } catch (err) {\n      console.error('Errore nel salvataggio:', err);\n      toast.error('Errore nel salvataggio dei permessi');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Filtro entità\n  const filteredEntities = filterEntities(entities, searchTerm);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Caricamento permessi...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <p className=\"text-red-600 mb-4\">{error}</p>\n          <button\n            onClick={loadData}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Riprova\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-gray-50\">\n      {/* Header principale */}\n      <PermissionManagerHeader\n        role={role}\n        filteredEntitiesCount={filteredEntities.length}\n        selectedEntity={selectedEntity}\n        bulkMode={bulkMode}\n        onBulkModeToggle={() => setBulkMode(!bulkMode)}\n      />\n\n      {/* Sezione informazioni ruolo e azioni rapide */}\n      <RoleInfoSection\n        role={role}\n        saving={saving}\n        onBack={onBack}\n        onSave={savePermissions}\n        onReload={loadData}\n      />\n\n      {/* Layout principale a 4 colonne */}\n      <div className=\"flex-1 grid grid-cols-4 min-h-0\">\n        {/* Colonna 1: Lista entità */}\n        <EntityList\n          entities={filteredEntities}\n          selectedEntity={selectedEntity}\n          searchTerm={searchTerm}\n          onSearchChange={setSearchTerm}\n          onEntitySelect={handleEntitySelect}\n        />\n\n        {/* Colonna 2: Gestione permessi CRUD */}\n        {selectedEntity ? (\n          <PermissionsSection\n            entity={selectedEntity}\n            permissions={permissions}\n            tenants={tenants}\n            bulkMode={bulkMode}\n            selectedActions={selectedActions}\n            onPermissionUpdate={updatePermission}\n            onTenantChange={handleTenantChange}\n            onActionToggle={toggleActionSelection}\n            onSelectAllActions={selectAllActions}\n            onClearActionSelection={clearActionSelection}\n            onBulkScopeApply={applyBulkScope}\n            onBulkTenantsApply={applyBulkTenants}\n          />\n        ) : (\n          <div className=\"bg-white border-r border-gray-200 flex items-center justify-center\">\n            <p className=\"text-gray-500\">Seleziona un'entità per gestire i permessi</p>\n          </div>\n        )}\n\n        {/* Colonna 3: Gestione campi specifici */}\n        {selectedEntity ? (\n          <FieldsSection\n            entity={selectedEntity}\n            selectedAction={selectedAction}\n            permissions={permissions}\n            bulkMode={bulkMode}\n            selectedActions={selectedActions}\n            onFieldToggle={handleFieldToggle}\n            onBulkFieldsApply={applyBulkFields}\n          />\n        ) : (\n          <div className=\"bg-white flex items-center justify-center\">\n            <p className=\"text-gray-500\">Seleziona un'entità per gestire i campi</p>\n          </div>\n        )}\n\n        {/* Colonna 4: Informazioni aggiuntive o preview */}\n        <div className=\"bg-white border-l border-gray-200 p-4\">\n          <div className=\"text-center text-gray-500\">\n            <h4 className=\"font-medium mb-2\">Riepilogo Permessi</h4>\n            <div className=\"space-y-2 text-sm\">\n              <p>Entità totali: {entities.length}</p>\n              <p>Permessi attivi: {permissions.length}</p>\n              {selectedEntity && (\n                <>\n                  <p>Entità selezionata: {selectedEntity.displayName}</p>\n                  <p>Campi disponibili: {selectedEntity.fields.length}</p>\n                </>\n              )}\n              {bulkMode && (\n                <p>Azioni selezionate: {selectedActions.size}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OptimizedPermissionManagerRefactored;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/permission-manager/PermissionManagerHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/permission-manager/PermissionsSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3705,3708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3705,3708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":99,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":102,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7536,7539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7536,7539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  Building,\n  Check,\n  User,\n  Users,\n  X\n} from 'lucide-react';\nimport { EntityDefinition, EntityPermission } from '../../../services/advancedPermissions';\nimport { Tenant } from '../../../hooks/useTenants';\nimport { PERMISSION_ACTIONS, PERMISSION_SCOPES } from './constants';\nimport { getPermission } from './utils';\n\ninterface PermissionsSectionProps {\n  entity: EntityDefinition;\n  permissions: EntityPermission[];\n  tenants: Tenant[];\n  bulkMode: boolean;\n  selectedActions: Set<string>;\n  onPermissionUpdate: (entity: string, action: string, scope: 'all' | 'tenant' | 'own' | 'none') => void;\n  onTenantChange: (entity: string, action: string, tenantId: number, selected: boolean) => void;\n  onActionToggle: (action: string) => void;\n  onSelectAllActions: () => void;\n  onClearActionSelection: () => void;\n  onBulkScopeApply: (scope: 'all' | 'tenant' | 'own' | 'none') => void;\n  onBulkTenantsApply: (tenantIds: number[], add: boolean) => void;\n}\n\nconst PermissionsSection: React.FC<PermissionsSectionProps> = ({\n  entity,\n  permissions,\n  tenants,\n  bulkMode,\n  selectedActions,\n  onPermissionUpdate,\n  onTenantChange,\n  onActionToggle,\n  onSelectAllActions,\n  onClearActionSelection,\n  onBulkScopeApply,\n  onBulkTenantsApply\n}) => {\n  const getScopeIcon = (scope: string) => {\n    switch (scope) {\n      case 'all': return <Users className=\"w-4 h-4\" />;\n      case 'tenant': return <Building className=\"w-4 h-4\" />;\n      case 'own': return <User className=\"w-4 h-4\" />;\n      default: return <X className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getScopeColor = (scope: string) => {\n    switch (scope) {\n      case 'all': return 'text-purple-600 bg-purple-50 border-purple-200';\n      case 'tenant': return 'text-blue-600 bg-blue-50 border-blue-200';\n      case 'own': return 'text-green-600 bg-green-50 border-green-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const hasAllTenants = (permission: EntityPermission | undefined): boolean => {\n    if (!permission?.tenantIds) return false;\n    return tenants.every(tenant => permission.tenantIds!.includes(tenant.id));\n  };\n\n  return (\n    <div className=\"bg-white border-r border-gray-200 h-full flex flex-col\">\n      {/* Header generale con controlli */}\n      <div className={`p-4 border-b border-gray-200 ${bulkMode ? 'bg-orange-50' : 'bg-gray-50'}`}>\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"font-medium text-gray-900\">\n            {bulkMode ? 'Modalità Multipla' : 'Permessi Azioni'}\n          </h4>\n          <div className=\"flex space-x-2\">\n            <button\n              type=\"button\"\n              onClick={onSelectAllActions}\n              className=\"text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n            >\n              Seleziona Tutto\n            </button>\n            <button\n              type=\"button\"\n              onClick={onClearActionSelection}\n              className=\"text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200\"\n            >\n              Deseleziona\n            </button>\n          </div>\n        </div>\n        \n        {/* Controlli specifici per modalità bulk */}\n        {bulkMode && (\n          <>\n            {/* Controlli bulk scope */}\n            <div className=\"space-y-2\">\n              <p className=\"text-xs text-gray-600\">Applica scope alle azioni selezionate:</p>\n              <div className=\"flex flex-wrap gap-1\">\n                {PERMISSION_SCOPES.map((scope) => (\n                  <button\n                    key={scope.name}\n                    type=\"button\"\n                    onClick={() => onBulkScopeApply(scope.name as any)}\n                    disabled={selectedActions.size === 0}\n                    className={`flex items-center space-x-1 px-2 py-1 rounded text-xs border transition-colors disabled:opacity-50 ${getScopeColor(scope.name)}`}\n                  >\n                    {getScopeIcon(scope.name)}\n                    <span>{scope.displayName}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            {/* Controlli bulk tenant */}\n            {tenants.length > 0 && (\n              <div className=\"mt-3 pt-3 border-t border-orange-200\">\n                <p className=\"text-xs text-gray-600 mb-2\">Gestione tenant per azioni selezionate:</p>\n                <div className=\"flex space-x-2\">\n                  <button\n                    type=\"button\"\n                    onClick={() => onBulkTenantsApply(tenants.map(t => t.id), true)}\n                    disabled={selectedActions.size === 0}\n                    className=\"text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200 disabled:opacity-50\"\n                  >\n                    Aggiungi Tutti\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => onBulkTenantsApply(tenants.map(t => t.id), false)}\n                    disabled={selectedActions.size === 0}\n                    className=\"text-xs px-2 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200 disabled:opacity-50\"\n                  >\n                    Rimuovi Tutti\n                  </button>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Lista azioni */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        <div className=\"space-y-3\">\n          {PERMISSION_ACTIONS.map((action) => {\n            const permission = getPermission(permissions, entity.name, action.name);\n            const currentScope = permission?.scope || 'none';\n            const isSelected = selectedActions.has(action.name);\n            \n            return (\n              <div\n                key={action.name}\n                className={`border rounded-lg p-3 transition-colors ${\n                  bulkMode && isSelected \n                    ? 'border-orange-300 bg-orange-50' \n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    {bulkMode && (\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={() => onActionToggle(action.name)}\n                        className=\"rounded border-gray-300 text-orange-600 focus:ring-orange-500\"\n                      />\n                    )}\n                    <action.icon className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium text-gray-900\">{action.displayName}</span>\n                  </div>\n                  <div className={`flex items-center space-x-1 px-2 py-1 rounded text-xs border ${getScopeColor(currentScope)}`}>\n                    {getScopeIcon(currentScope)}\n                    <span>{PERMISSION_SCOPES.find(s => s.name === currentScope)?.displayName || 'Nessuno'}</span>\n                  </div>\n                </div>\n                \n                {/* Controlli scope */}\n                {!bulkMode && (\n                  <div className=\"flex flex-wrap gap-1 mb-2\">\n                    {PERMISSION_SCOPES.map((scope) => (\n                      <button\n                        key={scope.name}\n                        type=\"button\"\n                        onClick={() => onPermissionUpdate(entity.name, action.name, scope.name as any)}\n                        className={`flex items-center space-x-1 px-2 py-1 rounded text-xs border transition-colors ${\n                          currentScope === scope.name \n                            ? getScopeColor(scope.name)\n                            : 'text-gray-600 bg-white border-gray-200 hover:bg-gray-50'\n                        }`}\n                      >\n                        {getScopeIcon(scope.name)}\n                        <span>{scope.displayName}</span>\n                      </button>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Gestione tenant per scope 'tenant' */}\n                {permission?.scope === 'tenant' && tenants.length > 0 && !bulkMode && (\n                  <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-xs text-gray-600\">Tenant autorizzati:</p>\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          const allSelected = hasAllTenants(permission);\n                          tenants.forEach(tenant => {\n                            onTenantChange(entity.name, action.name, tenant.id, !allSelected);\n                          });\n                        }}\n                        className=\"text-xs text-blue-600 hover:text-blue-800\"\n                      >\n                        {hasAllTenants(permission) ? 'Deseleziona tutti' : 'Seleziona tutti'}\n                      </button>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-1\">\n                      {tenants.map((tenant) => {\n                        const isSelected = permission.tenantIds?.includes(tenant.id) || false;\n                        return (\n                          <label\n                            key={tenant.id}\n                            className=\"flex items-center space-x-2 text-xs cursor-pointer hover:bg-gray-50 p-1 rounded\"\n                          >\n                            <input\n                              type=\"checkbox\"\n                              checked={isSelected}\n                              onChange={(e) => onTenantChange(entity.name, action.name, tenant.id, e.target.checked)}\n                              className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                            />\n                            <span className=\"truncate\">{tenant.name}</span>\n                          </label>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PermissionsSection;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/permission-manager/RoleInfoSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/permission-manager/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/roles/permission-manager/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3676,3679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3676,3679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":137,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":137,"endColumn":65,"suggestions":[{"messageId":"addBrackets","fix":{"range":[3999,4217],"text":"{ const fieldIds = Array.isArray(value) ? value : [value];\n        fieldIds.forEach(fieldId => {\n          newPermissions = updatePermissionFields(newPermissions, entity, action, fieldId, add);\n        });\n        break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":144,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":144,"endColumn":66,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4257,4480],"text":"{ const tenantIds = Array.isArray(value) ? value : [value];\n        tenantIds.forEach(tenantId => {\n          newPermissions = updatePermissionTenants(newPermissions, entity, action, tenantId, add);\n        });\n        break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EntityPermission } from '../../../services/advancedPermissions';\nimport { PERMISSION_ACTIONS } from './constants';\n\n/**\n * Trova un permesso specifico nell'array dei permessi\n */\nexport const getPermission = (\n  permissions: EntityPermission[], \n  entity: string, \n  action: string\n): EntityPermission | undefined => {\n  return (Array.isArray(permissions) ? permissions : [])\n    .find(p => p.entity === entity && p.action === action);\n};\n\n/**\n * Aggiorna o crea un permesso nell'array\n */\nexport const updatePermissionInArray = (\n  permissions: EntityPermission[],\n  entity: string,\n  action: string,\n  scope: 'all' | 'tenant' | 'own' | 'none',\n  fields?: string[]\n): EntityPermission[] => {\n  const currentPermissions = Array.isArray(permissions) ? permissions : [];\n  const newPermissions = [...currentPermissions];\n  const existingIndex = newPermissions.findIndex(p => p.entity === entity && p.action === action);\n  \n  if (scope === 'none') {\n    if (existingIndex !== -1) {\n      newPermissions.splice(existingIndex, 1);\n    }\n  } else {\n    const existingPermission = existingIndex !== -1 ? newPermissions[existingIndex] : null;\n    const permission: EntityPermission = {\n      entity,\n      action: action as 'read' | 'create' | 'update' | 'delete',\n      scope,\n      fields: fields,\n      // Mantieni i tenantIds esistenti se il scope è 'tenant'\n      tenantIds: scope === 'tenant' ? (existingPermission?.tenantIds || []) : undefined\n    };\n    \n    if (existingIndex !== -1) {\n      newPermissions[existingIndex] = permission;\n    } else {\n      newPermissions.push(permission);\n    }\n  }\n  \n  return newPermissions;\n};\n\n/**\n * Aggiorna i campi di un permesso specifico\n */\nexport const updatePermissionFields = (\n  permissions: EntityPermission[],\n  entity: string,\n  action: string,\n  fieldId: string,\n  add: boolean = true\n): EntityPermission[] => {\n  const currentPermissions = Array.isArray(permissions) ? permissions : [];\n  const newPermissions = [...currentPermissions];\n  const permissionIndex = newPermissions.findIndex(p => p.entity === entity && p.action === action);\n  \n  if (permissionIndex !== -1) {\n    const permission = newPermissions[permissionIndex];\n    const currentFields = permission.fields || [];\n    \n    if (add) {\n      if (!currentFields.includes(fieldId)) {\n        permission.fields = [...currentFields, fieldId];\n      }\n    } else {\n      permission.fields = currentFields.filter(f => f !== fieldId);\n    }\n  }\n  \n  return newPermissions;\n};\n\n/**\n * Aggiorna i tenant di un permesso specifico\n */\nexport const updatePermissionTenants = (\n  permissions: EntityPermission[],\n  entity: string,\n  action: string,\n  tenantId: number,\n  selected: boolean\n): EntityPermission[] => {\n  const currentPermissions = Array.isArray(permissions) ? permissions : [];\n  const newPermissions = [...currentPermissions];\n  const permissionIndex = newPermissions.findIndex(p => p.entity === entity && p.action === action);\n  \n  if (permissionIndex !== -1) {\n    const permission = newPermissions[permissionIndex];\n    const currentTenantIds = permission.tenantIds || [];\n    \n    if (selected) {\n      // Aggiungi tenant se non già presente\n      if (!currentTenantIds.includes(tenantId)) {\n        permission.tenantIds = [...currentTenantIds, tenantId];\n      }\n    } else {\n      // Rimuovi tenant\n      permission.tenantIds = currentTenantIds.filter(id => id !== tenantId);\n    }\n  }\n  \n  return newPermissions;\n};\n\n/**\n * Applica operazioni bulk sui permessi\n */\nexport const applyBulkPermissions = (\n  permissions: EntityPermission[],\n  entity: string,\n  selectedActions: Set<string>,\n  operation: 'scope' | 'fields' | 'tenants',\n  value: any,\n  add: boolean = true\n): EntityPermission[] => {\n  let newPermissions = [...permissions];\n  \n  selectedActions.forEach(action => {\n    switch (operation) {\n      case 'scope':\n        newPermissions = updatePermissionInArray(newPermissions, entity, action, value);\n        break;\n        \n      case 'fields':\n        const fieldIds = Array.isArray(value) ? value : [value];\n        fieldIds.forEach(fieldId => {\n          newPermissions = updatePermissionFields(newPermissions, entity, action, fieldId, add);\n        });\n        break;\n        \n      case 'tenants':\n        const tenantIds = Array.isArray(value) ? value : [value];\n        tenantIds.forEach(tenantId => {\n          newPermissions = updatePermissionTenants(newPermissions, entity, action, tenantId, add);\n        });\n        break;\n    }\n  });\n  \n  return newPermissions;\n};\n\n/**\n * Seleziona tutte le azioni disponibili\n */\nexport const getAllActionNames = (): Set<string> => {\n  return new Set(PERMISSION_ACTIONS.map(action => action.name));\n};\n\n/**\n * Verifica se tutti i tenant sono selezionati per un permesso\n */\nexport const hasAllTenants = (\n  permission: EntityPermission | undefined,\n  allTenantIds: number[]\n): boolean => {\n  if (!permission?.tenantIds) return false;\n  return allTenantIds.every(id => permission.tenantIds!.includes(id));\n};\n\n/**\n * Filtra le entità in base al termine di ricerca\n */\nexport const filterEntities = <T extends { name: string; displayName: string }>(\n  entities: T[],\n  searchTerm: string\n): T[] => {\n  if (!searchTerm.trim()) return entities;\n  \n  const term = searchTerm.toLowerCase();\n  return entities.filter(entity =>\n    entity.displayName.toLowerCase().includes(term) ||\n    entity.name.toLowerCase().includes(term)\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/ScheduleEventModal.lazy.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[399,402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[399,402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[418,421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[418,421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[458,461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[458,461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[483,486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[483,486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { lazy, Suspense } from 'react';\nimport { LoadingFallback } from '../ui/LoadingFallback';\nimport { ErrorBoundary } from '../ui/ErrorBoundary';\n\n// Lazy load the heavy ScheduleEventModal component\nconst ScheduleEventModalComponent = lazy(() => import('./ScheduleEventModal'));\n\n// Props interface (re-export from the original component)\nexport interface ScheduleEventModalProps {\n  trainings: any[];\n  trainers: any[];\n  companies: any[];\n  employees: any[];\n  existingEvent?: any;\n  onClose: () => void;\n  onSuccess: () => void;\n  initialDate?: string;\n  initialTime?: { start: string; end: string; };\n}\n\n// Lazy wrapper component with error boundary and loading fallback\nconst ScheduleEventModalLazy: React.FC<ScheduleEventModalProps> = (props) => {\n  return (\n    <ErrorBoundary fallback={<div>Errore nel caricamento del modal</div>}>\n      <Suspense fallback={<LoadingFallback message=\"Caricamento modal...\" />}>\n        <ScheduleEventModalComponent {...props} />\n      </Suspense>\n    </ErrorBoundary>\n  );\n};\n\nexport default ScheduleEventModalLazy;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/ScheduleEventModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DateTimeManager' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1112,1115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1112,1115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2496,2499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2496,2499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3637,3640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3637,3640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3810,3813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3810,3813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5469,5472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5469,5472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6126,6129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6126,6129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6167,6170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6167,6170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6481,6484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6481,6484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":218,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6630,6633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6630,6633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":408,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12996,12999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12996,12999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { Button } from \"../../design-system/atoms/Button\";\nimport { create, update } from '../../services/apiClient';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Company } from '../../types';\n\n// Import modular components\nimport {\n  CourseDetailsForm,\n  CompanyEmployeeSelector,\n  AttendanceManager,\n  DocumentManager,\n  DateTimeManager\n} from './components';\n\ninterface Person {\n  id: string | number;\n  firstName: string;\n  lastName: string;\n  companyId: string | number;\n  company_id?: string | number;\n  company?: { id: string | number; name: string };\n  email?: string;\n  position?: string;\n}\n\ninterface Trainer {\n  id: string | number;\n  firstName: string;\n  lastName: string;\n  certifications?: string[];\n}\n\ninterface Training {\n  id: string | number;\n  title: string;\n  certifications?: string[];\n  duration?: string | number;\n}\n\ninterface ScheduleEventModalProps {\n  trainings: Training[];\n  trainers: Trainer[];\n  companies: Company[];\n  persons: Person[];\n  existingEvent?: any;\n  onClose: () => void;\n  onSuccess: () => void;\n  initialDate?: string;\n  initialTime?: { start: string; end: string; };\n}\n\ntype DateEntry = { \n  date: string; \n  start: string; \n  end: string; \n  trainerId: string | number; \n  coTrainerId: string | number \n};\n\nconst DELIVERY_MODES = [\n  { value: 'in-person', label: 'In presenza' },\n  { value: 'online', label: 'Online' },\n  { value: 'hybrid', label: 'Ibrido' },\n  { value: 'blended', label: 'Blended' }\n];\n\nexport default function ScheduleEventModal({ \n  trainings, \n  trainers, \n  companies, \n  persons, \n  existingEvent = {}, \n  onClose, \n  onSuccess, \n  initialDate, \n  initialTime \n}: ScheduleEventModalProps) {\n  \n  // Core state\n  const isEditing = existingEvent && Object.keys(existingEvent).length > 0;\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [hasScheduled, setHasScheduled] = useState(isEditing);\n  const [scheduleId, setScheduleId] = useState<string | number | null>(existingEvent?.id || null);\n\n  // Form data state\n  const initialFormData = useMemo(() => {\n    if (isEditing) {\n      return {\n        training_id: existingEvent.training_id || existingEvent.course?.id || \"\",\n        trainer_id: \"\",\n        co_trainer_id: \"\",\n        dates: (existingEvent.dates || []).map((d: any) => ({\n          date: d.date,\n          start: d.start,\n          end: d.end,\n          trainerId: d.trainer_id || d.trainerId,\n          coTrainerId: d.co_trainer_id || d.coTrainerId,\n        })),\n        location: existingEvent.location || \"\",\n        max_participants: existingEvent.max_participants || 20,\n        notes: existingEvent.notes || \"\",\n        delivery_mode: existingEvent.delivery_mode || \"\",\n      };\n    }\n    \n    return {\n      training_id: \"\",\n      trainer_id: \"\",\n      co_trainer_id: \"\",\n      dates: [{\n        date: initialDate || new Date().toISOString().split(\"T\")[0],\n        start: initialTime?.start || \"09:00\",\n        end: initialTime?.end || \"13:00\",\n        trainerId: \"\",\n        coTrainerId: \"\",\n      }],\n      location: \"\",\n      max_participants: 20,\n      notes: \"\",\n      delivery_mode: \"\",\n    };\n  }, [existingEvent, isEditing, initialDate, initialTime]);\n\n  const [formData, setFormData] = useState(initialFormData);\n\n  // Selection state\n  const [selectedCompanies, setSelectedCompanies] = useState<(string | number)[]>(\n    existingEvent?.company_ids || existingEvent?.companies?.map((c: any) => c.id) || []\n  );\n  const [selectedPersons, setSelectedPersons] = useState<(string | number)[]>(\n    existingEvent?.employee_ids || existingEvent?.employees?.map((e: any) => e.id) || []\n  );\n\n  // Attendance state\n  const [attendance, setAttendance] = useState<Record<number, (string | number)[]>>({});\n  const [status, setStatus] = useState('Preventivo');\n\n  // Search states\n  const [courseSearch, setCourseSearch] = useState('');\n  const [companySearch, setCompanySearch] = useState('');\n  const [personSearch, setPersonSearch] = useState('');\n  const [personTab, setPersonTab] = useState<string | number>('');\n  const [selectedDayIdx, setSelectedDayIdx] = useState(0);\n  const [showStatusMenu, setShowStatusMenu] = useState(false);\n\n  // Computed values\n  const selectedCourse = useMemo(() => \n    trainings.find(t => t.id === formData.training_id), \n    [trainings, formData.training_id]\n  );\n\n  const requiredCerts = useMemo(() => \n    selectedCourse?.certifications || [], \n    [selectedCourse]\n  );\n\n  const filteredTrainers = useMemo(() => \n    trainers.filter(trainer => \n      requiredCerts.length === 0 || \n      requiredCerts.every(cert => trainer.certifications?.includes(cert))\n    ), \n    [trainers, requiredCerts]\n  );\n\n  const coTrainerOptions = useMemo(() => \n    filteredTrainers.filter(t => t.id !== formData.trainer_id), \n    [filteredTrainers, formData.trainer_id]\n  );\n\n  // Step configuration\n  const stepItems = useMemo(() => [\n    { label: \"Dettagli\", step: 0, enabled: true },\n    { label: \"Partecipanti\", step: 1, enabled: true },\n    { label: \"Presenti\", step: 2, enabled: hasScheduled || isEditing },\n    { label: \"Documenti\", step: 3, enabled: hasScheduled || isEditing },\n  ], [hasScheduled, isEditing]);\n\n  // Utility functions\n  const normalizeAttendanceData = useCallback((attendanceData: any): Record<number, (string | number)[]> => {\n    if (!attendanceData) return {};\n    \n    if (Array.isArray(attendanceData)) {\n      return attendanceData.reduce((acc, entry, idx) => {\n        acc[idx] = entry.employee_ids || [];\n        return acc;\n      }, {} as Record<number, (string | number)[]>);\n    }\n    \n    if (typeof attendanceData === 'object') {\n      const result: Record<number, (string | number)[]> = {};\n      Object.keys(attendanceData).forEach((key, idx) => {\n        const session = attendanceData[key];\n        if (session && session.attendees) {\n          const presentIds = Object.values(session.attendees)\n            .filter((a: any) => a.attended)\n            .map((a: any) => a.id);\n          result[idx] = presentIds;\n        } else if (session && session.employee_ids) {\n          result[idx] = session.employee_ids;\n        }\n      });\n      return result;\n    }\n    \n    return {};\n  }, []);\n\n  // Form handlers\n  const handleFormDataChange = useCallback((field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  // Utility functions\n  const getCompanyName = useCallback((companyId: any) => {\n    const company = companies.find(c => c.id === companyId);\n    return company?.name || 'Azienda sconosciuta';\n  }, [companies]);\n\n  const getPersonIdsForCompany = useCallback((companyId: string) => {\n    return persons\n      .filter(person => (person.company_id || person.companyId) === companyId)\n      .map(person => person.id);\n  }, [persons]);\n\n  const formatDate = useCallback((isoDate: string) => {\n    return new Date(isoDate).toLocaleDateString('it-IT');\n  }, []);\n\n  // Company/Employee handlers\n  const handleCompanyToggle = useCallback((companyId: string | number) => {\n    setSelectedCompanies(prev => \n      prev.includes(companyId) \n        ? prev.filter(id => id !== companyId)\n        : [...prev, companyId]\n    );\n  }, []);\n\n  const handlePersonToggle = useCallback((personId: string | number) => {\n    setSelectedPersons(prev => \n      prev.includes(personId) \n        ? prev.filter(id => id !== personId)\n        : [...prev, personId]\n    );\n  }, []);\n\n  const handleSelectAllPersons = useCallback((companyId: string | number) => {\n    const companyPersonIds = getPersonIdsForCompany(String(companyId));\n    setSelectedPersons(prev => [...new Set([...prev, ...companyPersonIds])]);\n  }, [getPersonIdsForCompany]);\n\n  const handleDeselectAllPersons = useCallback((companyId: string | number) => {\n    const companyPersonIds = getPersonIdsForCompany(String(companyId));\n    setSelectedPersons(prev => prev.filter(id => !companyPersonIds.includes(id)));\n  }, [getPersonIdsForCompany]);\n\n  // Attendance handlers\n  const handleAttendanceChange = useCallback((dateIdx: number, personId: string | number, isPresent: boolean) => {\n    setAttendance(prev => {\n      const newAttendance = { ...prev };\n      if (!newAttendance[dateIdx]) {\n        newAttendance[dateIdx] = [];\n      }\n      \n      if (isPresent) {\n        if (!newAttendance[dateIdx].includes(personId)) {\n          newAttendance[dateIdx] = [...newAttendance[dateIdx], personId];\n        }\n      } else {\n        newAttendance[dateIdx] = newAttendance[dateIdx].filter(id => id !== personId);\n      }\n      \n      return newAttendance;\n    });\n  }, []);\n\n  const handleSelectAllForDate = useCallback((dateIdx: number) => {\n    setAttendance(prev => ({\n      ...prev,\n      [dateIdx]: [...selectedPersons]\n    }));\n  }, [selectedPersons]);\n\n  const handleSelectNoneForDate = useCallback((dateIdx: number) => {\n    setAttendance(prev => ({\n      ...prev,\n      [dateIdx]: []\n    }));\n  }, []);\n\n  // Validation\n  const validateAll = useCallback(() => {\n    if (!formData.training_id) {\n      setError('Seleziona un corso');\n      return false;\n    }\n    if (!formData.location) {\n      setError('Inserisci il luogo del corso');\n      return false;\n    }\n    if (formData.dates.length === 0) {\n      setError('Aggiungi almeno una data');\n      return false;\n    }\n    if (selectedCompanies.length === 0) {\n      setError('Seleziona almeno un\\'azienda');\n      return false;\n    }\n    if (selectedPersons.length === 0) {\n      setError('Seleziona almeno un partecipante');\n      return false;\n    }\n    setError(null);\n    return true;\n  }, [formData, selectedCompanies, selectedPersons]);\n\n  // Navigation handlers\n  const handleNext = useCallback(() => {\n    setError(null);\n    setCurrentStep(s => s + 1);\n  }, []);\n  \n  const handleBack = useCallback(() => {\n    setError(null);\n    setCurrentStep(s => s - 1);\n  }, []);\n\n  // Build schedule payload\n  const buildSchedulePayload = useCallback(() => {\n    const dates: string[] = formData.dates.map((d: DateEntry) => d.date);\n    const startDateStr = dates.reduce((a, b) => (a < b ? a : b));\n    const endDateStr = dates.reduce((a, b) => (a > b ? a : b));\n    \n    const firstDate = formData.dates.find((d: DateEntry) => d.date === startDateStr);\n    const lastDate = formData.dates.find((d: DateEntry) => d.date === endDateStr);\n    \n    const startDateTimeLocal = `${startDateStr}T${firstDate?.start || '09:00'}:00`;\n    const endDateTimeLocal = `${endDateStr}T${lastDate?.end || '17:00'}:00`;\n    const startDateTimeISO = new Date(startDateTimeLocal).toISOString();\n    const endDateTimeISO = new Date(endDateTimeLocal).toISOString();\n    \n    const attendanceArr = formData.dates.map((dt: DateEntry, idx: number) => ({\n      date: dt.date,\n      employee_ids: attendance[idx] || []\n    }));\n    \n    const validCompanyIds = selectedCompanies.filter(id => id !== null && id !== undefined);\n    const validPersonIds = selectedPersons.filter(id => id !== null && id !== undefined);\n    \n    const schedulePayload = {\n      courseId: formData.training_id,\n      start_date: startDateTimeISO,\n      end_date: endDateTimeISO,\n      location: formData.location,\n      max_participants: formData.max_participants,\n      notes: formData.notes,\n      delivery_mode: formData.delivery_mode,\n      dates: formData.dates.map((dt: DateEntry) => ({\n        date: dt.date,\n        start: dt.start,\n        end: dt.end,\n        trainer_id: dt.trainerId,\n        co_trainer_id: dt.coTrainerId,\n      })),\n      companies: validCompanyIds.map(id => ({ companyId: String(id) })),\n      company_ids: validCompanyIds.map(id => String(id)),\n      enrollments: validPersonIds.map(id => ({ employeeId: String(id) })),\n      employee_ids: validPersonIds.map(id => String(id)),\n      attendance: attendanceArr,\n      status,\n    };\n    \n    if (isEditing && scheduleId) {\n      return { ...schedulePayload, id: scheduleId };\n    }\n    \n    return schedulePayload;\n  }, [formData, scheduleId, isEditing, selectedCompanies, selectedPersons, attendance, status]);\n\n  // Main schedule handler\n  const handleSchedule = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      if (!validateAll()) return;\n      \n      const schedulePayload = buildSchedulePayload();\n      let result: { id: string | number };\n      \n      if (isEditing && scheduleId) {\n        result = await update('schedules', String(scheduleId), schedulePayload) as { id: string | number };\n      } else {\n        result = await create('schedules', schedulePayload) as { id: string | number };\n        setScheduleId(result?.id);\n      }\n      \n      setHasScheduled(true);\n      toast.success('Corso programmato con successo!', { \n        position: 'top-right', \n        autoClose: 2500 \n      });\n      \n      if (onSuccess) onSuccess();\n    } catch (err: any) {\n      setError(err.message || 'Errore durante la programmazione del corso');\n    } finally {\n      setLoading(false);\n    }\n  }, [validateAll, buildSchedulePayload, isEditing, scheduleId, onSuccess]);\n\n  // Initialize attendance data\n  useEffect(() => {\n    if (existingEvent && Object.keys(existingEvent).length > 0 && existingEvent.attendance) {\n      const normalizedAttendance = normalizeAttendanceData(existingEvent.attendance);\n      if (Object.keys(normalizedAttendance).length > 0) {\n        setAttendance(normalizedAttendance);\n      }\n    }\n  }, [existingEvent, normalizeAttendanceData]);\n\n  // Prevent body scrolling when modal is open\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n\n  // Render step content\n  const renderStep = () => {\n    switch (currentStep) {\n      case 0:\n        return (\n          <CourseDetailsForm\n            trainings={trainings}\n            trainers={trainers}\n            formData={formData}\n            onFormDataChange={handleFormDataChange}\n            selectedCourse={selectedCourse}\n            filteredTrainers={filteredTrainers}\n            coTrainerOptions={coTrainerOptions}\n            courseSearch={courseSearch}\n            onCourseSearchChange={setCourseSearch}\n            DELIVERY_MODES={DELIVERY_MODES}\n          />\n        );\n      \n      case 1:\n        return (\n          <CompanyEmployeeSelector\n            companies={companies}\n            persons={persons}\n            selectedCompanies={selectedCompanies}\n            selectedPersons={selectedPersons}\n            onCompanyToggle={handleCompanyToggle}\n            onPersonToggle={handlePersonToggle}\n            onSelectAllPersons={handleSelectAllPersons}\n            onDeselectAllPersons={handleDeselectAllPersons}\n            getCompanyName={getCompanyName}\n            getPersonIdsForCompany={getPersonIdsForCompany}\n            companySearch={companySearch}\n            onCompanySearchChange={setCompanySearch}\n            personSearch={personSearch}\n            onPersonSearchChange={setPersonSearch}\n            personTab={personTab}\n            onPersonTabChange={setPersonTab}\n          />\n        );\n      \n      case 2:\n        return (\n          <AttendanceManager\n            dates={formData.dates}\n            selectedPersons={selectedPersons}\n            persons={persons}\n            attendance={attendance}\n            onAttendanceChange={handleAttendanceChange}\n            onSelectAllForDate={handleSelectAllForDate}\n            onSelectNoneForDate={handleSelectNoneForDate}\n            getCompanyName={getCompanyName}\n            formatDate={formatDate}\n            selectedDayIdx={selectedDayIdx}\n            onSelectedDayChange={setSelectedDayIdx}\n          />\n        );\n      \n      case 3:\n        return (\n          <DocumentManager\n            status={status}\n            onStatusChange={setStatus}\n            selectedEmployees={selectedPersons}\n            selectedCompanies={selectedCompanies}\n            attendance={attendance}\n            dates={formData.dates}\n            showStatusMenu={showStatusMenu}\n            onShowStatusMenuChange={setShowStatusMenu}\n          />\n        );\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50 overflow-hidden\">\n      <div className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-2xl relative max-h-[95vh] overflow-hidden flex flex-col\">\n        \n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-bold\">\n            {isEditing ? \"Modifica Programma Corso\" : \"Nuovo Programma Corso\"}\n          </h2>\n          <button\n            className=\"text-gray-400 hover:text-gray-600 text-2xl\"\n            onClick={onClose}\n          >\n            &times;\n          </button>\n        </div>\n\n        {/* Navigation */}\n        <div className=\"flex items-center justify-center space-x-2 mb-6\">\n          {stepItems.map((item, i) => (\n            <React.Fragment key={i}>\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium cursor-pointer ${\n                  i < currentStep\n                    ? 'bg-green-500 text-white'\n                    : i === currentStep\n                    ? 'bg-blue-500 text-white'\n                    : item.enabled\n                    ? 'bg-gray-200 text-gray-600 hover:bg-gray-300'\n                    : 'bg-gray-100 text-gray-400'\n                }`}\n                onClick={() => item.enabled && setCurrentStep(i)}\n              >\n                {i < currentStep ? '✓' : i + 1}\n              </div>\n              {i < stepItems.length - 1 && (\n                <div\n                  className={`w-12 h-1 ${\n                    i < currentStep ? 'bg-green-500' : 'bg-gray-200'\n                  }`}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n\n        <div className=\"text-center mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">\n            {stepItems[currentStep]?.label}\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            Passo {currentStep + 1} di {stepItems.length}\n          </p>\n        </div>\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\n            {error}\n          </div>\n        )}\n\n        {/* Step Content */}\n        <div className=\"border-2 border-blue-300 rounded-lg p-4 mb-6 flex-1 overflow-y-auto\">\n          {renderStep()}\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"flex justify-end space-x-2\">\n          <Button onClick={onClose} variant=\"secondary\">\n            Annulla\n          </Button>\n          \n          {currentStep > 0 && (\n            <Button onClick={handleBack} variant=\"secondary\">\n              Indietro\n            </Button>\n          )}\n          \n          {currentStep < 3 && (\n            <Button onClick={handleNext}>\n              Avanti\n            </Button>\n          )}\n          \n          <Button onClick={handleSchedule} disabled={loading}>\n            {loading ? 'Salvando...' : (isEditing ? \"Aggiorna Corso\" : \"Programma Corso\")}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/ScheduleForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[698,701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[698,701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2174,2177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2174,2177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2219,2222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2219,2222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { X } from 'lucide-react';\nimport AsyncSelect from 'react-select/async';\nimport { apiGet } from '../../api/api';\nimport { Company } from '../../types';\n\ninterface Course {\n  id: string;\n  name: string;\n  title: string;\n}\n\ninterface Trainer {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface ScheduleFormProps {\n  initialData?: {\n    id?: string;\n    courseId?: string;\n    trainerId?: string;\n    companyId?: string;\n    start_date?: string;\n    end_date?: string;\n    location?: string;\n    max_participants?: number;\n    notes?: string;\n  };\n  courses: Course[];\n  trainers: Trainer[];\n  companies: Company[];\n  onSubmit: (data: any) => Promise<void>;\n  onCancel: () => void;\n}\n\nconst ScheduleForm: React.FC<ScheduleFormProps> = ({\n  initialData,\n  courses,\n  trainers,\n  companies,\n  onSubmit,\n  onCancel\n}) => {\n  const [formData, setFormData] = useState({\n    courseId: initialData?.courseId || '',\n    trainerId: initialData?.trainerId || '',\n    companyId: initialData?.companyId || '',\n    startDate: initialData?.start_date ? new Date(initialData.start_date).toISOString().split('T')[0] : '',\n    startTime: initialData?.start_date ? new Date(initialData.start_date).toISOString().split('T')[1].substring(0, 5) : '09:00',\n    endDate: initialData?.end_date ? new Date(initialData.end_date).toISOString().split('T')[0] : '',\n    endTime: initialData?.end_date ? new Date(initialData.end_date).toISOString().split('T')[1].substring(0, 5) : '17:00',\n    location: initialData?.location || '',\n    maxParticipants: initialData?.max_participants || 20,\n    notes: initialData?.notes || ''\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const data = {\n      ...formData,\n      startDate: new Date(`${formData.startDate}T${formData.startTime}`).toISOString(),\n      endDate: new Date(`${formData.endDate}T${formData.endTime}`).toISOString(),\n    };\n    await onSubmit(data);\n  };\n\n  // Async load courses for react-select\n  const loadCourses = async (inputValue: string) => {\n    const data = await apiGet(`/courses?search=${encodeURIComponent(inputValue)}`) as any[];\n    const options = data.map((course: any) => ({\n      value: course.id,\n      label: course.title || course.name || String(course.id)\n    }));\n    console.log('Course options:', options);\n    return options;\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n      <div className=\"relative top-20 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-lg bg-white\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold text-gray-800\">\n            {initialData?.id ? 'Modifica Programma Corso' : 'Nuovo Programma Corso'}\n          </h2>\n          <button\n            onClick={onCancel}\n            className=\"text-gray-400 hover:text-gray-500\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Corso</label>\n            <AsyncSelect\n              cacheOptions\n              defaultOptions\n              loadOptions={loadCourses}\n              value={formData.courseId ? { value: formData.courseId, label: courses.find(c => c.id === formData.courseId)?.title || '' } : null}\n              onChange={option => setFormData({ ...formData, courseId: option?.value || '' })}\n              placeholder=\"Seleziona un corso\"\n              isClearable\n              styles={{ menu: base => ({ ...base, zIndex: 9999 }) }}\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Docente</label>\n            <select\n              value={formData.trainerId}\n              onChange={(e) => setFormData({ ...formData, trainerId: e.target.value })}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              required\n            >\n              <option value=\"\">Seleziona un docente</option>\n              {trainers.map((trainer) => (\n                <option key={trainer.id} value={trainer.id}>\n                  {trainer.firstName} {trainer.lastName}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Azienda</label>\n            <select\n              value={formData.companyId}\n              onChange={(e) => setFormData({ ...formData, companyId: e.target.value })}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            >\n              <option value=\"\">Seleziona un'azienda</option>\n              {companies.map((company) => (\n                <option key={company.id} value={company.id}>\n                  {company.ragioneSociale}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Data Inizio</label>\n              <input\n                type=\"date\"\n                value={formData.startDate}\n                onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                required\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Ora Inizio</label>\n              <input\n                type=\"time\"\n                value={formData.startTime}\n                onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                required\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Data Fine</label>\n              <input\n                type=\"date\"\n                value={formData.endDate}\n                onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                required\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Ora Fine</label>\n              <input\n                type=\"time\"\n                value={formData.endTime}\n                onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Luogo</label>\n            <input\n              type=\"text\"\n              value={formData.location}\n              onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Inserisci il luogo\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Numero Massimo Partecipanti\n            </label>\n            <input\n              type=\"number\"\n              value={formData.maxParticipants}\n              onChange={(e) => setFormData({ ...formData, maxParticipants: parseInt(e.target.value) })}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              min=\"1\"\n              required\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Note</label>\n            <textarea\n              value={formData.notes}\n              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              rows={3}\n              placeholder=\"Inserisci eventuali note\"\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n            >\n              Annulla\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700\"\n            >\n              {initialData?.id ? 'Salva Modifiche' : 'Crea Programma'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ScheduleForm;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/ScheduleTrainingWizard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[986,989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[986,989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1047,1050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1047,1050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1287,1290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1287,1290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1323,1326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1323,1326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1742,1745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1742,1745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1887,1890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1887,1890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2051,2054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2051,2054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2270,2273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2270,2273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2935,2938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2935,2938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3226,3229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3226,3229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3396,3399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3396,3399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11249,11252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11249,11252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport { apiGet } from '../../api/api';\n\nconst deliveryModes = [\n  { value: 'in-person', label: 'In presenza' },\n  { value: 'online', label: 'Online' },\n  { value: 'hybrid', label: 'Ibrido' },\n];\n\ninterface CourseOption {\n  value: string;\n  label: string;\n  certifications: string[];\n}\n\ninterface TrainerOption {\n  value: string;\n  label: string;\n  certifications: string[];\n}\n\nconst ScheduleTrainingWizard: React.FC = () => {\n  const [step, setStep] = useState(1);\n  const [form, setForm] = useState({\n    course: null as CourseOption | null,\n    trainer: null as TrainerOption | null,\n    coTrainer: null as TrainerOption | null,\n    requiredCerts: [] as string[],\n    dates: [{ date: '', start: '', end: '' }],\n    location: '',\n    deliveryMode: '',\n    notes: '',\n    companies: [] as string[],\n    persons: [] as string[],\n  });\n  const [companiesList, setCompaniesList] = useState<any[]>([]);\n  const [personsList, setPersonsList] = useState<any[]>([]);\n  const [personSearch, setPersonSearch] = useState('');\n\n  // Load courses from backend\n  const loadCourses = async (inputValue: string) => {\n    const data = await apiGet(`/courses?search=${encodeURIComponent(inputValue)}`) as any[];\n    return data.map((course: any) => ({\n      value: course.id,\n      label: course.title,\n      certifications: course.certifications ? course.certifications.split(',').map((c: string) => c.trim()) : [],\n    })) as CourseOption[];\n  };\n\n  // Load trainers from backend, filter by certifications if needed\n  const loadTrainers = async (inputValue: string) => {\n    const data = await apiGet(`/trainers?search=${encodeURIComponent(inputValue)}`) as any[];\n    if (form.course && form.course.certifications && form.course.certifications.length > 0) {\n      return data\n        .filter((trainer: any) => Array.isArray(trainer.certifications) && form.course!.certifications.every((cert: string) => trainer.certifications.includes(cert)))\n        .map((trainer: any) => ({\n          value: trainer.id,\n          label: `${trainer.firstName} ${trainer.lastName}`,\n          certifications: trainer.certifications,\n        })) as TrainerOption[];\n    }\n    return data.map((trainer: any) => ({\n      value: trainer.id,\n      label: `${trainer.firstName} ${trainer.lastName}`,\n      certifications: trainer.certifications,\n    })) as TrainerOption[];\n  };\n\n  // When course changes, update requiredCerts\n  useEffect(() => {\n    if (form.course && form.course.certifications) {\n      setForm(f => ({ ...f, requiredCerts: form.course!.certifications }));\n    } else {\n      setForm(f => ({ ...f, requiredCerts: [] }));\n    }\n    // Reset trainer if course changes\n    setForm(f => ({ ...f, trainer: null }));\n  }, [form.course]);\n\n  useEffect(() => {\n    if (step === 2 && companiesList.length === 0) {\n      apiGet('/companies')\n        .then((data: any) => setCompaniesList(data))\n        .catch(console.error);\n    }\n  }, [step, companiesList.length]);\n\n  useEffect(() => {\n    if (step === 3 && form.companies.length > 0) {\n      apiGet(`/api/v1/persons?companyIds=${form.companies.join(',')}&roleType=EMPLOYEE`)\n        .then((response: any) => setPersonsList(response.persons || []))\n        .catch(console.error);\n    }\n  }, [step, form.companies]);\n\n  const filteredPersons = personsList.filter((person: any) =>\n    personSearch === '' ||\n    person.firstName.toLowerCase().includes(personSearch.toLowerCase()) ||\n    person.lastName.toLowerCase().includes(personSearch.toLowerCase()) ||\n    person.email?.toLowerCase().includes(personSearch.toLowerCase())\n  );\n\n  return (\n    <div className=\"max-w-2xl mx-auto bg-white rounded-2xl shadow-lg p-8\">\n      {/* Stepper */}\n      <div className=\"flex justify-between mb-8\">\n        {[1, 2, 3].map((s) => (\n          <div key={s} className=\"flex-1 text-center\">\n            <div className={`mx-auto w-8 h-8 rounded-full flex items-center justify-center font-bold text-lg ${step === s ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'}`}>{s}</div>\n            <div className={`mt-2 text-sm font-medium ${step === s ? 'text-blue-600' : 'text-gray-500'}`}>{s === 1 ? 'Dettagli Evento' : s === 2 ? 'Aziende' : 'Persone'}</div>\n          </div>\n        ))}\n      </div>\n\n      {/* Step 1: Event Details */}\n      {step === 1 && (\n        <div className=\"space-y-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Tipo di Corso</label>\n            <AsyncSelect\n              cacheOptions\n              defaultOptions\n              loadOptions={loadCourses}\n              placeholder=\"Seleziona un corso\"\n              isClearable\n              styles={{ menu: base => ({ ...base, zIndex: 9999 }) }}\n              onChange={course => setForm(f => ({ ...f, course }))}\n              value={form.course}\n            />\n          </div>\n          {/* Required certifications (placeholder) */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Certificazioni Richieste</label>\n            <div className=\"flex flex-wrap gap-2\">\n              {/* Render requiredCerts as badges */}\n              {form.requiredCerts.length === 0 ? <span className=\"text-gray-400\">Nessuna</span> : form.requiredCerts.map((cert: string) => (\n                <span key={cert} className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-medium\">{cert}</span>\n              ))}\n            </div>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Docente</label>\n            <AsyncSelect\n              cacheOptions\n              defaultOptions\n              loadOptions={loadTrainers}\n              placeholder=\"Seleziona un docente\"\n              isClearable\n              styles={{ menu: base => ({ ...base, zIndex: 9999 }) }}\n              onChange={trainer => setForm(f => ({ ...f, trainer }))}\n              value={form.trainer}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Co-docente</label>\n            <AsyncSelect\n              cacheOptions\n              defaultOptions\n              loadOptions={loadTrainers}\n              placeholder=\"Seleziona un co-docente\"\n              isClearable\n              styles={{ menu: base => ({ ...base, zIndex: 9999 }) }}\n              onChange={coTrainer => setForm(f => ({ ...f, coTrainer }))}\n              value={form.coTrainer}\n            />\n          </div>\n          {/* Multi-date picker (placeholder) */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date e Orari</label>\n            {form.dates.map((d, i) => (\n              <div key={i} className=\"flex gap-2 mb-2\">\n                <input type=\"date\" className=\"border rounded px-2 py-1\" value={d.date} onChange={e => setForm(f => { const dates = [...f.dates]; dates[i].date = e.target.value; return { ...f, dates }; })} />\n                <input type=\"time\" className=\"border rounded px-2 py-1\" value={d.start} onChange={e => setForm(f => { const dates = [...f.dates]; dates[i].start = e.target.value; return { ...f, dates }; })} />\n                <input type=\"time\" className=\"border rounded px-2 py-1\" value={d.end} onChange={e => setForm(f => { const dates = [...f.dates]; dates[i].end = e.target.value; return { ...f, dates }; })} />\n                <button type=\"button\" className=\"text-red-500\" onClick={() => setForm(f => ({ ...f, dates: f.dates.filter((_, j) => j !== i) }))}>✕</button>\n              </div>\n            ))}\n            <button type=\"button\" className=\"text-blue-600 hover:underline text-sm\" onClick={() => setForm(f => ({ ...f, dates: [...f.dates, { date: '', start: '', end: '' }] }))}>+ Aggiungi data</button>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Luogo</label>\n            <input type=\"text\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\" value={form.location} onChange={e => setForm(f => ({ ...f, location: e.target.value }))} />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Modalità di erogazione</label>\n            <select className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\" value={form.deliveryMode} onChange={e => setForm(f => ({ ...f, deliveryMode: e.target.value }))}>\n              <option value=\"\">Seleziona modalità</option>\n              {deliveryModes.map(m => <option key={m.value} value={m.value}>{m.label}</option>)}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Note</label>\n            <textarea className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\" rows={3} value={form.notes} onChange={e => setForm(f => ({ ...f, notes: e.target.value }))} />\n          </div>\n        </div>\n      )}\n\n      {/* Step 2: Companies */}\n      {step === 2 && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-lg font-semibold text-gray-800 mb-2\">Seleziona Aziende</h2>\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            {companiesList.length === 0 ? (\n              <div className=\"text-gray-400\">Nessuna azienda trovata.</div>\n            ) : (\n              companiesList.map(company => (\n                <label key={company.id} className=\"flex items-center gap-3 py-2 border-b last:border-0 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={form.companies.includes(company.id)}\n                    onChange={e => {\n                      setForm(f => ({\n                        ...f,\n                        companies: e.target.checked\n                          ? [...f.companies, company.id]\n                          : f.companies.filter((id: string) => id !== company.id)\n                      }));\n                    }}\n                  />\n                  <div>\n                    <div className=\"font-medium text-gray-800\">{company.name}</div>\n                    <div className=\"text-xs text-gray-500\">\n                      {company.employees_count || 0} persone\n                      {company.industry && ` · ${company.industry}`}\n                    </div>\n                  </div>\n                </label>\n              ))\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Step 3: Persons */}\n      {step === 3 && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-lg font-semibold text-gray-800 mb-2\">Seleziona Persone</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Cerca persone...\"\n            className=\"mb-3 w-full border rounded px-3 py-2\"\n            value={personSearch}\n            onChange={e => setPersonSearch(e.target.value)}\n          />\n          <button\n            type=\"button\"\n            className=\"mb-2 px-3 py-1 rounded bg-gray-100 text-gray-700 text-sm\"\n            onClick={() => setForm(f => ({ ...f, persons: filteredPersons.map((person: any) => person.id) }))}\n          >\n            Seleziona Tutti\n          </button>\n          <div className=\"bg-gray-50 rounded-lg p-4 max-h-72 overflow-y-auto\">\n            {filteredPersons.length === 0 ? (\n              <div className=\"text-gray-400\">Nessuna persona trovata.</div>\n            ) : (\n              filteredPersons.map(person => (\n                <label key={person.id} className=\"flex items-center gap-3 py-2 border-b last:border-0 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={form.persons.includes(person.id)}\n                    onChange={e => {\n                      setForm(f => ({\n                        ...f,\n                        persons: e.target.checked\n                          ? [...f.persons, person.id]\n                          : f.persons.filter((id: string) => id !== person.id)\n                      }));\n                    }}\n                  />\n                  <div>\n                    <div className=\"font-medium text-gray-800\">{person.firstName} {person.lastName}</div>\n                    <div className=\"text-xs text-gray-500\">{person.email}</div>\n                    <div className=\"text-xs text-gray-400\">{person.company?.name}</div>\n                  </div>\n                </label>\n              ))\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Step navigation */}\n      <div className=\"flex justify-between mt-8\">\n        {step > 1 ? <button className=\"px-4 py-2 rounded border\" onClick={() => setStep(s => s - 1)}>Indietro</button> : <span />}\n        {step < 3 ? <button className=\"px-4 py-2 rounded bg-blue-600 text-white\" onClick={() => setStep(s => s + 1)}>Avanti</button> : <button className=\"px-4 py-2 rounded bg-blue-600 text-white\">Conferma</button>}\n      </div>\n    </div>\n  );\n};\n\nexport default ScheduleTrainingWizard;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/components/AttendanceManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[896,899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[896,899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Label } from '../../../design-system/atoms/Label';\n\ninterface Person {\n  id: string | number;\n  firstName: string;\n  lastName: string;\n  companyId: string | number;\n  company_id?: string | number;\n  company?: { id: string | number; name: string };\n  email?: string;\n}\n\ninterface DateEntry {\n  date: string;\n  start: string;\n  end: string;\n  trainerId: string | number;\n  coTrainerId: string | number;\n}\n\ninterface AttendanceManagerProps {\n  dates: DateEntry[];\n  selectedPersons: (string | number)[];\n  persons: Person[];\n  attendance: Record<number, (string | number)[]>;\n  onAttendanceChange: (dateIdx: number, personId: string | number, isPresent: boolean) => void;\n  onSelectAllForDate: (dateIdx: number) => void;\n  onSelectNoneForDate: (dateIdx: number) => void;\n  getCompanyName: (companyId: any) => string;\n  formatDate: (isoDate: string) => string;\n  selectedDayIdx: number;\n  onSelectedDayChange: (idx: number) => void;\n}\n\nexport const AttendanceManager: React.FC<AttendanceManagerProps> = ({\n  dates,\n  selectedPersons,\n  persons,\n  attendance,\n  onAttendanceChange,\n  onSelectAllForDate,\n  onSelectNoneForDate,\n  getCompanyName,\n  formatDate,\n  selectedDayIdx,\n  onSelectedDayChange\n}) => {\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"font-semibold text-gray-700\">Registrazione Presenze</h3>\n      \n      {/* Date Selector */}\n      <div className=\"flex flex-wrap gap-2\">\n        {dates.map((dateEntry, idx) => (\n          <button\n            key={idx}\n            type=\"button\"\n            onClick={() => onSelectedDayChange(idx)}\n            className={`px-3 py-2 text-sm rounded border ${\n              selectedDayIdx === idx\n                ? 'bg-blue-600 text-white border-blue-600'\n                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n            }`}\n          >\n            {formatDate(dateEntry.date)}\n            <div className=\"text-xs\">\n              {dateEntry.start} - {dateEntry.end}\n            </div>\n          </button>\n        ))}\n      </div>\n\n      {/* Attendance for Selected Date */}\n      {dates[selectedDayIdx] && (\n        <div className=\"border rounded p-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h4 className=\"font-medium\">\n              Presenze per {formatDate(dates[selectedDayIdx].date)}\n            </h4>\n            <div className=\"space-x-2\">\n              <Button\n                type=\"button\"\n                size=\"sm\"\n                variant=\"secondary\"\n                onClick={() => onSelectAllForDate(selectedDayIdx)}\n              >\n                Tutti Presenti\n              </Button>\n              <Button\n                type=\"button\"\n                size=\"sm\"\n                variant=\"secondary\"\n                onClick={() => onSelectNoneForDate(selectedDayIdx)}\n              >\n                Nessuno\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"max-h-80 overflow-y-auto border rounded\">\n            {selectedPersons.length > 0 ? (\n              persons\n                .filter((person: Person) => selectedPersons.includes(person.id))\n                .map((person: Person) => (\n                  <div key={`${selectedDayIdx}-${person.id}`} className=\"flex items-center p-3 hover:bg-gray-50 border-b last:border-b-0\">\n                    <input\n                      type=\"checkbox\"\n                      id={`attendance-${selectedDayIdx}-${person.id}`}\n                      checked={(attendance[selectedDayIdx] || []).includes(person.id)}\n                      onChange={(e) => onAttendanceChange(selectedDayIdx, person.id, e.target.checked)}\n                      className=\"mr-3 w-4 h-4 accent-blue-600\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">\n                        {person.firstName} {person.lastName}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {getCompanyName(person.company_id || person.companyId)}\n                      </div>\n                      {person.email && (\n                        <div className=\"text-xs text-gray-400\">{person.email}</div>\n                      )}\n                    </div>\n                  </div>\n                ))\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                Nessun partecipante selezionato\n              </div>\n            )}\n          </div>\n          \n          {/* Attendance Summary */}\n          <div className=\"mt-3 text-right text-sm text-gray-600\">\n            Presenti: <span className=\"font-medium\">{(attendance[selectedDayIdx] || []).length}</span> / {selectedPersons.length}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AttendanceManager;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/components/CompanyEmployeeSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[939,942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[939,942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Input } from '../../../design-system/atoms/Input';\nimport { Label } from '../../../design-system/atoms/Label';\nimport { Company } from '../../../types';\n\ninterface Person {\n  id: string | number;\n  firstName: string;\n  lastName: string;\n  companyId: string | number;\n  company_id?: string | number;\n  company?: { id: string | number; name: string };\n  email?: string;\n  position?: string;\n}\n\ninterface CompanyEmployeeSelectorProps {\n  companies: Company[];\n  persons: Person[];\n  selectedCompanies: (string | number)[];\n  selectedPersons: (string | number)[];\n  onCompanyToggle: (companyId: string | number) => void;\n  onPersonToggle: (personId: string | number) => void;\n  onSelectAllPersons: (companyId: string | number) => void;\n  onDeselectAllPersons: (companyId: string | number) => void;\n  getCompanyName: (companyId: any) => string;\n  getPersonIdsForCompany: (companyId: string) => (string | number)[];\n  companySearch: string;\n  onCompanySearchChange: (search: string) => void;\n  personSearch: string;\n  onPersonSearchChange: (search: string) => void;\n  personTab: string | number;\n  onPersonTabChange: (tab: string | number) => void;\n}\n\nexport const CompanyEmployeeSelector: React.FC<CompanyEmployeeSelectorProps> = ({\n  companies,\n  persons,\n  selectedCompanies,\n  selectedPersons,\n  onCompanyToggle,\n  onPersonToggle,\n  onSelectAllPersons,\n  onDeselectAllPersons,\n  getCompanyName,\n  getPersonIdsForCompany,\n  companySearch,\n  onCompanySearchChange,\n  personSearch,\n  onPersonSearchChange,\n  personTab,\n  onPersonTabChange\n}) => {\n  const filteredCompanies = companies.filter(company =>\n    company.name?.toLowerCase().includes(companySearch.toLowerCase()) ?? false\n  );\n\n  const getFilteredPersonsForCompany = useCallback((companyId: string | number) => {\n    return persons.filter((person: Person) => {\n      const personCompanyId = person.company_id || person.companyId;\n      const matchesCompany = personCompanyId === companyId;\n      const matchesSearch = personSearch === '' || \n        `${person.firstName} ${person.lastName}`.toLowerCase().includes(personSearch.toLowerCase());\n      return matchesCompany && matchesSearch;\n    });\n  }, [persons, personSearch]);\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"font-semibold text-gray-700\">Seleziona Aziende e Partecipanti</h3>\n      \n      {/* Company Search */}\n      <div>\n        <Label>Cerca Aziende</Label>\n        <Input\n          type=\"text\"\n          placeholder=\"Cerca per nome azienda...\"\n          value={companySearch}\n          onChange={(e) => onCompanySearchChange(e.target.value)}\n        />\n      </div>\n\n      {/* Companies List */}\n      <div className=\"border rounded max-h-48 overflow-y-auto\">\n        {filteredCompanies.map(company => {\n          const companyPersons = getPersonIdsForCompany(String(company.id));\n          const isSelected = selectedCompanies.includes(company.id);\n          \n          return (\n            <div key={company.id} className=\"flex items-center p-2 border-b hover:bg-gray-50\">\n              <input\n                type=\"checkbox\"\n                checked={isSelected}\n                onChange={() => onCompanyToggle(company.id)}\n                className=\"mr-3\"\n              />\n              <div className=\"flex-1\">\n                <div className=\"font-medium\">{company.name}</div>\n                <div className=\"text-sm text-gray-500\">\n                  {companyPersons.length} dipendenti\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Selected Companies Summary */}\n      {selectedCompanies.length > 0 && (\n        <div className=\"bg-blue-50 p-3 rounded\">\n          <div className=\"font-medium text-sm mb-2\">\n            Aziende selezionate: {selectedCompanies.length}\n          </div>\n          <div className=\"text-sm text-gray-600\">\n            {selectedCompanies.map(companyId => getCompanyName(companyId)).join(', ')}\n          </div>\n        </div>\n      )}\n\n      {/* Person Selection */}\n      {selectedCompanies.length > 0 && (\n        <div className=\"space-y-3\">\n          <div>\n            <Label>Cerca Dipendenti</Label>\n            <Input\n              type=\"text\"\n              placeholder=\"Cerca per nome dipendente...\"\n              value={personSearch}\n              onChange={(e) => onPersonSearchChange(e.target.value)}\n            />\n          </div>\n\n          {/* Company Tabs */}\n          <div className=\"flex flex-wrap gap-2\">\n            {selectedCompanies.map(companyId => (\n              <button\n                key={companyId}\n                type=\"button\"\n                onClick={() => onPersonTabChange(companyId)}\n                className={`px-3 py-1 text-sm rounded ${\n                  personTab === companyId\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {getCompanyName(companyId)}\n              </button>\n            ))}\n          </div>\n\n          {/* Person List for Selected Company */}\n          {personTab && (\n            <div className=\"border rounded\">\n              <div className=\"p-2 bg-gray-50 border-b flex justify-between items-center\">\n                <span className=\"font-medium text-sm\">\n                  Dipendenti - {getCompanyName(personTab)}\n                </span>\n                <div className=\"space-x-2\">\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    onClick={() => onSelectAllPersons(personTab)}\n                  >\n                    Seleziona Tutti\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    onClick={() => onDeselectAllPersons(personTab)}\n                  >\n                    Deseleziona Tutti\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"max-h-64 overflow-y-auto\">\n                {getFilteredPersonsForCompany(personTab).map((person: Person) => (\n                  <div key={person.id} className=\"flex items-center p-2 border-b hover:bg-gray-50\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedPersons.includes(person.id)}\n                      onChange={() => onPersonToggle(person.id)}\n                      className=\"mr-3\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">\n                        {person.firstName} {person.lastName}\n                      </div>\n                      {person.email && (\n                        <div className=\"text-xs text-gray-500\">{person.email}</div>\n                      )}\n                      {person.position && (\n                        <div className=\"text-xs text-gray-500\">{person.position}</div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Selected Persons Summary */}\n          <div className=\"bg-green-50 p-3 rounded\">\n            <div className=\"font-medium text-sm\">\n              Partecipanti selezionati: {selectedPersons.length}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CompanyEmployeeSelector;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/components/CourseDetailsForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[831,834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[831,834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'coTrainerOptions' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1375,1378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1375,1378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getTrainerName' is assigned a value but never used.","line":62,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":23}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Input } from '../../../design-system/atoms/Input';\nimport { Label } from '../../../design-system/atoms/Label';\nimport Select from 'react-select';\n\ninterface Training {\n  id: string | number;\n  title: string;\n  certifications?: string[];\n  duration?: string | number;\n}\n\ninterface Trainer {\n  id: string | number;\n  firstName: string;\n  lastName: string;\n  certifications?: string[];\n}\n\ninterface CourseDetailsFormProps {\n  trainings: Training[];\n  trainers: Trainer[];\n  formData: {\n    training_id: string | number;\n    trainer_id: string | number;\n    co_trainer_id: string | number;\n    location: string;\n    max_participants: number;\n    notes: string;\n    delivery_mode?: string;\n  };\n  onFormDataChange: (field: string, value: any) => void;\n  selectedCourse: Training | undefined;\n  filteredTrainers: Trainer[];\n  coTrainerOptions: Trainer[];\n  courseSearch: string;\n  onCourseSearchChange: (search: string) => void;\n  DELIVERY_MODES: Array<{ value: string; label: string }>;\n}\n\nexport const CourseDetailsForm: React.FC<CourseDetailsFormProps> = ({\n  trainings,\n  trainers,\n  formData,\n  onFormDataChange,\n  selectedCourse,\n  filteredTrainers,\n  coTrainerOptions,\n  courseSearch,\n  onCourseSearchChange,\n  DELIVERY_MODES\n}) => {\n  const courseOptions = trainings.map((t: any) => ({ \n    value: t.id, \n    label: t.title, \n    ...t \n  }));\n  \n  const selectedCourseOption = courseOptions.find(opt => opt.value === formData.training_id) || null;\n\n  const getTrainerName = (trainerId: string | number) => {\n    const trainer = trainers.find(t => t.id === trainerId);\n    return trainer ? `${trainer.firstName} ${trainer.lastName}` : '';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"font-semibold text-gray-700\">Dettagli del Corso</h3>\n      \n      {/* Course Selection */}\n      <div>\n        <Label>Corso *</Label>\n        <div className=\"space-y-2\">\n          <Input\n            type=\"text\"\n            placeholder=\"Cerca corso...\"\n            value={courseSearch}\n            onChange={(e) => onCourseSearchChange(e.target.value)}\n          />\n          <Select\n            value={selectedCourseOption}\n            onChange={(option) => onFormDataChange('training_id', option ? option.value : '')}\n            options={courseOptions.filter(opt => \n              courseSearch === '' || \n              opt.label.toLowerCase().includes(courseSearch.toLowerCase())\n            )}\n            placeholder=\"Seleziona un corso\"\n            isClearable\n            isSearchable\n          />\n        </div>\n        \n        {selectedCourse && (\n          <div className=\"mt-2 p-3 bg-blue-50 rounded border\">\n            <div className=\"text-sm\">\n              <div className=\"font-medium\">{selectedCourse.title}</div>\n              {selectedCourse.duration && (\n                <div className=\"text-gray-600\">Durata: {selectedCourse.duration} ore</div>\n              )}\n              {selectedCourse.certifications && selectedCourse.certifications.length > 0 && (\n                <div className=\"text-gray-600\">\n                  Certificazioni richieste: {selectedCourse.certifications.join(', ')}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Location */}\n      <div>\n        <Label>Luogo *</Label>\n        <Input\n          type=\"text\"\n          placeholder=\"Inserisci il luogo del corso\"\n          value={formData.location}\n          onChange={(e) => onFormDataChange('location', e.target.value)}\n        />\n      </div>\n\n      {/* Delivery Mode */}\n      <div>\n        <Label>Modalità di Erogazione</Label>\n        <Select\n          value={DELIVERY_MODES.find(mode => mode.value === formData.delivery_mode) || null}\n          onChange={(option) => onFormDataChange('delivery_mode', option ? option.value : '')}\n          options={DELIVERY_MODES}\n          placeholder=\"Seleziona modalità\"\n          isClearable\n        />\n      </div>\n\n      {/* Max Participants */}\n      <div>\n        <Label>Numero Massimo Partecipanti</Label>\n        <Input\n          type=\"number\"\n          min=\"1\"\n          max=\"100\"\n          value={formData.max_participants}\n          onChange={(e) => onFormDataChange('max_participants', parseInt(e.target.value) || 20)}\n        />\n      </div>\n\n      {/* Notes */}\n      <div>\n        <Label>Note</Label>\n        <textarea\n          className=\"w-full p-2 border rounded resize-none\"\n          rows={3}\n          placeholder=\"Note aggiuntive sul corso...\"\n          value={formData.notes}\n          onChange={(e) => onFormDataChange('notes', e.target.value)}\n        />\n      </div>\n\n      {/* Trainer Information */}\n      {filteredTrainers.length > 0 && (\n        <div className=\"bg-green-50 p-3 rounded border\">\n          <div className=\"text-sm\">\n            <div className=\"font-medium text-green-800 mb-1\">\n              Formatori qualificati disponibili: {filteredTrainers.length}\n            </div>\n            <div className=\"text-green-600 text-xs\">\n              {filteredTrainers.slice(0, 3).map(t => `${t.firstName} ${t.lastName}`).join(', ')}\n              {filteredTrainers.length > 3 && ` e altri ${filteredTrainers.length - 3}`}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CourseDetailsForm;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/components/DateTimeManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDate' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Input } from '../../../design-system/atoms/Input';\nimport { Label } from '../../../design-system/atoms/Label';\nimport DatePicker from 'react-datepicker';\nimport { it } from 'date-fns/locale';\nimport Select from 'react-select';\n\ninterface DateEntry {\n  date: string;\n  start: string;\n  end: string;\n  trainerId: string | number;\n  coTrainerId: string | number;\n}\n\ninterface Trainer {\n  id: string | number;\n  firstName: string;\n  lastName: string;\n  certifications?: string[];\n}\n\ninterface DateTimeManagerProps {\n  dates: DateEntry[];\n  trainers: Trainer[];\n  filteredTrainers: Trainer[];\n  coTrainerOptions: Trainer[];\n  onUpdateDateTime: (idx: number, field: 'date' | 'start' | 'end' | 'trainerId' | 'coTrainerId', value: string) => void;\n  onAddDateTime: () => void;\n  onRemoveDateTime: (idx: number) => void;\n  formatDate: (isoDate: string) => string;\n  totalSelectedHours: number;\n  courseDuration: number;\n  hoursLeft: number;\n}\n\nexport const DateTimeManager: React.FC<DateTimeManagerProps> = ({\n  dates,\n  trainers,\n  filteredTrainers,\n  coTrainerOptions,\n  onUpdateDateTime,\n  onAddDateTime,\n  onRemoveDateTime,\n  formatDate,\n  totalSelectedHours,\n  courseDuration,\n  hoursLeft\n}) => {\n  const getTrainerName = useCallback((trainerId: string | number) => {\n    const trainer = trainers.find(t => t.id === trainerId);\n    return trainer ? `${trainer.firstName} ${trainer.lastName}` : '';\n  }, [trainers]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"font-semibold text-gray-700\">Date e Orari</h3>\n        <Button type=\"button\" onClick={onAddDateTime} variant=\"secondary\" size=\"sm\">\n          + Aggiungi Data\n        </Button>\n      </div>\n\n      {/* Hours Summary */}\n      <div className=\"bg-blue-50 p-3 rounded border\">\n        <div className=\"text-sm\">\n          <span className=\"font-medium\">Ore selezionate:</span> {totalSelectedHours}h\n          {courseDuration > 0 && (\n            <>\n              <span className=\"mx-2\">|</span>\n              <span className=\"font-medium\">Durata corso:</span> {courseDuration}h\n              <span className=\"mx-2\">|</span>\n              <span className={`font-medium ${hoursLeft === 0 ? 'text-green-600' : 'text-orange-600'}`}>\n                Ore rimanenti: {hoursLeft}h\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n\n      {dates.map((dateEntry, idx) => (\n        <div key={idx} className=\"border rounded p-4 bg-gray-50\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <h4 className=\"font-medium\">Sessione {idx + 1}</h4>\n            {dates.length > 1 && (\n              <Button\n                type=\"button\"\n                onClick={() => onRemoveDateTime(idx)}\n                variant=\"destructive\"\n                size=\"sm\"\n              >\n                Rimuovi\n              </Button>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Date */}\n            <div>\n              <Label>Data</Label>\n              <DatePicker\n                selected={new Date(dateEntry.date)}\n                onChange={(date) => {\n                  if (date) {\n                    onUpdateDateTime(idx, 'date', date.toISOString().split('T')[0]);\n                  }\n                }}\n                dateFormat=\"dd/MM/yyyy\"\n                locale={it}\n                className=\"w-full p-2 border rounded\"\n                placeholderText=\"Seleziona data\"\n              />\n            </div>\n\n            {/* Time Range */}\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <Label>Ora Inizio</Label>\n                <Input\n                  type=\"time\"\n                  value={dateEntry.start}\n                  onChange={(e) => onUpdateDateTime(idx, 'start', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label>Ora Fine</Label>\n                <Input\n                  type=\"time\"\n                  value={dateEntry.end}\n                  onChange={(e) => onUpdateDateTime(idx, 'end', e.target.value)}\n                />\n              </div>\n            </div>\n\n            {/* Main Trainer */}\n            <div>\n              <Label>Formatore Principale</Label>\n              <Select\n                value={filteredTrainers.find(t => t.id === dateEntry.trainerId) ? {\n                  value: dateEntry.trainerId,\n                  label: getTrainerName(dateEntry.trainerId)\n                } : null}\n                onChange={(option) => {\n                  onUpdateDateTime(idx, 'trainerId', option ? String(option.value) : '');\n                }}\n                options={filteredTrainers.map(t => ({\n                  value: t.id,\n                  label: `${t.firstName} ${t.lastName}`\n                }))}\n                placeholder=\"Seleziona formatore\"\n                isClearable\n              />\n            </div>\n\n            {/* Co-Trainer */}\n            <div>\n              <Label>Co-Formatore (Opzionale)</Label>\n              <Select\n                value={coTrainerOptions.find(t => t.id === dateEntry.coTrainerId) ? {\n                  value: dateEntry.coTrainerId,\n                  label: getTrainerName(dateEntry.coTrainerId)\n                } : null}\n                onChange={(option) => {\n                  onUpdateDateTime(idx, 'coTrainerId', option ? String(option.value) : '');\n                }}\n                options={coTrainerOptions.map(t => ({\n                  value: t.id,\n                  label: `${t.firstName} ${t.lastName}`\n                }))}\n                placeholder=\"Seleziona co-formatore\"\n                isClearable\n              />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default DateTimeManager;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/components/DocumentManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[327,330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[327,330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Label } from '../../../design-system/atoms/Label';\n\ninterface DocumentManagerProps {\n  status: string;\n  onStatusChange: (status: string) => void;\n  selectedEmployees: (string | number)[];\n  selectedCompanies: (string | number)[];\n  attendance: Record<number, (string | number)[]>;\n  dates: any[];\n  showStatusMenu: boolean;\n  onShowStatusMenuChange: (show: boolean) => void;\n}\n\nexport const DocumentManager: React.FC<DocumentManagerProps> = ({\n  status,\n  onStatusChange,\n  selectedEmployees,\n  selectedCompanies,\n  attendance,\n  dates,\n  showStatusMenu,\n  onShowStatusMenuChange\n}) => {\n  const statusOptions = ['Preventivo', 'Conferma', 'Fattura', 'Pagamento'];\n  \n  const hasAttendanceData = dates.every((_, idx) => \n    attendance[idx] && attendance[idx].length > 0\n  );\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"font-semibold text-gray-700\">Documenti</h3>\n      \n      <div className=\"border rounded-md p-4 bg-gray-50 space-y-4\">\n        {/* Document Status */}\n        <div>\n          <Label>Stato Documentazione</Label>\n          <div className=\"relative mt-1\">\n            <button\n              type=\"button\"\n              className=\"w-full p-2 border rounded flex justify-between items-center bg-white hover:bg-gray-50\"\n              onClick={() => onShowStatusMenuChange(!showStatusMenu)}\n            >\n              <span>{status}</span>\n              <span className=\"text-gray-400\">▼</span>\n            </button>\n            \n            {showStatusMenu && (\n              <div className=\"absolute left-0 right-0 mt-1 border rounded bg-white shadow-lg z-10\">\n                {statusOptions.map(s => (\n                  <div\n                    key={s}\n                    className=\"p-2 hover:bg-gray-100 cursor-pointer\"\n                    onClick={() => {\n                      onStatusChange(s);\n                      onShowStatusMenuChange(false);\n                    }}\n                  >\n                    {s}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Participants Summary */}\n        <div>\n          <Label>Partecipanti confermati</Label>\n          <div className=\"mt-1 p-3 border rounded bg-white\">\n            <div className=\"text-sm text-gray-600\">\n              <span className=\"font-semibold\">{selectedEmployees.length}</span> partecipanti da{' '}\n              <span className=\"font-semibold\">{selectedCompanies.length}</span> aziende\n            </div>\n          </div>\n        </div>\n        \n        {/* Document Generation Options */}\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium text-sm\">Opzioni di generazione</h4>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-3\">\n              <input \n                type=\"checkbox\" \n                id=\"preventivo\" \n                checked={status === 'Preventivo'} \n                readOnly \n                className=\"w-4 h-4\"\n              />\n              <label htmlFor=\"preventivo\" className=\"text-sm\">\n                Genera Preventivo\n              </label>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <input \n                type=\"checkbox\" \n                id=\"attestati\" \n                disabled={!hasAttendanceData}\n                className=\"w-4 h-4\"\n              />\n              <label \n                htmlFor=\"attestati\" \n                className={`text-sm ${!hasAttendanceData ? \"text-gray-400\" : \"\"}`}\n              >\n                Genera Attestati\n              </label>\n              {!hasAttendanceData && (\n                <span className=\"text-gray-400 text-xs\">\n                  (disponibile dopo la registrazione delle presenze)\n                </span>\n              )}\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <input \n                type=\"checkbox\" \n                id=\"registro\" \n                disabled={!hasAttendanceData}\n                className=\"w-4 h-4\"\n              />\n              <label \n                htmlFor=\"registro\" \n                className={`text-sm ${!hasAttendanceData ? \"text-gray-400\" : \"\"}`}\n              >\n                Genera Registro Presenze\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        {/* Status Information */}\n        <div className=\"bg-blue-50 p-3 rounded border\">\n          <div className=\"text-sm\">\n            <div className=\"font-medium text-blue-800 mb-1\">Stato attuale: {status}</div>\n            <div className=\"text-blue-600 text-xs\">\n              {status === 'Preventivo' && 'Il corso è in fase di preventivazione'}\n              {status === 'Conferma' && 'Il corso è confermato e pronto per l\\'erogazione'}\n              {status === 'Fattura' && 'Il corso è stato fatturato'}\n              {status === 'Pagamento' && 'Il pagamento è stato ricevuto'}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentManager;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/components/ModalNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/components/TrainerSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[488,491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[488,491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getTrainerName' is assigned a value but never used.","line":34,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getTrainerCertifications' is assigned a value but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2429,2432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2429,2432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4594,4597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4594,4597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Label } from '../../../design-system/atoms/Label';\nimport Select from 'react-select';\n\ninterface Trainer {\n  id: string | number;\n  firstName: string;\n  lastName: string;\n  certifications?: string[];\n}\n\ninterface TrainerSelectorProps {\n  trainers: Trainer[];\n  filteredTrainers: Trainer[];\n  coTrainerOptions: Trainer[];\n  formData: {\n    trainer_id: string | number;\n    co_trainer_id: string | number;\n  };\n  onFormDataChange: (field: string, value: any) => void;\n  selectedCourse?: {\n    certifications?: string[];\n  };\n}\n\nexport const TrainerSelector: React.FC<TrainerSelectorProps> = ({\n  trainers,\n  filteredTrainers,\n  coTrainerOptions,\n  formData,\n  onFormDataChange,\n  selectedCourse\n}) => {\n  const getTrainerName = (trainerId: string | number) => {\n    const trainer = trainers.find(t => t.id === trainerId);\n    return trainer ? `${trainer.firstName} ${trainer.lastName}` : '';\n  };\n\n  const getTrainerCertifications = (trainerId: string | number) => {\n    const trainer = trainers.find(t => t.id === trainerId);\n    return trainer?.certifications || [];\n  };\n\n  const isTrainerQualified = (trainer: Trainer) => {\n    if (!selectedCourse?.certifications || selectedCourse.certifications.length === 0) {\n      return true;\n    }\n    \n    const trainerCerts = trainer.certifications || [];\n    return selectedCourse.certifications.some(cert => \n      trainerCerts.includes(cert)\n    );\n  };\n\n  const selectedTrainer = trainers.find(t => t.id === formData.trainer_id);\n  const selectedCoTrainer = trainers.find(t => t.id === formData.co_trainer_id);\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"font-semibold text-gray-700\">Formatori</h3>\n      \n      {/* Main Trainer */}\n      <div>\n        <Label>Formatore Principale *</Label>\n        <Select\n          value={selectedTrainer ? {\n            value: selectedTrainer.id,\n            label: `${selectedTrainer.firstName} ${selectedTrainer.lastName}`\n          } : null}\n          onChange={(option) => {\n            onFormDataChange('trainer_id', option ? option.value : '');\n          }}\n          options={filteredTrainers.map(t => ({\n            value: t.id,\n            label: `${t.firstName} ${t.lastName}`,\n            isDisabled: !isTrainerQualified(t)\n          }))}\n          placeholder=\"Seleziona formatore principale\"\n          isClearable\n          isSearchable\n          formatOptionLabel={(option: any) => (\n            <div className=\"flex justify-between items-center\">\n              <span className={!isTrainerQualified(trainers.find(t => t.id === option.value)!) ? 'text-gray-400' : ''}>\n                {option.label}\n              </span>\n              {!isTrainerQualified(trainers.find(t => t.id === option.value)!) && (\n                <span className=\"text-xs text-red-500\">Non qualificato</span>\n              )}\n            </div>\n          )}\n        />\n        \n        {selectedTrainer && (\n          <div className=\"mt-2 p-3 bg-blue-50 rounded border\">\n            <div className=\"text-sm\">\n              <div className=\"font-medium\">{selectedTrainer.firstName} {selectedTrainer.lastName}</div>\n              {selectedTrainer.certifications && selectedTrainer.certifications.length > 0 && (\n                <div className=\"text-gray-600\">\n                  Certificazioni: {selectedTrainer.certifications.join(', ')}\n                </div>\n              )}\n              {selectedCourse?.certifications && (\n                <div className={`text-xs mt-1 ${isTrainerQualified(selectedTrainer) ? 'text-green-600' : 'text-red-600'}`}>\n                  {isTrainerQualified(selectedTrainer) \n                    ? '✓ Qualificato per questo corso' \n                    : '⚠ Non ha le certificazioni richieste'\n                  }\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Co-Trainer */}\n      <div>\n        <Label>Co-Formatore (Opzionale)</Label>\n        <Select\n          value={selectedCoTrainer ? {\n            value: selectedCoTrainer.id,\n            label: `${selectedCoTrainer.firstName} ${selectedCoTrainer.lastName}`\n          } : null}\n          onChange={(option) => {\n            onFormDataChange('co_trainer_id', option ? option.value : '');\n          }}\n          options={coTrainerOptions.map(t => ({\n            value: t.id,\n            label: `${t.firstName} ${t.lastName}`,\n            isDisabled: !isTrainerQualified(t)\n          }))}\n          placeholder=\"Seleziona co-formatore\"\n          isClearable\n          isSearchable\n          formatOptionLabel={(option: any) => (\n            <div className=\"flex justify-between items-center\">\n              <span className={!isTrainerQualified(trainers.find(t => t.id === option.value)!) ? 'text-gray-400' : ''}>\n                {option.label}\n              </span>\n              {!isTrainerQualified(trainers.find(t => t.id === option.value)!) && (\n                <span className=\"text-xs text-red-500\">Non qualificato</span>\n              )}\n            </div>\n          )}\n        />\n        \n        {selectedCoTrainer && (\n          <div className=\"mt-2 p-3 bg-green-50 rounded border\">\n            <div className=\"text-sm\">\n              <div className=\"font-medium\">{selectedCoTrainer.firstName} {selectedCoTrainer.lastName}</div>\n              {selectedCoTrainer.certifications && selectedCoTrainer.certifications.length > 0 && (\n                <div className=\"text-gray-600\">\n                  Certificazioni: {selectedCoTrainer.certifications.join(', ')}\n                </div>\n              )}\n              {selectedCourse?.certifications && (\n                <div className={`text-xs mt-1 ${isTrainerQualified(selectedCoTrainer) ? 'text-green-600' : 'text-red-600'}`}>\n                  {isTrainerQualified(selectedCoTrainer) \n                    ? '✓ Qualificato per questo corso' \n                    : '⚠ Non ha le certificazioni richieste'\n                  }\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Trainer Requirements Info */}\n      {selectedCourse?.certifications && selectedCourse.certifications.length > 0 && (\n        <div className=\"bg-yellow-50 p-3 rounded border\">\n          <div className=\"text-sm\">\n            <div className=\"font-medium text-yellow-800 mb-1\">\n              Certificazioni richieste per questo corso:\n            </div>\n            <div className=\"text-yellow-700\">\n              {selectedCourse.certifications.join(', ')}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Available Qualified Trainers Summary */}\n      {filteredTrainers.length > 0 && (\n        <div className=\"bg-green-50 p-3 rounded border\">\n          <div className=\"text-sm\">\n            <div className=\"font-medium text-green-800 mb-1\">\n              Formatori qualificati disponibili: {filteredTrainers.length}\n            </div>\n            <div className=\"text-green-600 text-xs\">\n              {filteredTrainers.slice(0, 3).map(t => `${t.firstName} ${t.lastName}`).join(', ')}\n              {filteredTrainers.length > 3 && ` e altri ${filteredTrainers.length - 3}`}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TrainerSelector;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/schedules/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/settings/AdminSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Database' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BACKUP_FREQUENCIES' is assigned a value but never used.","line":36,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RETENTION_PERIODS' is assigned a value but never used.","line":43,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LOG_LEVELS' is assigned a value but never used.","line":51,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":59,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3875,3878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3875,3878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":145,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":163,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":195,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleMaintenanceToggle' is assigned a value but never used.","line":203,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setUsers' is assigned a value but never used.","line":377,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":377,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":446,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":446,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":479,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":479,"endColumn":19}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Admin Settings Component\n * Week 14 Implementation - Administrative System Configuration\n */\n\nimport React, { useState } from 'react';\nimport { \n  AlertTriangle,\n  Clock,\n  Database,\n  Download,\n  RotateCcw,\n  Save,\n  Server,\n  Settings,\n  Shield,\n  Upload\n} from 'lucide-react';\nimport { Card } from '../../design-system/molecules/Card/Card';\nimport { Button } from '../../design-system/atoms/Button/Button';\nimport { Input } from '../../design-system/atoms/Input/Input';\nimport { Select } from '../../design-system/atoms/Select/Select';\nimport { useAuth } from '../../context/AuthContext';\n\n// Toast notification function (simplified)\nconst toast = {\n  success: (message: string) => console.log('SUCCESS:', message),\n  error: (message: string) => console.error('ERROR:', message),\n  warning: (message: string) => console.warn('WARNING:', message)\n};\n\ninterface AdminSettingsProps {\n  className?: string;\n}\n\nconst BACKUP_FREQUENCIES = [\n  { value: 'daily', label: 'Giornaliero', description: 'Backup automatico ogni giorno alle 02:00' },\n  { value: 'weekly', label: 'Settimanale', description: 'Backup automatico ogni domenica alle 02:00' },\n  { value: 'monthly', label: 'Mensile', description: 'Backup automatico il primo giorno del mese' },\n  { value: 'manual', label: 'Manuale', description: 'Solo backup manuali' }\n];\n\nconst RETENTION_PERIODS = [\n  { value: '7', label: '7 giorni' },\n  { value: '30', label: '30 giorni' },\n  { value: '90', label: '90 giorni' },\n  { value: '365', label: '1 anno' },\n  { value: 'unlimited', label: 'Illimitato' }\n];\n\nconst LOG_LEVELS = [\n  { value: 'error', label: 'Error', description: 'Solo errori critici' },\n  { value: 'warn', label: 'Warning', description: 'Errori e avvisi' },\n  { value: 'info', label: 'Info', description: 'Informazioni generali' },\n  { value: 'debug', label: 'Debug', description: 'Informazioni dettagliate per debug' }\n];\n\nconst AdminSettings: React.FC<AdminSettingsProps> = ({ className = '' }) => {\n  const { user, hasPermission } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState('system');\n  const [hasChanges, setHasChanges] = useState(false);\n  \n  // Mock settings state - in a real app, this would come from an API\n  const [settings, setSettings] = useState({\n    system: {\n      siteName: 'Sistema Gestionale',\n      siteDescription: 'Piattaforma di gestione aziendale',\n      adminEmail: 'admin@example.com',\n      timezone: 'Europe/Rome',\n      language: 'it',\n      maintenanceMode: false,\n      debugMode: false,\n      logLevel: 'info',\n      maxFileSize: '10',\n      sessionTimeout: '30'\n    },\n    features: {\n      userRegistration: true,\n      emailVerification: true,\n      twoFactorAuth: false,\n      apiAccess: true,\n      fileUploads: true,\n      notifications: true,\n      analytics: true,\n      backups: true\n    },\n    backup: {\n      enabled: true,\n      frequency: 'daily',\n      retention: '30',\n      location: 'local',\n      compression: true,\n      encryption: true\n    },\n    security: {\n      passwordMinLength: '8',\n      passwordRequireSpecial: true,\n      passwordRequireNumbers: true,\n      passwordRequireUppercase: true,\n      maxLoginAttempts: '5',\n      lockoutDuration: '15',\n      sessionSecurity: true,\n      ipWhitelist: '',\n      corsOrigins: ''\n    }\n  });\n\n  // Check if user has admin permissions\n  if (!hasPermission('system', 'admin')) {\n    return (\n      <Card className={className}>\n        <div className=\"p-6\">\n          <div className=\"flex items-center gap-2 p-4 bg-red-50 border border-red-200 rounded-lg text-red-800\">\n            <Shield className=\"w-4 h-4\" />\n            <span>Non hai i permessi necessari per accedere alle impostazioni amministrative.</span>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  const handleSettingChange = (category: string, key: string, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category as keyof typeof prev],\n        [key]: value\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleSaveSettings = async () => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // In a real app, make API call here\n      // await apiClient.put('/api/admin/settings', settings);\n      \n      setHasChanges(false);\n      toast.success('Impostazioni salvate con successo');\n    } catch (error) {\n      toast.error('Errore nel salvataggio delle impostazioni');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResetSettings = async () => {\n    if (!confirm('Sei sicuro di voler ripristinare tutte le impostazioni ai valori predefiniti?')) {\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      // Reset to default values\n      // In a real app, this would call an API endpoint\n      toast.success('Impostazioni ripristinate ai valori predefiniti');\n      setHasChanges(false);\n    } catch (error) {\n      toast.error('Errore nel ripristino delle impostazioni');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExportSettings = () => {\n    const dataStr = JSON.stringify(settings, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `admin-settings-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    toast.success('Impostazioni esportate con successo');\n  };\n\n  const handleImportSettings = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    \n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const importedSettings = JSON.parse(e.target?.result as string);\n        setSettings(importedSettings);\n        setHasChanges(true);\n        toast.success('Impostazioni importate con successo');\n      } catch (error) {\n        toast.error('Errore nell\\'importazione delle impostazioni');\n      }\n    };\n    reader.readAsText(file);\n    event.target.value = '';\n  };\n\n  const handleMaintenanceToggle = async (enabled: boolean) => {\n    if (enabled) {\n      const confirmed = confirm(\n        'Attivare la modalità manutenzione? Tutti gli utenti (eccetto gli amministratori) non potranno accedere al sistema.'\n      );\n      if (!confirmed) return;\n    }\n    \n    handleSettingChange('system', 'maintenanceMode', enabled);\n    \n    if (enabled) {\n      toast.warning('Modalità manutenzione attivata');\n    } else {\n      toast.success('Modalità manutenzione disattivata');\n    }\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Shield className=\"w-6 h-6\" />\n            Impostazioni Amministrative\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Configura le impostazioni di sistema e le funzionalità avanzate.\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button\n            onClick={handleExportSettings}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center gap-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            Esporta\n          </Button>\n          \n          <div className=\"relative\">\n            <input\n              type=\"file\"\n              accept=\".json\"\n              onChange={handleImportSettings}\n              className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n            />\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex items-center gap-2\"\n            >\n              <Upload className=\"w-4 h-4\" />\n              Importa\n            </Button>\n          </div>\n          \n          <Button\n            onClick={handleResetSettings}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center gap-2 text-red-600 hover:text-red-700\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n            Reset\n          </Button>\n          \n          {hasChanges && (\n            <Button\n              onClick={handleSaveSettings}\n              disabled={loading}\n              className=\"flex items-center gap-2\"\n            >\n              {loading ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\" />\n              ) : (\n                <Save className=\"w-4 h-4\" />\n              )}\n              Salva Modifiche\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Changes Alert */}\n      {hasChanges && (\n        <div className=\"flex items-center gap-2 p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-yellow-800\">\n          <AlertTriangle className=\"w-4 h-4\" />\n          <span>Hai modifiche non salvate. Ricorda di salvare le impostazioni prima di uscire.</span>\n        </div>\n      )}\n\n      {/* Maintenance Mode Alert */}\n      {settings.system.maintenanceMode && (\n        <div className=\"flex items-center gap-2 p-4 bg-red-50 border border-red-200 rounded-lg text-red-800\">\n          <AlertTriangle className=\"w-4 h-4\" />\n          <span><strong>Modalità Manutenzione Attiva:</strong> Il sistema è attualmente in manutenzione. Solo gli amministratori possono accedere.</span>\n        </div>\n      )}\n\n      <div className=\"space-y-6\">\n        <div className=\"flex border-b border-gray-200\">\n          <button\n            onClick={() => setActiveTab('system')}\n            className={`flex items-center gap-2 px-4 py-2 border-b-2 transition-colors ${\n              activeTab === 'system'\n                ? 'border-blue-500 text-blue-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700'\n            }`}\n          >\n            <Server className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Sistema</span>\n          </button>\n          <button\n            onClick={() => setActiveTab('permissions')}\n            className={`flex items-center gap-2 px-4 py-2 border-b-2 transition-colors ${\n              activeTab === 'permissions'\n                ? 'border-blue-500 text-blue-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700'\n            }`}\n          >\n            <Shield className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Permessi</span>\n          </button>\n        </div>\n\n        {/* System Settings */}\n        {activeTab === 'system' && (\n          <Card>\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-semibold flex items-center gap-2 mb-4\">\n                <Server className=\"w-5 h-5\" />\n                Configurazione Sistema\n              </h3>\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"siteName\" className=\"block text-sm font-medium\">Nome Sito</label>\n                    <Input\n                      id=\"siteName\"\n                      value={settings.system.siteName}\n                      onChange={(e) => handleSettingChange('system', 'siteName', e.target.value)}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"adminEmail\" className=\"block text-sm font-medium\">Email Amministratore</label>\n                    <Input\n                      id=\"adminEmail\"\n                      type=\"email\"\n                      value={settings.system.adminEmail}\n                      onChange={(e) => handleSettingChange('system', 'adminEmail', e.target.value)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        )}\n\n        {/* Permissions Management */}\n        {activeTab === 'permissions' && (\n          <PermissionsManagement />\n        )}\n\n      </div>\n    </div>\n  );\n};\n\n// Permissions Management Component\nconst PermissionsManagement: React.FC = () => {\n  const [users, setUsers] = useState([\n    { id: '1', name: 'Admin User', email: 'admin@example.com', role: 'Admin' },\n    { id: '2', name: 'Manager User', email: 'manager@example.com', role: 'Manager' },\n    { id: '3', name: 'Employee User', email: 'employee@example.com', role: 'Employee' }\n  ]);\n  \n  const [permissions] = useState([\n    { resource: 'companies', actions: ['read', 'create', 'update', 'delete'] },\n    { resource: 'employees', actions: ['read', 'create', 'update', 'delete'] },\n    { resource: 'courses', actions: ['read', 'create', 'update', 'delete'] },\n    { resource: 'assessments', actions: ['read', 'create', 'update', 'delete'] },\n    { resource: 'reports', actions: ['read', 'create', 'export'] },\n    { resource: 'settings', actions: ['read', 'update'] }\n  ]);\n  \n  const [userPermissions, setUserPermissions] = useState<Record<string, Record<string, string[]>>>({\n    '1': { // Admin - all permissions\n      companies: ['read', 'create', 'update', 'delete'],\n      employees: ['read', 'create', 'update', 'delete'],\n      courses: ['read', 'create', 'update', 'delete'],\n      assessments: ['read', 'create', 'update', 'delete'],\n      reports: ['read', 'create', 'export'],\n      settings: ['read', 'update']\n    },\n    '2': { // Manager - limited permissions\n      companies: ['read'],\n      employees: ['read', 'create', 'update'],\n      courses: ['read', 'create', 'update'],\n      assessments: ['read', 'create'],\n      reports: ['read', 'export'],\n      settings: ['read']\n    },\n    '3': { // Employee - minimal permissions\n      companies: ['read'],\n      employees: ['read'],\n      courses: ['read'],\n      assessments: ['read'],\n      reports: ['read'],\n      settings: []\n    }\n  });\n  \n  const handlePermissionToggle = async (userId: string, resource: string, action: string) => {\n    const currentPermissions = userPermissions[userId]?.[resource] || [];\n    const hasPermission = currentPermissions.includes(action);\n    \n    let newPermissions;\n    if (hasPermission) {\n      newPermissions = currentPermissions.filter(p => p !== action);\n    } else {\n      newPermissions = [...currentPermissions, action];\n    }\n    \n    setUserPermissions(prev => ({\n      ...prev,\n      [userId]: {\n        ...prev[userId],\n        [resource]: newPermissions\n      }\n    }));\n    \n    // Here you would make an API call to update permissions\n    try {\n      // await apiClient.put(`/api/admin/users/${userId}/permissions`, {\n      //   resource,\n      //   action,\n      //   granted: !hasPermission\n      // });\n      toast.success(`Permesso ${hasPermission ? 'rimosso' : 'assegnato'} con successo`);\n    } catch (error) {\n      toast.error('Errore nell\\'aggiornamento dei permessi');\n      // Revert the change\n      setUserPermissions(prev => ({\n        ...prev,\n        [userId]: {\n          ...prev[userId],\n          [resource]: currentPermissions\n        }\n      }));\n    }\n  };\n  \n  const assignAllCompaniesPermissions = async () => {\n    const adminUser = users.find(u => u.role === 'Admin');\n    if (!adminUser) return;\n    \n    try {\n      // Assign all companies permissions to admin\n      setUserPermissions(prev => ({\n        ...prev,\n        [adminUser.id]: {\n          ...prev[adminUser.id],\n          companies: ['read', 'create', 'update', 'delete']\n        }\n      }));\n      \n      // Here you would make an API call\n      // await apiClient.put(`/api/admin/users/${adminUser.id}/permissions/companies`, {\n      //   actions: ['read', 'create', 'update', 'delete']\n      // });\n      \n      toast.success('Tutti i permessi Companies assegnati all\\'Admin');\n    } catch (error) {\n      toast.error('Errore nell\\'assegnazione dei permessi Companies');\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              Gestione Permessi Granulari\n            </h3>\n            <Button onClick={assignAllCompaniesPermissions} className=\"flex items-center gap-2\">\n              <Shield className=\"w-4 h-4\" />\n              Assegna Permessi Companies ad Admin\n            </Button>\n          </div>\n          \n          <div className=\"space-y-6\">\n            {users.map(user => (\n              <div key={user.id} className=\"border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h4 className=\"font-medium\">{user.name}</h4>\n                    <p className=\"text-sm text-gray-600\">{user.email} - {user.role}</p>\n                  </div>\n                  <span className={`px-2 py-1 rounded text-xs font-medium ${\n                    user.role === 'Admin' ? 'bg-red-100 text-red-800' :\n                    user.role === 'Manager' ? 'bg-blue-100 text-blue-800' :\n                    'bg-gray-100 text-gray-800'\n                  }`}>\n                    {user.role}\n                  </span>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {permissions.map(permission => (\n                    <div key={permission.resource} className=\"border rounded p-3\">\n                      <h5 className=\"font-medium mb-2 capitalize\">{permission.resource}</h5>\n                      <div className=\"space-y-2\">\n                        {permission.actions.map(action => {\n                          const hasPermission = userPermissions[user.id]?.[permission.resource]?.includes(action) || false;\n                          return (\n                            <label key={action} className=\"flex items-center gap-2 cursor-pointer\">\n                              <input\n                                type=\"checkbox\"\n                                checked={hasPermission}\n                                onChange={() => handlePermissionToggle(user.id, permission.resource, action)}\n                                className=\"rounded border-gray-300\"\n                              />\n                              <span className=\"text-sm capitalize\">{action}</span>\n                            </label>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default AdminSettings;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/settings/DashboardCustomization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EyeOff' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":20,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":20,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":20,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":20,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DashboardWidget' is defined but never used.","line":27,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":42}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard Customization Component\n * Week 14 Implementation - Dashboard Layout and Widget Preferences\n */\n\nimport React, { useState } from 'react';\nimport { \n  BarChart3,\n  Calendar,\n  Eye,\n  EyeOff,\n  Grid,\n  GripVertical,\n  Layout,\n  Settings,\n  Users\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Switch } from '../ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { Label } from '../ui/label';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { Separator } from '../ui/separator';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { usePreferences } from '../../context/PreferencesContext';\nimport { DashboardLayout, DashboardWidget } from '../../types/preferences';\n\ninterface DashboardCustomizationProps {\n  className?: string;\n}\n\nconst LAYOUT_OPTIONS: { value: DashboardLayout; label: string; description: string; icon: React.ReactNode }[] = [\n  {\n    value: 'grid',\n    label: 'Griglia',\n    description: 'Layout a griglia con widget di dimensioni uniformi',\n    icon: <Grid className=\"w-4 h-4\" />\n  },\n  {\n    value: 'masonry',\n    label: 'Masonry',\n    description: 'Layout dinamico con widget di altezze variabili',\n    icon: <Layout className=\"w-4 h-4\" />\n  },\n  {\n    value: 'sidebar',\n    label: 'Sidebar',\n    description: 'Layout con sidebar laterale e contenuto principale',\n    icon: <BarChart3 className=\"w-4 h-4\" />\n  }\n];\n\nconst AVAILABLE_WIDGETS: { id: string; name: string; description: string; icon: React.ReactNode; category: string }[] = [\n  {\n    id: 'overview',\n    name: 'Panoramica',\n    description: 'Statistiche generali e metriche principali',\n    icon: <BarChart3 className=\"w-4 h-4\" />,\n    category: 'Analytics'\n  },\n  {\n    id: 'recent-activity',\n    name: 'Attività Recenti',\n    description: 'Ultime azioni e modifiche nel sistema',\n    icon: <Calendar className=\"w-4 h-4\" />,\n    category: 'Activity'\n  },\n  {\n    id: 'user-stats',\n    name: 'Statistiche Utenti',\n    description: 'Dati e metriche sugli utenti attivi',\n    icon: <Users className=\"w-4 h-4\" />,\n    category: 'Analytics'\n  },\n  {\n    id: 'quick-actions',\n    name: 'Azioni Rapide',\n    description: 'Scorciatoie per le operazioni più comuni',\n    icon: <Settings className=\"w-4 h-4\" />,\n    category: 'Tools'\n  },\n  {\n    id: 'notifications',\n    name: 'Notifiche',\n    description: 'Centro notifiche e messaggi importanti',\n    icon: <Calendar className=\"w-4 h-4\" />,\n    category: 'Communication'\n  },\n  {\n    id: 'calendar',\n    name: 'Calendario',\n    description: 'Eventi e appuntamenti programmati',\n    icon: <Calendar className=\"w-4 h-4\" />,\n    category: 'Planning'\n  }\n];\n\nconst WIDGET_CATEGORIES = [\n  { id: 'all', name: 'Tutti' },\n  { id: 'Analytics', name: 'Analytics' },\n  { id: 'Activity', name: 'Attività' },\n  { id: 'Tools', name: 'Strumenti' },\n  { id: 'Communication', name: 'Comunicazione' },\n  { id: 'Planning', name: 'Pianificazione' }\n];\n\nconst DashboardCustomization: React.FC<DashboardCustomizationProps> = ({ className = '' }) => {\n  const { preferences, updatePreferences, loading } = usePreferences();\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [draggedWidget, setDraggedWidget] = useState<string | null>(null);\n\n  const handleLayoutChange = async (layout: DashboardLayout) => {\n    if (!preferences) return;\n    \n    const updatedDashboard = {\n      ...preferences.dashboard,\n      layout\n    };\n    \n    await updatePreferences({ dashboard: updatedDashboard });\n  };\n\n  const handleWidgetToggle = async (widgetId: string, enabled: boolean) => {\n    if (!preferences) return;\n    \n    const updatedWidgets = preferences.dashboard.widgets.map(widget =>\n      widget.id === widgetId ? { ...widget, enabled } : widget\n    );\n    \n    const updatedDashboard = {\n      ...preferences.dashboard,\n      widgets: updatedWidgets\n    };\n    \n    await updatePreferences({ dashboard: updatedDashboard });\n  };\n\n  const handleWidgetReorder = async (fromIndex: number, toIndex: number) => {\n    if (!preferences) return;\n    \n    const updatedWidgets = [...preferences.dashboard.widgets];\n    const [movedWidget] = updatedWidgets.splice(fromIndex, 1);\n    updatedWidgets.splice(toIndex, 0, movedWidget);\n    \n    // Update order values\n    const reorderedWidgets = updatedWidgets.map((widget, index) => ({\n      ...widget,\n      order: index\n    }));\n    \n    const updatedDashboard = {\n      ...preferences.dashboard,\n      widgets: reorderedWidgets\n    };\n    \n    await updatePreferences({ dashboard: updatedDashboard });\n  };\n\n  const handleCompactModeToggle = async (compact: boolean) => {\n    if (!preferences) return;\n    \n    const updatedDashboard = {\n      ...preferences.dashboard,\n      compact\n    };\n    \n    await updatePreferences({ dashboard: updatedDashboard });\n  };\n\n  const resetToDefault = async () => {\n    if (!preferences) return;\n    \n    const defaultDashboard = {\n      layout: 'grid' as DashboardLayout,\n      widgets: AVAILABLE_WIDGETS.map((widget, index) => ({\n        id: widget.id,\n        enabled: index < 4, // Enable first 4 widgets by default\n        order: index,\n        size: 'medium' as const\n      })),\n      compact: false\n    };\n    \n    await updatePreferences({ dashboard: defaultDashboard });\n  };\n\n  const filteredWidgets = selectedCategory === 'all' \n    ? AVAILABLE_WIDGETS \n    : AVAILABLE_WIDGETS.filter(widget => widget.category === selectedCategory);\n\n  if (!preferences) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500 mx-auto mb-2\"></div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Caricamento impostazioni...</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Layout Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Layout className=\"w-5 h-5\" />\n            Layout Dashboard\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {LAYOUT_OPTIONS.map((option) => (\n              <div\n                key={option.value}\n                className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                  preferences.dashboard.layout === option.value\n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                }`}\n                onClick={() => handleLayoutChange(option.value)}\n              >\n                <div className=\"flex items-center gap-2 mb-2\">\n                  {option.icon}\n                  <span className=\"font-medium\">{option.label}</span>\n                  {preferences.dashboard.layout === option.value && (\n                    <Badge variant=\"default\" className=\"ml-auto\">Attivo</Badge>\n                  )}\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {option.description}\n                </p>\n              </div>\n            ))}\n          </div>\n          \n          <Separator />\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base font-medium\">Modalità compatta</Label>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Riduce la spaziatura tra i widget per mostrare più contenuto\n              </p>\n            </div>\n            <Switch\n              checked={preferences.dashboard.compact}\n              onCheckedChange={handleCompactModeToggle}\n              disabled={loading}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Widget Management */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Grid className=\"w-5 h-5\" />\n              Widget Dashboard\n            </CardTitle>\n            <Button\n              onClick={resetToDefault}\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={loading}\n            >\n              Ripristina Default\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Category Filter */}\n          <div className=\"flex flex-wrap gap-2\">\n            {WIDGET_CATEGORIES.map((category) => (\n              <Button\n                key={category.id}\n                variant={selectedCategory === category.id ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(category.id)}\n              >\n                {category.name}\n              </Button>\n            ))}\n          </div>\n          \n          <Separator />\n          \n          {/* Widget List */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-base font-medium\">Widget Disponibili</Label>\n            <div className=\"space-y-2\">\n              {filteredWidgets.map((widget) => {\n                const userWidget = preferences.dashboard.widgets.find(w => w.id === widget.id);\n                const isEnabled = userWidget?.enabled || false;\n                \n                return (\n                  <div\n                    key={widget.id}\n                    className={`flex items-center justify-between p-3 border rounded-lg ${\n                      isEnabled \n                        ? 'border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20'\n                        : 'border-gray-200 dark:border-gray-700'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-2\">\n                        {widget.icon}\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium\">{widget.name}</span>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {widget.category}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {widget.description}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      {isEnabled && (\n                        <div className=\"flex items-center gap-1 text-sm text-gray-500\">\n                          <GripVertical className=\"w-3 h-3\" />\n                          <span>#{userWidget?.order || 0}</span>\n                        </div>\n                      )}\n                      <Switch\n                        checked={isEnabled}\n                        onCheckedChange={(checked) => handleWidgetToggle(widget.id, checked)}\n                        disabled={loading}\n                      />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Active Widgets Order */}\n      {preferences.dashboard.widgets.some(w => w.enabled) && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <GripVertical className=\"w-5 h-5\" />\n              Ordine Widget Attivi\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                Trascina i widget per riordinarli nella dashboard\n              </p>\n              \n              {preferences.dashboard.widgets\n                .filter(w => w.enabled)\n                .sort((a, b) => a.order - b.order)\n                .map((widget, index) => {\n                  const widgetInfo = AVAILABLE_WIDGETS.find(w => w.id === widget.id);\n                  if (!widgetInfo) return null;\n                  \n                  return (\n                    <div\n                      key={widget.id}\n                      className=\"flex items-center gap-3 p-3 border rounded-lg bg-gray-50 dark:bg-gray-800/50\"\n                      draggable\n                      onDragStart={() => setDraggedWidget(widget.id)}\n                      onDragOver={(e) => e.preventDefault()}\n                      onDrop={() => {\n                        if (draggedWidget && draggedWidget !== widget.id) {\n                          const fromIndex = preferences.dashboard.widgets.findIndex(w => w.id === draggedWidget);\n                          const toIndex = preferences.dashboard.widgets.findIndex(w => w.id === widget.id);\n                          handleWidgetReorder(fromIndex, toIndex);\n                        }\n                        setDraggedWidget(null);\n                      }}\n                    >\n                      <GripVertical className=\"w-4 h-4 text-gray-400 cursor-grab\" />\n                      <div className=\"flex items-center gap-2\">\n                        {widgetInfo.icon}\n                        <span className=\"font-medium\">{widgetInfo.name}</span>\n                      </div>\n                      <Badge variant=\"outline\" className=\"ml-auto\">\n                        Posizione {index + 1}\n                      </Badge>\n                    </div>\n                  );\n                })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Dashboard Preview */}\n      <Alert>\n        <Eye className=\"w-4 h-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">Anteprima Configurazione</p>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">Layout:</span> {LAYOUT_OPTIONS.find(l => l.value === preferences.dashboard.layout)?.label}\n              </div>\n              <div>\n                <span className=\"font-medium\">Widget attivi:</span> {preferences.dashboard.widgets.filter(w => w.enabled).length}\n              </div>\n              <div>\n                <span className=\"font-medium\">Modalità:</span> {preferences.dashboard.compact ? 'Compatta' : 'Standard'}\n              </div>\n              <div>\n                <span className=\"font-medium\">Ultimo aggiornamento:</span> {new Date().toLocaleTimeString('it-IT')}\n              </div>\n            </div>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};\n\nexport default DashboardCustomization;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/settings/LanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/settings/NotificationSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2406,2409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2406,2409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2632,2635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2632,2635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Notification Settings Component\n * Week 14 Implementation - Notification Preferences\n */\n\nimport React, { useState } from 'react';\nimport { \n  Bell,\n  Clock,\n  Mail,\n  Settings,\n  Smartphone,\n  Volume2,\n  VolumeX\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Switch } from '../ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { Label } from '../ui/label';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { Separator } from '../ui/separator';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { usePreferences } from '../../context/PreferencesContext';\nimport { NotificationFrequency } from '../../types/preferences';\n\ninterface NotificationSettingsProps {\n  className?: string;\n}\n\nconst FREQUENCY_OPTIONS: { value: NotificationFrequency; label: string; description: string }[] = [\n  {\n    value: 'immediate',\n    label: 'Immediata',\n    description: 'Ricevi notifiche non appena si verificano gli eventi'\n  },\n  {\n    value: 'daily',\n    label: 'Giornaliera',\n    description: 'Ricevi un riepilogo giornaliero delle notifiche'\n  },\n  {\n    value: 'weekly',\n    label: 'Settimanale',\n    description: 'Ricevi un riepilogo settimanale delle notifiche'\n  },\n  {\n    value: 'never',\n    label: 'Mai',\n    description: 'Non ricevere notifiche di questo tipo'\n  }\n];\n\nconst NOTIFICATION_TYPES = {\n  system: {\n    label: 'Sistema',\n    description: 'Notifiche di sistema, errori e manutenzione',\n    icon: Bell\n  },\n  security: {\n    label: 'Sicurezza',\n    description: 'Accessi, modifiche password e attività sospette',\n    icon: Bell\n  },\n  updates: {\n    label: 'Aggiornamenti',\n    description: 'Nuove funzionalità e aggiornamenti dell\\'applicazione',\n    icon: Bell\n  },\n  marketing: {\n    label: 'Marketing',\n    description: 'Promozioni, newsletter e comunicazioni commerciali',\n    icon: Mail\n  },\n  reminders: {\n    label: 'Promemoria',\n    description: 'Scadenze, appuntamenti e attività programmate',\n    icon: Clock\n  }\n};\n\nconst NotificationSettings: React.FC<NotificationSettingsProps> = ({ className = '' }) => {\n  const { preferences, updatePreferences, loading } = usePreferences();\n  const [testingNotification, setTestingNotification] = useState(false);\n\n  const handleNotificationChange = async (path: string, value: any) => {\n    if (!preferences) return;\n    \n    const pathParts = path.split('.');\n    const updatedNotifications = { ...preferences.notifications };\n    \n    // Navigate to the nested property and update it\n    let current: any = updatedNotifications;\n    for (let i = 0; i < pathParts.length - 1; i++) {\n      current = current[pathParts[i]];\n    }\n    current[pathParts[pathParts.length - 1]] = value;\n    \n    await updatePreferences({ notifications: updatedNotifications });\n  };\n\n  const testNotification = async () => {\n    setTestingNotification(true);\n    \n    try {\n      // Test browser notification\n      if ('Notification' in window) {\n        if (Notification.permission === 'granted') {\n          new Notification('Test Notifica', {\n            body: 'Questa è una notifica di test per verificare le tue impostazioni.',\n            icon: '/favicon.ico'\n          });\n        } else if (Notification.permission !== 'denied') {\n          const permission = await Notification.requestPermission();\n          if (permission === 'granted') {\n            new Notification('Test Notifica', {\n              body: 'Questa è una notifica di test per verificare le tue impostazioni.',\n              icon: '/favicon.ico'\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Errore nel test della notifica:', error);\n    } finally {\n      setTimeout(() => setTestingNotification(false), 2000);\n    }\n  };\n\n  if (!preferences) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500 mx-auto mb-2\"></div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Caricamento impostazioni...</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Email Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Mail className=\"w-5 h-5\" />\n            Notifiche Email\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base font-medium\">Abilita notifiche email</Label>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Ricevi notifiche importanti via email\n              </p>\n            </div>\n            <Switch\n              checked={preferences.notifications.email.enabled}\n              onCheckedChange={(checked) => handleNotificationChange('email.enabled', checked)}\n              disabled={loading}\n            />\n          </div>\n          \n          {preferences.notifications.email.enabled && (\n            <div className=\"space-y-4 pl-4 border-l-2 border-blue-200 dark:border-blue-800\">\n              <div className=\"space-y-2\">\n                <Label>Frequenza notifiche</Label>\n                <Select\n                  value={preferences.notifications.email.frequency}\n                  onValueChange={(value: NotificationFrequency) => \n                    handleNotificationChange('email.frequency', value)\n                  }\n                  disabled={loading}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {FREQUENCY_OPTIONS.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        <div className=\"flex flex-col\">\n                          <span>{option.label}</span>\n                          <span className=\"text-xs text-gray-500\">{option.description}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-3\">\n                <Label>Tipi di notifica email</Label>\n                {Object.entries(preferences.notifications.email.types).map(([key, value]) => {\n                  const typeInfo = NOTIFICATION_TYPES[key as keyof typeof NOTIFICATION_TYPES];\n                  const Icon = typeInfo.icon;\n                  \n                  return (\n                    <div key={key} className=\"flex items-start justify-between py-2\">\n                      <div className=\"flex items-start gap-3\">\n                        <Icon className=\"w-4 h-4 mt-1 text-gray-500\" />\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium\">{typeInfo.label}</Label>\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                            {typeInfo.description}\n                          </p>\n                        </div>\n                      </div>\n                      <Switch\n                        checked={value}\n                        onCheckedChange={(checked) => \n                          handleNotificationChange(`email.types.${key}`, checked)\n                        }\n                        disabled={loading}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Push Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Smartphone className=\"w-5 h-5\" />\n            Notifiche Push\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base font-medium\">Abilita notifiche push</Label>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Ricevi notifiche push sul browser e dispositivi\n              </p>\n            </div>\n            <Switch\n              checked={preferences.notifications.push.enabled}\n              onCheckedChange={(checked) => handleNotificationChange('push.enabled', checked)}\n              disabled={loading}\n            />\n          </div>\n          \n          {preferences.notifications.push.enabled && (\n            <div className=\"space-y-4 pl-4 border-l-2 border-green-200 dark:border-green-800\">\n              <div className=\"space-y-3\">\n                <Label>Tipi di notifica push</Label>\n                {Object.entries(preferences.notifications.push.types).map(([key, value]) => {\n                  const typeInfo = NOTIFICATION_TYPES[key as keyof typeof NOTIFICATION_TYPES];\n                  const Icon = typeInfo.icon;\n                  \n                  return (\n                    <div key={key} className=\"flex items-start justify-between py-2\">\n                      <div className=\"flex items-start gap-3\">\n                        <Icon className=\"w-4 h-4 mt-1 text-gray-500\" />\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium\">{typeInfo.label}</Label>\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                            {typeInfo.description}\n                          </p>\n                        </div>\n                      </div>\n                      <Switch\n                        checked={value}\n                        onCheckedChange={(checked) => \n                          handleNotificationChange(`push.types.${key}`, checked)\n                        }\n                        disabled={loading}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex items-center gap-2\">\n                <Button\n                  onClick={testNotification}\n                  disabled={testingNotification}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                >\n                  {testingNotification ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-current\" />\n                      <span>Invio...</span>\n                    </>\n                  ) : (\n                    <>\n                      <Bell className=\"w-3 h-3\" />\n                      <span>Testa Notifica</span>\n                    </>\n                  )}\n                </Button>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Richiede permessi browser\n                </Badge>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* In-App Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"w-5 h-5\" />\n            Notifiche In-App\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base font-medium\">Abilita notifiche in-app</Label>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Mostra notifiche all'interno dell'applicazione\n              </p>\n            </div>\n            <Switch\n              checked={preferences.notifications.inApp.enabled}\n              onCheckedChange={(checked) => handleNotificationChange('inApp.enabled', checked)}\n              disabled={loading}\n            />\n          </div>\n          \n          {preferences.notifications.inApp.enabled && (\n            <div className=\"space-y-4 pl-4 border-l-2 border-purple-200 dark:border-purple-800\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label className=\"text-sm font-medium\">Suoni notifiche</Label>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Riproduci suoni per le notifiche in-app\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences.notifications.inApp.sound}\n                  onCheckedChange={(checked) => handleNotificationChange('inApp.sound', checked)}\n                  disabled={loading}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label className=\"text-sm font-medium\">Posizione notifiche</Label>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Dove mostrare le notifiche nell'interfaccia\n                  </p>\n                </div>\n                <Select\n                  value={preferences.notifications.inApp.position}\n                  onValueChange={(value) => handleNotificationChange('inApp.position', value)}\n                  disabled={loading}\n                >\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"top-right\">Alto Destra</SelectItem>\n                    <SelectItem value=\"top-left\">Alto Sinistra</SelectItem>\n                    <SelectItem value=\"bottom-right\">Basso Destra</SelectItem>\n                    <SelectItem value=\"bottom-left\">Basso Sinistra</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Notification Summary */}\n      <Alert>\n        <Bell className=\"w-4 h-4\" />\n        <AlertDescription>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">Riepilogo Impostazioni</p>\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                {preferences.notifications.email.enabled ? (\n                  <Volume2 className=\"w-3 h-3 text-green-500\" />\n                ) : (\n                  <VolumeX className=\"w-3 h-3 text-gray-400\" />\n                )}\n                <span>Email: {preferences.notifications.email.enabled ? 'Attive' : 'Disattive'}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {preferences.notifications.push.enabled ? (\n                  <Volume2 className=\"w-3 h-3 text-green-500\" />\n                ) : (\n                  <VolumeX className=\"w-3 h-3 text-gray-400\" />\n                )}\n                <span>Push: {preferences.notifications.push.enabled ? 'Attive' : 'Disattive'}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {preferences.notifications.inApp.enabled ? (\n                  <Volume2 className=\"w-3 h-3 text-green-500\" />\n                ) : (\n                  <VolumeX className=\"w-3 h-3 text-gray-400\" />\n                )}\n                <span>In-App: {preferences.notifications.inApp.enabled ? 'Attive' : 'Disattive'}</span>\n              </div>\n            </div>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};\n\nexport default NotificationSettings;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/settings/ThemeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/CSVFormatError.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'File' is defined but never used.","line":2,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { AlertCircle, HelpCircle, File, UploadCloud, Download } from 'lucide-react';\nimport { sanitizeErrorMessage } from '../../utils/errorUtils';\n\ninterface CSVFormatErrorProps {\n  message: string;\n  expectedHeaders?: string[];\n  foundHeaders?: string[];\n  onClose?: () => void;\n  className?: string;\n}\n\n/**\n * Componente per visualizzare errori di formato CSV in modo chiaro con suggerimenti\n */\nconst CSVFormatError: React.FC<CSVFormatErrorProps> = ({\n  message,\n  expectedHeaders = [],\n  foundHeaders = [],\n  onClose,\n  className = ''\n}) => {\n  return (\n    <div className={`bg-red-50 border-l-4 border-red-500 p-4 rounded-md ${className}`}>\n      <div className=\"flex items-start\">\n        <div className=\"flex-shrink-0\">\n          <AlertCircle className=\"h-5 w-5 text-red-500\" />\n        </div>\n        <div className=\"ml-3 flex-1\">\n          <h3 className=\"text-sm font-medium text-red-800\">Errore nel formato CSV</h3>\n          <div className=\"mt-2 text-sm text-red-700\">\n            <p>{sanitizeErrorMessage(message, 'Errore nel formato del file CSV')}</p>\n            \n            {(expectedHeaders.length > 0 || foundHeaders.length > 0) && (\n              <div className=\"mt-3 border-t border-red-200 pt-3\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {expectedHeaders.length > 0 && (\n                    <div>\n                      <h4 className=\"text-xs font-semibold uppercase tracking-wide text-red-800\">\n                        Intestazioni attese\n                      </h4>\n                      <ul className=\"mt-1 list-disc list-inside text-xs\">\n                        {expectedHeaders.map((header, index) => (\n                          <li key={index}>{header}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                  \n                  {foundHeaders.length > 0 && (\n                    <div>\n                      <h4 className=\"text-xs font-semibold uppercase tracking-wide text-red-800\">\n                        Intestazioni trovate\n                      </h4>\n                      <ul className=\"mt-1 list-disc list-inside text-xs\">\n                        {foundHeaders.map((header, index) => (\n                          <li key={index}>{header}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            \n            <div className=\"mt-3 bg-red-100 p-3 rounded-md\">\n              <h4 className=\"text-xs font-semibold uppercase tracking-wide text-red-800 flex items-center\">\n                <HelpCircle className=\"h-3 w-3 mr-1\" />\n                Suggerimenti\n              </h4>\n              <ul className=\"mt-1 list-disc list-inside text-xs space-y-1\">\n                <li>Verifica che il file sia in formato CSV valido</li>\n                <li>Assicurati che il separatore sia il punto e virgola (;)</li>\n                <li>Controlla che le intestazioni delle colonne siano corrette</li>\n                <li>Assicurati che non ci siano caratteri speciali non supportati</li>\n                <li>Verifica che il file non sia danneggiato</li>\n              </ul>\n              \n              <div className=\"mt-3 flex flex-col space-y-2\">\n                <div className=\"flex items-center text-xs text-red-800\">\n                  <Download className=\"h-3 w-3 mr-1\" />\n                  <span>Scarica un template CSV corretto dalla pagina principale</span>\n                </div>\n                \n                <div className=\"flex items-center text-xs text-red-800\">\n                  <UploadCloud className=\"h-3 w-3 mr-1\" />\n                  <button \n                    onClick={onClose}\n                    className=\"font-medium underline hover:text-red-900\"\n                  >\n                    Carica un nuovo file\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {onClose && (\n          <button\n            type=\"button\"\n            className=\"ml-auto flex-shrink-0 text-red-500 hover:text-red-700\"\n            onClick={onClose}\n            aria-label=\"Chiudi\"\n          >\n            <span className=\"sr-only\">Chiudi</span>\n            <svg className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CSVFormatError;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/DiffHighlighter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[73,76],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[73,76],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[90,93],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[90,93],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1498,1501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1498,1501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1515,1518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1515,1518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2923,2926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2923,2926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2940,2943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2940,2943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4348,4351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4348,4351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4365,4368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4365,4368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5773,5776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5773,5776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5790,5793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5790,5793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface DiffHighlighterProps {\n  newValue: any;\n  oldValue: any;\n  showBoth?: boolean;\n}\n\n/**\n * Componente che evidenzia le differenze tra due valori\n * mostrando il valore nuovo evidenziato se diverso dal valore esistente\n */\nconst DiffHighlighter: React.FC<DiffHighlighterProps> = ({\n  newValue,\n  oldValue,\n  showBoth = false\n}) => {\n  // Se i valori sono identici o non ci sono differenze, mostra solo il valore nuovo\n  if (newValue === oldValue || \n      (newValue === undefined && oldValue === undefined) || \n      (newValue === null && oldValue === null) ||\n      (newValue === '' && oldValue === '')) {\n    return <span>{newValue !== undefined && newValue !== null ? String(newValue) : ''}</span>;\n  }\n\n  // Normalizza i valori per il confronto\n  const normalizedNewValue = newValue !== undefined && newValue !== null ? String(newValue) : '';\n  const normalizedOldValue = oldValue !== undefined && oldValue !== null ? String(oldValue) : '';\n\n  // Se ci sono differenze, evidenzia il valore nuovo\n  return (\n    <div className=\"flex flex-col\">\n      <span className=\"bg-yellow-100 text-yellow-800 px-1 rounded\">\n        {normalizedNewValue}\n      </span>\n      {showBoth && oldValue !== undefined && oldValue !== null && oldValue !== '' && (\n        <span className=\"text-xs text-gray-500 mt-1\">\n          Attuale: {normalizedOldValue}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default DiffHighlighter; \n\ninterface DiffHighlighterProps {\n  newValue: any;\n  oldValue: any;\n  showBoth?: boolean;\n}\n\n/**\n * Componente che evidenzia le differenze tra due valori\n * mostrando il valore nuovo evidenziato se diverso dal valore esistente\n */\nconst DiffHighlighter: React.FC<DiffHighlighterProps> = ({\n  newValue,\n  oldValue,\n  showBoth = false\n}) => {\n  // Se i valori sono identici o non ci sono differenze, mostra solo il valore nuovo\n  if (newValue === oldValue || \n      (newValue === undefined && oldValue === undefined) || \n      (newValue === null && oldValue === null) ||\n      (newValue === '' && oldValue === '')) {\n    return <span>{newValue !== undefined && newValue !== null ? String(newValue) : ''}</span>;\n  }\n\n  // Normalizza i valori per il confronto\n  const normalizedNewValue = newValue !== undefined && newValue !== null ? String(newValue) : '';\n  const normalizedOldValue = oldValue !== undefined && oldValue !== null ? String(oldValue) : '';\n\n  // Se ci sono differenze, evidenzia il valore nuovo\n  return (\n    <div className=\"flex flex-col\">\n      <span className=\"bg-yellow-100 text-yellow-800 px-1 rounded\">\n        {normalizedNewValue}\n      </span>\n      {showBoth && oldValue !== undefined && oldValue !== null && oldValue !== '' && (\n        <span className=\"text-xs text-gray-500 mt-1\">\n          Attuale: {normalizedOldValue}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default DiffHighlighter; \n\ninterface DiffHighlighterProps {\n  newValue: any;\n  oldValue: any;\n  showBoth?: boolean;\n}\n\n/**\n * Componente che evidenzia le differenze tra due valori\n * mostrando il valore nuovo evidenziato se diverso dal valore esistente\n */\nconst DiffHighlighter: React.FC<DiffHighlighterProps> = ({\n  newValue,\n  oldValue,\n  showBoth = false\n}) => {\n  // Se i valori sono identici o non ci sono differenze, mostra solo il valore nuovo\n  if (newValue === oldValue || \n      (newValue === undefined && oldValue === undefined) || \n      (newValue === null && oldValue === null) ||\n      (newValue === '' && oldValue === '')) {\n    return <span>{newValue !== undefined && newValue !== null ? String(newValue) : ''}</span>;\n  }\n\n  // Normalizza i valori per il confronto\n  const normalizedNewValue = newValue !== undefined && newValue !== null ? String(newValue) : '';\n  const normalizedOldValue = oldValue !== undefined && oldValue !== null ? String(oldValue) : '';\n\n  // Se ci sono differenze, evidenzia il valore nuovo\n  return (\n    <div className=\"flex flex-col\">\n      <span className=\"bg-yellow-100 text-yellow-800 px-1 rounded\">\n        {normalizedNewValue}\n      </span>\n      {showBoth && oldValue !== undefined && oldValue !== null && oldValue !== '' && (\n        <span className=\"text-xs text-gray-500 mt-1\">\n          Attuale: {normalizedOldValue}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default DiffHighlighter; \n\ninterface DiffHighlighterProps {\n  newValue: any;\n  oldValue: any;\n  showBoth?: boolean;\n}\n\n/**\n * Componente che evidenzia le differenze tra due valori\n * mostrando il valore nuovo evidenziato se diverso dal valore esistente\n */\nconst DiffHighlighter: React.FC<DiffHighlighterProps> = ({\n  newValue,\n  oldValue,\n  showBoth = false\n}) => {\n  // Se i valori sono identici o non ci sono differenze, mostra solo il valore nuovo\n  if (newValue === oldValue || \n      (newValue === undefined && oldValue === undefined) || \n      (newValue === null && oldValue === null) ||\n      (newValue === '' && oldValue === '')) {\n    return <span>{newValue !== undefined && newValue !== null ? String(newValue) : ''}</span>;\n  }\n\n  // Normalizza i valori per il confronto\n  const normalizedNewValue = newValue !== undefined && newValue !== null ? String(newValue) : '';\n  const normalizedOldValue = oldValue !== undefined && oldValue !== null ? String(oldValue) : '';\n\n  // Se ci sono differenze, evidenzia il valore nuovo\n  return (\n    <div className=\"flex flex-col\">\n      <span className=\"bg-yellow-100 text-yellow-800 px-1 rounded\">\n        {normalizedNewValue}\n      </span>\n      {showBoth && oldValue !== undefined && oldValue !== null && oldValue !== '' && (\n        <span className=\"text-xs text-gray-500 mt-1\">\n          Attuale: {normalizedOldValue}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default DiffHighlighter; \n\ninterface DiffHighlighterProps {\n  newValue: any;\n  oldValue: any;\n  showBoth?: boolean;\n}\n\n/**\n * Componente che evidenzia le differenze tra due valori\n * mostrando il valore nuovo evidenziato se diverso dal valore esistente\n */\nconst DiffHighlighter: React.FC<DiffHighlighterProps> = ({\n  newValue,\n  oldValue,\n  showBoth = false\n}) => {\n  // Se i valori sono identici o non ci sono differenze, mostra solo il valore nuovo\n  if (newValue === oldValue || \n      (newValue === undefined && oldValue === undefined) || \n      (newValue === null && oldValue === null) ||\n      (newValue === '' && oldValue === '')) {\n    return <span>{newValue !== undefined && newValue !== null ? String(newValue) : ''}</span>;\n  }\n\n  // Normalizza i valori per il confronto\n  const normalizedNewValue = newValue !== undefined && newValue !== null ? String(newValue) : '';\n  const normalizedOldValue = oldValue !== undefined && oldValue !== null ? String(oldValue) : '';\n\n  // Se ci sono differenze, evidenzia il valore nuovo\n  return (\n    <div className=\"flex flex-col\">\n      <span className=\"bg-yellow-100 text-yellow-800 px-1 rounded\">\n        {normalizedNewValue}\n      </span>\n      {showBoth && oldValue !== undefined && oldValue !== null && oldValue !== '' && (\n        <span className=\"text-xs text-gray-500 mt-1\">\n          Attuale: {normalizedOldValue}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default DiffHighlighter; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/EntityProfileHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/GenericImport.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2208,2211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2208,2211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2339,2342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2339,2342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2783,2786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2783,2786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3162,3165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3162,3165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":86,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":86,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":121,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":124,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3439,3442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3439,3442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3973,3976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3973,3976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4379,4382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4379,4382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4827,4830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4827,4830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6728,6731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6728,6731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7709,7712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7709,7712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7762,7765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7762,7765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isConflictError' is assigned a value but never used.","line":219,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8579,8582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8579,8582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":224,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":224,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":237,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":237,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9283,9286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9283,9286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10160,10163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10160,10163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10223,10226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10223,10226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10264,10267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10264,10267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'header' is assigned a value but never used.","line":269,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":269,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":288,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10801,10804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10801,10804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'requiredFields' is assigned a value but never used.","line":306,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":306,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":314,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11675,11678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11675,11678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'importing' is assigned a value but never used.","line":317,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":318,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":318,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rowErrors' is assigned a value but never used.","line":319,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":319,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setRowErrors' is assigned a value but never used.","line":319,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":319,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validationErrors' is assigned a value but never used.","line":320,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":320,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setValidationErrors' is assigned a value but never used.","line":320,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":320,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":411,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15558,15561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15558,15561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":449,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":449,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16927,16930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16927,16930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleToggleOverwrite' is assigned a value but never used.","line":530,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":530,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":558,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20747,20750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20747,20750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":584,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":584,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21699,21702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21699,21702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":598,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":598,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22198,22201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22198,22201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":599,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":599,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22238,22241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22238,22241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":600,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":600,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22279,22282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22279,22282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":602,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":602,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22376,22379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22376,22379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":609,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":609,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22686,22689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22686,22689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":669,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":669,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":685,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":685,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26454,26457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26454,26457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":696,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":696,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26847,26850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26847,26850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":41,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport ImportModal from './modals/ImportModal';\nimport { ImportPreviewColumn } from './ImportPreviewTable';\nimport { Upload } from 'lucide-react';\nimport { useToast } from '../../hooks/useToast';\n\nexport interface GenericImportProps<T> {\n  /** Tipo di entità da importare (es. \"dipendenti\", \"aziende\") */\n  entityType: string;\n  /** Campo univoco per identificare un'entità esistente */\n  uniqueField: keyof T | string;\n  /** Funzione di callback per l'importazione */\n  onImport: (data: T[], overwriteIds?: string[], selectedRowIndices?: Set<number>) => Promise<void>;\n  /** Funzione di callback per la chiusura */\n  onClose: () => void;\n  /** Array di entità esistenti */\n  existingEntities?: T[];\n  /** Mappatura dei campi CSV ai campi dell'entità */\n  csvHeaderMap?: Record<string, string>;\n  /** Ordine personalizzato delle colonne (array di chiavi dal csvHeaderMap) */\n  columnOrder?: string[];\n  /** Titolo del componente */\n  title?: string;\n  /** Sottotitolo del componente */\n  subtitle?: string;\n  /** Funzione di validazione personalizzata */\n  customValidation?: (entity: T, index?: number) => string[];\n  /** Campi obbligatori */\n  requiredFields?: string[];\n  /** Delimitatore CSV */\n  csvDelimiter?: string;\n  /** Dati di debug per la validazione */\n  validationDebug?: {[key: string]: {matched: boolean, alternatives: string[]}};\n  /** Funzione personalizzata per processare il file CSV */\n  customProcessFile?: (file: File) => Promise<T[]>;\n  /** Componente React da mostrare come pannello di avviso personalizzato */\n  customWarningPanel?: React.ReactNode;\n  /** Funzione chiamata quando cambiano le righe selezionate */\n  onSelectedRowsChange?: (selectedIds: string[]) => void;\n  /** Lista delle aziende disponibili per il menu a pillola */\n  availableCompanies?: Array<{id: string, name: string}>;\n  /** Funzione per gestire il cambio di azienda per le righe selezionate */\n  onCompanyChange?: (selectedIds: string[], companyId: string) => void;\n  /** Dati iniziali per la preview */\n  initialPreviewData?: T[];\n  /** Conflitti rilevati per riga */\n  conflicts?: { [rowIdx: number]: any };\n  /** Callback per aggiornare la risoluzione di un conflitto */\n  onConflictResolutionChange?: (rowIdx: number, resolution: any) => void;\n}\n\n/**\n * Normalizza una stringa rimuovendo spazi e convertendo in maiuscolo\n */\nconst normalizeString = (str: string | null | undefined): string => {\n  if (str === null || str === undefined) return '';\n  return String(str).replace(/\\s/g, '').toUpperCase();\n};\n\n/**\n * Processa un file CSV con le opzioni predefinite\n */\n// Funzione di parsing manuale come fallback\nconst manualCsvParse = (text: string, delimiter: string = ';'): any[] => {\n  const lines = text.split('\\n').filter(line => line.trim());\n  if (lines.length < 2) return [];\n  \n  const headers = lines[0].split(delimiter).map(h => h.trim().replace(/^\"|\"$/g, ''));\n  const data = [];\n  \n  for (let i = 1; i < lines.length; i++) {\n    const values = lines[i].split(delimiter).map(v => v.trim().replace(/^\"|\"$/g, ''));\n    const row: Record<string, any> = {};\n    \n    headers.forEach((header, index) => {\n      row[header] = values[index] || '';\n    });\n    \n    data.push(row);\n  }\n  \n  return data;\n};\n\nexport const defaultProcessFile = async (file: File, csvHeaderMap: Record<string, string>, csvDelimiter = ';'): Promise<any[]> => {\n  const text = await file.text();\n  // Rimuovi il BOM (Byte Order Mark) se presente\n  const cleanText = text.replace(/^\\uFEFF/, '');\n  \n  // Prova prima con il delimitatore specificato\n  let result = Papa.parse(cleanText, {\n    header: true,\n    delimiter: csvDelimiter,\n    skipEmptyLines: true,\n    transformHeader: (header: string) => header.trim()\n  });\n  \n  // Se il parsing non ha prodotto colonne multiple, prova con auto-detect\n  if (result.data.length > 0) {\n    const firstRow = result.data[0] as Record<string, any>;\n    const columnCount = Object.keys(firstRow).length;\n    \n    if (columnCount <= 1) {\n      // Prova con auto-detect del delimitatore\n      result = Papa.parse(cleanText, {\n        header: true,\n        skipEmptyLines: true,\n        transformHeader: (header: string) => header.trim()\n      });\n      \n      if (result.data.length > 0) {\n        const autoFirstRow = result.data[0] as Record<string, any>;\n        \n        // Se ancora non funziona, prova con virgola\n        if (Object.keys(autoFirstRow).length <= 1) {\n          result = Papa.parse(cleanText, {\n            header: true,\n            delimiter: ',',\n            skipEmptyLines: true,\n            transformHeader: (header: string) => header.trim()\n          });\n          \n          if (result.data.length > 0) {\n             const commaFirstRow = result.data[0] as Record<string, any>;\n             \n             // Se anche la virgola fallisce, prova parsing manuale\n             if (Object.keys(commaFirstRow).length <= 1) {\n               // Prova prima con punto e virgola\n                let manualData = manualCsvParse(cleanText, ';');\n                if (manualData.length > 0 && Object.keys(manualData[0]).length > 1) {\n                  result = { \n                    data: manualData, \n                    errors: [], \n                    meta: { \n                      delimiter: ';', \n                      linebreak: '\\n', \n                      aborted: false, \n                      truncated: false, \n                      cursor: 0 \n                    } \n                  };\n                } else {\n                  // Prova con virgola\n                  manualData = manualCsvParse(cleanText, ',');\n                  if (manualData.length > 0 && Object.keys(manualData[0]).length > 1) {\n                    result = { \n                      data: manualData, \n                      errors: [], \n                      meta: { \n                        delimiter: ',', \n                        linebreak: '\\n', \n                        aborted: false, \n                        truncated: false, \n                        cursor: 0 \n                      } \n                    };\n                  }\n                }\n             }\n           }\n        }\n      }\n    }\n  }\n  \n  if (result.errors.length > 0) {\n    console.error('Errori durante il parsing CSV:', result.errors);\n    throw new Error(`Errore nel parsing del file CSV: ${result.errors[0].message}`);\n  }\n  \n  // Verifica che ci siano dati\n  if (!result.data || result.data.length === 0) {\n    throw new Error('Il file CSV non contiene dati.');\n  }\n  \n  // Verifica che le intestazioni del CSV corrispondano alle mappature previste\n  const csvHeaders = Object.keys((result.data[0] as Record<string, any>) || {});\n  const mappedHeaders = Object.keys(csvHeaderMap);\n  \n  // Verifica se almeno una delle intestazioni richieste è presente (case-insensitive)\n  const foundHeaders = mappedHeaders.filter(header => \n    csvHeaders.some(csvHeader => csvHeader.trim().toLowerCase() === header.toLowerCase())\n  );\n  \n  if (foundHeaders.length === 0) {\n    throw new Error(`Il formato del CSV non è compatibile. Intestazioni attese: ${mappedHeaders.join(', ')}. Intestazioni trovate: ${csvHeaders.join(', ')}`);\n  }\n  \n  // Se abbiamo meno del 10% delle intestazioni richieste, mostra un avviso\n  if (foundHeaders.length < mappedHeaders.length * 0.1) {\n    throw new Error(`Formato del file non compatibile: solo ${foundHeaders.length} delle ${mappedHeaders.length} intestazioni attese sono state trovate. Intestazioni attese: ${mappedHeaders.join(', ')}. Intestazioni trovate: ${csvHeaders.join(', ')}`);\n  }\n  \n  // Mapping dei campi secondo la struttura definita\n  return (result.data as any[]).map(row => {\n    const mapped: Record<string, any> = {};\n    Object.entries(row).forEach(([k, v]) => {\n      // Cerca la mappatura corretta per l'intestazione CSV\n      const csvHeader = k.trim();\n      let mappedKey = csvHeader; // Default: usa l'intestazione originale\n      \n      // Cerca una corrispondenza nel csvHeaderMap (case-insensitive)\n      for (const [headerKey, fieldKey] of Object.entries(csvHeaderMap)) {\n        if (headerKey.toLowerCase() === csvHeader.toLowerCase()) {\n          mappedKey = fieldKey;\n          break;\n        }\n      }\n      \n      // Mantieni tutti i campi, anche se vuoti (importante per i template)\n      mapped[mappedKey] = v !== null && v !== undefined ? v.toString().trim() : '';\n    });\n    return mapped;\n  });\n};\n\n// Funzione per verificare se un errore è un errore di conflitto (409)\nconst isConflictError = (error: any): boolean => {\n  return error?.response?.status === 409;\n};\n\n// Funzione per verificare se una stringa è una data valida in formato ISO 8601\nexport const isValidISODate = (dateStr: string): boolean => {\n  if (!dateStr) return true; // Consideriamo valide le date vuote\n  \n  // Verifica il formato ISO 8601 (YYYY-MM-DD)\n  const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[+-]\\d{2}:\\d{2})?)?$/;\n  if (!isoDateRegex.test(dateStr)) return false;\n  \n  // Verifica se la data è valida\n  const date = new Date(dateStr);\n  return !isNaN(date.getTime());\n};\n\n// Funzione per validare i campi comuni che possono causare errori 500\nexport const validateCommonFields = (item: Record<string, any>): string[] => {\n  const errors: string[] = [];\n  \n  // Controllo campi data\n  const dateFields = ['birthDate', 'birth_date', 'data_nascita', 'date', 'startDate', 'endDate'];\n  dateFields.forEach(field => {\n    if (item[field] && !isValidISODate(item[field])) {\n      errors.push(`Il campo ${field} contiene una data non valida: ${item[field]}`);\n    }\n  });\n  \n  // Altri controlli per campi che potrebbero causare errori 500\n  if (item.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(item.email)) {\n    errors.push('Il formato dell\\'email non è valido');\n  }\n  \n  return errors;\n};\n\n/**\n * Normalizza i campi di un elemento in base alla mappatura CSV\n * @param item L'elemento da normalizzare\n * @param csvHeaderMap La mappatura dei campi CSV ai campi dell'entità\n * @returns Un nuovo oggetto con i campi normalizzati\n */\nconst normalizeItemFields = (\n  item: Record<string, any>,\n  csvHeaderMap: Record<string, string>\n): Record<string, any> => {\n  const result: Record<string, any> = {};\n  \n  // Per ogni campo nella mappatura, cerca il valore nell'item\n  for (const [header, field] of Object.entries(csvHeaderMap)) {\n    if (item[field] !== undefined) {\n      result[field] = item[field];\n    }\n  }\n  \n  // Copia anche i campi non mappati\n  for (const [key, value] of Object.entries(item)) {\n    if (result[key] === undefined) {\n      result[key] = value;\n    }\n  }\n  \n  return result;\n};\n\n/**\n * Componente per l'importazione generica di entità\n */\nexport default function GenericImport<T extends Record<string, any>>({\n  entityType,\n  uniqueField,\n  onImport,\n  onClose,\n  existingEntities = [],\n  csvHeaderMap = {},\n  columnOrder,\n  title,\n  subtitle,\n  customValidation,\n  csvDelimiter = ';',\n  customProcessFile,\n  customWarningPanel,\n  onSelectedRowsChange,\n  availableCompanies,\n  onCompanyChange,\n  initialPreviewData,\n  requiredFields = [],\n  conflicts,\n  onConflictResolutionChange\n}: GenericImportProps<T>) {\n  const defaultTitle = `Importa ${entityType && typeof entityType === 'string' ? entityType.charAt(0).toUpperCase() + entityType.slice(1) : 'Elementi'}`;\n  const defaultSubtitle = `Carica un file CSV con i dati dei ${entityType || 'elementi'} da importare`;\n  const [selectedRows, setSelectedRows] = useState<string[]>([]);\n  const [selectedRowsForImport, setSelectedRowsForImport] = useState<Set<number>>(new Set());\n  const [previewData, setPreviewData] = useState<any[]>(initialPreviewData || []);\n  const { showToast } = useToast();\n  // Aggiungiamo gli stati mancanti\n  const [importing, setImporting] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [rowErrors, setRowErrors] = useState<{ [rowIdx: number]: string[] }>({});\n  const [validationErrors, setValidationErrors] = useState<{ [rowIdx: number]: string[] }>({});\n\n  // Aggiorna previewData quando initialPreviewData cambia\n  useEffect(() => {\n    console.log('🔄 GenericImport useEffect triggered - initialPreviewData:', initialPreviewData?.length || 0, 'elementi');\n    // Aggiorna sempre previewData quando initialPreviewData cambia\n    // Questo include anche il caso di array vuoto per reset\n    if (initialPreviewData !== undefined) {\n      console.log('🔄 GenericImport: Aggiornamento previewData da initialPreviewData:', initialPreviewData.length, 'elementi');\n      console.log('📊 GenericImport: Primo elemento:', initialPreviewData[0]);\n      console.log('🏢 GenericImport: Aziende assegnate:', initialPreviewData.filter(item => item.companyId || item.company_name).length);\n      console.log('🔍 GenericImport: Dettaglio aziende:', initialPreviewData.slice(0, 3).map(item => ({ \n        nome: item.nome, \n        cognome: item.cognome, \n        company_name: item.company_name, \n        companyId: item.companyId,\n        _assignedCompany: item._assignedCompany \n      })));\n      setPreviewData([...initialPreviewData]); // Crea una nuova copia per forzare il re-render\n    }\n  }, [initialPreviewData]);\n\n  // Definizione delle colonne per la tabella di anteprima (memoizzata per evitare ricalcoli)\n  const previewColumns = useMemo(() => {\n    const columns: ImportPreviewColumn[] = [];\n    const usedKeys = new Set<string>();\n    const fieldToLabelMap = new Map<string, string>();\n\n    // Prima passata: crea una mappa dei campi ai loro label preferiti\n    Object.entries(csvHeaderMap).forEach(([header, key]) => {\n      if (!fieldToLabelMap.has(key)) {\n        // Preferisci i label più leggibili (con spazi e maiuscole)\n        fieldToLabelMap.set(key, header);\n      } else {\n        const currentLabel = fieldToLabelMap.get(key)!;\n        // Sostituisci se il nuovo header è più leggibile (contiene spazi o maiuscole)\n        if (header.includes(' ') || /[A-Z]/.test(header)) {\n          if (!currentLabel.includes(' ') && !/[A-Z]/.test(currentLabel)) {\n            fieldToLabelMap.set(key, header);\n          }\n        }\n      }\n    });\n\n    // Se è fornito un ordine personalizzato, usalo\n    if (columnOrder && columnOrder.length > 0) {\n      // Prima aggiungi le colonne nell'ordine specificato\n      columnOrder.forEach((key: string) => {\n        if (fieldToLabelMap.has(key) && !usedKeys.has(key)) {\n          const label = fieldToLabelMap.get(key)!;\n          columns.push({\n            key: key,\n            label: label,\n            minWidth: 80,\n            width: 120,\n          });\n          usedKeys.add(key);\n        }\n      });\n      \n      // Poi aggiungi eventuali colonne rimanenti non specificate nell'ordine\n      fieldToLabelMap.forEach((label, key) => {\n        if (!usedKeys.has(key)) {\n          columns.push({\n            key: key,\n            label: label,\n            minWidth: 80,\n            width: 120,\n          });\n          usedKeys.add(key);\n        }\n      });\n    } else {\n      // Comportamento originale se non è specificato un ordine\n      fieldToLabelMap.forEach((label, key) => {\n        if (!usedKeys.has(key)) {\n          columns.push({\n            key: key,\n            label: label,\n            minWidth: 80,\n            width: 120,\n          });\n          usedKeys.add(key);\n        }\n      });\n    }\n\n    return columns;\n  }, [csvHeaderMap, columnOrder]);\n\n  // Funzione per processare il file CSV (usiamo customProcessFile se fornito)\n  const processFile = async (file: File): Promise<any[]> => {\n    if (customProcessFile) {\n      const data = await customProcessFile(file);\n      setPreviewData(data);\n      return data;\n    }\n    \n    const mappedEntities = await defaultProcessFile(file, csvHeaderMap, csvDelimiter);\n\n    // Aggiungiamo gli ID delle entità esistenti per il merge basato sul campo univoco\n    const processedData = mappedEntities.map(entity => {\n      if (!entity[String(uniqueField)]) return entity;\n      \n      // Normalizza il valore del campo univoco per il confronto\n      const normalizedValue = normalizeString(entity[String(uniqueField)]);\n      \n      // Trova l'entità esistente con lo stesso valore normalizzato per il campo univoco\n      const existingEntity = existingEntities.find(existing => {\n        const existingValue = existing[uniqueField];\n        const existingNormalizedValue = normalizeString(existingValue as string | null | undefined);\n        const matchFound = existingNormalizedValue === normalizedValue;\n        \n        return matchFound;\n      });\n      \n      if (existingEntity) {\n        // Manteniamo l'ID originale per permettere la sovrascrittura\n        return { ...entity, id: existingEntity.id, _isExisting: true };\n      }\n      \n      return entity;\n    });\n    \n    setPreviewData(processedData);\n    return processedData;\n  };\n\n  // Validazione delle righe\n  const validateRows = (rows: any[]): { [rowIdx: number]: string[] } => {\n    const errors: { [rowIdx: number]: string[] } = {};\n    \n    rows.forEach((row, idx) => {\n      const rowErrors: string[] = [];\n      \n      // Verifica con la funzione di validazione personalizzata se disponibile\n      if (customValidation) {\n        const customErrors = customValidation(row, idx);\n        if (customErrors.length > 0) {\n          rowErrors.push(...customErrors);\n        }\n      } else {\n        // Validazione base predefinita\n        // Per le aziende\n        if (entityType === 'aziende') {\n          if (!row.ragione_sociale) {\n            rowErrors.push('Ragione Sociale obbligatoria');\n          }\n          \n          if (!row.piva && !row.codiceFiscale && !row.codice_fiscale) {\n            rowErrors.push('P.IVA o Codice Fiscale obbligatori');\n          }\n          \n          if (row.piva && (row.piva.length < 8 || row.piva.length > 13)) {\n            rowErrors.push('P.IVA non valida');\n          }\n        } \n        // Per i dipendenti\n        else if (entityType === 'dipendenti') {\n          if (!row.firstName && !row.nome) {\n            rowErrors.push('Nome obbligatorio');\n          }\n          \n          if (!row.lastName && !row.cognome) {\n            rowErrors.push('Cognome obbligatorio');\n          }\n          \n          if (!row.codiceFiscale && !row.codice_fiscale) {\n            rowErrors.push('Codice Fiscale obbligatorio');\n          } else if ((row.codiceFiscale && row.codiceFiscale.length !== 16) || (row.codice_fiscale && row.codice_fiscale.length !== 16)) {\n            rowErrors.push('Codice Fiscale deve essere di 16 caratteri');\n          }\n        }\n        // Per i formatori\n        else if (entityType === 'formatori') {\n          if (!row.firstName && !row.nome) {\n            rowErrors.push('Nome obbligatorio');\n          }\n          \n          if (!row.lastName && !row.cognome) {\n            rowErrors.push('Cognome obbligatorio');\n          }\n          \n          if (!row.codiceFiscale && !row.codice_fiscale) {\n            rowErrors.push('Codice Fiscale obbligatorio');\n          } else if ((row.codiceFiscale && row.codiceFiscale.length !== 16) || (row.codice_fiscale && row.codice_fiscale.length !== 16)) {\n            rowErrors.push('Codice Fiscale deve essere di 16 caratteri');\n          }\n        }\n        // Per i corsi\n        else if (entityType === 'corsi') {\n          if (!row.title) {\n            rowErrors.push('Titolo obbligatorio');\n          }\n          \n          if (!row.code) {\n            rowErrors.push('Codice corso obbligatorio');\n          }\n        }\n      }\n      \n      if (rowErrors.length > 0) {\n        errors[idx] = rowErrors;\n      }\n    });\n    \n    return errors;\n  };\n\n  // Toggle per gestire le righe selezionate per la sovrascrittura\n  const handleToggleOverwrite = (rowId: string) => {\n    const newSelectedRows = selectedRows.includes(rowId) \n      ? selectedRows.filter(id => id !== rowId)\n      : [...selectedRows, rowId];\n    \n    setSelectedRows(newSelectedRows);\n    \n    // Notifica il genitore del cambiamento se è fornita la callback\n    if (onSelectedRowsChange) {\n      onSelectedRowsChange(newSelectedRows);\n    }\n  };\n\n  // Callback per gestire la selezione delle righe da importare\n  const handleRowSelectionChange = useCallback((selectedRows: Set<number>) => {\n    setSelectedRowsForImport(selectedRows);\n  }, []);\n\n  // Inizializza la selezione delle righe quando cambiano i dati di preview\n  useEffect(() => {\n    if (previewData && previewData.length > 0) {\n      // Seleziona tutte le righe di default\n      const allRowIndices = new Set(Array.from({ length: previewData.length }, (_, i) => i));\n      setSelectedRowsForImport(allRowIndices);\n    }\n  }, [previewData]);\n\n  // Gestore dell'importazione\n  const handleImport = async (entities: any[], overwriteIds?: string[]) => {\n    if (!entities || entities.length === 0) {\n      setError('Nessun dato da importare');\n      setImporting(false);\n      return;\n    }\n    \n    // MODIFICA: Non filtrare qui le righe selezionate, lascia che sia la funzione personalizzata\n    // a gestire la logica di filtraggio basata su selectedRowsForImport e overwriteIds\n    // Questo permette una gestione più flessibile della selezione\n    const selectedEntities = entities; // Passa tutti i dati\n    \n    // Verifica che ci siano righe selezionate per l'importazione\n    if (selectedRowsForImport.size === 0) {\n      setError('Nessuna riga selezionata per l\\'importazione');\n      setImporting(false);\n      return;\n    }\n    \n    setImporting(true);\n    setError('');\n    \n    try {\n      const dataToProcess = [...selectedEntities];\n      \n      // Ottimizzazione: utilizza una Map per lookups più veloci\n      let existingEntitiesMap = new Map<string, any>();\n      \n      if (existingEntities && existingEntities.length > 0) {\n        existingEntitiesMap = new Map(\n          existingEntities\n            .filter(entity => entity[uniqueField as keyof T] !== undefined && entity[uniqueField as keyof T] !== null)\n            .map(entity => [\n              String(entity[uniqueField as keyof T]).toLowerCase().trim(),\n              entity\n            ])\n        );\n      }\n      \n      // Ora processa ogni entità da importare\n      const newEntities: any[] = [];\n      const updateEntities: any[] = [];\n      const skippedEntities: any[] = [];\n      const idsToOverwrite: string[] = overwriteIds || [];\n      const finalPayload: any[] = [];\n      \n      // Processa ogni entità da importare\n      for (let i = 0; i < dataToProcess.length; i++) {\n        try {\n          // Prepara una copia pulita dei dati con i campi normalizzati secondo la mappa CSV\n          const rawData = dataToProcess[i];\n          const cleanData: Record<string, any> = normalizeItemFields(rawData, csvHeaderMap);\n          \n          // Special handling for courses to ensure numeric fields are converted\n          if (entityType === 'corsi') {\n            // Force numeric fields to be numbers for courses\n            ['duration', 'validityYears', 'price', 'pricePerPerson', 'maxPeople'].forEach(field => {\n              if (cleanData[field] !== undefined && cleanData[field] !== null && cleanData[field] !== '') {\n                const numValue = parseInt(String(cleanData[field]).replace(/[^\\d]/g, ''), 10);\n                if (!isNaN(numValue)) {\n                  cleanData[field] = numValue; // Force number type\n                } else if (field === 'duration' || field === 'validityYears') {\n                  // For required fields, use 0 as default\n                  cleanData[field] = 0;\n                } else {\n                  // For optional fields, remove if invalid\n                  delete cleanData[field];\n                }\n              }\n            });\n            \n            // Ensure renewalDuration is a string\n            if (cleanData.renewalDuration !== undefined) {\n              cleanData.renewalDuration = String(cleanData.renewalDuration || '');\n            }\n          }\n\n          // Verifica se esiste già un'entità con lo stesso valore nel campo univoco\n          // Ma solo se il campo univoco è presente nell'entità\n          let existingEntity = null;\n          const uniqueFieldStr = String(uniqueField);\n          const uniqueValue = cleanData[uniqueFieldStr];\n          \n          if (uniqueValue !== undefined && uniqueValue !== null && uniqueValue !== '') {\n            const uniqueValueNormalized = String(uniqueValue).toLowerCase().trim();\n            existingEntity = existingEntitiesMap.get(uniqueValueNormalized);\n            \n            if (existingEntity) {\n              if (idsToOverwrite.includes(existingEntity.id)) {\n                // Aggiungi l'ID dell'entità esistente ai dati puliti per identificare l'aggiornamento\n                cleanData.id = existingEntity.id;\n                // Aggiungi ai record da aggiornare\n                updateEntities.push(cleanData);\n                // Aggiungi al payload finale\n                finalPayload.push(cleanData);\n              } else {\n                // Salta questa entità (non sovrascrivere)\n                skippedEntities.push(cleanData);\n              }\n            } else {\n              // Non esiste un'entità con questo valore univoco, aggiungi come nuova\n              newEntities.push(cleanData);\n              // Aggiungi al payload finale\n              finalPayload.push(cleanData);\n            }\n          } else {\n            // Il campo univoco non è presente o è vuoto, tratta come nuova entità\n            newEntities.push(cleanData);\n            // Aggiungi al payload finale\n            finalPayload.push(cleanData);\n          }\n        } catch (error) {\n          // Ignora errori e continua con la prossima entità\n        }\n      }\n        \n      try {\n        // MODIFICA: Passa le informazioni sulle righe selezionate alla funzione personalizzata\n        // per permettere una gestione più flessibile della selezione\n        await onImport(finalPayload as T[], idsToOverwrite, selectedRowsForImport);\n      \n        // MODIFICA: Non mostrare toast di successo automaticamente - lascia che sia il componente padre a decidere\n        // Questo permette ai componenti di gestire modal di conflitti o altre interazioni prima di mostrare il successo\n        \n        // MODIFICA: Non chiudere automaticamente il modal - lascia che sia il componente padre a decidere\n        // Questo permette ai componenti di gestire modal di conflitti o altre interazioni\n        // onClose();\n      } catch (error: any) {\n        let errorMessage = error?.message || \"Errore durante l'importazione\";\n        if (error?.response?.data?.message) {\n          errorMessage = error.response.data.message;\n        }\n        setError(`Errore durante l'importazione: ${errorMessage}`);\n        showToast({\n          message: `Errore: ${errorMessage}`,\n          type: 'error'\n        });\n      }\n    } catch (error: any) {\n      setError(`Errore imprevisto: ${error?.message || \"Errore sconosciuto\"}`);\n    } finally {\n      setImporting(false);\n    }\n  };\n\n\n\n  return (\n    <ImportModal\n      title={title || defaultTitle}\n      subtitle={subtitle || defaultSubtitle}\n      onImport={handleImport}\n      onClose={onClose}\n      processFile={processFile}\n      uniqueKey={String(uniqueField)} // Usa il campo univoco specificato\n      existingData={existingEntities}\n      previewColumns={previewColumns}\n      validateRows={validateRows}\n      supportedFormats={['.csv']}\n      formatsMessage=\"Formato supportato: CSV (separatore punto e virgola)\"\n      showBulkSelectButtons={true}\n      extraControls={customWarningPanel}\n      // Non nascondere la tabella di preview per i controlli extra\n      hidePreviewTable={false}\n      // Imposta l'opzione per usare un'unica colonna di checkbox\n      useSingleCheckboxColumn={true}\n      // Passa le aziende disponibili e la funzione di cambio azienda\n      availableCompanies={availableCompanies}\n      onCompanyChange={onCompanyChange}\n      // Passa i dati iniziali\n      initialPreviewData={previewData}\n      // Callback per quando cambiano le righe selezionate per la sovrascrittura\n      onOverwriteChange={onSelectedRowsChange}\n      // Gestione della selezione delle righe da importare\n      selectedRows={selectedRowsForImport}\n      onRowSelectionChange={handleRowSelectionChange}\n      // Passa i conflitti e la funzione di risoluzione\n      conflicts={conflicts}\n      onConflictResolutionChange={onConflictResolutionChange}\n    />\n  );\n} \n\n// Assegna la funzione defaultProcessFile come metodo statico\nGenericImport.defaultProcessFile = defaultProcessFile;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/ImportModalLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[227,230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[227,230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport { Upload, AlertCircle } from 'lucide-react';\n\ninterface ImportModalLayoutProps {\n  title: string;\n  onClose: () => void;\n  onImport: () => void;\n  importing: boolean;\n  preview: any[];\n  fileInputRef: React.RefObject<HTMLInputElement>;\n  handleFileInput: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  handleDrag: (e: React.DragEvent) => void;\n  error?: string;\n  children: ReactNode;\n}\n\nconst ImportModalLayout: React.FC<ImportModalLayoutProps> = ({\n  title,\n  onClose,\n  onImport,\n  importing,\n  preview,\n  fileInputRef,\n  handleFileInput,\n  handleDrag,\n  error,\n  children,\n}) => (\n  <div className=\"bg-white rounded-full shadow-xl max-w-4xl w-full mx-auto p-6\">\n    <div className=\"flex justify-between items-center mb-6\">\n      <h2 className=\"text-xl font-semibold text-gray-800\">{title}</h2>\n      <button\n        onClick={onClose}\n        className=\"text-gray-400 hover:text-gray-500\"\n      >\n        <span className=\"sr-only\">Chiudi</span>\n        <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </button>\n    </div>\n    {!preview.length ? (\n      <div\n        className={`relative border-2 border-dashed rounded-full p-8 text-center`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrag}\n      >\n        <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n        <p className=\"mt-4 text-sm text-gray-600\">\n          Trascina qui il file CSV, oppure{' '}\n          <button\n            type=\"button\"\n            onClick={() => fileInputRef.current?.click()}\n            className=\"text-blue-600 hover:text-blue-500 font-medium\"\n          >\n            sfoglia\n          </button>\n        </p>\n        <p className=\"mt-2 text-xs text-gray-500\">\n          Formato supportato: CSV (separatore punto e virgola)\n        </p>\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          className=\"hidden\"\n          accept=\".csv\"\n          onChange={handleFileInput}\n        />\n      </div>\n    ) : (\n      <div>{children}</div>\n    )}\n    {error && (\n      <div className=\"mt-4 bg-red-50 border border-red-200 rounded-full p-4\">\n        <div className=\"flex\">\n          <AlertCircle className=\"h-5 w-5 text-red-400\" />\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-red-800\">Errore</h3>\n            <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n          </div>\n        </div>\n      </div>\n    )}\n    <div className=\"mt-6 flex justify-end space-x-3\">\n      <button\n        type=\"button\"\n        onClick={onClose}\n        className=\"px-4 py-2 border border-gray-300 rounded-full shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n      >\n        Annulla\n      </button>\n      <button\n        type=\"button\"\n        onClick={onImport}\n        disabled={preview.length === 0 || importing}\n        className=\"px-4 py-2 border border-transparent rounded-full shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50\"\n      >\n        {importing ? 'Importazione...' : 'Importa'}\n      </button>\n    </div>\n  </div>\n);\n\nexport default ImportModalLayout; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/ImportPreviewTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":2,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDate' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[392,395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[392,395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[420,423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[420,423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2559,2562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2559,2562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showBulkSelectButtons' is assigned a value but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'overwriteIds' is assigned a value but never used.","line":75,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'existingKeys' object construction makes the dependencies of useEffect Hook (at line 124) change on every render. To fix this, wrap the initialization of 'existingKeys' in its own useMemo() Hook.","line":96,"column":9,"nodeType":"VariableDeclarator","endLine":101,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9236,9239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9236,9239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":257,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9800,9803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9800,9803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleToggleAllDuplicates' is assigned a value but never used.","line":381,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":381,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":402,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":402,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":408,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15410,15413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15410,15413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasSelectedRows' is assigned a value but never used.","line":440,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":440,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is assigned a value but never used.","line":467,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":467,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showCheckbox' is assigned a value but never used.","line":767,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":767,"endColumn":33}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { CheckCircle, AlertCircle, AlertTriangle } from 'lucide-react';\nimport { formatDate } from '../../design-system/utils';\n\nexport interface ImportPreviewColumn {\n  key: string;\n  label: string;\n  minWidth: number;\n  width: number;\n}\n\nexport interface ConflictInfo {\n  type: 'duplicate' | 'invalid_company';\n  existingPerson?: any;\n  suggestedCompanies?: any[];\n  resolution?: 'skip' | 'overwrite' | 'assign_company';\n  selectedCompanyId?: string;\n  selectedCompanyName?: string;\n}\n\ninterface ImportPreviewTableProps<T> {\n  columns: ImportPreviewColumn[];\n  preview: T[];\n  existing?: T[];\n  uniqueKey: string;\n  rowErrors?: { [rowIdx: number]: string[] };\n  onOverwriteChange?: (selected: string[]) => void;\n  showBulkSelectButtons?: boolean;\n  /** Usa un'unica colonna di checkbox per selezione/sovrascrittura */\n  useSingleCheckboxColumn?: boolean;\n  /** Funzione opzionale per cambiare l'azienda di un dipendente selezionato */\n  onCompanyChange?: (selectedIds: string[], companyId: string) => void;\n  /** Lista delle aziende disponibili per il menu a pillola */\n  availableCompanies?: Array<{id: string, name?: string, ragioneSociale?: string}>;\n  overwriteIds?: string[];\n  /** NUOVO: Conflitti rilevati per riga */\n  conflicts?: { [rowIdx: number]: ConflictInfo };\n  /** NUOVO: Callback per aggiornare la risoluzione di un conflitto */\n  onConflictResolutionChange?: (rowIdx: number, resolution: Partial<ConflictInfo>) => void;\n  /** NUOVO: Righe selezionate per l'import */\n  selectedRows?: Set<number>;\n  /** NUOVO: Callback per gestire la selezione delle righe */\n  onRowSelectionChange?: (selectedRows: Set<number>) => void;\n}\n\n// Mappa dei campi tra nomi diversi (CSV e database)\nconst fieldMappings: Record<string, string[]> = {\n  // CSV key: [possibili chiavi nel database]\n  'nome': ['firstName', 'nome'],\n  'cognome': ['lastName', 'cognome'],\n  'codice_fiscale': ['codiceFiscale', 'codice_fiscale', 'taxCode'],\n  'company_name': ['companyName', 'company_name', 'companyId'],\n  'profilo_professionale': ['title', 'profilo_professionale', 'mansione', 'position'],\n  'email': ['email'],\n  'telefono': ['phone', 'telefono'],\n  'indirizzo': ['residenceAddress', 'indirizzo'],\n  'citta': ['city', 'citta'],\n  'provincia': ['province', 'provincia'],\n  'cap': ['postalCode', 'postal_code', 'cap'],\n  'data_nascita': ['birthDate', 'birth_date', 'data_nascita'],\n  'department_id': ['departmentId', 'department_id']\n};\n\nexport default function ImportPreviewTable<T extends Record<string, any>>({\n  columns,\n  preview,\n  existing = [],\n  uniqueKey,\n  rowErrors = {},\n  onOverwriteChange,\n  showBulkSelectButtons = true,\n  useSingleCheckboxColumn = false,\n  onCompanyChange,\n  availableCompanies = [],\n  overwriteIds = [],\n  conflicts = {},\n  onConflictResolutionChange,\n  selectedRows = new Set(Array.from({ length: preview.length }, (_, i) => i)), // Default: tutte le righe selezionate\n  onRowSelectionChange\n}: ImportPreviewTableProps<T>) {\n  const [colWidths, setColWidths] = useState<Record<string, number>>(() => \n    columns.reduce((acc, col) => ({ ...acc, [col.key]: col.width }), {} as Record<string, number>)\n  );\n  const [overwriteToggles, setOverwriteToggles] = useState<{ [id: string]: boolean }>({});\n  const [initialized, setInitialized] = useState(false);\n  const [isCompanyDropdownOpen, setIsCompanyDropdownOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCompanyId, setSelectedCompanyId] = useState<string>('');\n  \n  const resizingCol = useRef<string | null>(null);\n  const startX = useRef<number>(0);\n  const startWidth = useRef<number>(0);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  // Identifica le righe duplicate utilizzando la chiave univoca (con normalizzazione)\n  const existingKeys = new Set(\n    existing\n      .map(item => item[uniqueKey])\n      .filter(Boolean)\n      .map(value => String(value).toLowerCase().trim())\n  );\n\n  // Imposta i toggle predefiniti per i duplicati all'inizializzazione, solo una volta\n  useEffect(() => {\n    if (!initialized) {\n      const toggles: { [id: string]: boolean } = {};\n      preview.forEach(item => {\n        // Se il record ha un ID, significa che è un record esistente\n        if (item.id) {\n          toggles[String(item.id)] = true;\n        } \n        // Altrimenti, verifica usando la chiave univoca\n        else if (item[uniqueKey] && existingKeys.has(String(item[uniqueKey]))) {\n          // Trova l'ID del record esistente\n          const existingItem = existing.find(e => String(e[uniqueKey]) === String(item[uniqueKey]));\n          if (existingItem) {\n            toggles[String(existingItem.id)] = true;\n          }\n        }\n      });\n      setOverwriteToggles(toggles);\n      setInitialized(true);\n    }\n  }, [preview, existingKeys, uniqueKey, initialized, existing]);\n\n  // Effetto separato per notificare i cambiamenti\n  useEffect(() => {\n    if (onOverwriteChange) {\n      const selectedIds = Object.keys(overwriteToggles).filter(key => overwriteToggles[key]);\n      onOverwriteChange(selectedIds);\n    }\n  }, [overwriteToggles, onOverwriteChange]);\n  \n  // Gestione del click all'esterno del dropdown\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsCompanyDropdownOpen(false);\n      }\n    }\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Gestione selezione righe per l'import\n  const handleRowSelectionToggle = (rowIndex: number) => {\n    if (!onRowSelectionChange) return;\n    \n    const newSelectedRows = new Set(selectedRows);\n    const item = preview[rowIndex];\n    \n    if (newSelectedRows.has(rowIndex)) {\n      // Deseleziona la riga per l'importazione\n      newSelectedRows.delete(rowIndex);\n      \n      // Se la riga è un duplicato, deseleziona anche dalla sovrascrittura\n      if (item && item[uniqueKey] && existingKeys.has(String(item[uniqueKey]).toLowerCase().trim())) {\n        const existingItem = existing.find(e => \n          String(e[uniqueKey]).toLowerCase().trim() === String(item[uniqueKey]).toLowerCase().trim()\n        );\n        if (existingItem && existingItem.id) {\n          setOverwriteToggles(prev => ({\n            ...prev,\n            [String(existingItem.id)]: false\n          }));\n        }\n      }\n    } else {\n      // Seleziona la riga per l'importazione\n      newSelectedRows.add(rowIndex);\n      \n      // Se la riga è un duplicato, seleziona anche per la sovrascrittura\n      if (item && item[uniqueKey] && existingKeys.has(String(item[uniqueKey]).toLowerCase().trim())) {\n        const existingItem = existing.find(e => \n          String(e[uniqueKey]).toLowerCase().trim() === String(item[uniqueKey]).toLowerCase().trim()\n        );\n        if (existingItem && existingItem.id) {\n          setOverwriteToggles(prev => ({\n            ...prev,\n            [String(existingItem.id)]: true\n          }));\n        }\n      }\n    }\n    \n    onRowSelectionChange(newSelectedRows);\n  };\n\n  const handleSelectAllRows = () => {\n    if (!onRowSelectionChange) return;\n    \n    const allRowsSelected = selectedRows.size === preview.length;\n    if (allRowsSelected) {\n      // Deseleziona tutte le righe\n      onRowSelectionChange(new Set());\n      \n      // Deseleziona anche tutti i toggle di sovrascrittura\n      const noToggles: { [id: string]: boolean } = {};\n      preview.forEach(item => {\n        const key = item[uniqueKey];\n        if (key && existingKeys.has(String(key).toLowerCase().trim())) {\n          const existingItem = existing.find(e => \n            String(e[uniqueKey]).toLowerCase().trim() === String(key).toLowerCase().trim()\n          );\n          if (existingItem && existingItem.id) {\n            noToggles[String(existingItem.id)] = false;\n          }\n        }\n      });\n      setOverwriteToggles(noToggles);\n    } else {\n      // Seleziona tutte le righe\n      onRowSelectionChange(new Set(Array.from({ length: preview.length }, (_, i) => i)));\n      \n      // Seleziona anche tutti i toggle di sovrascrittura per i duplicati\n      const allToggles: { [id: string]: boolean } = { ...overwriteToggles };\n      preview.forEach(item => {\n        const key = item[uniqueKey];\n        if (key && existingKeys.has(String(key).toLowerCase().trim())) {\n          const existingItem = existing.find(e => \n            String(e[uniqueKey]).toLowerCase().trim() === String(key).toLowerCase().trim()\n          );\n          if (existingItem && existingItem.id) {\n            allToggles[String(existingItem.id)] = true;\n          }\n        }\n      });\n      setOverwriteToggles(allToggles);\n    }\n  };\n\n  const areAllRowsSelected = selectedRows.size === preview.length && preview.length > 0;\n  const areSomeRowsSelected = selectedRows.size > 0 && selectedRows.size < preview.length;\n  const handleResizeStart = (col: string, e: React.MouseEvent) => {\n    resizingCol.current = col;\n    startX.current = e.clientX;\n    startWidth.current = colWidths[col];\n    \n    document.addEventListener('mousemove', handleResizing as any);\n    document.addEventListener('mouseup', handleResizeEnd);\n  };\n\n  const handleResizing = (e: MouseEvent) => {\n    if (!resizingCol.current) return;\n    const diff = e.clientX - startX.current;\n    const col = resizingCol.current;\n    const minWidth = columns.find(c => c.key === col)?.minWidth || 40;\n    const newWidth = Math.max(minWidth, startWidth.current + diff);\n    setColWidths(w => ({ ...w, [col]: newWidth }));\n  };\n\n  const handleResizeEnd = () => {\n    resizingCol.current = null;\n    document.removeEventListener('mousemove', handleResizing as any);\n    document.removeEventListener('mouseup', handleResizeEnd);\n  };\n\n  // Gestore per il cambio di stato dei checkbox di sovrascrittura\n  const handleToggleOverwrite = (id: string) => {\n    // Aggiorna lo stato immediatamente con una funzione per evitare problemi di state batching\n    setOverwriteToggles(prev => {\n      const newState = {\n        ...prev,\n        [id]: !prev[id]\n      };\n      \n      // Sincronizza con la selezione delle righe\n      if (onRowSelectionChange) {\n        const existingItem = existing.find(e => String(e.id) === id);\n        if (existingItem) {\n          const rowIndex = preview.findIndex(item => \n            item[uniqueKey] && \n            String(item[uniqueKey]).toLowerCase().trim() === String(existingItem[uniqueKey]).toLowerCase().trim()\n          );\n          \n          if (rowIndex !== -1) {\n            const newSelectedRows = new Set(selectedRows);\n            if (newState[id]) {\n              // Se viene selezionato per sovrascrittura, seleziona anche per importazione\n              newSelectedRows.add(rowIndex);\n            } else {\n              // Se viene deselezionato per sovrascrittura, deseleziona anche per importazione\n              newSelectedRows.delete(rowIndex);\n            }\n            onRowSelectionChange(newSelectedRows);\n          }\n        }\n      }\n      \n      return newState;\n    });\n  };\n\n  // Seleziona tutti i duplicati\n  const selectAllOverwrites = () => {\n    const allToggles: { [id: string]: boolean } = {};\n    \n    // Assicurati che tutti gli ID presenti in existingKeys abbiano un toggle\n    preview.forEach(item => {\n      const key = item[uniqueKey];\n      if (key && existingKeys.has(String(key).toLowerCase().trim())) {\n        // Trova l'elemento esistente corrispondente per ottenere l'ID corretto\n        const existingItem = existing.find(e => \n          String(e[uniqueKey]).toLowerCase().trim() === String(key).toLowerCase().trim()\n        );\n        if (existingItem && existingItem.id) {\n          allToggles[String(existingItem.id)] = true;\n        }\n      }\n    });\n    \n    setOverwriteToggles(allToggles);\n    \n    // Notifica immediatamente il cambiamento al parent\n    if (onOverwriteChange) {\n      const selectedIds = Object.keys(allToggles).filter(key => allToggles[key]);\n      onOverwriteChange(selectedIds);\n    }\n  };\n\n  // Deseleziona tutti i duplicati\n  const deselectAllOverwrites = () => {\n    // Creiamo un nuovo oggetto con tutti i valori impostati a false invece di usare un oggetto vuoto\n    const noToggles: { [id: string]: boolean } = {};\n    \n    // Assicurati che tutti gli ID presenti in existingKeys abbiano un toggle\n    preview.forEach(item => {\n      const key = item[uniqueKey];\n      if (key && existingKeys.has(String(key).toLowerCase().trim())) {\n        // Trova l'elemento esistente corrispondente per ottenere l'ID corretto\n        const existingItem = existing.find(e => \n          String(e[uniqueKey]).toLowerCase().trim() === String(key).toLowerCase().trim()\n        );\n        if (existingItem && existingItem.id) {\n          noToggles[String(existingItem.id)] = false;\n        }\n      }\n    });\n    \n    setOverwriteToggles(noToggles);\n    \n    // Notifica immediatamente il cambiamento al parent\n    if (onOverwriteChange) {\n      onOverwriteChange([]);\n    }\n  };\n\n  // Gestore per il cambio dell'azienda per le righe selezionate\n  const handleCompanySelect = (companyId: string) => {\n    setSelectedCompanyId(companyId);\n    setIsCompanyDropdownOpen(false);\n    \n    if (onCompanyChange) {\n      // Se ci sono righe selezionate tramite checkbox, applica solo a quelle\n      if (selectedRows.size > 0) {\n        // Passa gli indici delle righe selezionate come stringhe\n        const selectedRowIndices = Array.from(selectedRows).map(index => String(index));\n        onCompanyChange(selectedRowIndices, companyId);\n      } else {\n        // Se non ci sono righe selezionate tramite checkbox, applica a tutte le righe\n        const allRowIndices = Array.from({ length: preview.length }, (_, index) => String(index));\n        onCompanyChange(allRowIndices, companyId);\n      }\n    }\n  };\n\n  // Filtra le aziende in base al termine di ricerca\n  const filteredCompanies = availableCompanies.filter(company => \n    (company.ragioneSociale || company.name || '').toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Controlla se tutte le righe duplicate sono selezionate\n  const duplicateCount = preview.filter(item => item[uniqueKey] && existingKeys.has(String(item[uniqueKey]))).length;\n  const selectedCount = selectedRows.size;\n  const areAllDuplicatesSelected = duplicateCount > 0 && selectedCount === duplicateCount;\n  \n  // Stato per il checkbox \"seleziona tutto\"\n  const handleToggleAllDuplicates = () => {\n    if (areAllDuplicatesSelected) {\n      deselectAllOverwrites();\n    } else {\n      selectAllOverwrites();\n    }\n  };\n\n  // Funzione unificata per formattare le date in formato dd/mm/yyyy\n  const formatDateForComparison = (dateString: string | null | undefined): string => {\n    if (!dateString) return '';\n    \n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return String(dateString);\n      \n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      \n      return `${day}/${month}/${year}`;\n    } catch (error) {\n      return String(dateString);\n    }\n  };\n\n  // Trova il valore corrispondente nel database tramite mappatura dei campi\n  const getDbValue = (existingItem: Record<string, any>, csvKey: string): string => {\n    // Rimuovi l'indice dalla chiave se presente (es. \"postalCode-0\" -> \"postalCode\")\n    const originalKey = csvKey.replace(/-\\d+$/, '');\n    \n    // Ottieni possibili nomi di campi nel database per questa chiave CSV\n    const possibleKeys = fieldMappings[originalKey] || [originalKey];\n    \n    // Prova ogni possibile chiave nel database\n    for (const dbKey of possibleKeys) {\n      if (existingItem[dbKey] !== undefined && existingItem[dbKey] !== null) {\n        const value = existingItem[dbKey];\n        \n        // Gestione speciale per i campi di tipo data\n        if (originalKey === 'data_nascita' && value) {\n          return formatDateForComparison(value);\n        }\n        \n        // Gestione speciale per il campo company_name/companyId\n        if (originalKey === 'company_name' && (dbKey === 'companyId' || dbKey === 'companyName') && value) {\n          // Trova il nome dell'azienda dall'ID\n          const company = availableCompanies.find(c => c.id === value);\n          return company ? (company.ragioneSociale || company.name || '') : String(value);\n        }\n        \n        return String(value);\n      }\n    }\n    \n    return '';\n  };\n  \n  // Controlla se qualche riga è selezionata\n  const hasSelectedRows = selectedCount > 0;\n  \n  // Stato della riga (nuovo, aggiornato, errore, conflitto)\n  const renderRowStatus = (item: T, index: number) => {\n    const hasErrors = rowErrors[index] && rowErrors[index].length > 0;\n    const errors = rowErrors[index] || [];\n    const conflict = conflicts[index];\n    const isRowSelected = selectedRows.has(index);\n    \n    // Controlla se ci sono errori specifici del codice fiscale\n    const hasFiscalCodeError = errors.some(error => \n      error.toLowerCase().includes('codice fiscale') || \n      error.toLowerCase().includes('fiscal') ||\n      error.toLowerCase().includes('cf')\n    );\n    \n    // Se l'elemento ha già un ID, è un record esistente\n    // Oppure se c'è un conflitto di tipo duplicate, è anche esistente\n    // Oppure se ha il flag _isExisting impostato da EmployeeImport\n    const isExisting = item.id !== undefined || \n      item._isExisting === true ||\n      (item[uniqueKey] && existingKeys.has(String(item[uniqueKey]).toLowerCase().trim())) ||\n      (conflict && conflict.type === 'duplicate');\n    \n\n    \n    // Se l'elemento ha un ID, usiamo quello per il checkbox\n    const id = item.id || (() => {\n      // Altrimenti, troviamo l'ID corrispondente nel dataset esistente\n      if (item[uniqueKey]) {\n        const existingItem = existing.find(e => \n          String(e[uniqueKey]).toLowerCase().trim() === String(item[uniqueKey]).toLowerCase().trim()\n        );\n        return existingItem?.id;\n      }\n      return null;\n    })();\n    \n    // Gestione conflitti\n    if (conflict) {\n      return (\n        <div className=\"flex flex-col items-center space-y-1 p-1 min-w-[160px]\">\n          {/* Checkbox di selezione per l'import */}\n          <div className=\"flex items-center justify-center\">\n            <input\n              type=\"checkbox\"\n              checked={isRowSelected}\n              onChange={() => handleRowSelectionToggle(index)}\n              className=\"accent-blue-600 mr-1\"\n              title=\"Seleziona per importare\"\n            />\n            <span className=\"text-xs text-gray-600 font-medium\">Importa</span>\n          </div>\n          \n          {conflict.type === 'duplicate' && (\n            <>\n              <div className=\"flex items-center justify-center text-blue-600 bg-blue-50 px-2 py-1 rounded-md border border-blue-200 w-full\">\n                <span className=\"text-xs font-medium\">⚠️ Duplicato CF</span>\n              </div>\n              <div className=\"flex space-x-1 w-full\">\n                <button\n                  onClick={() => onConflictResolutionChange?.(index, { resolution: 'skip' })}\n                  className={`flex-1 px-2 py-1 text-xs rounded font-medium transition-colors ${\n                    conflict.resolution === 'skip' \n                      ? 'bg-red-500 text-white shadow-sm' \n                      : 'bg-gray-100 text-gray-700 hover:bg-red-50 hover:text-red-600 border border-gray-300'\n                  }`}\n                  title=\"Mantieni il record esistente\"\n                >\n                  Salta\n                </button>\n                <button\n                  onClick={() => onConflictResolutionChange?.(index, { resolution: 'overwrite' })}\n                  className={`flex-1 px-2 py-1 text-xs rounded font-medium transition-colors ${\n                    conflict.resolution === 'overwrite' \n                      ? 'bg-blue-500 text-white shadow-sm' \n                      : 'bg-gray-100 text-gray-700 hover:bg-blue-50 hover:text-blue-600 border border-gray-300'\n                  }`}\n                  title=\"Sostituisci con i nuovi dati\"\n                >\n                  Sovrascrivi\n                </button>\n              </div>\n            </>\n          )}\n          \n          {conflict.type === 'invalid_company' && (\n            <>\n              <div className=\"flex items-center justify-center text-orange-600 bg-orange-50 px-2 py-1 rounded-md border border-orange-200 w-full\">\n                <span className=\"text-xs font-medium\">🏢 Azienda non trovata</span>\n              </div>\n              <select\n                value={conflict.selectedCompanyId || ''}\n                onChange={(e) => {\n                  const selectedCompany = availableCompanies.find(c => c.id === e.target.value);\n                  onConflictResolutionChange?.(index, { \n                    resolution: e.target.value ? 'assign_company' : undefined,\n                    selectedCompanyId: e.target.value || undefined,\n                    selectedCompanyName: selectedCompany?.ragioneSociale || selectedCompany?.name\n                  });\n                }}\n                className=\"w-full text-xs border border-gray-300 rounded px-2 py-1 focus:outline-none focus:ring-1 focus:ring-blue-500 bg-white\"\n                title=\"Seleziona un'azienda\"\n              >\n                <option value=\"\">🔍 Seleziona azienda...</option>\n                {availableCompanies.map(company => (\n                  <option key={company.id} value={company.id}>\n                    {company.ragioneSociale || company.name}\n                  </option>\n                ))}\n              </select>\n            </>\n          )}\n        </div>\n      );\n    }\n    \n    // Gestione normale (senza conflitti)\n    return (\n      <div className=\"flex flex-col items-center space-y-1 p-1\">\n        {/* Checkbox di selezione per l'import */}\n        <div className=\"flex items-center justify-center\">\n          <input\n            type=\"checkbox\"\n            checked={isRowSelected}\n            onChange={() => handleRowSelectionToggle(index)}\n            className=\"accent-blue-600 mr-1\"\n            title=\"Seleziona per importare\"\n          />\n          <span className=\"text-xs text-gray-600 font-medium\">Importa</span>\n        </div>\n        \n        {/* Indicatore di stato compatto */}\n        <div className=\"flex items-center justify-center\">\n          {hasErrors ? (\n            <div className=\"flex items-center text-red-600 bg-red-50 px-2 py-1 rounded-md border border-red-200\" title={errors.join(', ')}>\n              <AlertCircle size={12} className=\"mr-1\" />\n              <span className=\"text-xs font-medium\">\n                {hasFiscalCodeError ? '❌ CF Invalido' : '❌ Errore'}\n              </span>\n            </div>\n          ) : isExisting ? (\n            <div className=\"flex items-center text-blue-600 bg-blue-50 px-2 py-1 rounded-md border border-blue-200\">\n              <CheckCircle size={12} className=\"mr-1\" />\n              <span className=\"text-xs font-medium\">🔄 Esistente</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center text-green-600 bg-green-50 px-2 py-1 rounded-md border border-green-200\">\n              <CheckCircle size={12} className=\"mr-1\" />\n              <span className=\"text-xs font-medium\">✨ Nuovo</span>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n      <div className=\"rounded-t-lg bg-gray-50\">\n        <div className=\"py-4 px-5\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"font-medium text-gray-700\">\n                {preview.length} righe trovate\n              </span>\n              {duplicateCount > 0 && (\n                <span className=\"text-blue-700 bg-blue-100 px-2 py-0.5 text-xs rounded-full\">\n                  {duplicateCount} duplicati\n                </span>\n              )}\n            </div>\n            \n            {availableCompanies && availableCompanies.length > 0 && (\n              <div className=\"relative\" ref={dropdownRef}>\n                <div \n                  onClick={() => setIsCompanyDropdownOpen(!isCompanyDropdownOpen)}\n                  className=\"px-4 py-2 text-sm bg-blue-600 text-white rounded-full border border-blue-700 cursor-pointer flex items-center gap-2 hover:bg-blue-700 transition-colors shadow-sm\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h3M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>\n                  </svg>\n                  <span>\n                    {selectedCompanyId ? \n                      (availableCompanies.find(c => c.id === selectedCompanyId)?.ragioneSociale || \n                       availableCompanies.find(c => c.id === selectedCompanyId)?.name || 'Seleziona azienda') : \n                      'Assegna azienda'}\n                  </span>\n                  <svg className={`w-4 h-4 transition-transform ${isCompanyDropdownOpen ? 'rotate-180' : ''}`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n                  </svg>\n                </div>\n                \n                {isCompanyDropdownOpen && (\n                  <div className=\"absolute right-0 mt-2 w-80 bg-white border border-gray-300 rounded-lg shadow-xl z-[999] overflow-hidden\">\n                    <div className=\"p-3 border-b border-gray-200 bg-gray-50\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <svg className=\"w-4 h-4 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\n                        </svg>\n                        <input\n                          type=\"text\"\n                          placeholder=\"Cerca azienda per nome...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"flex-1 px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                          autoFocus\n                        />\n                      </div>\n                      <p className=\"text-xs text-gray-600\">\n                        {selectedRows.size > 0 && selectedRows.size < preview.length\n                          ? `Assegna azienda alle ${selectedRows.size} righe selezionate` \n                          : 'Assegna azienda a tutte le righe'}\n                      </p>\n                    </div>\n                    <div className=\"max-h-64 overflow-y-auto\">\n                      {filteredCompanies.length > 0 ? (\n                        filteredCompanies.map((company) => (\n                          <div\n                            key={company.id}\n                            onClick={() => handleCompanySelect(company.id)}\n                            className={`px-4 py-3 text-sm cursor-pointer hover:bg-blue-50 border-b border-gray-100 last:border-b-0 transition-colors ${\n                              selectedCompanyId === company.id ? \"bg-blue-100 text-blue-800 border-blue-200\" : \"text-gray-700\"\n                            }`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                               <div className=\"flex-1\">\n                                 <div className=\"font-medium\">{company.ragioneSociale || company.name}</div>\n                               </div>\n                               {selectedCompanyId === company.id && (\n                                 <svg className=\"w-4 h-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                   <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                                 </svg>\n                               )}\n                             </div>\n                          </div>\n                        ))\n                      ) : (\n                        <div className=\"px-4 py-6 text-center\">\n                          <svg className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h3M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>\n                          </svg>\n                          <p className=\"text-sm text-gray-500\">Nessuna azienda trovata</p>\n                          <p className=\"text-xs text-gray-400 mt-1\">Prova a modificare i criteri di ricerca</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"max-h-96 overflow-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\" style={{ tableLayout: 'fixed' }}>\n          <colgroup>\n            {/* Se useremo un'unica colonna di checkbox, modifichiamo la larghezza */}\n            <col style={{ width: '60px', minWidth: '60px', maxWidth: '80px' }} />\n            {columns.map(col => (\n              <col key={col.key} style={{ width: colWidths[col.key], minWidth: col.minWidth }} />\n            ))}\n            {/* Se non unifichiamo le colonne, aggiungiamo la colonna per l'indicatore di sovrascrittura */}\n            {!useSingleCheckboxColumn && <col style={{ width: '70px', minWidth: '70px' }} />}\n          </colgroup>\n          \n          <thead className=\"bg-gray-50 sticky top-0 z-10 shadow-sm\">\n            <tr>\n              <th className=\"px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                <div className=\"flex flex-col items-center space-y-1\">\n                  <span className=\"text-xs font-medium\">Stato</span>\n                  <div className=\"flex items-center space-x-1\">\n                    <input\n                      type=\"checkbox\"\n                      checked={areAllRowsSelected}\n                      ref={(el) => {\n                        if (el) {\n                          el.indeterminate = areSomeRowsSelected && !areAllRowsSelected;\n                        }\n                      }}\n                      onChange={handleSelectAllRows}\n                      className=\"accent-blue-600\"\n                      title={areAllRowsSelected ? \"Deseleziona tutto\" : \"Seleziona tutto\"}\n                    />\n                    <span className=\"text-xs text-gray-600\">Tutti</span>\n                  </div>\n                </div>\n              </th>\n              {columns.map(col => (\n                <th \n                  key={col.key}\n                  className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider relative group select-none\"\n                >\n                  {col.label}\n                  <div\n                    onMouseDown={(e) => handleResizeStart(col.key, e)}\n                    className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-[3px] rounded bg-gray-300 group-hover:bg-blue-500 cursor-col-resize transition\"\n                    style={{ zIndex: 2 }}\n                    role=\"separator\"\n                    aria-orientation=\"vertical\"\n                    tabIndex={-1}\n                  />\n                </th>\n              ))}\n              {/* Se non unifichiamo le colonne, aggiungiamo l'header per l'indicatore di sovrascrittura */}\n              {!useSingleCheckboxColumn && (\n                <th className=\"px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Sovr.\n                </th>\n              )}\n            </tr>\n          </thead>\n          \n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {preview.map((item, idx) => {\n              // Trova eventuale record esistente corrispondente\n              const key = item[uniqueKey];\n              const isExisting = key && existingKeys.has(String(key));\n              const existingItem = isExisting \n                ? existing.find(e => String(e[uniqueKey]) === String(key)) \n                : null;\n                \n              // Ottieni eventuali errori per questa riga\n              const errors = rowErrors[idx] || [];\n              \n              // Determina se il checkbox deve essere mostrato\n              const showCheckbox = isExisting && useSingleCheckboxColumn;\n              \n              // Genera una chiave unica stabile basata solo sull'indice della riga\n              // Questo garantisce che ogni riga abbia sempre una chiave unica e stabile\n              const uniqueRowKey = `import-row-${idx}`;\n              \n              return (\n                <tr key={uniqueRowKey} className={errors.length ? 'bg-red-50' : (idx % 2 === 0 ? 'bg-white' : 'bg-gray-50')}>\n                  <td className=\"text-center p-2\">\n                    <div className=\"flex justify-center items-center h-full\">\n                      {renderRowStatus(item, idx)}\n                    </div>\n                  </td>\n                  \n                  {columns.map(col => {\n                    // Estrai la chiave originale rimuovendo l'indice aggiunto per l'unicità\n                    const originalKey = col.key.replace(/-\\d+$/, '');\n                    \n                    // Determina se questo campo è diverso nell'elemento esistente\n                    let isDifferent = false;\n                    let existingValue = '';\n                    \n                    if (isExisting && existingItem) {\n                      // Normalizza i valori per il confronto\n                      let newValue = String(item[originalKey] ?? '').trim();\n                      \n                      // Formattazione speciale per le date nel confronto\n                      if ((originalKey === 'data_nascita' || originalKey === 'birthDate') && newValue) {\n                        newValue = formatDateForComparison(newValue);\n                      }\n                      \n                      existingValue = getDbValue(existingItem, originalKey).trim();\n                      \n                      // Evidenzia le differenze in tutti i casi:\n                      // - Nuovo valore diverso da quello esistente (anche se vuoto)\n                      // - Valore esistente diverso da quello nuovo (anche se vuoto)\n                      isDifferent = newValue !== existingValue;\n                    }\n                    \n                    const value = item[originalKey];\n                    let displayValue = '';\n                    \n                    // Formattazione speciale per la data di nascita\n                    if ((originalKey === 'data_nascita' || originalKey === 'birthDate') && value) {\n                      displayValue = formatDateForComparison(value);\n                    } else {\n                      displayValue = value !== undefined && value !== null \n                        ? String(value) \n                        : '';\n                    }\n                    \n                    // Genera una chiave unica per la cella che combina indice riga e chiave colonna\n                    const cellKey = `${uniqueRowKey}-${col.key}`;\n                    \n                    return (\n                      <td\n                        key={cellKey}\n                        className={`px-3 py-2 whitespace-nowrap overflow-hidden text-sm ${\n                          isDifferent ? 'text-blue-600 font-medium' : 'text-gray-900'\n                        }`}\n                        style={{ maxWidth: colWidths[col.key], minWidth: col.minWidth }}\n                        title={displayValue}\n                      >\n                        <div className=\"truncate\">\n                          {displayValue || <span className=\"text-gray-400 italic\">(vuoto)</span>}\n                          {isDifferent && existingItem && (\n                            <div className=\"flex items-center gap-1 mt-1 text-xs text-gray-500 truncate\">\n                              <span className=\"inline-block w-1.5 h-1.5 bg-blue-400 rounded-full\"></span> \n                              DB: {existingValue || \"(vuoto)\"}\n                            </div>\n                          )}\n                        </div>\n                      </td>\n                    );\n                  })}\n                  \n                  {/* Se non usiamo una colonna unificata, aggiungiamo la colonna per i checkbox */}\n                  {!useSingleCheckboxColumn && isExisting && (\n                    <td className=\"px-3 py-2 whitespace-nowrap text-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={item.id ? overwriteToggles[String(item.id)] || false : false}\n                        onChange={() => item.id && handleToggleOverwrite(String(item.id))}\n                        className=\"accent-blue-600 w-4 h-4\"\n                      />\n                    </td>\n                  )}\n                  \n                  {/* Se non usiamo una colonna unificata e non è un record esistente, aggiungiamo una cella vuota */}\n                  {!useSingleCheckboxColumn && !isExisting && (\n                    <td className=\"px-3 py-2 whitespace-nowrap text-center text-green-500\">\n                      <span className=\"text-sm font-medium\">Nuovo</span>\n                    </td>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Mostra eventuali errori di riga */}\n      {Object.keys(rowErrors).length > 0 && (\n        <div className=\"mt-2 bg-red-50 border border-red-200 rounded p-3 text-sm text-red-700\">\n          <div className=\"font-medium mb-1\">Errori rilevati:</div>\n          <ul className=\"list-disc pl-5 space-y-1\">\n            {Object.entries(rowErrors).map(([rowIdx, errors]) => (\n              <li key={rowIdx}>\n                Riga {parseInt(rowIdx) + 1}: {errors.join(', ')}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/ImportTableCell.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[133,136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[133,136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[185,188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[185,188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1484,1487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1484,1487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1536,1539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1536,1539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2835,2838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2835,2838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2887,2890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2887,2890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4186,4189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4186,4189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4238,4241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4238,4241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5537,5540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5537,5540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":215,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5589,5592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5589,5592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport DiffHighlighter from './DiffHighlighter';\n\ninterface ImportTableCellProps {\n  item: Record<string, any>;\n  column: string;\n  dbRecord?: Record<string, any> | null;\n  fieldMappings?: Record<string, string[]>;\n  showDiff?: boolean;\n}\n\n/**\n * Componente cella per la tabella di importazione che mostra le differenze\n * tra i dati importati e quelli esistenti nel database\n */\nconst ImportTableCell: React.FC<ImportTableCellProps> = ({\n  item,\n  column,\n  dbRecord,\n  fieldMappings = {},\n  showDiff = true\n}) => {\n  // Se non c'è record DB o non si vuole mostrare le differenze, mostra solo il valore\n  if (!dbRecord || !showDiff) {\n    return <span>{item[column] !== undefined ? String(item[column]) : ''}</span>;\n  }\n\n  // Ottieni il valore importato\n  const importValue = item[column];\n  \n  // Ottieni possibili nomi di campi nel database per questa chiave CSV\n  const possibleKeys = fieldMappings[column] || [column];\n  \n  // Cerca il valore corrispondente nel database\n  let dbValue = undefined;\n  for (const dbKey of possibleKeys) {\n    if (dbRecord[dbKey] !== undefined) {\n      dbValue = dbRecord[dbKey];\n      break;\n    }\n  }\n\n  // Mostra il valore con evidenziazione se diverso\n  return (\n    <DiffHighlighter \n      newValue={importValue} \n      oldValue={dbValue}\n      showBoth={true}\n    />\n  );\n};\n\nexport default ImportTableCell; \nimport DiffHighlighter from './DiffHighlighter';\n\ninterface ImportTableCellProps {\n  item: Record<string, any>;\n  column: string;\n  dbRecord?: Record<string, any> | null;\n  fieldMappings?: Record<string, string[]>;\n  showDiff?: boolean;\n}\n\n/**\n * Componente cella per la tabella di importazione che mostra le differenze\n * tra i dati importati e quelli esistenti nel database\n */\nconst ImportTableCell: React.FC<ImportTableCellProps> = ({\n  item,\n  column,\n  dbRecord,\n  fieldMappings = {},\n  showDiff = true\n}) => {\n  // Se non c'è record DB o non si vuole mostrare le differenze, mostra solo il valore\n  if (!dbRecord || !showDiff) {\n    return <span>{item[column] !== undefined ? String(item[column]) : ''}</span>;\n  }\n\n  // Ottieni il valore importato\n  const importValue = item[column];\n  \n  // Ottieni possibili nomi di campi nel database per questa chiave CSV\n  const possibleKeys = fieldMappings[column] || [column];\n  \n  // Cerca il valore corrispondente nel database\n  let dbValue = undefined;\n  for (const dbKey of possibleKeys) {\n    if (dbRecord[dbKey] !== undefined) {\n      dbValue = dbRecord[dbKey];\n      break;\n    }\n  }\n\n  // Mostra il valore con evidenziazione se diverso\n  return (\n    <DiffHighlighter \n      newValue={importValue} \n      oldValue={dbValue}\n      showBoth={true}\n    />\n  );\n};\n\nexport default ImportTableCell; \nimport DiffHighlighter from './DiffHighlighter';\n\ninterface ImportTableCellProps {\n  item: Record<string, any>;\n  column: string;\n  dbRecord?: Record<string, any> | null;\n  fieldMappings?: Record<string, string[]>;\n  showDiff?: boolean;\n}\n\n/**\n * Componente cella per la tabella di importazione che mostra le differenze\n * tra i dati importati e quelli esistenti nel database\n */\nconst ImportTableCell: React.FC<ImportTableCellProps> = ({\n  item,\n  column,\n  dbRecord,\n  fieldMappings = {},\n  showDiff = true\n}) => {\n  // Se non c'è record DB o non si vuole mostrare le differenze, mostra solo il valore\n  if (!dbRecord || !showDiff) {\n    return <span>{item[column] !== undefined ? String(item[column]) : ''}</span>;\n  }\n\n  // Ottieni il valore importato\n  const importValue = item[column];\n  \n  // Ottieni possibili nomi di campi nel database per questa chiave CSV\n  const possibleKeys = fieldMappings[column] || [column];\n  \n  // Cerca il valore corrispondente nel database\n  let dbValue = undefined;\n  for (const dbKey of possibleKeys) {\n    if (dbRecord[dbKey] !== undefined) {\n      dbValue = dbRecord[dbKey];\n      break;\n    }\n  }\n\n  // Mostra il valore con evidenziazione se diverso\n  return (\n    <DiffHighlighter \n      newValue={importValue} \n      oldValue={dbValue}\n      showBoth={true}\n    />\n  );\n};\n\nexport default ImportTableCell; \nimport DiffHighlighter from './DiffHighlighter';\n\ninterface ImportTableCellProps {\n  item: Record<string, any>;\n  column: string;\n  dbRecord?: Record<string, any> | null;\n  fieldMappings?: Record<string, string[]>;\n  showDiff?: boolean;\n}\n\n/**\n * Componente cella per la tabella di importazione che mostra le differenze\n * tra i dati importati e quelli esistenti nel database\n */\nconst ImportTableCell: React.FC<ImportTableCellProps> = ({\n  item,\n  column,\n  dbRecord,\n  fieldMappings = {},\n  showDiff = true\n}) => {\n  // Se non c'è record DB o non si vuole mostrare le differenze, mostra solo il valore\n  if (!dbRecord || !showDiff) {\n    return <span>{item[column] !== undefined ? String(item[column]) : ''}</span>;\n  }\n\n  // Ottieni il valore importato\n  const importValue = item[column];\n  \n  // Ottieni possibili nomi di campi nel database per questa chiave CSV\n  const possibleKeys = fieldMappings[column] || [column];\n  \n  // Cerca il valore corrispondente nel database\n  let dbValue = undefined;\n  for (const dbKey of possibleKeys) {\n    if (dbRecord[dbKey] !== undefined) {\n      dbValue = dbRecord[dbKey];\n      break;\n    }\n  }\n\n  // Mostra il valore con evidenziazione se diverso\n  return (\n    <DiffHighlighter \n      newValue={importValue} \n      oldValue={dbValue}\n      showBoth={true}\n    />\n  );\n};\n\nexport default ImportTableCell; \nimport DiffHighlighter from './DiffHighlighter';\n\ninterface ImportTableCellProps {\n  item: Record<string, any>;\n  column: string;\n  dbRecord?: Record<string, any> | null;\n  fieldMappings?: Record<string, string[]>;\n  showDiff?: boolean;\n}\n\n/**\n * Componente cella per la tabella di importazione che mostra le differenze\n * tra i dati importati e quelli esistenti nel database\n */\nconst ImportTableCell: React.FC<ImportTableCellProps> = ({\n  item,\n  column,\n  dbRecord,\n  fieldMappings = {},\n  showDiff = true\n}) => {\n  // Se non c'è record DB o non si vuole mostrare le differenze, mostra solo il valore\n  if (!dbRecord || !showDiff) {\n    return <span>{item[column] !== undefined ? String(item[column]) : ''}</span>;\n  }\n\n  // Ottieni il valore importato\n  const importValue = item[column];\n  \n  // Ottieni possibili nomi di campi nel database per questa chiave CSV\n  const possibleKeys = fieldMappings[column] || [column];\n  \n  // Cerca il valore corrispondente nel database\n  let dbValue = undefined;\n  for (const dbKey of possibleKeys) {\n    if (dbRecord[dbKey] !== undefined) {\n      dbValue = dbRecord[dbKey];\n      break;\n    }\n  }\n\n  // Mostra il valore con evidenziazione se diverso\n  return (\n    <DiffHighlighter \n      newValue={importValue} \n      oldValue={dbValue}\n      showBoth={true}\n    />\n  );\n};\n\nexport default ImportTableCell; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/Notifications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/PageScaffold.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityArticle' is assigned a value but never used.","line":100,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport { \n  Download,\n  FileText,\n  Plus,\n  Upload\n} from 'lucide-react';\nimport EntityListLayout from '../layouts/EntityListLayout';\nimport {\n  SearchBar,\n  ViewModeToggle,\n  AddEntityDropdown,\n  ColumnSelector\n} from './ui';\nimport { FilterPanel } from '../../design-system/organisms/FilterPanel';\nimport { Dropdown } from '../../design-system/molecules/Dropdown';\n\nexport interface PageScaffoldProps {\n  /** Titolo della pagina */\n  title: string;\n  /** Descrizione della pagina */\n  description?: string;\n  /** Modalità di visualizzazione corrente */\n  viewMode: 'table' | 'grid';\n  /** Funzione chiamata quando cambia la modalità di visualizzazione */\n  onViewModeChange: (mode: 'table' | 'grid') => void;\n  /** Valore della barra di ricerca */\n  searchValue: string;\n  /** Funzione chiamata quando cambia il valore della ricerca */\n  onSearchChange: (value: string) => void;\n  /** Nome dell'entità singolare (es. \"azienda\", \"corso\") */\n  entityName: string;\n  /** Genere dell'entità ('m' o 'f') */\n  entityGender?: 'm' | 'f';\n  /** Funzione chiamata quando si vuole creare una nuova entità */\n  onCreateNew: () => void;\n  /** Funzione chiamata quando si vuole importare */\n  onImport?: () => void;\n  /** Funzione chiamata quando si vuole scaricare il template */\n  onDownloadTemplate?: () => void;\n  /** Funzione chiamata quando si vuole esportare tutto */\n  onExportAll?: () => void;\n  /** Definizioni delle colonne per il selettore di colonne */\n  columns?: Array<{key: string; label: string; required?: boolean}>;\n  /** Colonne nascoste */\n  hiddenColumns?: string[];\n  /** Funzione chiamata quando cambia la visibilità delle colonne */\n  onColumnVisibilityChange?: (columns: string[]) => void;\n  /** Ordinamento delle colonne */\n  columnOrder?: Record<string, number>;\n  /** Funzione chiamata quando cambia l'ordinamento delle colonne */\n  onColumnOrderChange?: (order: Record<string, number>) => void;\n  /** Se la pagina è in caricamento */\n  loading?: boolean;\n  /** Messaggio di errore */\n  error?: string;\n  /** Funzione per ricaricare i dati */\n  onRefresh?: () => void;\n  /** Funzione chiamata quando si clicca sul pulsante filtro */\n  onFilterClick?: () => void;\n  /** Se ci sono filtri attivi */\n  filtersActive?: boolean;\n  /** Contenuto principale della pagina */\n  children: ReactNode;\n}\n\n/**\n * Componente di scaffolding per le pagine con layout standard:\n * - Titolo e descrizione\n * - Controlli per la modalità di visualizzazione e azioni\n * - Barra di ricerca e filtri\n * - Contenuto principale (tabella o griglia)\n */\nconst PageScaffold: React.FC<PageScaffoldProps> = ({\n  title,\n  description,\n  viewMode,\n  onViewModeChange,\n  searchValue,\n  onSearchChange,\n  entityName,\n  entityGender = 'm',\n  onCreateNew,\n  onImport,\n  onDownloadTemplate,\n  onExportAll,\n  columns,\n  hiddenColumns,\n  onColumnVisibilityChange,\n  columnOrder,\n  onColumnOrderChange,\n  loading,\n  error,\n  onRefresh,\n  onFilterClick,\n  filtersActive,\n  children\n}) => {\n  // Determina l'articolo corretto in base al genere\n  const entityArticle = entityGender === 'f' ? 'Nuova' : 'Nuovo';\n  \n  // Opzioni per il dropdown Aggiungi\n  const addOptions = [\n    {\n      label: `Aggiungi ${entityName}`,\n      icon: <Plus className=\"h-4 w-4\" />,\n      onClick: onCreateNew\n    },\n    onImport && {\n      label: `Importa da CSV`,\n      icon: <Upload className=\"h-4 w-4\" />,\n      onClick: onImport\n    },\n    onDownloadTemplate && {\n      label: `Scarica template CSV`,\n      icon: <FileText className=\"h-4 w-4\" />,\n      onClick: onDownloadTemplate\n    }\n  ].filter(Boolean);\n  \n  return (\n    <EntityListLayout\n      title={title}\n      loading={loading}\n      error={error}\n      onRefresh={onRefresh}\n      headerContent={\n        <div className=\"flex flex-wrap items-center justify-between mb-4\">\n          <div>\n            {description && <p className=\"text-gray-500\">{description}</p>}\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <ViewModeToggle\n              viewMode={viewMode}\n              onChange={onViewModeChange}\n              gridLabel=\"Griglia\"\n              tableLabel=\"Tabella\"\n            />\n            \n            <AddEntityDropdown\n              label={`Aggiungi ${entityName}`}\n              options={addOptions}\n              icon={<Plus className=\"h-4 w-4\" />}\n              variant=\"primary\"\n            />\n          </div>\n        </div>\n      }\n      searchBarContent={\n        <div className=\"flex flex-col md:flex-row space-y-3 md:space-y-0 md:items-center md:justify-between mb-6\">\n          <div className=\"w-full md:max-w-xs\">\n            <SearchBar\n              value={searchValue}\n              onChange={onSearchChange}\n              placeholder={`Cerca ${entityName}...`}\n              onFilterClick={onFilterClick}\n              filtersActive={filtersActive}\n            />\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <FilterPanel />\n            \n            {columns && onColumnVisibilityChange && (\n              <ColumnSelector\n                columns={columns}\n                hiddenColumns={hiddenColumns || []}\n                onChange={onColumnVisibilityChange}\n                onOrderChange={onColumnOrderChange}\n                columnOrder={columnOrder}\n              />\n            )}\n          </div>\n        </div>\n      }\n    >\n      {/* Menu di azioni dropdown per mobile */}\n      <div className=\"mb-4 md:hidden\">\n        <Dropdown\n          variant=\"outline\"\n          label=\"Altre azioni\"\n          className=\"w-full\"\n          actions={[\n            onImport && {\n              label: 'Importa da CSV',\n              icon: <Upload className=\"h-4 w-4\" />,\n              onClick: onImport\n            },\n            onDownloadTemplate && {\n              label: 'Scarica template CSV',\n              icon: <Download className=\"h-4 w-4\" />,\n              onClick: onDownloadTemplate\n            },\n            onExportAll && {\n              label: 'Esporta tutto',\n              icon: <Download className=\"h-4 w-4\" />,\n              onClick: onExportAll\n            }\n          ].filter(Boolean)}\n        />\n      </div>\n      \n      {/* Contenuto principale */}\n      {children}\n    </EntityListLayout>\n  );\n};\n\nexport default PageScaffold;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/ResizableTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowUp' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowDown' is defined but never used.","line":2,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowUpDown' is defined but never used.","line":2,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GripHorizontal' is defined but never used.","line":2,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'saveTablePreferences' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[335,338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[335,338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[722,725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[722,725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1499,1502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1499,1502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1506,1509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1506,1509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dropTargetCol' is assigned a value but never used.","line":115,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4785,4788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4785,4788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleColumnDragStart' is assigned a value but never used.","line":250,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":250,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":254,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleColumnDragOver' is assigned a value but never used.","line":271,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":271,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleColumnDrop' is assigned a value but never used.","line":282,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":282,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleColumnDragEnd' is assigned a value but never used.","line":325,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleColumnVisibilityChange' is assigned a value but never used.","line":331,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'resetColumnWidths'. Either include it or remove the dependency array.","line":493,"column":6,"nodeType":"ArrayExpression","endLine":493,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [resetColumnWidths]","fix":{"range":[15632,15634],"text":"[resetColumnWidths]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'colIndex' is defined but never used.","line":521,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":521,"endColumn":48}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { ArrowUp, ArrowDown, ArrowUpDown, GripHorizontal, ChevronUp, ChevronDown } from 'lucide-react';\nimport { saveTablePreferences } from '../../services/userPreferences';\nimport { cn } from '../../design-system/utils';\n\nexport interface ResizableTableColumn<T = any> {\n  key: string;\n  label: string;\n  width?: number;\n  minWidth?: number;\n  sortable?: boolean;\n  hidden?: boolean;\n  order?: number;\n  renderHeader?: (col: ResizableTableColumn<T>) => React.ReactNode;\n  renderCell?: (row: T, col: ResizableTableColumn<T>, rowIndex: number) => React.ReactNode;\n}\n\nexport type SortDirection = 'asc' | 'desc' | null;\n\ninterface ResizableTableProps<T = any> {\n  columns: ResizableTableColumn<T>[];\n  data: T[];\n  tableProps?: React.TableHTMLAttributes<HTMLTableElement>;\n  tbodyProps?: React.HTMLAttributes<HTMLTableSectionElement>;\n  onWidthsChange?: (widths: Record<string, number>) => void;\n  initialWidths?: Record<string, number>;\n  onRowClick?: (row: T) => void;\n  rowClassName?: (row: T, index: number) => string;\n  onSort?: (key: string, direction: SortDirection) => void;\n  sortKey?: string;\n  sortDirection?: SortDirection;\n  onColumnVisibilityChange?: (hiddenColumns: string[]) => void;\n  hiddenColumns?: string[];\n  onColumnOrderChange?: (columnOrder: Record<string, number>) => void;\n  columnOrder?: Record<string, number>;\n  tableName?: string;\n  zebra?: boolean;\n}\n\nconst ResizableTable = <T extends Record<string, any> = any>({\n  columns,\n  data,\n  tableProps = {},\n  tbodyProps = {},\n  onWidthsChange,\n  initialWidths = {},\n  onRowClick,\n  rowClassName,\n  onSort,\n  sortKey,\n  sortDirection,\n  onColumnVisibilityChange,\n  hiddenColumns = [],\n  onColumnOrderChange,\n  columnOrder = {},\n  tableName = 'table',\n  zebra = false,\n}: ResizableTableProps<T>) => {\n  // Attempt to load preferences from local storage first\n  const getInitialState = () => {\n    if (typeof window === 'undefined') {\n      return {\n        loadedWidths: {},\n        loadedHiddenColumns: [],\n        loadedColumnOrder: {},\n      };\n    }\n    \n    try {\n      return {\n        loadedWidths: JSON.parse(localStorage.getItem(`${tableName}-column-widths`) || '{}'),\n        loadedHiddenColumns: JSON.parse(localStorage.getItem(`${tableName}-hidden-columns`) || '[]'),\n        loadedColumnOrder: JSON.parse(localStorage.getItem(`${tableName}-column-order`) || '{}'),\n      };\n    } catch (e) {\n      console.error(\"Error parsing localStorage:\", e);\n      return {\n        loadedWidths: {},\n        loadedHiddenColumns: [],\n        loadedColumnOrder: {},\n      };\n    }\n  };\n  \n  const { loadedWidths, loadedHiddenColumns, loadedColumnOrder } = getInitialState();\n  \n  // Set default widths from column definitions\n  const defaultWidths = Object.fromEntries(\n    columns.map((col) => [col.key, col.width || 120])\n  );\n  \n  // Initialize with saved data or defaults\n  const [colWidths, setColWidths] = useState<Record<string, number>>({ \n    ...defaultWidths, \n    ...loadedWidths,\n    ...initialWidths \n  });\n  \n  const [localHiddenColumns, setLocalHiddenColumns] = useState<string[]>(\n    hiddenColumns.length > 0 ? hiddenColumns : loadedHiddenColumns\n  );\n  \n  const [effectiveColumnOrder, setEffectiveColumnOrder] = useState(\n    Object.keys(columnOrder).length > 0 ? columnOrder : loadedColumnOrder\n  );\n  \n  // Refs for resize handling\n  const resizingCol = useRef<string | null>(null);\n  const startX = useRef<number>(0);\n  const startWidth = useRef<number>(0);\n  const tableContainerRef = useRef<HTMLDivElement>(null);\n  \n  // Handle column dragging\n  const [draggingCol, setDraggingCol] = useState<string | null>(null);\n  const [dropTargetCol, setDropTargetCol] = useState<string | null>(null);\n  \n  const minColWidth = 50; // Minimum column width\n  \n  // Array of visible columns (not hidden)\n  const visibleColumns = useMemo(() => {\n    return columns.filter(col => !localHiddenColumns.includes(col.key));\n  }, [columns, localHiddenColumns]);\n  \n  // Check if column is the last visible one\n  const isLastVisibleColumn = (col: ResizableTableColumn<T>) => {\n    const lastCol = visibleColumns[visibleColumns.length - 1];\n    return lastCol && lastCol.key === col.key;\n  };\n  \n  // Sort columns by order\n  const orderedColumns = [...columns].sort((a, b) => {\n    const orderA = effectiveColumnOrder[a.key] ?? columns.findIndex(c => c.key === a.key);\n    const orderB = effectiveColumnOrder[b.key] ?? columns.findIndex(c => c.key === b.key);\n    return orderA - orderB;\n  });\n  \n  // Filter out hidden columns\n  const sortedColumns = orderedColumns.filter(col => !localHiddenColumns.includes(col.key));\n  \n  // Save preferences to localStorage only\n  const savePreferences = (type: 'widths' | 'hiddenColumns' | 'order', data: any) => {\n    // Only save to localStorage - no API calls\n    if (typeof window === 'undefined') return;\n    \n    try {\n      if (type === 'widths') {\n        localStorage.setItem(`${tableName}-column-widths`, JSON.stringify(data));\n      } else if (type === 'hiddenColumns') {\n        localStorage.setItem(`${tableName}-hidden-columns`, JSON.stringify(data));\n      } else if (type === 'order') {\n        localStorage.setItem(`${tableName}-column-order`, JSON.stringify(data));\n      }\n    } catch (error) {\n      // Silent error handling\n      console.error('Failed to save preferences to localStorage:', error);\n    }\n  };\n  \n  // Handle column resize start with improved event handling\n  const handleResizeStart = (colKey: string, e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Set the active column being resized\n    resizingCol.current = colKey;\n    startX.current = e.clientX;\n    startWidth.current = colWidths[colKey] || columns.find(c => c.key === colKey)?.width || 120;\n    \n    // Setup mouse move and mouse up handlers\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!resizingCol.current) return;\n      e.preventDefault();\n      e.stopPropagation();\n      \n      // Get the current width and calculate difference\n      const diff = e.clientX - startX.current;\n      \n      // Calculate new width with a minimum to ensure columns stay visible\n      const newWidth = Math.max(startWidth.current + diff, minColWidth);\n      \n      // Update the width in state\n      setColWidths(prev => ({\n        ...prev,\n        [resizingCol.current!]: newWidth\n      }));\n    };\n    \n    const handleMouseUp = () => {\n      if (!resizingCol.current) return;\n      \n      // Create a new widths object with the updated width\n      const updatedWidths = {\n        ...colWidths,\n        [resizingCol.current]: colWidths[resizingCol.current!] || defaultWidths[resizingCol.current!]\n      };\n      \n      // Save the new width to localStorage\n      savePreferences('widths', updatedWidths);\n      \n      // Notify parent if needed\n      if (onWidthsChange) {\n        onWidthsChange(updatedWidths);\n      }\n      \n      // Reset the resizing column state\n      resizingCol.current = null;\n      document.body.style.cursor = '';\n      \n      // Remove the event listeners\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n    \n    // Apply cursor to whole document while resizing\n    document.body.style.cursor = 'col-resize';\n    \n    // Add event listeners\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Handle column sort click\n  const handleSortClick = (colKey: string) => {\n    if (!onSort) return;\n    \n    let direction: SortDirection = 'asc';\n    if (sortKey === colKey) {\n      // Toggle between asc and desc only (eliminating null state)\n      direction = sortDirection === 'asc' ? 'desc' : 'asc';\n    }\n    \n    onSort(colKey, direction);\n  };\n  \n  // Render column header content\n  const renderColumnHeader = (col: ResizableTableColumn<T>) => {\n    if (col.renderHeader) {\n      return col.renderHeader(col);\n    }\n    \n    // Default rendering\n    return (\n      <div className=\"flex items-center justify-between w-full\">\n        <span className=\"font-semibold truncate\">{col.label}</span>\n      </div>\n    );\n  };\n\n  // Handle column drag start\n  const handleColumnDragStart = (colKey: string, e: React.DragEvent) => {\n    e.dataTransfer.effectAllowed = 'move';\n    try {\n      e.dataTransfer.setData('text/plain', colKey);\n    } catch (err) {\n      // Fallback for IE\n      e.dataTransfer.setData('text', colKey);\n    }\n    \n    setDraggingCol(colKey);\n    \n    // Hide preview image\n    const dragIcon = document.createElement('div');\n    dragIcon.style.position = 'absolute';\n    dragIcon.style.top = '-9999px';\n    document.body.appendChild(dragIcon);\n    e.dataTransfer.setDragImage(dragIcon, 0, 0);\n    setTimeout(() => document.body.removeChild(dragIcon), 0);\n  };\n\n  // Handle column drag over\n  const handleColumnDragOver = (colKey: string, e: React.DragEvent) => {\n    e.preventDefault();\n    if (draggingCol === colKey || !draggingCol) return;\n    \n    setDropTargetCol(colKey);\n    \n    // Set the dropEffect to move\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  // Handle column drop\n  const handleColumnDrop = (colKey: string, e: React.DragEvent) => {\n    e.preventDefault();\n    if (draggingCol === colKey || !draggingCol) return;\n    \n    // Get the current order values\n    const sourceIdx = sortedColumns.findIndex(c => c.key === draggingCol);\n    const targetIdx = sortedColumns.findIndex(c => c.key === colKey);\n    \n    if (sourceIdx === -1 || targetIdx === -1) return;\n    \n    // Create new order with swapped values\n    const newOrder = { ...effectiveColumnOrder };\n    \n    // Adjust the order of columns between source and target\n    if (sourceIdx < targetIdx) {\n      // Moving right - all columns between source and target move left\n      for (let i = sourceIdx + 1; i <= targetIdx; i++) {\n        newOrder[sortedColumns[i].key] = i - 1;\n      }\n    } else {\n      // Moving left - all columns between target and source move right\n      for (let i = targetIdx; i < sourceIdx; i++) {\n        newOrder[sortedColumns[i].key] = i + 1;\n      }\n    }\n    \n    // Set the dragged column to the target position\n    newOrder[draggingCol] = targetIdx;\n    \n    setEffectiveColumnOrder(newOrder);\n    if (onColumnOrderChange) {\n      onColumnOrderChange(newOrder);\n    }\n    \n    // Save to localStorage\n    savePreferences('order', newOrder);\n    \n    // Reset drag state\n    setDraggingCol(null);\n    setDropTargetCol(null);\n  };\n\n  // Handle column drag end\n  const handleColumnDragEnd = () => {\n    setDraggingCol(null);\n    setDropTargetCol(null);\n  };\n\n  // Handle column visibility change\n  const handleColumnVisibilityChange = (newHiddenColumns: string[]) => {\n    setLocalHiddenColumns(newHiddenColumns);\n    \n    if (onColumnVisibilityChange) {\n      onColumnVisibilityChange(newHiddenColumns);\n    }\n    \n    // Save to localStorage\n    savePreferences('hiddenColumns', newHiddenColumns);\n  };\n\n  // Apply column visibility changes from external sources\n  useEffect(() => {\n    if (hiddenColumns.length > 0) {\n      setLocalHiddenColumns(hiddenColumns);\n    }\n  }, [hiddenColumns]);\n  \n  // Apply column order changes from external sources\n  useEffect(() => {\n    if (Object.keys(columnOrder).length > 0) {\n      setEffectiveColumnOrder(columnOrder);\n    }\n  }, [columnOrder]);\n  \n  // Apply width changes from external sources\n  useEffect(() => {\n    if (Object.keys(initialWidths).length > 0) {\n      setColWidths(prev => ({\n        ...prev,\n        ...initialWidths\n      }));\n    }\n  }, [initialWidths]);\n  \n  // Render table header cell with sorting and resizing\n  const renderHeaderCell = (col: ResizableTableColumn<T>) => {\n    // Don't render header cell for hidden columns\n    if (col.hidden || localHiddenColumns.includes(col.key)) {\n      return null;\n    }\n    \n    const width = colWidths[col.key] || col.width || 200;\n    const isSorted = sortKey === col.key;\n    \n    const onSortClick = () => {\n      if (!col.sortable) return;\n      handleSortClick(col.key);\n    };\n    \n    return (\n      <th \n        key={col.key}\n        style={{ \n          width: `${width}px`, \n          minWidth: `${width}px`,\n        }}\n        className={cn(\n          'relative px-4 py-3 select-none border-b border-blue-100',\n          'font-medium text-left text-sm',\n          isSorted ? 'bg-blue-100' : '',\n        )}\n      >\n        <div \n          className={cn(\n            'flex items-center gap-1',\n            col.sortable ? 'cursor-pointer group' : ''\n          )}\n          onClick={col.sortable ? onSortClick : undefined}\n        >\n          {renderColumnHeader(col)}\n          \n          {col.sortable && (\n            <div className={cn(\n              'flex-shrink-0 h-4 w-4 opacity-0 group-hover:opacity-70',\n              isSorted ? 'opacity-100 text-blue-600' : ''\n            )}>\n              {isSorted ? (\n                sortDirection === 'asc' ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />\n              ) : null}\n            </div>\n          )}\n        </div>\n        \n        {/* Resize handle */}\n        {!isLastVisibleColumn(col) && (\n          <div\n            className={cn(\n              \"absolute right-0 top-0 bottom-0 w-3 cursor-col-resize z-20 hover:bg-blue-400 hover:opacity-50\",\n              \"flex items-center justify-center group\"\n            )}\n            onMouseDown={(e) => handleResizeStart(col.key, e)}\n          >\n            <div className=\"w-px h-4/5 bg-blue-200 group-hover:bg-white\"></div>\n          </div>\n        )}\n      </th>\n    );\n  };\n  \n  // Render table cell with proper content\n  const renderCell = (row: T, col: ResizableTableColumn<T>, rowIndex: number) => {\n    // Don't render cell for hidden columns\n    if (col.hidden || localHiddenColumns.includes(col.key)) {\n      return null;\n    }\n    \n    const width = colWidths[col.key] || col.width || 200;\n    const isLastColumn = isLastVisibleColumn(col);\n    const isFirstColumn = col.key === 'actions';\n    \n    const rowBgClass = zebra && rowIndex % 2 === 1 ? 'bg-gray-50' : 'bg-white';\n    \n    return (\n      <td \n        key={`${rowIndex}-${col.key}`}\n        style={{ \n          width: `${width}px`, \n          minWidth: `${width}px`,\n          maxWidth: `${width}px`,\n        }}\n        className={cn(\n          'px-4 py-3 overflow-hidden text-sm text-gray-700 align-middle',\n          isFirstColumn ? 'sticky left-0 z-20' : '',\n          isLastColumn ? 'sticky right-0 z-10' : '', \n          rowBgClass\n        )}\n      >\n        {col.renderCell ? (\n          col.renderCell(row, col, rowIndex)\n        ) : (\n          <div className=\"truncate\">\n            {String(row[col.key as keyof T] ?? '')}\n          </div>\n        )}\n      </td>\n    );\n  };\n  \n  // Utility function to reset column widths in localStorage\n  const resetColumnWidths = () => {\n    const itemsToRemove = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.includes('-column-widths')) {\n        itemsToRemove.push(key);\n      }\n    }\n    \n    itemsToRemove.forEach(key => {\n      localStorage.removeItem(key);\n    });\n    \n    // Non ricaricare la pagina per evitare loop infiniti\n    // Reimpostare solo lo stato delle larghezze\n    setColWidths({...defaultWidths, ...initialWidths});\n  };\n  \n  // Esegui il reset una sola volta all'avvio per risolvere il problema\n  useEffect(() => {\n    resetColumnWidths();\n    // Importante: Il secondo parametro vuoto [] indica che l'effetto viene eseguito solo una volta\n  }, []);\n  \n  return (\n    <div className=\"overflow-x-auto rounded-lg border border-gray-200 shadow-sm\" ref={tableContainerRef}>\n      <table \n        {...tableProps} \n        className={cn(\n          'w-full border-collapse border-spacing-0',\n          tableProps?.className\n        )}\n      >\n        <thead className=\"bg-blue-50 text-blue-900 sticky top-0 z-10\">\n          <tr>\n            {sortedColumns.map(col => renderHeaderCell(col))}\n          </tr>\n        </thead>\n        <tbody {...tbodyProps}>\n          {data.map((row, rowIndex) => (\n            <tr\n              key={row.id || rowIndex}\n              onClick={onRowClick ? () => onRowClick(row) : undefined}\n              className={cn(\n                'border-b border-gray-200 last:border-0 whitespace-nowrap',\n                zebra && rowIndex % 2 === 1 ? 'bg-gray-50' : 'bg-white',\n                rowClassName ? rowClassName(row, rowIndex) : '',\n                onRowClick ? 'cursor-pointer hover:bg-gray-50' : ''\n              )}\n            >\n              {sortedColumns.map((col, colIndex) => renderCell(row, col, rowIndex))}\n            </tr>\n          ))}\n          \n          {data.length === 0 && (\n            <tr>\n              <td \n                colSpan={sortedColumns.length} \n                className=\"p-6 text-center text-gray-500\"\n              >\n                Nessun dato disponibile\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ResizableTable;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/TabNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/cards/EntityCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onViewDetails' is defined but never used.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onEdit' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onDelete' is defined but never used.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":11}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { MoreVertical } from 'lucide-react';\n\ninterface DataItem {\n  label: string;\n  value: string;\n}\n\ninterface CardAction {\n  icon: React.ReactNode;\n  label: string;\n  onClick: (e: React.MouseEvent) => void;\n}\n\ninterface CardDetail {\n  icon: React.ReactNode;\n  text: string;\n}\n\ninterface EntityCardProps {\n  id?: string;\n  title: string;\n  subtitle?: React.ReactNode;\n  icon?: React.ReactNode;\n  extraInfo?: React.ReactNode;\n  statusBadge?: React.ReactNode;\n  actionButton?: React.ReactNode;\n  bgGradient?: string;\n  gradientHeight?: number;\n  detailUrl?: string;\n  onClick?: () => void;\n  selected?: boolean;\n  onSelect?: () => void;\n  selectable?: boolean;\n  selectionMode?: boolean;\n  onViewDetails?: () => void;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  data?: DataItem[];\n  /** Azioni che appaiono nel menu a comparsa */\n  actions?: CardAction[];\n  /** Righe di dettaglio che appaiono alla base della card */\n  details?: CardDetail[];\n  /** Colore di sfondo dell'icona */\n  iconBgColor?: string;\n}\n\nconst EntityCard: React.FC<EntityCardProps> = ({\n  id,\n  title,\n  subtitle,\n  icon,\n  extraInfo,\n  statusBadge,\n  actionButton,\n  bgGradient = 'from-blue-500 to-blue-600',\n  gradientHeight = 40,\n  detailUrl,\n  onClick,\n  selected = false,\n  onSelect,\n  selectionMode = false,\n  onViewDetails,\n  onEdit,\n  onDelete,\n  data,\n  actions,\n  details,\n  iconBgColor = 'bg-blue-500',\n}) => {\n  const [showActions, setShowActions] = React.useState(false);\n  \n  const toggleActions = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    setShowActions(!showActions);\n  };\n  \n  const cardContent = (\n    <div \n      className={`relative bg-white rounded-xl shadow-sm overflow-hidden transition-all duration-200 hover:shadow-md ${\n        selected ? 'ring-2 ring-blue-400 shadow-md' : ''\n      }`}\n    >\n      {/* Top gradient (mostrato solo se gradientHeight > 0) */}\n      {gradientHeight > 0 && (\n        <div \n          className={`w-full bg-gradient-to-r ${bgGradient}`} \n          style={{ height: `${gradientHeight}px` }} \n        />\n      )}\n      \n      {/* Selection checkbox */}\n      {selectionMode && onSelect && (\n        <div \n          className=\"absolute top-2 right-2 z-10\"\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onSelect();\n          }}\n        >\n          <input \n            type=\"checkbox\" \n            checked={selected} \n            onChange={() => {}} \n            className=\"w-4 h-4 accent-blue-600\"\n          />\n        </div>\n      )}\n      \n      {/* Azioni dropdown */}\n      {actions && actions.length > 0 && (\n        <div className=\"absolute top-2 right-2 z-10\">\n          <button \n            onClick={toggleActions}\n            className=\"p-1 rounded-full bg-white/80 hover:bg-white text-gray-600 hover:text-gray-900 focus:outline-none\"\n          >\n            <MoreVertical className=\"h-5 w-5\" />\n          </button>\n          \n          {/* Menu azioni */}\n          {showActions && (\n            <div className=\"absolute right-0 mt-1 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-20\">\n              <div className=\"py-1\" role=\"menu\" aria-orientation=\"vertical\">\n                {actions.map((action, index) => (\n                  <button\n                    key={index}\n                    className=\"flex w-full items-center px-4 py-2 text-sm text-left text-gray-700 hover:bg-gray-100\"\n                    role=\"menuitem\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      action.onClick(e);\n                      setShowActions(false);\n                    }}\n                  >\n                    {action.icon && <span className=\"mr-3\">{action.icon}</span>}\n                    {action.label}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Content */}\n      <div className=\"p-4\">\n        <div className=\"flex items-start gap-3\">\n          {icon && (\n            <div className={`shrink-0 flex items-center justify-center p-2 rounded-md ${iconBgColor} text-white h-10 w-10`}>\n              {icon}\n            </div>\n          )}\n          \n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"text-lg font-semibold text-gray-800 truncate\">{title}</h3>\n            \n            {subtitle && (\n              <div className=\"mt-1 text-gray-600 truncate\">\n                {subtitle}\n              </div>\n            )}\n            \n            {extraInfo && (\n              <div className=\"mt-2 text-sm text-gray-600\">\n                {extraInfo}\n              </div>\n            )}\n            \n            {/* Dati con etichette e valori */}\n            {data && data.length > 0 && (\n              <div className=\"mt-3 space-y-1.5\">\n                {data.map((item, index) => (\n                  <div key={index} className=\"flex items-baseline text-sm\">\n                    <span className=\"font-medium text-gray-500 w-20\">{item.label}:</span>\n                    <span className=\"text-gray-700 truncate\">{item.value}</span>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          {statusBadge && (\n            <div className=\"shrink-0 ml-auto\">\n              {statusBadge}\n            </div>\n          )}\n        </div>\n        \n        {/* Dettagli */}\n        {details && details.length > 0 && (\n          <div className=\"mt-3 space-y-1.5 pt-3 border-t border-gray-100\">\n            {details.map((detail, index) => (\n              <div key={index} className=\"flex items-center text-sm text-gray-600\">\n                {detail.icon && <span className=\"mr-2 text-gray-400\">{detail.icon}</span>}\n                <span className=\"truncate\">{detail.text}</span>\n              </div>\n            ))}\n          </div>\n        )}\n        \n        {actionButton && (\n          <div className=\"mt-4 flex justify-end\">\n            {actionButton}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n  \n  if (detailUrl) {\n    return (\n      <Link \n        to={detailUrl} \n        className=\"block\"\n        onClick={(e) => {\n          if (selectionMode && onSelect) {\n            e.preventDefault();\n            onSelect();\n          } else if (onClick) {\n            e.preventDefault();\n            onClick();\n          }\n        }}\n      >\n        {cardContent}\n      </Link>\n    );\n  }\n  \n  return (\n    <div \n      onClick={onClick} \n      className={onClick ? \"cursor-pointer\" : \"\"}\n    >\n      {cardContent}\n    </div>\n  );\n};\n\nexport default EntityCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/filters/FilterBuilder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/filters/FilterPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[455,458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[455,458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[497,500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[497,500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[698,701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[698,701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Filter, X } from 'lucide-react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { cn } from '../../../design-system/utils';\n\ninterface FilterConfig {\n  key: string;\n  label: string;\n  type: 'text' | 'select' | 'date' | 'number' | 'boolean';\n  options?: { value: string; label: string }[];\n  placeholder?: string;\n}\n\ninterface FilterPanelProps {\n  filters: FilterConfig[];\n  values: Record<string, any>;\n  onChange: (values: Record<string, any>) => void;\n  className?: string;\n}\n\nexport const FilterPanel: React.FC<FilterPanelProps> = ({\n  filters,\n  values,\n  onChange,\n  className\n}) => {\n  const handleFilterChange = (key: string, value: any) => {\n    onChange({\n      ...values,\n      [key]: value\n    });\n  };\n\n  const handleClearFilter = (key: string) => {\n    const newValues = { ...values };\n    delete newValues[key];\n    onChange(newValues);\n  };\n\n  const handleClearAll = () => {\n    onChange({});\n  };\n\n  const hasActiveFilters = Object.keys(values).length > 0;\n\n  const renderFilterInput = (filter: FilterConfig) => {\n    const value = values[filter.key] || '';\n\n    switch (filter.type) {\n      case 'select':\n        return (\n          <select\n            value={value}\n            onChange={(e) => handleFilterChange(filter.key, e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n          >\n            <option value=\"\">{filter.placeholder || `Seleziona ${filter.label.toLowerCase()}`}</option>\n            {filter.options?.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        );\n\n      case 'date':\n        return (\n          <input\n            type=\"date\"\n            value={value}\n            onChange={(e) => handleFilterChange(filter.key, e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n          />\n        );\n\n      case 'number':\n        return (\n          <input\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFilterChange(filter.key, e.target.value)}\n            placeholder={filter.placeholder}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n          />\n        );\n\n      case 'boolean':\n        return (\n          <select\n            value={value}\n            onChange={(e) => handleFilterChange(filter.key, e.target.value === 'true')}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n          >\n            <option value=\"\">{filter.placeholder || `Seleziona ${filter.label.toLowerCase()}`}</option>\n            <option value=\"true\">Sì</option>\n            <option value=\"false\">No</option>\n          </select>\n        );\n\n      default:\n        return (\n          <input\n            type=\"text\"\n            value={value}\n            onChange={(e) => handleFilterChange(filter.key, e.target.value)}\n            placeholder={filter.placeholder}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n          />\n        );\n    }\n  };\n\n  return (\n    <div className={cn('bg-gray-50 border border-gray-200 rounded-lg p-4', className)}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Filter className=\"h-4 w-4 text-gray-500\" />\n          <span className=\"text-sm font-medium text-gray-700\">Filtri</span>\n        </div>\n        \n        {hasActiveFilters && (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleClearAll}\n            className=\"text-xs\"\n          >\n            Cancella tutti\n          </Button>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {filters.map(filter => (\n          <div key={filter.key} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                {filter.label}\n              </label>\n              {values[filter.key] && (\n                <button\n                  onClick={() => handleClearFilter(filter.key)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <X className=\"h-3 w-3\" />\n                </button>\n              )}\n            </div>\n            {renderFilterInput(filter)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FilterPanel;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/filters/TableFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/form/EntityFormField.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1619,1622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1619,1622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, ReactNode } from 'react';\n\ntype FieldType = 'text' | 'textarea' | 'number' | 'email' | 'password' | 'select' | 'checkbox' | 'radio' | 'date' | 'tel';\n\ninterface Option {\n  value: string;\n  label: string;\n}\n\ninterface EntityFormFieldProps {\n  /** Nome del campo (usato come id e name) */\n  name: string;\n  /** Label da visualizzare */\n  label: string;\n  /** Tipo di campo */\n  type?: FieldType;\n  /** Valore corrente */\n  value: string | number | boolean | undefined;\n  /** Handler per il cambio valore */\n  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\n  /** Se il campo è obbligatorio */\n  required?: boolean;\n  /** Placeholder da visualizzare */\n  placeholder?: string;\n  /** Messaggio di errore */\n  error?: string;\n  /** Classi CSS aggiuntive */\n  className?: string;\n  /** Opzioni per select */\n  options?: Option[];\n  /** Se il campo è disabilitato */\n  disabled?: boolean;\n  /** Se il campo è in sola lettura */\n  readOnly?: boolean;\n  /** Numero di righe per textarea */\n  rows?: number;\n  /** Icona da visualizzare a sinistra dell'input */\n  leftIcon?: ReactNode;\n  /** Icona da visualizzare a destra dell'input */\n  rightIcon?: ReactNode;\n  /** Dimensione del campo */\n  size?: 'sm' | 'md' | 'lg';\n  /** Stile dell'input */\n  variant?: 'default' | 'pill';\n  /** Testo di aiuto aggiuntivo */\n  helpText?: string;\n  /** Se il campo select è ricercabile */\n  searchable?: boolean;\n  /** Se il campo deve essere multilinea (textarea) */\n  multiline?: boolean;\n  /** Proprietà HTML aggiuntive */\n  [key: string]: any;\n}\n\n/**\n * Campo form standardizzato per l'interfaccia utente\n */\nconst EntityFormField: React.FC<EntityFormFieldProps> = ({\n  name,\n  label,\n  type = 'text',\n  value,\n  onChange,\n  required = false,\n  placeholder,\n  error,\n  className = '',\n  options = [],\n  disabled = false,\n  readOnly = false,\n  rows = 3,\n  leftIcon,\n  rightIcon,\n  size = 'md',\n  variant = 'default',\n  helpText,\n  searchable = false,\n  multiline = false,\n  ...rest\n}) => {\n  // Se multiline è true, forza il tipo a textarea\n  const fieldType = multiline ? 'textarea' : type;\n  // State for select search\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const selectRef = useRef<HTMLSelectElement>(null);\n  \n  // Ensure value is properly formatted for display\n  const displayValue = value !== undefined && value !== null ? String(value) : '';\n  \n  // Get display label for select options\n  const getOptionLabel = () => {\n    if (!value || !options.length) return '';\n    const option = options.find(opt => opt.value === String(value));\n    return option ? option.label : '';\n  };\n  \n  // Reset search term when value changes or component mounts\n  useEffect(() => {\n    if (fieldType === 'select' && searchable && value) {\n      setSearchTerm('');\n    }\n  }, [value, fieldType, searchable]);\n  \n  // Handle direct input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    console.log(`Field ${name} changed:`, e.target.value);\n    onChange(e);\n  };\n  \n  // Handle search input change\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n    setIsDropdownOpen(true);\n  };\n  \n  // Handle dropdown option click\n  const handleOptionClick = (optionValue: string) => {\n    // Create synthetic event for onChange handler\n    const syntheticEvent = {\n      target: {\n        name,\n        value: optionValue\n      }\n    } as React.ChangeEvent<HTMLSelectElement>;\n    \n    onChange(syntheticEvent);\n    setSearchTerm('');\n    setIsDropdownOpen(false);\n  };\n  \n  // Dimensioni del campo in base alla proprietà size\n  const sizeClasses = {\n    sm: 'h-8 text-xs',\n    md: 'h-10 text-sm',\n    lg: 'h-12 text-base',\n  };\n  \n  // Stile dell'input in base alla variante\n  const variantClasses = {\n    default: 'rounded-md',\n    pill: 'rounded-full',\n  };\n  \n  // Classe base per gli input\n  const baseInputClass = `\n    block w-full border \n    ${error ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500'} \n    ${disabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : 'bg-white'} \n    ${readOnly ? 'bg-gray-50' : ''}\n    shadow-sm focus:outline-none focus:ring-2 \n    transition-colors duration-200\n    ${variantClasses[variant]}\n    ${fieldType !== 'textarea' ? sizeClasses[size] : ''}\n    ${leftIcon ? 'pl-10' : ''}\n    ${rightIcon ? 'pr-10' : ''}\n  `;\n  \n  // Classi per checkbox/radio\n  const checkboxClass = `\n    h-5 w-5 \n    ${error ? 'border-red-300 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'} \n    rounded\n    ${disabled ? 'bg-gray-100 text-gray-400' : 'text-blue-600'}\n    transition-colors duration-200\n  `;\n  \n  // Renderizza il campo appropriato in base al tipo\n  const renderField = () => {\n    switch (fieldType) {\n      case 'textarea':\n        return (\n          <textarea\n            id={name}\n            name={name}\n            value={displayValue}\n            onChange={handleInputChange}\n            className={`${baseInputClass} py-2 px-3 resize-none`}\n            rows={rows}\n            placeholder={placeholder}\n            disabled={disabled}\n            readOnly={readOnly}\n            required={required}\n            {...rest}\n          />\n        );\n        \n      case 'select':\n        if (searchable) {\n          // Filter options based on search term\n          const filteredOptions = options.filter(option => \n            option.label.toLowerCase().includes(searchTerm.toLowerCase())\n          );\n          \n          return (\n            <div className=\"relative\">\n              {leftIcon && (\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400\">\n                  {leftIcon}\n                </div>\n              )}\n              <input\n                ref={inputRef}\n                type=\"text\"\n                className={`${baseInputClass} px-3 cursor-pointer pr-8`}\n                placeholder={placeholder || 'Cerca...'}\n                onClick={() => setIsDropdownOpen(true)}\n                onFocus={() => setIsDropdownOpen(true)}\n                onBlur={() => setTimeout(() => setIsDropdownOpen(false), 200)}\n                onChange={handleSearchChange}\n                value={isDropdownOpen ? searchTerm : getOptionLabel() || searchTerm}\n                readOnly={disabled}\n                disabled={disabled}\n              />\n              <div \n                className=\"absolute inset-y-0 right-0 flex items-center pr-2 cursor-pointer\"\n                onClick={() => {\n                  setIsDropdownOpen(!isDropdownOpen);\n                  if (!isDropdownOpen && inputRef.current) {\n                    inputRef.current.focus();\n                  }\n                }}\n              >\n                <svg className=\"h-5 w-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"none\" stroke=\"currentColor\">\n                  <path d=\"M7 7l3-3 3 3m0 6l-3 3-3-3\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                </svg>\n              </div>\n              \n              {isDropdownOpen && (\n                <div className=\"absolute z-10 mt-1 w-full bg-white shadow-lg rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto max-h-60\">\n                  <div className=\"max-h-60 overflow-y-auto\">\n                    {filteredOptions.length === 0 ? (\n                      <div className=\"px-3 py-2 text-gray-500\">Nessun risultato</div>\n                    ) : (\n                      filteredOptions.map((option) => (\n                        <div\n                          key={option.value}\n                          className={`px-3 py-2 cursor-pointer hover:bg-blue-50 ${\n                            value === option.value ? 'bg-blue-50' : ''\n                          }`}\n                          onClick={() => handleOptionClick(option.value)}\n                        >\n                          {option.label}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              )}\n              \n              {/* Hidden select for form submission - actually hidden now */}\n              <select\n                ref={selectRef}\n                name={name}\n                value={displayValue}\n                onChange={handleInputChange}\n                className=\"hidden\"\n                required={required}\n                disabled={disabled}\n              >\n                <option value=\"\">Seleziona...</option>\n                {options.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          );\n        }\n        \n        return (\n          <div className=\"relative\">\n            {leftIcon && (\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400\">\n                {leftIcon}\n              </div>\n            )}\n            <select\n              id={name}\n              name={name}\n              value={displayValue}\n              onChange={handleInputChange}\n              className={`${baseInputClass} px-3 pr-8 appearance-none`}\n              disabled={disabled}\n              required={required}\n              {...rest}\n            >\n              <option value=\"\">{placeholder || 'Seleziona...'}</option>\n              {options.map((option) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <div className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n              <svg className=\"h-5 w-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"none\" stroke=\"currentColor\">\n                <path d=\"M7 7l3 3 3-3\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n              </svg>\n            </div>\n          </div>\n        );\n        \n      case 'checkbox':\n        return (\n          <div className=\"flex items-center\">\n            <input\n              id={name}\n              name={name}\n              type=\"checkbox\"\n              checked={Boolean(value)}\n              onChange={handleInputChange}\n              className={checkboxClass}\n              disabled={disabled}\n              required={required}\n              {...rest}\n            />\n          </div>\n        );\n        \n      case 'radio':\n        return (\n          <div className=\"flex items-center\">\n            <input\n              id={name}\n              name={name}\n              type=\"radio\"\n              checked={Boolean(value)}\n              onChange={handleInputChange}\n              className={`${checkboxClass} rounded-full`}\n              disabled={disabled}\n              required={required}\n              {...rest}\n            />\n          </div>\n        );\n        \n      default:\n        return (\n          <div className=\"relative\">\n            {leftIcon && (\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400\">\n                {leftIcon}\n              </div>\n            )}\n            <input\n              id={name}\n              name={name}\n              type={fieldType}\n              value={displayValue}\n              onChange={handleInputChange}\n              className={`${baseInputClass} px-3`}\n              placeholder={placeholder}\n              disabled={disabled}\n              readOnly={readOnly}\n              required={required}\n              {...rest}\n            />\n            {rightIcon && (\n              <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none text-gray-400\">\n                {rightIcon}\n              </div>\n            )}\n          </div>\n        );\n    }\n  };\n  \n  // Render the complete field with label and error\n  return (\n    <div className={`mb-4 ${className}`}>\n      <div className=\"flex justify-between items-center mb-1\">\n        <label htmlFor={name} className=\"block text-sm font-medium text-gray-700\">\n          {label} {required && <span className=\"text-red-500\">*</span>}\n        </label>\n      </div>\n      \n      {renderField()}\n      \n      {helpText && !error && (\n        <p className=\"mt-1 text-xs text-gray-500\">{helpText}</p>\n      )}\n      \n      {error && (\n        <p className=\"mt-1 text-xs text-red-500\">{error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default EntityFormField;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/form/EntityFormGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/form/EntityFormLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/form/Form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/form/FormField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/form/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/layout/sidebarlayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/modals/GenerateAttestatiModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/modals/ImportModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":2,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1071,1074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1071,1074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2974,2977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2974,2977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onOverwriteChange' is defined but never used.","line":79,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, ReactNode } from 'react';\nimport { Upload, AlertCircle, X, AlertTriangle } from 'lucide-react';\nimport ImportPreviewTable, { ImportPreviewColumn, ConflictInfo } from '../ImportPreviewTable';\nimport Button from '../../../design-system/atoms/Button/Button';\nimport ErrorDisplay from '../ErrorDisplay';\nimport CSVFormatError from '../CSVFormatError';\n\nexport interface ImportModalProps<T> {\n  /** Titolo del modale (es. \"Importa Aziende\") */\n  title: string;\n  /** Sottotitolo opzionale con istruzioni */\n  subtitle?: string;\n  /** Chiamata quando l'utente conferma l'importazione */\n  onImport: (data: T[], overwriteIds?: string[], selectedRows?: Set<number>) => Promise<void>;\n  /** Chiamata quando l'utente chiude il modale */\n  onClose: () => void;\n  /** Funzione per processare il file caricato e convertirlo in dati strutturati */\n  processFile: (file: File) => Promise<T[]>;\n  /** Chiave per identificare elementi duplicati */\n  uniqueKey: string;\n  /** Dati esistenti per confronto e individuazione dei duplicati */\n  existingData: any[];\n  /** Colonne da visualizzare nella tabella di anteprima */\n  previewColumns: ImportPreviewColumn[];\n  /** Funzione per validare le righe e rilevare eventuali errori */\n  validateRows?: (rows: T[]) => { [rowIdx: number]: string[] };\n  /** Componenti aggiuntivi da mostrare sopra la tabella di anteprima */\n  extraControls?: ReactNode;\n  /** Formati di file supportati */\n  supportedFormats?: string[];\n  /** Messaggio informativo sui formati supportati */\n  formatsMessage?: string;\n  /** Mostra o nasconde i pulsanti per selezionare/deselezionare tutti */\n  showBulkSelectButtons?: boolean;\n  /** Nasconde la tabella di anteprima standard (utile quando si usa un componente personalizzato) */\n  hidePreviewTable?: boolean;\n  /** Usa un'unica colonna di checkbox per selezione/sovrascrittura */\n  useSingleCheckboxColumn?: boolean;\n  /** Lista delle aziende disponibili per il menu a pillola */\n  availableCompanies?: Array<{id: string, name?: string, ragioneSociale?: string}>;\n  /** Funzione per gestire il cambio di azienda per le righe selezionate */\n  onCompanyChange?: (selectedIds: string[], companyId: string) => void;\n  /** Dati iniziali da mostrare nella preview */\n  initialPreviewData?: T[];\n  /** Callback per le righe selezionate */\n  onOverwriteChange?: (selectedIds: string[]) => void;\n  /** Conflitti rilevati per riga */\n  conflicts?: { [rowIdx: number]: ConflictInfo };\n  /** Callback per aggiornare la risoluzione di un conflitto */\n  onConflictResolutionChange?: (rowIdx: number, resolution: Partial<ConflictInfo>) => void;\n  /** Set delle righe selezionate per l'importazione (indici) */\n  selectedRows?: Set<number>;\n  /** Callback per gestire la selezione delle righe */\n  onRowSelectionChange?: (selectedRows: Set<number>) => void;\n}\n\n/**\n * Componente generico per mostrare un modale di importazione dati\n */\nexport default function ImportModal<T extends Record<string, any>>({\n  title,\n  subtitle,\n  onImport,\n  onClose,\n  processFile,\n  uniqueKey,\n  existingData,\n  previewColumns,\n  validateRows,\n  extraControls,\n  supportedFormats = ['.csv'],\n  formatsMessage = 'Formati supportati: CSV',\n  showBulkSelectButtons = true,\n  hidePreviewTable = false,\n  useSingleCheckboxColumn = false,\n  availableCompanies,\n  onCompanyChange,\n  initialPreviewData = [],\n  onOverwriteChange,\n  conflicts,\n  onConflictResolutionChange,\n  selectedRows,\n  onRowSelectionChange\n}: ImportModalProps<T>) {\n  const [dragActive, setDragActive] = useState(false);\n  const [error, setError] = useState<string>('');\n  const [importing, setImporting] = useState(false);\n  const [preview, setPreview] = useState<T[]>(initialPreviewData);\n  const [overwriteIds, setOverwriteIds] = useState<string[]>([]);\n  const [rowErrors, setRowErrors] = useState<{ [rowIdx: number]: string[] }>({});\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [expectedHeaders, setExpectedHeaders] = useState<string[]>([]);\n  const [foundHeaders, setFoundHeaders] = useState<string[]>([]);\n\n  // Aggiorna la preview quando cambiano i dati iniziali\n  React.useEffect(() => {\n    if (initialPreviewData && initialPreviewData.length > 0) {\n      setPreview(initialPreviewData);\n      if (validateRows) {\n        const errors = validateRows(initialPreviewData);\n        setRowErrors(errors);\n      }\n    }\n  }, [initialPreviewData, validateRows]);\n\n  // Gestisce gli eventi di trascinamento\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  // Gestisce il file lasciato nella zona di trascinamento\n  const handleDrop = async (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const file = e.dataTransfer.files?.[0];\n    if (file) {\n      await handleFileProcess(file);\n    }\n  };\n\n  // Gestisce la selezione del file tramite finestra di dialogo\n  const handleFileInput = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      await handleFileProcess(file);\n    }\n  };\n\n  // Processa il file selezionato o trascinato\n  const handleFileProcess = async (file: File) => {\n    setError('');\n    setRowErrors({});\n    setImporting(true);\n    setExpectedHeaders([]);\n    setFoundHeaders([]);\n    \n    // Verifica estensione\n    const fileExt = '.' + (file.name.split('.').pop()?.toLowerCase() || '');\n    if (!supportedFormats.includes(fileExt)) {\n      setError(`Formato file non supportato. Formati accettati: ${supportedFormats.join(', ')}`);\n      setImporting(false);\n      return;\n    }\n    \n    // Verifica dimensione file (max 10MB)\n    const maxFileSize = 10 * 1024 * 1024; // 10MB\n    if (file.size > maxFileSize) {\n      setError(`Il file è troppo grande (${(file.size / (1024 * 1024)).toFixed(2)}MB). Dimensione massima: 10MB`);\n      setImporting(false);\n      return;\n    }\n\n    try {\n      // Processa il file\n      const processedData = await processFile(file);\n      \n      // Verifica che ci siano dati\n      if (!processedData || processedData.length === 0) {\n        throw new Error('Il file non contiene dati validi. Verifica che il file CSV sia formattato correttamente.');\n      }\n      \n      // Verifica la qualità dei dati\n      const firstRow = processedData[0];\n      if (firstRow && Object.keys(firstRow).length <= 1) {\n        throw new Error('Il formato del file non sembra corretto. Verifica che il delimitatore CSV sia corretto (es. \";\" o \",\")');\n      }\n      \n      setPreview(processedData);\n      \n      // Valida i dati se è disponibile una funzione di validazione\n      if (validateRows) {\n        const errors = validateRows(processedData);\n        setRowErrors(errors);\n        \n        // Se ci sono errori in tutte le righe, potrebbe indicare un problema di formato\n        const rowCount = processedData.length;\n        const errorCount = Object.keys(errors).length;\n        \n        if (errorCount === rowCount && rowCount > 0) {\n          // Recupera il primo errore per mostrarlo come esempio\n          const firstErrorRow = Object.keys(errors)[0];\n          const firstError = errors[Number(firstErrorRow)]?.[0] || '';\n          \n          // Se tutti gli errori sono uguali, potrebbe essere un problema di formato\n          if (firstError.includes('obbligator')) {\n            setError(`Possibile formato CSV non compatibile: ${firstError}. Verifica che le colonne CSV corrispondano ai campi richiesti.`);\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Errore durante l\\'elaborazione del file:', err);\n      \n      // Fornisci messaggi di errore più dettagliati\n      const errorMessage = err instanceof Error ? err.message : 'Errore durante l\\'elaborazione del file';\n      \n      // Gestisci errori specifici\n      if (errorMessage.includes('Intestazioni attese') && errorMessage.includes('Intestazioni trovate')) {\n        // Estrai le intestazioni attese e trovate dall'errore\n        try {\n          const expectedMatch = errorMessage.match(/Intestazioni attese: ([^.]+)/);\n          const foundMatch = errorMessage.match(/Intestazioni trovate: ([^.]+)/);\n          \n          if (expectedMatch && expectedMatch[1]) {\n            setExpectedHeaders(expectedMatch[1].split(', ').map(h => h.trim()));\n          }\n          \n          if (foundMatch && foundMatch[1]) {\n            setFoundHeaders(foundMatch[1].split(', ').map(h => h.trim()));\n          }\n        } catch (parseErr) {\n          console.error('Errore nel parsing delle intestazioni:', parseErr);\n        }\n        \n        setError(errorMessage);\n      } else if (errorMessage.includes('Parse error')) {\n        setError('Errore durante l\\'analisi del CSV. Verifica che il delimitatore sia corretto (;) e che il file non contenga caratteri speciali non validi.');\n      } else if (errorMessage.includes('Il formato del CSV non è compatibile')) {\n        setError(errorMessage);\n      } else {\n        setError(`Errore durante l'elaborazione del file: ${errorMessage}`);\n      }\n      \n      setPreview([]);\n    } finally {\n      setImporting(false);\n    }\n  };\n\n  // Gestore per la conferma dell'importazione\n  const handleImport = async () => {\n    if (preview.length === 0) return;\n    \n    // Se ci sono errori di validazione, non procedere con l'importazione\n    if (Object.keys(rowErrors).length > 0) {\n      setError('Ci sono errori nei dati. Correggi il file e riprova.');\n      return;\n    }\n    \n    // Verifica che ci siano righe selezionate per l'importazione\n    if (selectedRows && selectedRows.size === 0) {\n      setError('Nessuna riga selezionata per l\\'importazione');\n      return;\n    }\n    \n    setImporting(true);\n    setError('');\n    \n    try {\n      // Passa anche le righe selezionate alla funzione di importazione\n      await onImport(preview, overwriteIds, selectedRows);\n      // Non chiamiamo onClose qui, lo lasciamo gestire al chiamante in base al risultato\n    } catch (err) {\n      console.error('Errore durante l\\'importazione:', err);\n      setError(err instanceof Error ? err.message : 'Errore durante l\\'importazione');\n      setImporting(false);\n    }\n  };\n\n  // Determina il testo del pulsante di importazione in base alle selezioni\n  const getImportButtonText = () => {\n    if (importing) return 'Importazione in corso...';\n    \n    if (useSingleCheckboxColumn && preview.length > 0) {\n      // Conta quanti elementi sono selezionati (esistenti da sovrascrivere)\n      const selectedCount = overwriteIds.length;\n      \n      // Se abbiamo selectedRows, usa quello per calcolare il numero di righe selezionate\n      if (selectedRows && selectedRows.size !== undefined) {\n        // Filtra le righe selezionate per distinguere tra nuove e aggiornamenti\n        const selectedIndices = Array.from(selectedRows);\n        let newCount = 0;\n        let updateCount = 0;\n        \n        selectedIndices.forEach(index => {\n          if (index < preview.length) {\n            const item = preview[index];\n            const isExisting = item[uniqueKey] && existingData.some(e => {\n              const itemValue = String(item[uniqueKey] || '').trim().toUpperCase();\n              const existingValue = String(e[uniqueKey] || '').trim().toUpperCase();\n              return itemValue === existingValue;\n            });\n            \n            if (isExisting) {\n              // È un elemento esistente, conta solo se è selezionato per sovrascrittura\n              if (item.id && overwriteIds.includes(item.id)) {\n                updateCount++;\n              }\n            } else {\n              // È un nuovo elemento\n              newCount++;\n            }\n          }\n        });\n        \n        const totalToImport = newCount + updateCount;\n        \n        if (totalToImport === 0) {\n          return 'Nessun elemento da importare';\n        } else if (updateCount > 0 && newCount > 0) {\n          return `Importa ${totalToImport} elementi (${newCount} nuovi, ${updateCount} aggiornamenti)`;\n        } else if (updateCount > 0) {\n          return `Aggiorna ${updateCount} elementi`;\n        } else if (newCount > 0) {\n          return `Importa ${newCount} nuovi elementi`;\n        }\n      } else {\n        // Fallback alla logica precedente se selectedRows non è disponibile\n        // Numero di elementi che sono nuovi (non duplicati)\n        const nonDuplicateCount = preview.filter(item => \n          !item[uniqueKey] || !existingData.some(e => {\n            // Normalizza i valori per il confronto\n            const itemValue = String(item[uniqueKey] || '').trim().toUpperCase();\n            const existingValue = String(e[uniqueKey] || '').trim().toUpperCase();\n            return itemValue === existingValue;\n          })\n        ).length;\n        \n        // Calcola il totale da importare (selezionati + nuovi)\n        const totalToImport = selectedCount + nonDuplicateCount;\n        \n        if (totalToImport === 0) {\n          return 'Nessun elemento da importare';\n        } else if (selectedCount > 0 && nonDuplicateCount > 0) {\n          return `Importa ${totalToImport} elementi (${nonDuplicateCount} nuovi, ${selectedCount} aggiornamenti)`;\n        } else if (selectedCount > 0) {\n          return `Aggiorna ${selectedCount} elementi`;\n        } else if (nonDuplicateCount > 0) {\n          return `Importa ${nonDuplicateCount} nuovi elementi`;\n        }\n      }\n    }\n    \n    return `Importa tutti (${preview.length})`;\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-[1000] flex items-center justify-center bg-black bg-opacity-30 p-4\">\n      <div className=\"bg-white rounded-2xl shadow-xl max-w-6xl w-full mx-auto flex flex-col max-h-[90vh]\">\n        {/* Header fisso */}\n        <div className=\"flex justify-between items-center p-6 border-b border-gray-200 flex-shrink-0\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-800\">{title}</h2>\n            {subtitle && <p className=\"text-sm text-gray-500 mt-1\">{subtitle}</p>}\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-500\"\n            aria-label=\"Chiudi\"\n          >\n            <X className=\"h-5 w-5\" />\n          </button>\n        </div>\n        \n        {/* Errori fissi in alto - altezza limitata */}\n        {error && (\n          <div className=\"border-b border-gray-200 flex-shrink-0 max-h-32 overflow-y-auto\">\n            {error.includes('formato CSV') || error.includes('Intestazioni') || error.includes('delimitatore') || error.includes('formato del file') ? (\n              <CSVFormatError \n                message={error}\n                expectedHeaders={expectedHeaders}\n                foundHeaders={foundHeaders}\n                onClose={() => {\n                  setError('');\n                  setPreview([]); // Reset preview to allow new file upload\n                }}\n                className=\"m-4\"\n              />\n            ) : (\n              <ErrorDisplay \n                type=\"error\"\n                message={error}\n                onClose={() => setError('')}\n                className=\"m-4\"\n              />\n            )}\n          </div>\n        )}\n        \n        {/* Contenuto scrollabile */}\n        <div className=\"flex-1 overflow-y-auto p-6 min-h-0\">\n\n        {!preview.length ? (\n          <div\n            className={`relative border-2 border-dashed rounded-xl p-8 text-center ${\n              dragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'\n            }`}\n            onDragEnter={handleDrag}\n            onDragLeave={handleDrag}\n            onDragOver={handleDrag}\n            onDrop={handleDrop}\n          >\n            <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <p className=\"mt-4 text-sm text-gray-600\">\n              Trascina qui il file, oppure{' '}\n              <button\n                type=\"button\"\n                onClick={() => fileInputRef.current?.click()}\n                className=\"text-blue-600 hover:text-blue-500 font-medium\"\n              >\n                sfoglia\n              </button>\n            </p>\n            <p className=\"mt-2 text-xs text-gray-500\">\n              {formatsMessage}\n            </p>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              className=\"hidden\"\n              accept={supportedFormats.join(',')}\n              onChange={handleFileInput}\n            />\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Controlli extra (es. selezione azienda) */}\n            {extraControls && <div>{extraControls}</div>}\n            \n            {/* Tabella di anteprima */}\n            {!hidePreviewTable && (\n              <ImportPreviewTable\n                columns={previewColumns}\n                preview={preview}\n                existing={existingData}\n                uniqueKey={uniqueKey}\n                rowErrors={rowErrors}\n                onOverwriteChange={setOverwriteIds}\n                showBulkSelectButtons={showBulkSelectButtons}\n                useSingleCheckboxColumn={useSingleCheckboxColumn}\n                availableCompanies={availableCompanies}\n                onCompanyChange={onCompanyChange}\n                overwriteIds={overwriteIds}\n                conflicts={conflicts}\n                onConflictResolutionChange={onConflictResolutionChange}\n                selectedRows={selectedRows}\n                onRowSelectionChange={onRowSelectionChange}\n              />\n            )}\n          </div>\n        )}\n        </div>\n\n        {/* Footer fisso con pulsanti */}\n        <div className=\"border-t border-gray-200 p-6 flex justify-end space-x-3 flex-shrink-0\">\n          <Button\n            onClick={onClose}\n            variant=\"secondary\"\n            disabled={importing}\n          >\n            Annulla\n          </Button>\n          <Button\n            onClick={handleImport}\n            variant=\"primary\"\n            disabled={preview.length === 0 || importing || Object.keys(rowErrors).length > 0}\n          >\n            {getImportButtonText()}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/modals/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/tables/CheckboxCell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/tables/DataTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[580,583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[580,583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1193,1196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1193,1196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectionMode' is assigned a value but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onSelectRow' is defined but never used.","line":78,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2541,2544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2541,2544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onFilter' is defined but never used.","line":80,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'initialFilters' is defined but never used.","line":81,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4704,4707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4704,4707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\n// import { useTranslation } from 'react-i18next';\nimport { \n  ChevronLeft,\n  ChevronRight\n} from 'lucide-react';\nimport SortableColumn, { SortDirection } from './SortableColumn';\n// import Pagination from '../ui/Pagination'; // Componente non disponibile\nimport { Button } from '../../../design-system/atoms/Button';\nimport useSorting from '../../../hooks/useSorting';\nimport usePagination from '../../../hooks/usePagination';\nimport { FilterCondition } from '../filters/FilterBuilder';\n\nexport interface DataTableColumn<T = any> {\n  key: string;\n  label: string;\n  header?: string; // Aggiunto per retrocompatibilità - alcuni componenti usano header invece di label\n  width?: number;\n  minWidth?: number;\n  sortable?: boolean;\n  sortKey?: string; // Chiave usata per l'ordinamento (se diversa da 'key')\n  renderHeader?: (col: DataTableColumn<T>) => React.ReactNode;\n  renderCell?: (row: T, rowIndex: number) => React.ReactNode;\n  filterable?: boolean;\n  filterType?: 'string' | 'number' | 'date' | 'boolean' | 'select';\n  filterOptions?: { value: string; label: string }[]; // For 'select' type filtering\n}\n\ninterface DataTableProps<T = any> {\n  columns: DataTableColumn<T>[];\n  data: T[];\n  className?: string;\n  tableClassName?: string;\n  theadClassName?: string;\n  tbodyClassName?: string;\n  trClassName?: (row: T, index: number) => string;\n  onRowClick?: (row: T, index: number) => void;\n  keyExtractor?: (row: T, index: number) => string | number;\n  pagination?: boolean;\n  initialPageSize?: number;\n  pageSizeOptions?: number[];\n  emptyMessage?: string;\n  stickyHeader?: boolean;\n  loadingOverlay?: boolean;\n  selectionMode?: boolean;\n  selectedIds?: string[];\n  onSelectRow?: (row: T, selected: boolean) => void;\n  idExtractor?: (row: T) => string;\n  onFilter?: (filters: FilterCondition[]) => void;\n  initialFilters?: FilterCondition[];\n  customFilterElement?: React.ReactNode;\n  exportOptions?: {\n    show?: boolean;\n    onExport?: (format: 'csv' | 'excel') => void;\n  };\n\nrenderActions?: (row: T) => React.ReactNode;\n}\n\nconst DataTable = <T extends object>({\n  columns,\n  data,\n  className = '',\n  tableClassName = '',\n  theadClassName = '',\n  tbodyClassName = '',\n  trClassName = () => '',\n  onRowClick,\n  keyExtractor = (_, index) => index,\n  pagination = true,\n  initialPageSize = 10,\n  pageSizeOptions = [10, 25, 50, 100],\n  emptyMessage,\n  stickyHeader = false,\n  loadingOverlay = false,\n  selectionMode = false,\n  selectedIds = [],\n  onSelectRow,\n  idExtractor = (row: any) => row.id,\n  onFilter,\n  initialFilters,\n  customFilterElement,\n  exportOptions,\n  renderActions,\n}: DataTableProps<T>) => {\n  // const { t } = useTranslation();\n  \n  // Default empty message\n  const defaultEmptyMessage = \"Nessun dato disponibile\";\n  \n  // Use provided or default empty message\n  const displayEmptyMessage = emptyMessage || defaultEmptyMessage;\n  \n  // Gestione ordinamento\n  const { sortedData, sortKey, sortDirection, setSorting } = useSorting<T>({\n    data,\n  });\n  \n  // Gestione paginazione\n  const {\n    paginatedData,\n    totalPages,\n    currentPage,\n    pageSize,\n    totalItems,\n    goToPage,\n    setPageSize,\n  } = usePagination<T>({\n    data: sortedData,\n    pageSize: initialPageSize,\n  });\n  \n  // Determina i dati da visualizzare\n  const displayData = pagination ? paginatedData : sortedData;\n  \n  // Handler per il click sull'header della colonna\n  const handleSortColumn = (colKey: string, direction: SortDirection) => {\n    setSorting(colKey, direction);\n  };\n  \n  // Rendering dell'header per una colonna\n  const renderColumnHeader = (column: DataTableColumn<T>) => {\n    if (column.renderHeader) {\n      return column.renderHeader(column);\n    }\n    \n    // Se la label è vuota, non renderizzare nulla\n    if (!column.label && !column.header) {\n      return <span></span>;\n    }\n    \n    const sortableKey = column.sortKey || column.key;\n    \n    if (column.sortable) {\n      return (\n        <SortableColumn\n          label={column.label || column.header || ''}\n          sortKey={sortableKey}\n          currentSortKey={sortKey || undefined}\n          currentDirection={sortDirection}\n          onSort={handleSortColumn}\n        />\n      );\n    }\n    \n    return column.label || column.header || '';\n  };\n  \n  // Rendering di una cella\n  const renderCell = (row: T, column: DataTableColumn<T>, rowIndex: number) => {\n    // Special case for actions column\n    if (column.key === 'actions' && renderActions) {\n      return renderActions(row);\n    }\n    \n    if (column.renderCell) {\n      return column.renderCell(row, rowIndex);\n    }\n    \n    // Fallback per accedere ai valori delle proprietà\n    const value = (row as any)[column.key];\n    return value !== undefined ? String(value) : '';\n  };\n  \n  // Handler per il cambio pagina\n  const handlePageChange = (page: number) => {\n    goToPage(page);\n  };\n  \n  // Handler per il cambio dimensione pagina\n  const handlePageSizeChange = (size: number) => {\n    setPageSize(size);\n  };\n\n  // Handler for exports\n  const handleExport = (format: 'csv' | 'excel') => {\n    if (exportOptions?.onExport) {\n      exportOptions.onExport(format);\n    }\n  };\n  \n  return (\n    <div className={`w-full relative ${className}`}>\n      {/* Optional custom filter element */}\n      {customFilterElement && (\n        <div className=\"mb-4\">\n          {customFilterElement}\n        </div>\n      )}\n      \n      {/* Export options */}\n      {exportOptions?.show && (\n        <div className=\"flex justify-end mb-4 gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => handleExport('csv')}\n          >\n            Esporta CSV\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => handleExport('excel')}\n          >\n            Esporta Excel\n          </Button>\n        </div>\n      )}\n      \n      {/* Loading overlay */}\n      {loadingOverlay && (\n        <div className=\"absolute inset-0 bg-white/50 flex items-center justify-center z-10\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n        </div>\n      )}\n      \n      {/* Tabella */}\n      <div className=\"w-full overflow-x-auto\">\n        <table className={`w-full divide-y divide-gray-200 ${tableClassName}`}>\n          <thead className={`bg-gray-50 ${stickyHeader ? 'sticky top-0 z-10' : ''} ${theadClassName}`}>\n            <tr>\n              {columns.map((column) => (\n                <th\n                  key={column.key}\n                  style={{ width: column.width, minWidth: column.minWidth }}\n                  className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\"\n                >\n                  {renderColumnHeader(column)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className={`bg-white divide-y divide-gray-200 ${tbodyClassName}`}>\n            {displayData.length > 0 ? (\n              displayData.map((row, rowIndex) => {\n                const rowId = idExtractor(row);\n                // Assicurati che selectedIds sia un array prima di usare includes\n                const isSelected = Array.isArray(selectedIds) && selectedIds.includes(rowId);\n                \n                return (\n                  <tr\n                    key={keyExtractor(row, rowIndex)}\n                    className={`hover:bg-gray-50 ${trClassName(row, rowIndex)} ${isSelected ? 'bg-blue-50' : ''}`}\n                    onClick={() => onRowClick && onRowClick(row, rowIndex)}\n                    style={{ cursor: onRowClick ? 'pointer' : 'default' }}\n                  >\n                    {columns.map((column) => (\n                      <td\n                        key={`${keyExtractor(row, rowIndex)}-${column.key}`}\n                        className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\"\n                      >\n                        {renderCell(row, column, rowIndex)}\n                      </td>\n                    ))}\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td\n                  colSpan={columns.length}\n                  className=\"px-4 py-8 text-center text-sm text-gray-500\"\n                >\n                  {displayEmptyMessage}\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Paginazione */}\n      {pagination && totalPages > 0 && (\n        <div className=\"flex items-center justify-between px-4 py-3 bg-white border-t border-gray-200\">\n          <div className=\"flex items-center text-sm text-gray-700\">\n            <span>\n              Mostrando {((currentPage - 1) * pageSize) + 1} - {Math.min(currentPage * pageSize, totalItems)} di {totalItems} risultati\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            {/* Page size selector */}\n            <select\n              value={pageSize}\n              onChange={(e) => handlePageSizeChange(Number(e.target.value))}\n              className=\"px-2 py-1 border border-gray-300 rounded text-sm\"\n            >\n              {pageSizeOptions.map(size => (\n                <option key={size} value={size}>{size} per pagina</option>\n              ))}\n            </select>\n            \n            {/* Previous button */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage <= 1}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            \n            {/* Page numbers */}\n            <span className=\"text-sm text-gray-700\">\n              Pagina {currentPage} di {totalPages}\n            </span>\n            \n            {/* Next button */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage >= totalPages}\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { DataTableColumn };\nexport default DataTable;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/tables/SortableColumn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/GoogleDocsPreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2017,2020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2017,2020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { \n  Eye,\n  FileDown,\n  FileText,\n  FileType,\n  Printer,\n  RefreshCw\n} from 'lucide-react';\nimport googleApiClient from '../../../services/googleApiClient';\n\ninterface GoogleDocsPreviewProps {\n  documentUrl?: string;\n  templateId?: string;\n  placeholderData?: Record<string, string>;\n  documentType: string;\n  onGenerationSuccess?: (fileUrl: string, fileName: string) => void;\n  className?: string;\n}\n\n/**\n * GoogleDocsPreview Component\n * \n * Displays a preview and control options for Google Docs/Slides templates.\n * Features:\n * - Generate documents with real data\n * - Preview generated PDFs\n * - Download generated documents\n */\nconst GoogleDocsPreview: React.FC<GoogleDocsPreviewProps> = ({\n  documentUrl,\n  templateId,\n  placeholderData = {},\n  documentType,\n  onGenerationSuccess,\n  className = ''\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [generatedFile, setGeneratedFile] = useState<{ url: string; name: string } | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  \n  // Generate document from template\n  const handleGenerate = async () => {\n    if (!documentUrl && !templateId) {\n      setError('Nessun template selezionato');\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await googleApiClient.generateDocument(documentType, placeholderData);\n      \n      if (response.success && response.fileUrl) {\n        setGeneratedFile({\n          url: response.fileUrl,\n          name: response.fileName || 'documento.pdf'\n        });\n        \n        if (onGenerationSuccess) {\n          onGenerationSuccess(response.fileUrl, response.fileName || 'documento.pdf');\n        }\n        \n        setShowPreview(true);\n      } else {\n        setError(response.message || 'Errore durante la generazione del documento');\n      }\n    } catch (err: any) {\n      console.error('Error generating document:', err);\n      setError(err.message || 'Impossibile generare il documento');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Print the generated document\n  const handlePrint = () => {\n    if (generatedFile?.url) {\n      const printWindow = window.open(generatedFile.url, '_blank');\n      if (printWindow) {\n        printWindow.addEventListener('load', () => {\n          printWindow.print();\n        });\n      }\n    }\n  };\n  \n  // Download the generated document\n  const handleDownload = () => {\n    if (generatedFile?.url) {\n      const link = document.createElement('a');\n      link.href = generatedFile.url;\n      link.download = generatedFile.name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  \n  return (\n    <div className={`google-docs-preview ${className}`}>\n      <div className=\"border rounded-xl overflow-hidden\">\n        <div className=\"bg-gray-50 p-3 border-b flex justify-between items-center\">\n          <h3 className=\"text-gray-700 font-medium\">\n            Preview Documento {generatedFile ? `- ${generatedFile.name}` : ''}\n          </h3>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleGenerate}\n              disabled={loading || (!documentUrl && !templateId)}\n            >\n              {loading ? (\n                <>\n                  <RefreshCw className=\"h-4 w-4 mr-1 animate-spin\" />\n                  Generando...\n                </>\n              ) : (\n                <>\n                  <FileType className=\"h-4 w-4 mr-1\" />\n                  Genera PDF\n                </>\n              )}\n            </Button>\n            \n            {generatedFile && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handlePrint}\n                >\n                  <Printer className=\"h-4 w-4 mr-1\" />\n                  Stampa\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleDownload}\n                >\n                  <FileDown className=\"h-4 w-4 mr-1\" />\n                  Scarica\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n        \n        {error && (\n          <div className=\"bg-red-50 text-red-700 p-3 border-b text-sm\">\n            {error}\n          </div>\n        )}\n        \n        <div className=\"p-4 bg-white\">\n          {!generatedFile && !showPreview ? (\n            <div className=\"border-2 border-dashed rounded-xl p-8 flex flex-col items-center justify-center text-center text-gray-500\">\n              <FileText className=\"h-12 w-12 mb-3 text-gray-400\" />\n              <p className=\"mb-2\">Nessun documento generato</p>\n              <p className=\"text-sm\">Clicca su \"Genera PDF\" per creare un documento usando i dati inseriti</p>\n            </div>\n          ) : (\n            <div className=\"aspect-[210/297] w-full bg-gray-100 rounded\">\n              {showPreview && generatedFile && (\n                <iframe\n                  src={`${generatedFile.url}#toolbar=0&navpanes=0`}\n                  className=\"w-full h-full rounded\"\n                  title=\"Document preview\"\n                />\n              )}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"bg-gray-50 p-3 border-t flex justify-between items-center\">\n          <div className=\"text-sm text-gray-600\">\n            {documentType === 'attestato' && 'Anteprima Attestato'}\n            {documentType === 'lettera_incarico' && 'Anteprima Lettera di Incarico'}\n            {documentType !== 'attestato' && documentType !== 'lettera_incarico' && `Anteprima ${documentType}`}\n          </div>\n          \n          {generatedFile && (\n            <Button\n              variant=\"link\"\n              size=\"sm\"\n              onClick={() => setShowPreview(!showPreview)}\n              className=\"text-blue-600\"\n            >\n              <Eye className=\"h-4 w-4 mr-1\" />\n              {showPreview ? 'Nascondi anteprima' : 'Mostra anteprima'}\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GoogleDocsPreview;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/GoogleTemplateProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GoogleTemplateResponse' is defined but never used.","line":20,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GenerateDocumentResponse' is defined but never used.","line":26,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2092,2095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2092,2095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateDocument' is assigned a value but never used.","line":83,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2915,2918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2915,2918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { FileEdit, AlertTriangle, Check } from 'lucide-react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport googleApiClient from '../../../services/googleApiClient';\n\ninterface GoogleTemplateProviderProps {\n  documentType: string;\n  onTemplateSelected?: (templateUrl: string, templateId: string) => void;\n  className?: string;\n}\n\ninterface GoogleTemplate {\n  id: string;\n  name: string;\n  googleDocsUrl: string;\n  type: string;\n  isDefault: boolean;\n}\n\ninterface GoogleTemplateResponse {\n  success: boolean;\n  template: GoogleTemplate;\n  error?: string;\n}\n\ninterface GenerateDocumentResponse {\n  success: boolean;\n  message?: string;\n  fileName?: string;\n  fileUrl?: string;\n  error?: string;\n  details?: string;\n}\n\n/**\n * GoogleTemplateProvider Component\n * \n * A reusable component that provides Google Docs/Slides template functionality.\n * It allows users to:\n * 1. Connect to Google Docs/Slides templates\n * 2. Generate documents based on templates\n * 3. Get default templates for specific document types\n */\nconst GoogleTemplateProvider: React.FC<GoogleTemplateProviderProps> = ({\n  documentType,\n  onTemplateSelected,\n  className = '',\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [templateUrl, setTemplateUrl] = useState<string>('');\n  const [success, setSuccess] = useState(false);\n  \n  // Get the default template for this document type\n  const getDefaultTemplate = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await googleApiClient.getDefaultTemplate(documentType);\n      \n      if (response.success && response.template) {\n        setTemplateUrl(response.template.googleDocsUrl);\n        setSuccess(true);\n        \n        if (onTemplateSelected) {\n          onTemplateSelected(response.template.googleDocsUrl, response.template.id);\n        }\n      } else {\n        setError(response.error || 'Nessun template predefinito trovato');\n        setSuccess(false);\n      }\n    } catch (err: any) {\n      console.error('Error getting default template:', err);\n      setError(err.message || 'Impossibile ottenere il template');\n      setSuccess(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Generate a document using the current template and data\n  const generateDocument = async (data: Record<string, string>) => {\n    if (!templateUrl) {\n      setError('Seleziona prima un template');\n      return null;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await googleApiClient.generateDocument(documentType, data);\n      \n      if (response.success) {\n        setSuccess(true);\n        return response;\n      } else {\n        setError('Errore nella generazione del documento');\n        setSuccess(false);\n        return null;\n      }\n    } catch (err: any) {\n      console.error('Error generating document:', err);\n      setError(err.message || 'Impossibile generare il documento');\n      setSuccess(false);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Handle manual URL input\n  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTemplateUrl(e.target.value);\n    setError(null);\n    \n    // Validate URL format\n    if (e.target.value && !e.target.value.includes('docs.google.com')) {\n      setError('Il link deve puntare a un documento Google Docs o Google Slides');\n      setSuccess(false);\n    } else if (e.target.value && onTemplateSelected) {\n      setSuccess(true);\n      onTemplateSelected(e.target.value, '');\n    }\n  };\n  \n  return (\n    <div className={`google-template-provider ${className}`}>\n      <div className=\"bg-blue-50 rounded-lg border border-blue-200 p-4\">\n        <h3 className=\"text-md font-semibold text-blue-800 flex items-center\">\n          <FileEdit className=\"h-5 w-5 mr-2\" />\n          Template Google Docs/Slides\n        </h3>\n        \n        <p className=\"mt-2 text-sm text-blue-700\">\n          Utilizza un documento Google Docs o Google Slides come template.\n          Il sistema sostituirà i placeholder nel formato {'{{NOME_PLACEHOLDER}}'} con i valori effettivi.\n        </p>\n        \n        <div className=\"mt-4\">\n          <label className=\"block text-sm font-medium text-blue-700 mb-1\">URL Google Docs/Slides</label>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={templateUrl}\n              onChange={handleUrlChange}\n              placeholder=\"https://docs.google.com/document/d/...\"\n              className=\"flex-1 rounded-md border-blue-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n            />\n            <Button\n              onClick={getDefaultTemplate}\n              size=\"sm\"\n              disabled={loading}\n              variant=\"outline\"\n              className=\"whitespace-nowrap\"\n            >\n              {loading ? 'Caricamento...' : 'Template Predefinito'}\n            </Button>\n          </div>\n          <p className=\"mt-1 text-xs text-blue-600\">\n            Formato: https://docs.google.com/document/d/ID_DOCUMENTO o https://docs.google.com/presentation/d/ID_PRESENTAZIONE\n          </p>\n        </div>\n        \n        {error && (\n          <div className=\"mt-3 p-2 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm flex items-start\">\n            <AlertTriangle className=\"h-4 w-4 mr-1 flex-shrink-0 mt-0.5\" />\n            <span>{error}</span>\n          </div>\n        )}\n        \n        {success && !error && templateUrl && (\n          <div className=\"mt-3 p-2 bg-green-50 border border-green-200 rounded-md text-green-700 text-sm flex items-center\">\n            <Check className=\"h-4 w-4 mr-1\" />\n            <span>Template selezionato correttamente</span>\n          </div>\n        )}\n        \n        <div className=\"mt-4 text-sm text-blue-700\">\n          <h4 className=\"font-medium mb-2\">Placeholder disponibili:</h4>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2\">\n            {[\n              { name: 'NOME', desc: 'Nome' },\n              { name: 'COGNOME', desc: 'Cognome' },\n              { name: 'NOME_COMPLETO', desc: 'Nome completo' },\n              { name: 'CORSO_TITOLO', desc: 'Titolo corso' },\n              { name: 'DATA_INIZIO', desc: 'Data inizio' },\n              { name: 'DATA_FINE', desc: 'Data fine' },\n              { name: 'ORE_TOTALI', desc: 'Ore totali' },\n              { name: 'AZIENDA_NOME', desc: 'Nome azienda' },\n              { name: 'DATA_GENERAZIONE', desc: 'Data generazione' }\n            ].map((ph) => (\n              <div key={ph.name} className=\"bg-white rounded p-1 border border-blue-100 text-xs\">\n                <span className=\"font-mono text-blue-800\">{'{{' + ph.name + '}}'}</span>\n                <span className=\"text-gray-500 ml-1\">{ph.desc}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GoogleTemplateProvider;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/NewTemplateDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/NotificationBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/PlaceholderDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/PlaceholderManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generatePreviewValues' is assigned a value but never used.","line":205,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":205,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  FileText,\n  HelpCircle,\n  Plus,\n  Tag,\n  X\n} from 'lucide-react';\n\n// Define placeholder categories and their placeholders\nexport interface PlaceholderCategory {\n  name: string;\n  description: string;\n  icon?: React.ReactNode;\n  color?: string;\n  placeholders: Placeholder[];\n}\n\nexport interface Placeholder {\n  tag: string;\n  description: string;\n  example?: string;\n  category: string;\n}\n\n// Props interface\ninterface PlaceholderManagerProps {\n  documentType: 'attestato' | 'lettera_incarico' | 'fattura' | 'preventivo' | 'registro_presenze' | string;\n  initialContent?: string;\n  onChange?: (content: string) => void;\n  onPreview?: (content: string, values: Record<string, string>) => void;\n  previewData?: Record<string, string>;\n}\n\nconst PlaceholderManager: React.FC<PlaceholderManagerProps> = ({\n  documentType,\n  initialContent = '',\n  onChange,\n  onPreview,\n  previewData = {}\n}) => {\n  const [content, setContent] = useState(initialContent);\n  const [showPlaceholders, setShowPlaceholders] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Update content when initialContent prop changes\n  useEffect(() => {\n    setContent(initialContent);\n  }, [initialContent]);\n  \n  // Define standard placeholders by category\n  const placeholderCategories: PlaceholderCategory[] = [\n    {\n      name: 'Partecipante',\n      description: 'Informazioni sulla persona',\n      icon: <Tag size={16} />,\n      color: 'bg-blue-100',\n      placeholders: [\n        { tag: '{{NOME}}', description: 'Nome del partecipante', example: 'Mario', category: 'Partecipante' },\n        { tag: '{{COGNOME}}', description: 'Cognome del partecipante', example: 'Rossi', category: 'Partecipante' },\n        { tag: '{{NOME_COMPLETO}}', description: 'Nome e cognome completi', example: 'Mario Rossi', category: 'Partecipante' },\n        { tag: '{{CODICE_FISCALE}}', description: 'Codice fiscale', example: 'RSSMRA80A01H501Z', category: 'Partecipante' },\n        { tag: '{{DATA_NASCITA}}', description: 'Data di nascita', example: '01/01/1980', category: 'Partecipante' },\n        { tag: '{{LUOGO_NASCITA}}', description: 'Luogo di nascita', example: 'Roma', category: 'Partecipante' },\n        { tag: '{{EMAIL}}', description: 'Indirizzo email', example: 'mario.rossi@example.com', category: 'Partecipante' },\n        { tag: '{{TELEFONO}}', description: 'Numero di telefono', example: '+39 123 456 7890', category: 'Partecipante' }\n      ]\n    },\n    {\n      name: 'Azienda',\n      description: 'Informazioni sull\\'azienda cliente',\n      icon: <FileText size={16} />,\n      color: 'bg-green-100',\n      placeholders: [\n        { tag: '{{AZIENDA}}', description: 'Nome dell\\'azienda', example: 'Acme Srl', category: 'Azienda' },\n        { tag: '{{RAGIONE_SOCIALE}}', description: 'Ragione sociale completa', example: 'Acme Società a Responsabilità Limitata', category: 'Azienda' },\n        { tag: '{{PARTITA_IVA}}', description: 'Partita IVA', example: '12345678901', category: 'Azienda' },\n        { tag: '{{INDIRIZZO_AZIENDA}}', description: 'Indirizzo sede legale', example: 'Via Roma 123, 00100 Roma', category: 'Azienda' },\n        { tag: '{{TELEFONO_AZIENDA}}', description: 'Telefono aziendale', example: '+39 06 12345678', category: 'Azienda' },\n        { tag: '{{EMAIL_AZIENDA}}', description: 'Email aziendale', example: 'info@acmesrl.it', category: 'Azienda' },\n        { tag: '{{PEC_AZIENDA}}', description: 'PEC aziendale', example: 'acmesrl@pec.it', category: 'Azienda' },\n        { tag: '{{SDI_AZIENDA}}', description: 'Codice SDI', example: 'ABC1234', category: 'Azienda' }\n      ]\n    },\n    {\n      name: 'Corso',\n      description: 'Informazioni sul corso di formazione',\n      icon: <HelpCircle size={16} />,\n      color: 'bg-purple-100',\n      placeholders: [\n        { tag: '{{CORSO}}', description: 'Titolo del corso', example: 'Sicurezza sul lavoro', category: 'Corso' },\n        { tag: '{{DURATA}}', description: 'Durata del corso in ore', example: '8 ore', category: 'Corso' },\n        { tag: '{{DATA_INIZIO}}', description: 'Data di inizio', example: '01/01/2023', category: 'Corso' },\n        { tag: '{{DATA_FINE}}', description: 'Data di fine', example: '05/01/2023', category: 'Corso' },\n        { tag: '{{SEDE}}', description: 'Sede del corso', example: 'Milano, Via Manzoni 123', category: 'Corso' },\n        { tag: '{{FORMATORI}}', description: 'Nomi dei formatori', example: 'Dott. Mario Bianchi, Ing. Laura Verdi', category: 'Corso' },\n        { tag: '{{ARGOMENTI}}', description: 'Argomenti trattati', example: 'Normativa, Procedure, Esercitazioni', category: 'Corso' },\n        { tag: '{{OBIETTIVI}}', description: 'Obiettivi del corso', example: 'Formare il personale sui rischi specifici', category: 'Corso' }\n      ]\n    },\n    {\n      name: 'Attestato',\n      description: 'Informazioni specifiche dell\\'attestato',\n      icon: <FileText size={16} />,\n      color: 'bg-yellow-100',\n      placeholders: [\n        { tag: '{{NUMERO}}', description: 'Numero progressivo attestato', example: '123/2023', category: 'Attestato' },\n        { tag: '{{DATA_RILASCIO}}', description: 'Data di rilascio attestato', example: '10/01/2023', category: 'Attestato' },\n        { tag: '{{VALIDITA}}', description: 'Periodo di validità', example: '5 anni', category: 'Attestato' },\n        { tag: '{{SCADENZA}}', description: 'Data di scadenza', example: '10/01/2028', category: 'Attestato' },\n        { tag: '{{FIRMA_DIGITALE}}', description: 'URL firma digitale', example: '[URL FIRMA]', category: 'Attestato' }\n      ]\n    },\n    {\n      name: 'Documento',\n      description: 'Informazioni generali del documento',\n      icon: <FileText size={16} />,\n      color: 'bg-red-100',\n      placeholders: [\n        { tag: '{{DATA_OGGI}}', description: 'Data odierna', example: '15/07/2023', category: 'Documento' },\n        { tag: '{{ANNO_CORRENTE}}', description: 'Anno corrente', example: '2023', category: 'Documento' },\n        { tag: '{{PROTOCOLLO}}', description: 'Numero protocollo', example: 'PROT-2023-1234', category: 'Documento' }\n      ]\n    }\n  ];\n  \n  // Filter placeholders based on document type\n  const getPlaceholdersForDocumentType = () => {\n    // Base placeholders for all document types\n    const basePlaceholders = ['Partecipante', 'Azienda', 'Documento'];\n    \n    switch(documentType) {\n      case 'attestato':\n        return [...basePlaceholders, 'Corso', 'Attestato'];\n      case 'lettera_incarico':\n        return [...basePlaceholders, 'Corso'];\n      case 'registro_presenze':\n        return [...basePlaceholders, 'Corso'];\n      case 'fattura':\n      case 'preventivo':\n        return [...basePlaceholders, 'Corso'];\n      default:\n        return basePlaceholders;\n    }\n  };\n  \n  // Filter categories based on document type\n  const filteredCategories = placeholderCategories.filter(category => \n    getPlaceholdersForDocumentType().includes(category.name)\n  );\n  \n  // Filter placeholders based on search query\n  const filterPlaceholders = (placeholders: Placeholder[]) => {\n    if (!searchQuery) return placeholders;\n    \n    return placeholders.filter(placeholder => \n      placeholder.tag.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      placeholder.description.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  };\n  \n  // Handle inserting a placeholder into the content\n  const handleInsertPlaceholder = (placeholder: string) => {\n    const textarea = document.getElementById('content-editor') as HTMLTextAreaElement;\n    \n    if (textarea) {\n      const start = textarea.selectionStart;\n      const end = textarea.selectionEnd;\n      const textBefore = content.substring(0, start);\n      const textAfter = content.substring(end);\n      \n      const newContent = `${textBefore}${placeholder}${textAfter}`;\n      \n      setContent(newContent);\n      onChange?.(newContent);\n      \n      // Re-focus and set cursor position after placeholder\n      setTimeout(() => {\n        textarea.focus();\n        textarea.setSelectionRange(start + placeholder.length, start + placeholder.length);\n      }, 10);\n    } else {\n      // If no textarea found, just append\n      const newContent = `${content}${placeholder}`;\n      setContent(newContent);\n      onChange?.(newContent);\n    }\n  };\n  \n  // Handle content change\n  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setContent(e.target.value);\n    onChange?.(e.target.value);\n  };\n  \n  // Handle preview with placeholder substitution\n  const handlePreview = () => {\n    if (onPreview) {\n      onPreview(content, previewData);\n    }\n  };\n  \n  // Generate placeholder values for preview\n  const generatePreviewValues = () => {\n    const allPlaceholders: Placeholder[] = placeholderCategories.flatMap(category => category.placeholders);\n    const previewValues: Record<string, string> = {};\n    \n    allPlaceholders.forEach(placeholder => {\n      // Use provided preview data if available, otherwise use example\n      const placeholderName = placeholder.tag.replace(/[{}]/g, '');\n      previewValues[placeholderName] = \n        previewData[placeholderName] || \n        placeholder.example || \n        `[${placeholderName}]`;\n    });\n    \n    return previewValues;\n  };\n  \n  return (\n    <div className=\"border border-gray-200 rounded-md shadow-sm\">\n      {/* Editor section */}\n      <div className=\"p-4\">\n        <textarea\n          id=\"content-editor\"\n          value={content}\n          onChange={handleContentChange}\n          className=\"w-full min-h-[200px] p-3 border border-gray-300 rounded-md\"\n          placeholder=\"Inserisci il testo del template qui. Puoi aggiungere placeholder come {{NOME}} dal pannello placeholders.\"\n        />\n      </div>\n      \n      {/* Placeholder panel toggle */}\n      <div className=\"border-t border-gray-200 p-3 flex justify-between items-center bg-gray-50\">\n        <button \n          onClick={() => setShowPlaceholders(!showPlaceholders)}\n          className=\"flex items-center text-sm font-medium text-blue-600 hover:text-blue-800\"\n        >\n          {showPlaceholders ? (\n            <>\n              <X size={16} className=\"mr-1\" /> Nascondi placeholder\n            </>\n          ) : (\n            <>\n              <Plus size={16} className=\"mr-1\" /> Mostra placeholder\n            </>\n          )}\n        </button>\n        \n        {onPreview && (\n          <button \n            onClick={handlePreview}\n            className=\"px-3 py-1 bg-blue-600 text-white text-sm font-medium rounded hover:bg-blue-700\"\n          >\n            Anteprima\n          </button>\n        )}\n      </div>\n      \n      {/* Placeholder panel */}\n      {showPlaceholders && (\n        <div className=\"border-t border-gray-200 p-4\">\n          <div className=\"mb-3\">\n            <input\n              type=\"text\"\n              placeholder=\"Cerca placeholder...\"\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n          </div>\n          \n          {/* Categories */}\n          <div className=\"flex flex-wrap gap-2 mb-3\">\n            <button\n              className={`text-xs px-3 py-1 rounded-full ${\n                selectedCategory === null \n                  ? 'bg-blue-100 text-blue-700' \n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n              onClick={() => setSelectedCategory(null)}\n            >\n              Tutti\n            </button>\n            \n            {filteredCategories.map(category => (\n              <button\n                key={category.name}\n                className={`text-xs px-3 py-1 rounded-full ${\n                  selectedCategory === category.name \n                    ? 'bg-blue-100 text-blue-700' \n                    : `${category.color || 'bg-gray-100'} text-gray-700 hover:bg-gray-200`\n                }`}\n                onClick={() => setSelectedCategory(category.name)}\n              >\n                {category.icon && <span className=\"mr-1\">{category.icon}</span>}\n                {category.name}\n              </button>\n            ))}\n          </div>\n          \n          {/* Placeholders list */}\n          <div className=\"max-h-60 overflow-y-auto border border-gray-200 rounded-md\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Placeholder</th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Descrizione</th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Esempio</th>\n                  <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Categoria</th>\n                  <th className=\"px-3 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider\">Inserisci</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredCategories\n                  .filter(category => selectedCategory === null || category.name === selectedCategory)\n                  .flatMap(category => filterPlaceholders(category.placeholders))\n                  .map((placeholder, idx) => (\n                    <tr key={`${placeholder.tag}-${idx}`} className=\"hover:bg-gray-50\">\n                      <td className=\"px-3 py-2 whitespace-nowrap text-sm font-mono text-gray-900\">\n                        {placeholder.tag}\n                      </td>\n                      <td className=\"px-3 py-2 text-sm text-gray-800\">\n                        {placeholder.description}\n                      </td>\n                      <td className=\"px-3 py-2 text-sm text-gray-500 italic\">\n                        {placeholder.example || ''}\n                      </td>\n                      <td className=\"px-3 py-2 text-sm text-gray-500\">\n                        {placeholder.category}\n                      </td>\n                      <td className=\"px-3 py-2 text-sm text-center\">\n                        <button\n                          onClick={() => handleInsertPlaceholder(placeholder.tag)}\n                          className=\"p-1 text-blue-600 hover:text-blue-800\"\n                          title={`Inserisci ${placeholder.tag}`}\n                        >\n                          <Plus size={16} />\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlaceholderManager; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/PlaceholderPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/PlaceholdersLegend.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/SimpleEditor.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":7,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":7,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'content' is assigned a value but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\n\n/**\n * Common placeholders used in templates\n */\nexport const COMMON_PLACEHOLDERS = [\n  { name: 'NOME', description: 'Nome del partecipante o formatore', example: 'Mario' },\n  { name: 'COGNOME', description: 'Cognome del partecipante o formatore', example: 'Rossi' },\n  { name: 'NOME_COMPLETO', description: 'Nome e cognome completi', example: 'Mario Rossi' },\n  { name: 'CORSO', description: 'Titolo del corso', example: 'Sicurezza sul Lavoro' },\n  { name: 'DATA_INIZIO', description: 'Data di inizio corso', example: '01/01/2023' },\n  { name: 'DATA_FINE', description: 'Data di fine corso', example: '10/01/2023' },\n  { name: 'DURATA', description: 'Durata del corso in ore', example: '8 ore' },\n  { name: 'AZIENDA', description: 'Nome dell\\'azienda', example: 'Acme S.r.l.' },\n  { name: 'NUMERO', description: 'Numero progressivo del documento', example: '12/2023' },\n  { name: 'DATA_RILASCIO', description: 'Data di rilascio', example: '15/01/2023' },\n  { name: 'DATA_OGGI', description: 'Data odierna', example: 'oggi' },\n];\n\n/**\n * Color options for the text color picker\n */\nconst TEXT_COLORS = [\n  '#000000', '#434343', '#666666', '#999999', '#b7b7b7', '#cccccc', '#d9d9d9', '#efefef', '#f3f3f3', '#ffffff',\n  '#980000', '#ff0000', '#ff9900', '#ffff00', '#00ff00', '#00ffff', '#4a86e8', '#0000ff', '#9900ff', '#ff00ff',\n  '#e6b8af', '#f4cccc', '#fce5cd', '#fff2cc', '#d9ead3', '#d0e0e3', '#c9daf8', '#cfe2f3', '#d9d2e9', '#ead1dc',\n];\n\n/**\n * Font size options for the font size picker\n */\nconst FONT_SIZES = ['10px', '12px', '14px', '16px', '18px', '20px', '24px', '28px', '32px', '36px', '48px'];\n\ninterface SimpleEditorProps {\n  /** Initial HTML content for the editor */\n  initialContent?: string;\n  /** Callback function when content changes */\n  onContentChange: (content: string) => void;\n  /** Additional style for the editor container */\n  style?: React.CSSProperties;\n  /** Custom placeholders to use */\n  customPlaceholders?: Array<{ name: string, description: string, example?: string }>;\n}\n\n/**\n * A simple WYSIWYG editor component with support for text formatting and placeholders\n */\nconst SimpleEditor: React.FC<SimpleEditorProps> = ({ \n  initialContent = '<p>Inserisci il tuo contenuto qui...</p>', \n  onContentChange,\n  style = {},\n  customPlaceholders = []\n}) => {\n  const editorRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState(initialContent);\n  const [showPlaceholderMenu, setShowPlaceholderMenu] = useState(false);\n  const [showColorPicker, setShowColorPicker] = useState(false);\n  const [currentTextColor, setCurrentTextColor] = useState('#000000');\n  const [showFontSizeMenu, setShowFontSizeMenu] = useState(false);\n  \n  // Combine common and custom placeholders\n  const placeholders = [...COMMON_PLACEHOLDERS, ...customPlaceholders];\n  \n  // Initialize editor with content\n  useEffect(() => {\n    if (editorRef.current) {\n      editorRef.current.innerHTML = initialContent;\n    }\n  }, [initialContent]);\n  \n  // Set up editor listeners and controls\n  useEffect(() => {\n    const editor = editorRef.current;\n    if (!editor) return;\n    \n    // Make the div editable\n    editor.contentEditable = 'true';\n    \n    // Handle content changes\n    const handleInput = () => {\n      const newContent = editor.innerHTML;\n      setContent(newContent);\n      onContentChange(newContent);\n    };\n    \n    editor.addEventListener('input', handleInput);\n    \n    // Clean up\n    return () => {\n      editor.removeEventListener('input', handleInput);\n    };\n  }, [onContentChange]);\n  \n  // Format text with document.execCommand\n  const formatText = (command: string, value: string = '') => {\n    document.execCommand(command, false, value);\n    if (editorRef.current) {\n      const newContent = editorRef.current.innerHTML;\n      setContent(newContent);\n      onContentChange(newContent);\n      editorRef.current.focus();\n    }\n  };\n  \n  // Insert placeholder at cursor position\n  const insertPlaceholder = (placeholder: string) => {\n    formatText('insertHTML', `{{${placeholder}}}`);\n    setShowPlaceholderMenu(false);\n  };\n  \n  // Change text color\n  const changeTextColor = (color: string) => {\n    formatText('foreColor', color);\n    setCurrentTextColor(color);\n    setShowColorPicker(false);\n  };\n  \n  // Change font size\n  const changeFontSize = (size: string) => {\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const span = document.createElement('span');\n      span.style.fontSize = size;\n      range.surroundContents(span);\n      \n      // Update content\n      if (editorRef.current) {\n        const newContent = editorRef.current.innerHTML;\n        setContent(newContent);\n        onContentChange(newContent);\n      }\n    } else {\n      // Fallback to the formatText method\n      formatText('fontSize', '7'); // Maximum size\n    }\n    \n    setShowFontSizeMenu(false);\n  };\n  \n  // Handle image insertion\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      const reader = new FileReader();\n      \n      reader.onload = (event) => {\n        if (event.target && event.target.result) {\n          const imageTag = `<img src=\"${event.target.result}\" alt=\"Immagine inserita\" style=\"max-width: 100%;\">`;\n          formatText('insertHTML', imageTag);\n        }\n      };\n      \n      reader.readAsDataURL(file);\n    }\n  };\n  \n  // Close menus when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (showPlaceholderMenu || showColorPicker || showFontSizeMenu) {\n        const target = event.target as HTMLElement;\n        const isClickInsideMenu = target.closest('.dropdown-menu') !== null;\n        const isClickOnButton = target.closest('.dropdown-button') !== null;\n        \n        if (!isClickInsideMenu && !isClickOnButton) {\n          setShowPlaceholderMenu(false);\n          setShowColorPicker(false);\n          setShowFontSizeMenu(false);\n        }\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showPlaceholderMenu, showColorPicker, showFontSizeMenu]);\n  \n  return (\n    <div className=\"editor-container\" style={{ \n      borderRadius: '0.5rem', \n      overflow: 'hidden', \n      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n      border: '1px solid #e5e7eb',\n      ...style \n    }}>\n      {/* Styles for editor elements */}\n      <style>{`\n        .editor-btn {\n          border-radius: 2rem !important;\n        }\n        \n        .editor-btn:hover {\n          background-color: rgba(241, 245, 249, 1);\n        }\n        \n        .font-size-item:hover {\n          background-color: #f3f4f6;\n        }\n        \n        .color-btn:hover {\n          transform: scale(1.1);\n        }\n        \n        .placeholder-item:hover {\n          background-color: #f3f4f6;\n        }\n        \n        .custom-placeholder-btn {\n          border-radius: 2rem !important;\n        }\n        \n        .custom-placeholder-btn:hover {\n          background-color: #2563eb;\n        }\n        \n        .image-btn {\n          border-radius: 2rem !important;\n        }\n        \n        .image-btn:hover {\n          background-color: #f3f4f6;\n        }\n\n        .dropdown-button {\n          border-radius: 2rem !important;\n        }\n        \n        .button-group {\n          display: flex;\n          gap: 0.25rem;\n          background: white;\n          padding: 0.25rem;\n          border-radius: 2rem;\n          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n        }\n        \n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(-10px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n        \n        .dropdown-menu {\n          animation: fadeIn 0.2s ease-out;\n        }\n      `}</style>\n      \n      {/* Toolbar */}\n      <div className=\"toolbar\" style={{ \n        display: 'flex', \n        padding: '0.75rem', \n        backgroundColor: '#f9fafb',\n        borderBottom: '1px solid #e5e7eb',\n        flexWrap: 'wrap',\n        gap: '0.5rem',\n        alignItems: 'center'\n      }}>\n        {/* Text formatting */}\n        <div className=\"button-group\">\n          <Button\n            variant={document.queryCommandState('bold') ? \"default\" : \"ghost\"}\n            onClick={() => formatText('bold')}\n            size=\"sm\"\n            title=\"Grassetto\"\n            className=\"editor-btn\"\n          >\n            B\n          </Button>\n          <Button\n            variant={document.queryCommandState('italic') ? \"default\" : \"ghost\"}\n            onClick={() => formatText('italic')}\n            size=\"sm\"\n            title=\"Corsivo\"\n            className=\"editor-btn\"\n          >\n            I\n          </Button>\n          <Button\n            variant={document.queryCommandState('underline') ? \"default\" : \"ghost\"}\n            onClick={() => formatText('underline')}\n            size=\"sm\"\n            title=\"Sottolineato\"\n            className=\"editor-btn\"\n          >\n            U\n          </Button>\n        </div>\n        \n        {/* Headings */}\n        <div className=\"button-group\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => formatText('formatBlock', 'h1')}\n            size=\"sm\"\n            title=\"Titolo 1\"\n            className=\"editor-btn\"\n          >\n            H1\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={() => formatText('formatBlock', 'h2')}\n            size=\"sm\"\n            title=\"Titolo 2\"\n            className=\"editor-btn\"\n          >\n            H2\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={() => formatText('formatBlock', 'p')}\n            size=\"sm\"\n            title=\"Paragrafo\"\n            className=\"editor-btn\"\n          >\n            P\n          </Button>\n        </div>\n        \n        {/* Lists */}\n        <div className=\"button-group\">\n          <Button\n            variant={document.queryCommandState('insertUnorderedList') ? \"default\" : \"ghost\"}\n            onClick={() => formatText('insertUnorderedList')}\n            size=\"sm\"\n            title=\"Elenco puntato\"\n            className=\"editor-btn\"\n          >\n            • Lista\n          </Button>\n          <Button\n            variant={document.queryCommandState('insertOrderedList') ? \"default\" : \"ghost\"}\n            onClick={() => formatText('insertOrderedList')}\n            size=\"sm\"\n            title=\"Elenco numerato\"\n            className=\"editor-btn\"\n          >\n            1. Lista\n          </Button>\n        </div>\n        \n        {/* Alignment */}\n        <div className=\"button-group\">\n          <Button\n            variant={document.queryCommandState('justifyLeft') ? \"default\" : \"ghost\"}\n            onClick={() => formatText('justifyLeft')}\n            size=\"sm\"\n            title=\"Allinea a sinistra\"\n            className=\"editor-btn\"\n          >\n            ←\n          </Button>\n          <Button\n            variant={document.queryCommandState('justifyCenter') ? \"default\" : \"ghost\"}\n            onClick={() => formatText('justifyCenter')}\n            size=\"sm\"\n            title=\"Centra\"\n            className=\"editor-btn\"\n          >\n            ↔\n          </Button>\n          <Button\n            variant={document.queryCommandState('justifyRight') ? \"default\" : \"ghost\"}\n            onClick={() => formatText('justifyRight')}\n            size=\"sm\" \n            title=\"Allinea a destra\"\n            className=\"editor-btn\"\n          >\n            →\n          </Button>\n        </div>\n        \n        {/* Font Size Dropdown */}\n        <div className=\"dropdown\" style={{ position: 'relative' }}>\n          <Button\n            variant=\"ghost\"\n            onClick={() => setShowFontSizeMenu(!showFontSizeMenu)}\n            className=\"dropdown-button\"\n            size=\"sm\"\n            title=\"Dimensione testo\"\n          >\n            Aa <span style={{ marginLeft: '0.25rem', fontSize: '0.75rem' }}>▾</span>\n          </Button>\n          \n          {showFontSizeMenu && (\n            <div className=\"dropdown-menu\" style={{\n              position: 'absolute',\n              top: 'calc(100% + 0.5rem)',\n              left: '0',\n              zIndex: 10,\n              backgroundColor: 'white',\n              border: '1px solid #e5e7eb',\n              borderRadius: '0.375rem',\n              boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n              padding: '0.5rem 0',\n              width: '150px',\n              maxHeight: '300px',\n              overflowY: 'auto'\n            }}>\n              {FONT_SIZES.map(size => (\n                <button\n                  key={size}\n                  type=\"button\"\n                  onClick={() => changeFontSize(size)}\n                  className=\"font-size-item\"\n                  style={{\n                    display: 'block',\n                    width: '100%',\n                    textAlign: 'left',\n                    padding: '0.5rem 1rem',\n                    border: 'none',\n                    background: 'none',\n                    cursor: 'pointer',\n                    fontSize: size,\n                    transition: 'background-color 0.15s ease'\n                  }}\n                >\n                  {size}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        {/* Text Color Picker */}\n        <div className=\"dropdown\" style={{ position: 'relative' }}>\n          <Button\n            variant=\"ghost\"\n            onClick={() => setShowColorPicker(!showColorPicker)}\n            className=\"dropdown-button\"\n            size=\"sm\"\n            title=\"Colore testo\"\n            style={{ color: currentTextColor === '#ffffff' ? '#374151' : currentTextColor }}\n          >\n            <span style={{ \n              display: 'inline-block', \n              width: '16px', \n              height: '16px', \n              backgroundColor: currentTextColor,\n              borderRadius: '4px',\n              border: currentTextColor === '#ffffff' ? '1px solid #ddd' : 'none',\n              boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)'\n            }}></span>\n            <span style={{ marginLeft: '0.25rem' }}>A</span>\n          </Button>\n          \n          {showColorPicker && (\n            <div className=\"dropdown-menu\" style={{\n              position: 'absolute',\n              top: 'calc(100% + 0.5rem)',\n              left: '0',\n              zIndex: 10,\n              backgroundColor: 'white',\n              border: '1px solid #e5e7eb',\n              borderRadius: '0.375rem',\n              boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n              padding: '0.75rem',\n              width: '210px'\n            }}>\n              <div style={{ \n                display: 'grid', \n                gridTemplateColumns: 'repeat(10, 1fr)', \n                gap: '4px' \n              }}>\n                {TEXT_COLORS.map(color => (\n                  <button\n                    key={color}\n                    type=\"button\"\n                    onClick={() => changeTextColor(color)}\n                    className=\"color-btn\"\n                    style={{\n                      width: '18px',\n                      height: '18px',\n                      backgroundColor: color,\n                      border: color === '#ffffff' ? '1px solid #ddd' : 'none',\n                      borderRadius: '4px',\n                      cursor: 'pointer',\n                      boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',\n                      transition: 'transform 0.15s ease'\n                    }}\n                    title={color}\n                  ></button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Placeholder Menu Dropdown */}\n        <div className=\"dropdown\" style={{ position: 'relative' }}>\n          <Button\n            variant=\"ghost\"\n            onClick={() => setShowPlaceholderMenu(!showPlaceholderMenu)}\n            className=\"dropdown-button\"\n            size=\"sm\"\n            title=\"Inserisci Placeholder\"\n          >\n            <span style={{ color: '#3b82f6' }}>{'{...}'}</span>\n            <span style={{ fontSize: '0.75rem' }}>▾</span>\n          </Button>\n          \n          {showPlaceholderMenu && (\n            <div className=\"dropdown-menu\" style={{\n              position: 'absolute',\n              top: 'calc(100% + 0.5rem)',\n              left: '0',\n              zIndex: 10,\n              backgroundColor: 'white',\n              border: '1px solid #e5e7eb',\n              borderRadius: '0.375rem',\n              boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n              width: '280px',\n              maxHeight: '400px',\n              overflowY: 'auto'\n            }}>\n              <div style={{ \n                padding: '0.75rem 1rem', \n                borderBottom: '1px solid #e5e7eb', \n                fontWeight: 'bold',\n                fontSize: '0.875rem',\n                color: '#374151',\n                backgroundColor: '#f9fafb' \n              }}>\n                Placeholder Comuni\n              </div>\n              <div style={{ padding: '0.5rem 0' }}>\n                {placeholders.map(placeholder => (\n                  <button\n                    key={placeholder.name}\n                    type=\"button\"\n                    onClick={() => insertPlaceholder(placeholder.name)}\n                    className=\"placeholder-item\"\n                    style={{\n                      display: 'block',\n                      width: '100%',\n                      textAlign: 'left',\n                      padding: '0.75rem 1rem',\n                      border: 'none',\n                      background: 'none',\n                      cursor: 'pointer',\n                      transition: 'background-color 0.15s ease'\n                    }}\n                  >\n                    <div style={{ \n                      fontWeight: 'bold', \n                      fontSize: '0.875rem',\n                      color: '#3b82f6'\n                    }}>{`{{${placeholder.name}}}`}</div>\n                    <div style={{ \n                      fontSize: '0.75rem', \n                      color: '#6b7280',\n                      marginTop: '0.25rem' \n                    }}>{placeholder.description}</div>\n                  </button>\n                ))}\n              </div>\n              <div style={{ \n                padding: '0.75rem', \n                borderTop: '1px solid #e5e7eb',\n                backgroundColor: '#f9fafb' \n              }}>\n                <Button\n                  variant=\"default\"\n                  onClick={() => {\n                    const placeholder = prompt('Inserisci nome del placeholder:', 'NOME_PLACEHOLDER');\n                    if (placeholder) {\n                      insertPlaceholder(placeholder);\n                    }\n                  }}\n                  className=\"custom-placeholder-btn w-full bg-blue-600 hover:bg-blue-700\"\n                  size=\"sm\"\n                >\n                  Placeholder Personalizzato\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Image Uploader */}\n        <label\n          className=\"image-btn\"\n          style={{ \n            padding: '0.5rem', \n            border: 'none', \n            background: 'white', \n            borderRadius: '2rem',\n            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.05)',\n            cursor: 'pointer',\n            display: 'inline-flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            color: '#374151',\n            transition: 'all 0.15s ease'\n          }}\n          title=\"Inserisci Immagine\"\n        >\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n            <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\n            <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" />\n            <polyline points=\"21 15 16 10 5 21\" />\n          </svg>\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            style={{ display: 'none' }}\n            onChange={handleImageUpload}\n          />\n        </label>\n      </div>\n      \n      {/* Content area */}\n      <div\n        ref={editorRef}\n        style={{ \n          minHeight: '450px', \n          padding: '1.5rem',\n          outline: 'none',\n          fontSize: '0.875rem',\n          lineHeight: '1.6',\n          backgroundColor: 'white',\n          border: 'none',\n          color: '#374151'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SimpleEditor;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/Switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/TemplateActionDropdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExternalLink' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reloadTemplates' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport { \n  Edit,\n  ExternalLink,\n  FileOutput,\n  FileText,\n  Settings,\n  Star,\n  Trash2\n} from 'lucide-react';\nimport { Template } from '../../../types/template';\n\ninterface TemplateActionDropdownProps {\n  template: Template;\n  isOpen: boolean;\n  toggleDropdown: () => void;\n  onEditContent: (template: Template) => void;\n  onEditProperties: (template: Template) => void;\n  onSetAsDefault: (id: string, type: string) => void;\n  onRemove: (id: string) => void;\n  onExportPdf?: (template: Template) => void;\n  onExportDocx?: (template: Template) => void;\n  reloadTemplates: () => void;\n  buttonRef: React.RefObject<HTMLButtonElement>;\n}\n\nexport const TemplateActionDropdown: React.FC<TemplateActionDropdownProps> = ({\n  template,\n  isOpen,\n  toggleDropdown,\n  onEditContent,\n  onEditProperties,\n  onSetAsDefault,\n  onRemove,\n  onExportPdf,\n  onExportDocx,\n  reloadTemplates,\n  buttonRef\n}) => {\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        isOpen &&\n        dropdownRef.current && \n        !dropdownRef.current.contains(event.target as Node) &&\n        buttonRef.current &&\n        !buttonRef.current.contains(event.target as Node)\n      ) {\n        toggleDropdown();\n      }\n    };\n\n    // Add event listeners\n    document.addEventListener('mousedown', handleClickOutside);\n\n    // Clean up event listeners\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen, toggleDropdown, buttonRef]);\n\n  if (!isOpen) return null;\n  \n  return (\n    <div \n      ref={dropdownRef}\n      data-testid=\"dropdown-content\"\n      className=\"absolute right-0 top-full mt-1 bg-white rounded-md shadow-lg py-1 w-56 z-50\"\n    >\n      <div className=\"py-1\">\n        <button\n          onClick={() => {\n            onEditContent(template);\n            toggleDropdown();\n          }}\n          className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center\"\n        >\n          <Edit className=\"w-4 h-4 mr-2 text-blue-500\" />\n          Modifica Contenuto\n        </button>\n        \n        <button\n          onClick={() => {\n            onEditProperties(template);\n            toggleDropdown();\n          }}\n          className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center\"\n        >\n          <Settings className=\"w-4 h-4 mr-2 text-gray-500\" />\n          Modifica Proprietà\n        </button>\n        \n        <button\n          onClick={() => {\n            onSetAsDefault(template.id, template.type);\n            toggleDropdown();\n          }}\n          className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center\"\n        >\n          <Star className=\"w-4 h-4 mr-2 text-yellow-500\" />\n          Imposta come Predefinito\n        </button>\n        \n        {onExportPdf && (\n          <button\n            onClick={() => {\n              onExportPdf(template);\n              toggleDropdown();\n            }}\n            className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center\"\n          >\n            <FileOutput className=\"w-4 h-4 mr-2 text-red-500\" />\n            Esporta PDF\n          </button>\n        )}\n        \n        {onExportDocx && (\n          <button\n            onClick={() => {\n              onExportDocx(template);\n              toggleDropdown();\n            }}\n            className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center\"\n          >\n            <FileText className=\"w-4 h-4 mr-2 text-blue-500\" />\n            Esporta DOCX\n          </button>\n        )}\n        \n        <button\n          onClick={() => {\n            onRemove(template.id);\n            toggleDropdown();\n          }}\n          className=\"w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center\"\n        >\n          <Trash2 className=\"w-4 h-4 mr-2\" />\n          Elimina\n        </button>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/TemplateCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRef' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Presentation' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":61,"column":19,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":61,"endColumn":32,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[1980,1993],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef } from 'react';\nimport { \n  Edit,\n  ExternalLink,\n  MoreVertical,\n  Presentation,\n  Star,\n  Trash2\n} from 'lucide-react';\nimport { TemplateActionDropdown } from './TemplateActionDropdown';\nimport { Template } from '../../../types/template';\n\ninterface TemplateCardProps {\n  template: Template;\n  isDefault: boolean;\n  onEdit: (template: Template) => void;\n  onSetAsDefault: (id: string, type: string) => void;\n  onRemove: (id: string) => void;\n  openDropdownId: string | null;\n  toggleDropdown: (id: string) => void;\n  dropdownRefs: React.MutableRefObject<{[key: string]: React.RefObject<HTMLButtonElement>}>;\n  fetchTemplates: () => Promise<void>;\n}\n\nexport const TemplateCard: React.FC<TemplateCardProps> = ({\n  template,\n  isDefault,\n  onEdit,\n  onSetAsDefault,\n  onRemove,\n  openDropdownId,\n  toggleDropdown,\n  dropdownRefs,\n  fetchTemplates,\n}) => {\n  return (\n    <div className={`border rounded-xl p-3 ${isDefault ? 'bg-yellow-50 border-yellow-200' : 'hover:shadow-sm transition-shadow'}`}>\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h5 className=\"font-medium\">{template.name}</h5>\n          <p className=\"text-xs text-gray-500\">\n            {template.fileFormat === 'pptx' ? 'Presentazione' : 'Documento'}\n            {template.googleDocsUrl && ' • Google Docs'}\n          </p>\n          {isDefault && (\n            <div className=\"flex items-center mt-1\">\n              <Star className=\"h-3 w-3 text-yellow-500 mr-1\" />\n              <span className=\"text-yellow-700 text-xs\">Template predefinito</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center relative\">\n          <div className=\"relative\">\n            <button\n              ref={el => {\n                if (!dropdownRefs.current[template.id]) {\n                  dropdownRefs.current[template.id] = React.createRef<HTMLButtonElement>();\n                }\n                if (el) {\n                  // @ts-ignore\n                  dropdownRefs.current[template.id].current = el;\n                }\n              }}\n              onClick={() => toggleDropdown(template.id)}\n              className=\"p-1 rounded text-gray-500 hover:bg-gray-100 focus:outline-none\"\n            >\n              <MoreVertical className=\"h-4 w-4\" />\n            </button>\n            \n            <TemplateActionDropdown\n              template={template}\n              isOpen={openDropdownId === template.id}\n              toggleDropdown={() => toggleDropdown(template.id)}\n              onEditContent={(template: Template) => onEdit(template)}\n              onEditProperties={(template: Template) => onEdit(template)}\n              onSetAsDefault={onSetAsDefault}\n              onRemove={onRemove}\n              reloadTemplates={fetchTemplates}\n              buttonRef={dropdownRefs.current[template.id]}\n            />\n          </div>\n          \n          {!isDefault && (\n            <button\n              onClick={() => onSetAsDefault(template.id, template.type)}\n              className=\"p-1 text-gray-400 hover:text-yellow-500 transition-colors ml-1\"\n              title=\"Imposta come predefinito\"\n            >\n              <Star className=\"h-4 w-4\" />\n            </button>\n          )}\n          \n          {template.googleDocsUrl && (\n            <a\n              href={template.googleDocsUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"p-1 text-gray-400 hover:text-green-600 transition-colors ml-1\"\n              title=\"Apri in Google Docs\"\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n            </a>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/TemplateFormModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/TemplateTypeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/Toast.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":74,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":74,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { X, CheckCircle, AlertCircle, AlertTriangle, Info } from 'lucide-react';\n\nexport interface Toast {\n  id: string;\n  title: string;\n  description: string;\n  status: 'success' | 'error' | 'warning' | 'info';\n}\n\ninterface ToastProps {\n  title: string;\n  description: string;\n  status: 'success' | 'error' | 'warning' | 'info';\n  onClose: () => void;\n  duration?: number;\n}\n\ninterface ToastOptions {\n  title: string;\n  description: string;\n  status?: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  isClosable?: boolean;\n}\n\nconst ToastComponent: React.FC<ToastProps> = ({ \n  title, \n  description, \n  status, \n  onClose, \n  duration = 5000 \n}) => {\n  const bgColor = status === 'success' ? 'bg-green-100 border-green-500' : \n                 status === 'error' ? 'bg-red-100 border-red-500' : \n                 status === 'warning' ? 'bg-yellow-100 border-yellow-500' : 'bg-blue-100 border-blue-500';\n  \n  const textColor = status === 'success' ? 'text-green-800' : \n                   status === 'error' ? 'text-red-800' : \n                   status === 'warning' ? 'text-yellow-800' : 'text-blue-800';\n\n  const Icon = status === 'success' ? CheckCircle :\n               status === 'error' ? AlertCircle :\n               status === 'warning' ? AlertTriangle : Info;\n  \n  useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        onClose();\n      }, duration);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [onClose, duration]);\n  \n  return (\n    <div className={`fixed top-4 right-4 z-50 p-4 rounded shadow-lg border-l-4 ${bgColor} ${textColor} max-w-md`}>\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex items-start\">\n          <Icon size={20} className=\"mr-2 flex-shrink-0 mt-0.5\" />\n          <div>\n            <h3 className=\"font-bold\">{title}</h3>\n            <p className=\"mt-1\">{description}</p>\n          </div>\n        </div>\n        <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700 ml-4\">\n          <X size={16} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport const useToast = () => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n  \n  const toast = (options: ToastOptions) => {\n    const { title, description, status = 'info', duration = 5000 } = options;\n    const id = Math.random().toString(36).substring(2, 11);\n    const newToast: Toast = { id, title, description, status };\n    \n    setToasts((prev) => [...prev, newToast]);\n    \n    if (duration > 0) {\n      setTimeout(() => {\n        setToasts((prev) => prev.filter((t) => t.id !== id));\n      }, duration);\n    }\n  };\n  \n  const closeToast = (id: string) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id));\n  };\n  \n  const ToastContainer: React.FC = () => (\n    <div className=\"toast-container\">\n      {toasts.map((t) => (\n        <ToastComponent\n          key={t.id}\n          title={t.title}\n          description={t.description}\n          status={t.status}\n          onClose={() => closeToast(t.id)}\n        />\n      ))}\n    </div>\n  );\n  \n  return { toast, ToastContainer };\n};\n\nexport { ToastComponent as Toast };","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/templateExamples.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/shared/template/templateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/trainers/TrainerForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Award' is defined but never used.","line":3,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":3,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Certification' is defined but never used.","line":31,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SPECIALTIES' is assigned a value but never used.","line":39,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":53,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3006,3009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3006,3009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":119,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":17}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Phone, Mail, Award, X } from 'lucide-react';\nimport Select from 'react-select';\nimport { getCourses } from '../../services/courses';\n\ntype Trainer = {\n  id?: string;\n  firstName: string;\n  lastName: string;\n  taxCode?: string;\n  phone?: string;\n  email?: string;\n  certifications?: string[];\n  vatNumber?: string;\n  hourlyRate?: string;\n  registerCode?: string;\n  iban?: string;\n  birthDate?: string | null;\n  residenceAddress?: string;\n  residenceCity?: string;\n  province?: string;\n  postalCode?: string;\n  notes?: string;\n  specialties: string[];\n  status?: string;\n  createdAt?: string;\n  updatedAt?: string;\n};\ntype TrainerInsert = Omit<Trainer, 'id' | 'createdAt' | 'updatedAt'>;\ntype Certification = { id: string; name: string; description?: string };\n\ninterface TrainerFormProps {\n  trainer?: Trainer;\n  onSubmit: (data: TrainerInsert) => Promise<void>;\n  onCancel: () => void;\n}\n\nconst SPECIALTIES = [\n  'First Aid',\n  'Safety Training',\n  'Health & Wellness',\n  'Emergency Response',\n  'Fire Safety',\n  'Ergonomics',\n  'Environmental Safety',\n  'Risk Assessment',\n  'Leadership',\n  'Communication'\n];\n\nexport default function TrainerForm({ trainer, onSubmit, onCancel }: TrainerFormProps) {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [certOptions, setCertOptions] = useState<{ value: string; label: string }[]>([]);\n\n  const [formData, setFormData] = useState<TrainerInsert>({\n    firstName: '',\n    lastName: '',\n    taxCode: '',\n    phone: '',\n    email: '',\n    certifications: [],\n    vatNumber: '',\n    hourlyRate: '',\n    registerCode: '',\n    iban: '',\n    birthDate: '',\n    residenceAddress: '',\n    residenceCity: '',\n    province: '',\n    postalCode: '',\n    notes: '',\n    status: 'ACTIVE',\n    specialties: [],\n  });\n\n  useEffect(() => {\n    if (trainer) {\n      setFormData({\n        firstName: trainer.firstName ?? '',\n        lastName: trainer.lastName ?? '',\n        taxCode: trainer.taxCode ?? '',\n        phone: trainer.phone ?? '',\n        email: trainer.email ?? '',\n        certifications: trainer.certifications ?? [],\n        vatNumber: trainer.vatNumber ?? '',\n        hourlyRate: trainer.hourlyRate ?? '',\n        registerCode: trainer.registerCode ?? '',\n        iban: trainer.iban ?? '',\n        birthDate: trainer.birthDate ?? '',\n        residenceAddress: trainer.residenceAddress ?? '',\n        residenceCity: trainer.residenceCity ?? '',\n        province: trainer.province ?? '',\n        postalCode: trainer.postalCode ?? '',\n        notes: trainer.notes ?? '',\n        status: trainer.status ?? 'ACTIVE',\n        specialties: trainer.specialties ?? [],\n      });\n    }\n  }, [trainer]);\n\n  useEffect(() => {\n    async function fetchCerts() {\n      try {\n        const courses = await getCourses();\n        const allCerts: string[] = [];\n        courses.forEach((c: any) => {\n          if (c.certifications) {\n            const certs = Array.isArray(c.certifications)\n              ? c.certifications\n              : c.certifications.split(',').map((s: string) => s.trim());\n            allCerts.push(...certs);\n          }\n        });\n        const uniqueCerts = Array.from(new Set(allCerts.filter(Boolean))).sort();\n        setCertOptions(uniqueCerts.map(c => ({ value: c, label: c })));\n      } catch (e) {\n        setCertOptions([]);\n      }\n    }\n    fetchCerts();\n  }, []);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData((prev: TrainerInsert) => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const payload = {\n        ...formData,\n        birthDate: formData.birthDate ? formData.birthDate : null,\n        certifications: formData.certifications || [],\n      };\n      await onSubmit(payload);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to save trainer');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700\">\n              Nome\n            </label>\n            <div className=\"mt-1 relative rounded-md shadow-sm\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <User className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <input\n                type=\"text\"\n                name=\"firstName\"\n                id=\"firstName\"\n                required\n                value={formData.firstName ?? ''}\n                onChange={handleChange}\n                className=\"focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md\"\n                placeholder=\"Nome\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700\">\n              Cognome\n            </label>\n            <div className=\"mt-1 relative rounded-md shadow-sm\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <User className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <input\n                type=\"text\"\n                name=\"lastName\"\n                id=\"lastName\"\n                required\n                value={formData.lastName ?? ''}\n                onChange={handleChange}\n                className=\"focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md\"\n                placeholder=\"Cognome\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"taxCode\" className=\"block text-sm font-medium text-gray-700\">Codice Fiscale</label>\n            <input\n              type=\"text\"\n              name=\"taxCode\"\n              id=\"taxCode\"\n              value={formData.taxCode ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Codice Fiscale\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700\">Telefono</label>\n            <div className=\"mt-1 relative rounded-md shadow-sm\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <Phone className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <input\n                type=\"tel\"\n                name=\"phone\"\n                id=\"phone\"\n                value={formData.phone ?? ''}\n                onChange={handleChange}\n                className=\"focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md\"\n                placeholder=\"Telefono\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\n            <div className=\"mt-1 relative rounded-md shadow-sm\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <Mail className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={formData.email ?? ''}\n                onChange={handleChange}\n                className=\"focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md\"\n                placeholder=\"Email\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"vatNumber\" className=\"block text-sm font-medium text-gray-700\">P.IVA</label>\n            <input\n              type=\"text\"\n              name=\"vatNumber\"\n              id=\"vatNumber\"\n              value={formData.vatNumber ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"P.IVA\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"hourlyRate\" className=\"block text-sm font-medium text-gray-700\">Tariffa Oraria (€)</label>\n            <input\n              type=\"number\"\n              name=\"hourlyRate\"\n              id=\"hourlyRate\"\n              value={formData.hourlyRate ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Tariffa Oraria\"\n              min=\"0\"\n              step=\"0.01\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"registerCode\" className=\"block text-sm font-medium text-gray-700\">Codice Albo</label>\n            <input\n              type=\"text\"\n              name=\"registerCode\"\n              id=\"registerCode\"\n              value={formData.registerCode ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Codice Albo\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Certificazioni</label>\n            <Select\n              isMulti\n              options={certOptions}\n              value={certOptions.filter(opt => (formData.certifications || []).includes(opt.value))}\n              onChange={opts => setFormData(prev => ({ ...prev, certifications: opts.map(o => o.value) }))}\n              placeholder=\"Seleziona certificazioni...\"\n              classNamePrefix=\"react-select\"\n              menuPortalTarget={typeof window !== 'undefined' ? document.body : null}\n              menuPlacement=\"auto\"\n              styles={{\n                menu: (provided) => ({\n                  ...provided,\n                  zIndex: 9999,\n                  maxWidth: '100%',\n                  minWidth: '100%',\n                }),\n                menuList: (provided) => ({\n                  ...provided,\n                  maxHeight: 200,\n                }),\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"iban\" className=\"block text-sm font-medium text-gray-700\">IBAN</label>\n            <input\n              type=\"text\"\n              name=\"iban\"\n              id=\"iban\"\n              value={formData.iban ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"IBAN\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"birthDate\" className=\"block text-sm font-medium text-gray-700\">Data di Nascita</label>\n            <input\n              type=\"date\"\n              name=\"birthDate\"\n              id=\"birthDate\"\n              value={formData.birthDate ? formData.birthDate.split('T')[0] : ''}\n              onChange={e => setFormData(prev => ({ ...prev, birthDate: e.target.value }))}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"residenceAddress\" className=\"block text-sm font-medium text-gray-700\">Via di Residenza</label>\n            <input\n              type=\"text\"\n              name=\"residenceAddress\"\n              id=\"residenceAddress\"\n              value={formData.residenceAddress ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Via di Residenza\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"residenceCity\" className=\"block text-sm font-medium text-gray-700\">Comune di Residenza</label>\n            <input\n              type=\"text\"\n              name=\"residenceCity\"\n              id=\"residenceCity\"\n              value={formData.residenceCity ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Comune di Residenza\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"province\" className=\"block text-sm font-medium text-gray-700\">Provincia</label>\n            <input\n              type=\"text\"\n              name=\"province\"\n              id=\"province\"\n              value={formData.province ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Provincia\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"postalCode\" className=\"block text-sm font-medium text-gray-700\">CAP</label>\n            <input\n              type=\"text\"\n              name=\"postalCode\"\n              id=\"postalCode\"\n              value={formData.postalCode ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"CAP\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"status\" className=\"block text-sm font-medium text-gray-700\">Stato</label>\n            <select\n              name=\"status\"\n              id=\"status\"\n              required\n              value={formData.status ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md\"\n            >\n              <option value=\"Active\">Attivo</option>\n              <option value=\"Inactive\">Non Attivo</option>\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"notes\" className=\"block text-sm font-medium text-gray-700\">Note</label>\n            <textarea\n              name=\"notes\"\n              id=\"notes\"\n              value={formData.notes ?? ''}\n              onChange={handleChange}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Note\"\n              rows={2}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-3\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          disabled={loading}\n          className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n        >\n          {loading ? 'Saving...' : trainer ? 'Update Trainer' : 'Create Trainer'}\n        </button>\n      </div>\n    </form>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/trainers/TrainerImport.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[159,162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[159,162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[253,256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[253,256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[841,844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[841,844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2082,2085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2082,2085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":73,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":107,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2347,2350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2347,2350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport GenericImport, { defaultProcessFile } from '../shared/GenericImport';\n\ninterface TrainerImportProps {\n  onImport: (trainers: any[], overwriteIds?: string[]) => Promise<void>;\n  onClose: () => void;\n  existingTrainers?: any[];\n}\n\n// Definizione della mappatura dei campi CSV\nconst csvHeaderMap: Record<string, string> = {\n  'Nome': 'nome',\n  'Cognome': 'cognome',\n  'Codice Fiscale': 'codice_fiscale',\n  'Email': 'email',\n  'Telefono': 'telefono',\n  'Specializzazioni': 'specialties',\n  'Tariffa Oraria': 'tariffa_oraria',\n  'Indirizzo': 'indirizzo',\n  'Città': 'citta',\n  'Provincia': 'provincia',\n  'CAP': 'cap',\n  'Data Nascita': 'data_nascita',\n  'Luogo Nascita': 'luogo_nascita',\n  'Note': 'note',\n  'Stato': 'status',\n};\n\n// Validazione personalizzata per i formatori\nconst validateTrainer = (trainer: any): string[] => {\n  const errors: string[] = [];\n  \n  if (!trainer.nome) {\n    errors.push('Nome obbligatorio');\n  }\n  \n  if (!trainer.cognome) {\n    errors.push('Cognome obbligatorio');\n  }\n  \n  if (!trainer.codice_fiscale) {\n    errors.push('Codice Fiscale obbligatorio');\n  } else if (trainer.codice_fiscale.length !== 16) {\n    errors.push('Codice Fiscale deve essere di 16 caratteri');\n  }\n  \n  if (trainer.tariffa_oraria && isNaN(Number(trainer.tariffa_oraria))) {\n    errors.push('Tariffa oraria deve essere un numero');\n  }\n  \n  // Validazione del campo status\n  if (trainer.status) {\n    const validStatuses = ['ACTIVE', 'INACTIVE', 'SUSPENDED', 'TERMINATED', 'PENDING'];\n    const upperStatusValue = trainer.status.toString().trim().toUpperCase();\n    if (!validStatuses.includes(upperStatusValue)) {\n      errors.push(`Stato non valido: ${trainer.status}. Valori consentiti: ${validStatuses.join(', ')}`);\n    }\n  }\n  \n  return errors;\n};\n\n/**\n * Componente per l'importazione di formatori da file CSV\n */\nconst TrainerImport: React.FC<TrainerImportProps> = ({\n  onImport,\n  onClose,\n  existingTrainers = []\n}) => {\n  // Funzione personalizzata per processare il file CSV\n  const customProcessFile = async (file: File): Promise<any[]> => {\n    try {\n      // Processa il file e ottieni i dati grezzi\n      const processedData = await defaultProcessFile(file, csvHeaderMap);\n      \n      // Processa ogni riga per gestire il campo status\n      const processedRows = processedData.map((trainer: any) => {\n        // Gestione speciale per il campo status\n        if (trainer.status !== undefined) {\n          const statusValue = trainer.status?.toString().trim();\n          if (!statusValue || statusValue === '') {\n            trainer.status = 'ACTIVE';\n          } else {\n            // Verifica che il valore sia uno dei valori validi dell'enum PersonStatus\n            const validStatuses = ['ACTIVE', 'INACTIVE', 'SUSPENDED', 'TERMINATED', 'PENDING'];\n            const upperStatusValue = statusValue.toUpperCase();\n            if (validStatuses.includes(upperStatusValue)) {\n              trainer.status = upperStatusValue;\n            } else {\n      \n              trainer.status = 'ACTIVE';\n            }\n          }\n        } else {\n          // Se il campo status non è presente nel CSV, imposta il default\n          trainer.status = 'ACTIVE';\n        }\n        \n        return trainer;\n      });\n      \n      return processedRows;\n    } catch (error) {\n\n      throw error;\n    }\n  };\n\n  return (\n    <GenericImport\n      entityType=\"formatori\"\n      uniqueField=\"codice_fiscale\"\n      onImport={onImport}\n      onClose={onClose}\n      existingEntities={existingTrainers}\n      csvHeaderMap={csvHeaderMap}\n      title=\"Importa Formatori\"\n      subtitle=\"Carica un file CSV con i dati dei formatori da importare\"\n      customValidation={validateTrainer}\n      csvDelimiter=\";\"\n      customProcessFile={customProcessFile}\n    />\n  );\n};\n\nexport default TrainerImport;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/ActionButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoreVertical' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronDown' is defined but never used.","line":4,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenu' is defined but never used.","line":5,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Dropdown, DropdownAction } from '../../design-system/molecules/Dropdown';\nimport { cn } from '../../design-system/utils';\nimport { MoreVertical, ChevronDown } from 'lucide-react';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\n\nexport interface ActionButtonProps {\n  /** Lista delle azioni disponibili */\n  actions: DropdownAction[];\n  /** Classi personalizzate aggiuntive */\n  className?: string;\n  /** Se mostrare il pulsante come pillola blu invece che come icona (default: true) */\n  asPill?: boolean;\n}\n\n/**\n * Bottone di azioni specializzato per la prima colonna delle tabelle.\n * Mostra un menu dropdown di azioni quando viene cliccato.\n * \n * IMPORTANTE: I pulsanti devono essere SEMPRE a forma di pillola (pill=true) di default.\n * Questo è uno standard del progetto per mantenere consistenza nell'UI.\n */\nexport const ActionButton: React.FC<ActionButtonProps> = ({\n  actions,\n  className = '',\n  asPill = true,\n}) => {\n  return (\n    <div \n      className=\"relative inline-block\" \n      onClick={(e) => e.stopPropagation()}\n      style={{ zIndex: 100 }}\n    >\n      {asPill ? (\n        <Dropdown\n          actions={actions}\n          label=\"Azioni\"\n          icon={undefined}\n          showArrow={true}\n          variant=\"outline\"\n          pill={true}\n          className={cn(\n            'text-blue-600 bg-blue-50 hover:bg-blue-100 border-blue-200',\n            className\n          )}\n        />\n      ) : (\n        <Dropdown\n          actions={actions}\n          icon={undefined}\n          label=\"Azioni\"\n          showArrow={true}\n          customStyle={true}\n          pill={true}\n          className={cn(\n            'text-blue-600 hover:text-blue-800 focus:text-blue-800',\n            'bg-blue-50 hover:bg-blue-100 active:bg-blue-200',\n            className\n          )}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ActionButton;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/AddEntityDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/BatchEditButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronDown' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Pencil, ChevronDown, Check } from 'lucide-react';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Dropdown } from '../../design-system/molecules/Dropdown';\nimport { cn } from '../../design-system/utils';\n\nexport interface BatchEditButtonProps {\n  /** Whether selection mode is active */\n  selectionMode: boolean;\n  /** Function called when the button is clicked to toggle selection mode */\n  onToggleSelectionMode: () => void;\n  /** Number of selected items */\n  selectedCount?: number;\n  /** Actions to show in the dropdown when items are selected */\n  actions?: Array<{\n    label: string;\n    icon?: React.ReactNode;\n    onClick: () => void;\n    variant?: 'default' | 'danger' | 'primary' | 'secondary';\n  }>;\n  /** Additional CSS classes */\n  className?: string;\n  /** Button variant style */\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\n}\n\n/**\n * A button that toggles selection mode and transforms into a dropdown\n * with actions when items are selected\n */\nexport const BatchEditButton: React.FC<BatchEditButtonProps> = ({\n  selectionMode,\n  onToggleSelectionMode,\n  selectedCount = 0,\n  actions = [],\n  className = '',\n  variant = 'outline',\n}) => {\n  if (selectionMode && selectedCount > 0) {\n    return (\n      <Dropdown\n        variant=\"outline\"\n        label={`${selectedCount} selezionati`}\n        icon={<Check className=\"h-4 w-4\" />}\n        actions={actions}\n        className={cn(\"bg-blue-50 text-blue-700 border-blue-300\", className)}\n      />\n    );\n  }\n\n  return (\n    <Button \n      variant={variant}\n      size=\"sm\" \n      leftIcon={<Pencil className=\"h-4 w-4\" />}\n      onClick={onToggleSelectionMode}\n      className={cn(\n        \"h-10 px-4 min-w-[100px] whitespace-nowrap\",\n        selectionMode ? \"bg-blue-50 text-blue-700 border-blue-300\" : \"\",\n        className\n      )}\n    >\n      Modifica\n    </Button>\n  );\n};\n\nexport default BatchEditButton;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/ColumnSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'localHiddenColumns'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [hiddenColumns, localHiddenColumns]","fix":{"range":[1584,1599],"text":"[hiddenColumns, localHiddenColumns]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'localColumnOrder'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [columnOrder, localColumnOrder]","fix":{"range":[1752,1765],"text":"[columnOrder, localColumnOrder]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { Check, Columns, GripVertical } from 'lucide-react';\nimport { Button } from '../../design-system/atoms/Button';\n\ninterface ColumnOption {\n  key: string;\n  label: string;\n  required?: boolean;\n  width?: number;\n  order?: number;\n}\n\ninterface ColumnSelectorProps {\n  columns: ColumnOption[];\n  hiddenColumns: string[];\n  onChange: (hiddenColumns: string[]) => void;\n  onOrderChange?: (columnOrder: Record<string, number>) => void;\n  columnOrder?: Record<string, number>;\n  className?: string;\n  buttonClassName?: string;\n}\n\nexport const ColumnSelector: React.FC<ColumnSelectorProps> = ({\n  columns,\n  hiddenColumns,\n  onChange,\n  onOrderChange,\n  columnOrder = {},\n  className = '',\n  buttonClassName = ''\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  // Track visible columns locally - initialize ONCE from props\n  const [localHiddenColumns, setLocalHiddenColumns] = useState<string[]>(hiddenColumns);\n  \n  // Track column order locally - initialize ONCE from props\n  const [localColumnOrder, setLocalColumnOrder] = useState<Record<string, number>>(columnOrder);\n  \n  // Drag state\n  const [draggedColumn, setDraggedColumn] = useState<string | null>(null);\n  const [dragOverColumn, setDragOverColumn] = useState<string | null>(null);\n  \n  // Update local state when props change (but avoid infinite loops)\n  useEffect(() => {\n    if (JSON.stringify(hiddenColumns) !== JSON.stringify(localHiddenColumns)) {\n      setLocalHiddenColumns(hiddenColumns);\n    }\n  }, [hiddenColumns]);\n  \n  useEffect(() => {\n    if (JSON.stringify(columnOrder) !== JSON.stringify(localColumnOrder)) {\n      setLocalColumnOrder(columnOrder);\n    }\n  }, [columnOrder]);\n  \n  // Get sorted columns for display\n  const sortedColumns = [...columns].sort((a, b) => {\n    const orderA = localColumnOrder[a.key] ?? columns.findIndex(c => c.key === a.key);\n    const orderB = localColumnOrder[b.key] ?? columns.findIndex(c => c.key === b.key);\n    return orderA - orderB;\n  });\n\n  // Handle click outside to close dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Toggle column visibility\n  const handleToggleColumn = (key: string, isRequired: boolean) => {\n    if (isRequired) return; // Non permettere di nascondere colonne obbligatorie\n    \n    setLocalHiddenColumns(prev => {\n      if (prev.includes(key)) {\n        return prev.filter(k => k !== key);\n      } else {\n        return [...prev, key];\n      }\n    });\n  };\n\n  // Apply changes and close\n  const handleApply = () => {\n    // Apply changes to parent component\n    onChange(localHiddenColumns);\n    \n    if (onOrderChange) {\n      onOrderChange(localColumnOrder);\n    }\n    \n    // Close dropdown after applying changes\n    setIsOpen(false);\n  };\n  \n  // Show all columns that aren't required to be hidden\n  const handleShowAll = () => {\n    const requiredHidden = columns.filter(col => col.required && localHiddenColumns.includes(col.key)).map(col => col.key);\n    setLocalHiddenColumns(requiredHidden);\n  };\n  \n  // Reset column order to default\n  const handleResetOrder = () => {\n    // Reset order to default (based on original array order)\n    const defaultOrder: Record<string, number> = {};\n    columns.forEach((col, index) => {\n      defaultOrder[col.key] = index;\n    });\n    setLocalColumnOrder(defaultOrder);\n  };\n  \n  // Handle column dragging for reordering\n  const handleDragStart = (e: React.DragEvent, key: string) => {\n    setDraggedColumn(key);\n    \n    // Create a custom drag image\n    const ghostElement = document.createElement('div');\n    ghostElement.textContent = columns.find(col => col.key === key)?.label || '';\n    ghostElement.style.padding = '8px 12px';\n    ghostElement.style.background = '#3b82f6';\n    ghostElement.style.color = '#fff';\n    ghostElement.style.borderRadius = '4px';\n    ghostElement.style.fontSize = '14px';\n    ghostElement.style.position = 'absolute';\n    ghostElement.style.top = '-1000px';\n    document.body.appendChild(ghostElement);\n    e.dataTransfer.setDragImage(ghostElement, 0, 0);\n    setTimeout(() => document.body.removeChild(ghostElement), 0);\n  };\n  \n  const handleDragOver = (e: React.DragEvent, key: string) => {\n    e.preventDefault();\n    setDragOverColumn(key);\n    \n    if (draggedColumn && draggedColumn !== key) {\n      const currentOrder = [...sortedColumns].map(col => col.key);\n      const fromIndex = currentOrder.indexOf(draggedColumn);\n      const toIndex = currentOrder.indexOf(key);\n      \n      if (fromIndex !== -1 && toIndex !== -1) {\n        // Create new order\n        const newOrder = [...currentOrder];\n        newOrder.splice(fromIndex, 1);\n        newOrder.splice(toIndex, 0, draggedColumn);\n        \n        // Update order values\n        const newColumnOrder: Record<string, number> = {};\n        newOrder.forEach((colKey, index) => {\n          newColumnOrder[colKey] = index;\n        });\n        \n        setLocalColumnOrder(newColumnOrder);\n      }\n    }\n  };\n  \n  const handleDragEnd = () => {\n    setDraggedColumn(null);\n    setDragOverColumn(null);\n  };\n\n  return (\n    <div className={`relative ${className}`} ref={ref}>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        size=\"sm\"\n        leftIcon={<Columns className=\"h-4 w-4\" />}\n        onClick={(e) => {\n          e.preventDefault();\n          setIsOpen(!isOpen);\n        }}\n        className={`h-10 px-4 min-w-[100px] whitespace-nowrap ${buttonClassName || ''}`}\n      >\n        Colonne\n      </Button>\n\n      {isOpen && (\n        <div className=\"absolute right-0 mt-2 w-80 bg-white rounded-md shadow-lg z-50 border border-gray-200\">\n          <div className=\"p-3 text-sm font-medium text-blue-700 border-b bg-gradient-to-r from-blue-50 to-blue-100 rounded-t-md\">\n            Gestisci colonne\n          </div>\n          \n          <div className=\"p-2 max-h-[400px] overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-2 px-2 py-1 text-xs text-gray-500\">\n              <span>Trascina per riordinare le colonne</span>\n              <button \n                onClick={handleShowAll}\n                className=\"text-blue-600 hover:underline text-xs font-medium\"\n              >\n                Mostra tutto\n              </button>\n            </div>\n            \n            <div className=\"space-y-1\">\n              {sortedColumns.map((column) => {\n                const isHidden = localHiddenColumns.includes(column.key);\n                const isRequired = !!column.required;\n                \n                return (\n                  <div\n                    key={column.key}\n                    className={`\n                      flex items-center justify-between px-3 py-2 rounded-md\n                      transition-colors duration-150\n                      ${column.required ? 'opacity-75' : 'hover:bg-gray-100'}\n                      ${draggedColumn === column.key ? 'bg-blue-100' : ''}\n                      ${dragOverColumn === column.key ? 'border border-blue-500 bg-blue-50' : ''}\n                    `}\n                    draggable={true}\n                    onDragStart={(e) => handleDragStart(e, column.key)}\n                    onDragOver={(e) => handleDragOver(e, column.key)}\n                    onDragEnd={handleDragEnd}\n                    onDragEnter={(e) => {\n                      e.preventDefault();\n                      setDragOverColumn(column.key);\n                    }}\n                    onDragLeave={(e) => {\n                      e.preventDefault();\n                      if (dragOverColumn === column.key) {\n                        setDragOverColumn(null);\n                      }\n                    }}\n                  >\n                    <label className=\"flex items-center gap-2 flex-1 cursor-pointer select-none\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                        checked={!isHidden}\n                        onChange={() => handleToggleColumn(column.key, isRequired)}\n                        disabled={isRequired}\n                      />\n                      <span className={isRequired ? \"font-medium\" : \"\"}>\n                        {column.label}\n                      </span>\n                    </label>\n                    \n                    <div className=\"cursor-grab text-gray-400 hover:text-gray-600\">\n                      <GripVertical size={16} />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          \n          <div className=\"p-3 border-t bg-gray-50 flex items-center justify-between rounded-b-md\">\n            <button\n              onClick={handleResetOrder}\n              className=\"text-gray-600 hover:text-gray-800 text-sm font-medium\"\n            >\n              Ripristina ordine\n            </button>\n            \n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={handleApply}\n              className=\"ml-auto\"\n            >\n              Applica\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ColumnSelector;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/ErrorBoundary.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":103,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":103,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { sanitizeErrorMessage } from '../../utils/errorUtils';\nimport { cn } from '../../design-system/utils';\n\n/**\n * Error Boundary component for lazy-loaded routes and components\n * Week 11 Implementation - Lazy Loading Optimization\n */\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  className?: string;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    \n    // Call optional error handler\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Default error UI\n      return (\n        <div className={cn(\n          'flex flex-col items-center justify-center min-h-[200px] p-6 bg-red-50 border border-red-200 rounded-lg',\n          this.props.className\n        )}>\n          <div className=\"text-red-600 mb-4\">\n            <svg className=\"w-12 h-12\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" \n              />\n            </svg>\n          </div>\n          \n          <h3 className=\"text-lg font-semibold text-red-800 mb-2\">\n            Something went wrong\n          </h3>\n          \n          <p className=\"text-red-600 text-center mb-4 max-w-md\">\n            We encountered an error while loading this component. Please try again.\n          </p>\n          \n          {process.env.NODE_ENV === 'development' && this.state.error && (\n            <details className=\"mb-4 p-3 bg-red-100 rounded text-sm text-red-800 max-w-full overflow-auto\">\n              <summary className=\"cursor-pointer font-medium\">Error Details</summary>\n              <pre className=\"mt-2 whitespace-pre-wrap\">\n                {sanitizeErrorMessage(this.state.error, 'Si è verificato un errore nell\\'applicazione')}\\n{process.env.NODE_ENV === 'development' ? this.state.error.stack : ''}\n              </pre>\n            </details>\n          )}\n          \n          <button\n            onClick={this.handleRetry}\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          >\n            Try Again\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n/**\n * Hook-based error boundary for functional components\n */\nexport const withErrorBoundary = <P extends object>(\n  Component: React.ComponentType<P>,\n  errorFallback?: ReactNode\n) => {\n  const WrappedComponent = (props: P) => (\n    <ErrorBoundary fallback={errorFallback}>\n      <Component {...props} />\n    </ErrorBoundary>\n  );\n  \n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n};\n\nexport default ErrorBoundary;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/LoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/TabPills.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/image-upload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":28,"suggestions":[{"fix":{"range":[83,160],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"messageId":"replaceEmptyInterfaceWithSuper","desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../design-system/utils';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-full border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-opacity-20 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":31,"suggestions":[{"fix":{"range":[83,169],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"messageId":"replaceEmptyInterfaceWithSuper","desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../design-system/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-full border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-opacity-20 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/config/api/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/config/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/config/personGDPRConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EMPLOYEES_TEMPLATE_CONFIG' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TRAINERS_TEMPLATE_CONFIG' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4262,4265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4262,4265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Person GDPR Template Configuration\n * \n * Configurazioni GDPR specifiche per le pagine Person unificate,\n * con supporto per employees e trainers.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport { \n  PERSON_PERMISSIONS, \n  PERSON_GDPR_CONFIG, \n  EMPLOYEES_TEMPLATE_CONFIG, \n  TRAINERS_TEMPLATE_CONFIG \n} from './personPermissions';\n\n/**\n * Configurazione permessi base per Person\n */\nexport const PERSON_BASE_PERMISSIONS = {\n  read: PERSON_PERMISSIONS.READ,\n  write: PERSON_PERMISSIONS.WRITE,\n  delete: PERSON_PERMISSIONS.DELETE,\n  export: PERSON_PERMISSIONS.EXPORT\n};\n\n/**\n * Configurazione permessi per Employees\n */\nexport const EMPLOYEES_PERMISSIONS = {\n  read: 'VIEW_EMPLOYEES',\n  write: 'EDIT_EMPLOYEES',\n  create: 'CREATE_EMPLOYEES',\n  delete: 'DELETE_EMPLOYEES',\n  export: 'EXPORT_EMPLOYEES'\n};\n\n/**\n * Configurazione permessi per Trainers\n */\nexport const TRAINERS_PERMISSIONS = {\n  read: 'VIEW_TRAINERS',\n  write: 'EDIT_TRAINERS',\n  create: 'CREATE_TRAINERS',\n  delete: 'DELETE_TRAINERS',\n  export: 'EXPORT_TRAINERS'\n};\n\n/**\n * Configurazione GDPR semplificata per Employees\n */\nexport const EMPLOYEES_GDPR_SIMPLE_CONFIG = {\n  entityType: 'employees',\n  displayName: 'Dipendenti',\n  permissions: EMPLOYEES_PERMISSIONS,\n  gdprLevel: 'comprehensive', // Livello massimo per dipendenti\n  auditEnabled: true,\n  consentRequired: true,\n  dataMinimization: true,\n  rightToBeForgotten: true,\n  dataPortability: true,\n  sensitiveFields: PERSON_GDPR_CONFIG.sensitiveFields,\n  requiredConsents: [\n    'data_processing',\n    'data_storage',\n    'employment_data_processing'\n  ],\n  optionalConsents: [\n    'marketing_communications',\n    'analytics_tracking'\n  ]\n};\n\n/**\n * Configurazione GDPR semplificata per Trainers\n */\nexport const TRAINERS_GDPR_SIMPLE_CONFIG = {\n  entityType: 'trainers',\n  displayName: 'Formatori',\n  permissions: TRAINERS_PERMISSIONS,\n  gdprLevel: 'standard', // Livello standard per formatori\n  auditEnabled: true,\n  consentRequired: true,\n  dataMinimization: false, // Meno restrittivo per formatori\n  rightToBeForgotten: true,\n  dataPortability: true,\n  sensitiveFields: PERSON_GDPR_CONFIG.sensitiveFields,\n  requiredConsents: [\n    'data_processing',\n    'data_storage',\n    'training_data_processing'\n  ],\n  optionalConsents: [\n    'marketing_communications',\n    'professional_networking',\n    'certification_sharing'\n  ]\n};\n\n/**\n * Configurazione GDPR semplificata per la vista unificata di tutte le persone\n */\nexport const ALL_PERSONS_GDPR_SIMPLE_CONFIG = {\n  entityType: 'persons',\n  displayName: 'Persone',\n  permissions: {\n    read: 'VIEW_PERSONS',\n    write: 'EDIT_PERSONS',\n    create: 'CREATE_PERSONS',\n    delete: 'DELETE_PERSONS',\n    export: 'EXPORT_PERSONS'\n  },\n  gdprLevel: 'comprehensive',\n  auditEnabled: true,\n  consentRequired: true,\n  dataMinimization: true,\n  rightToBeForgotten: true,\n  dataPortability: true,\n  sensitiveFields: PERSON_GDPR_CONFIG.sensitiveFields,\n  requiredConsents: ['data_processing', 'privacy_policy'],\n  optionalConsents: ['marketing', 'analytics']\n};\n\n/**\n * Factory per ottenere configurazioni GDPR\n */\nexport class PersonGDPRConfigFactory {\n  \n  /**\n   * Ottiene configurazione per employees\n   */\n  static getEmployeesConfig() {\n    return EMPLOYEES_GDPR_SIMPLE_CONFIG;\n  }\n  \n  /**\n   * Ottiene configurazione per trainers\n   */\n  static getTrainersConfig() {\n    return TRAINERS_GDPR_SIMPLE_CONFIG;\n  }\n  \n  /**\n   * Ottiene configurazione per vista unificata\n   */\n  static getAllPersonsConfig() {\n    return ALL_PERSONS_GDPR_SIMPLE_CONFIG;\n  }\n  \n  /**\n   * Ottiene configurazione basata sul tipo di filtro\n   */\n  static getConfigByFilterType(filterType: 'employees' | 'trainers' | 'all') {\n    switch (filterType) {\n      case 'employees':\n        return this.getEmployeesConfig();\n      case 'trainers':\n        return this.getTrainersConfig();\n      case 'all':\n      default:\n        return this.getAllPersonsConfig();\n    }\n  }\n  \n  /**\n   * Verifica se un'operazione è permessa per un tipo di entità\n   */\n  static isOperationAllowed(\n    filterType: 'employees' | 'trainers' | 'all',\n    operation: 'read' | 'write' | 'create' | 'delete' | 'export'\n  ): boolean {\n    const config = this.getConfigByFilterType(filterType);\n    return (config.permissions as any)[operation] !== undefined;\n  }\n  \n  /**\n   * Ottiene il livello GDPR per un tipo di entità\n   */\n  static getGDPRLevel(filterType: 'employees' | 'trainers' | 'all'): string {\n    const config = this.getConfigByFilterType(filterType);\n    return config.gdprLevel;\n  }\n}\n\n/**\n * Configurazioni predefinite per export\n */\nexport const PERSON_GDPR_CONFIGS = {\n  employees: EMPLOYEES_GDPR_SIMPLE_CONFIG,\n  trainers: TRAINERS_GDPR_SIMPLE_CONFIG,\n  allPersons: ALL_PERSONS_GDPR_SIMPLE_CONFIG\n} as const;\n\nexport default {\n  PERSON_BASE_PERMISSIONS,\n  EMPLOYEES_PERMISSIONS,\n  TRAINERS_PERMISSIONS,\n  EMPLOYEES_GDPR_SIMPLE_CONFIG,\n  TRAINERS_GDPR_SIMPLE_CONFIG,\n  ALL_PERSONS_GDPR_SIMPLE_CONFIG,\n  PersonGDPRConfigFactory,\n  PERSON_GDPR_CONFIGS\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/config/personPermissions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6850,6853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6850,6853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Person Permissions Configuration\n * \n * Configurazione dei permessi per l'entità Person unificata,\n * con supporto per filtri gerarchici employees/trainers.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\n/**\n * Permessi base per l'entità Person\n */\nexport const PERSON_PERMISSIONS = {\n  // Permessi di lettura\n  READ: 'persons:read',\n  VIEW_EMPLOYEES: 'persons:view_employees',\n  VIEW_TRAINERS: 'persons:view_trainers',\n  VIEW_GDPR_DATA: 'persons:view_gdpr_data',\n  \n  // Permessi di scrittura\n  WRITE: 'persons:write',\n  CREATE: 'persons:create',\n  CREATE_EMPLOYEES: 'persons:create_employees',\n  CREATE_TRAINERS: 'persons:create_trainers',\n  EDIT: 'persons:edit',\n  EDIT_EMPLOYEES: 'persons:edit_employees',\n  EDIT_TRAINERS: 'persons:edit_trainers',\n  \n  // Permessi di eliminazione\n  DELETE: 'persons:delete',\n  DELETE_EMPLOYEES: 'persons:delete_employees',\n  DELETE_TRAINERS: 'persons:delete_trainers',\n  \n  // Permessi GDPR\n  EXPORT: 'persons:export',\n  EXPORT_GDPR_DATA: 'persons:export_gdpr_data',\n  DELETE_GDPR_DATA: 'persons:delete_gdpr_data',\n  MANAGE_CONSENTS: 'persons:manage_consents',\n  \n  // Permessi amministrativi\n  MANAGE_ROLES: 'persons:manage_roles',\n  VIEW_AUDIT_LOG: 'persons:view_audit_log',\n  BULK_OPERATIONS: 'persons:bulk_operations'\n} as const;\n\n/**\n * Configurazione permessi per ruoli specifici\n */\nexport const ROLE_PERMISSIONS = {\n  // Super Admin - accesso completo\n  SUPER_ADMIN: [\n    PERSON_PERMISSIONS.READ,\n    PERSON_PERMISSIONS.VIEW_EMPLOYEES,\n    PERSON_PERMISSIONS.VIEW_TRAINERS,\n    PERSON_PERMISSIONS.VIEW_GDPR_DATA,\n    PERSON_PERMISSIONS.WRITE,\n    PERSON_PERMISSIONS.CREATE,\n    PERSON_PERMISSIONS.CREATE_EMPLOYEES,\n    PERSON_PERMISSIONS.CREATE_TRAINERS,\n    PERSON_PERMISSIONS.EDIT,\n    PERSON_PERMISSIONS.EDIT_EMPLOYEES,\n    PERSON_PERMISSIONS.EDIT_TRAINERS,\n    PERSON_PERMISSIONS.DELETE,\n    PERSON_PERMISSIONS.DELETE_EMPLOYEES,\n    PERSON_PERMISSIONS.DELETE_TRAINERS,\n    PERSON_PERMISSIONS.EXPORT,\n    PERSON_PERMISSIONS.EXPORT_GDPR_DATA,\n    PERSON_PERMISSIONS.DELETE_GDPR_DATA,\n    PERSON_PERMISSIONS.MANAGE_CONSENTS,\n    PERSON_PERMISSIONS.MANAGE_ROLES,\n    PERSON_PERMISSIONS.VIEW_AUDIT_LOG,\n    PERSON_PERMISSIONS.BULK_OPERATIONS\n  ],\n  \n  // HR Manager - gestione dipendenti\n  HR_MANAGER: [\n    PERSON_PERMISSIONS.READ,\n    PERSON_PERMISSIONS.VIEW_EMPLOYEES,\n    PERSON_PERMISSIONS.VIEW_GDPR_DATA,\n    PERSON_PERMISSIONS.CREATE_EMPLOYEES,\n    PERSON_PERMISSIONS.EDIT_EMPLOYEES,\n    PERSON_PERMISSIONS.DELETE_EMPLOYEES,\n    PERSON_PERMISSIONS.EXPORT,\n    PERSON_PERMISSIONS.MANAGE_CONSENTS,\n    PERSON_PERMISSIONS.VIEW_AUDIT_LOG\n  ],\n  \n  // Trainer Coordinator - gestione formatori\n  TRAINER_COORDINATOR: [\n    PERSON_PERMISSIONS.READ,\n    PERSON_PERMISSIONS.VIEW_TRAINERS,\n    PERSON_PERMISSIONS.VIEW_GDPR_DATA,\n    PERSON_PERMISSIONS.CREATE_TRAINERS,\n    PERSON_PERMISSIONS.EDIT_TRAINERS,\n    PERSON_PERMISSIONS.DELETE_TRAINERS,\n    PERSON_PERMISSIONS.EXPORT,\n    PERSON_PERMISSIONS.MANAGE_CONSENTS,\n    PERSON_PERMISSIONS.VIEW_AUDIT_LOG\n  ],\n  \n  // Manager - visualizzazione e gestione limitata\n  MANAGER: [\n    PERSON_PERMISSIONS.READ,\n    PERSON_PERMISSIONS.VIEW_EMPLOYEES,\n    PERSON_PERMISSIONS.EDIT_EMPLOYEES,\n    PERSON_PERMISSIONS.EXPORT\n  ],\n  \n  // Senior Trainer - visualizzazione formatori\n  SENIOR_TRAINER: [\n    PERSON_PERMISSIONS.READ,\n    PERSON_PERMISSIONS.VIEW_TRAINERS,\n    PERSON_PERMISSIONS.EDIT_TRAINERS\n  ],\n  \n  // Employee/Trainer - solo visualizzazione propri dati\n  EMPLOYEE: [\n    PERSON_PERMISSIONS.READ\n  ],\n  \n  TRAINER: [\n    PERSON_PERMISSIONS.READ\n  ]\n} as const;\n\n/**\n * Configurazione GDPR per entità Person\n */\nexport const PERSON_GDPR_CONFIG = {\n  // Consensi richiesti\n  requiredConsents: [\n    'data_processing',\n    'data_storage'\n  ],\n  \n  // Consensi opzionali\n  optionalConsents: [\n    'marketing_communications',\n    'analytics_tracking',\n    'third_party_sharing'\n  ],\n  \n  // Campi sensibili che richiedono consenso esplicito\n  sensitiveFields: [\n    'fiscalCode',\n    'birthDate',\n    'phone',\n    'address',\n    'bankDetails',\n    'medicalInfo'\n  ],\n  \n  // Configurazione audit\n  auditConfig: {\n    level: 'comprehensive',\n    retentionDays: 2555, // 7 anni\n    encryptSensitiveData: true,\n    realTimeLogging: true\n  },\n  \n  // Configurazione diritto all'oblio\n  rightToBeForgotten: {\n    enabled: true,\n    automatedDeletion: false, // Richiede approvazione manuale\n    verificationRequired: true,\n    cascadeDeletion: true,\n    softDelete: true,\n    hardDeleteAfterDays: 90,\n    requireManagerApproval: true\n  },\n  \n  // Configurazione portabilità dati\n  dataPortability: {\n    enabled: true,\n    supportedFormats: ['json', 'csv', 'xml'],\n    defaultFormat: 'json',\n    includeMetadata: true,\n    includeRelatedData: true,\n    encryptExport: true,\n    maxExportSize: 50 * 1024 * 1024 // 50MB\n  }\n} as const;\n\n/**\n * Template di configurazione per employees\n */\nexport const EMPLOYEES_TEMPLATE_CONFIG = {\n  entityType: 'employees',\n  displayName: 'Dipendenti',\n  permissions: {\n    read: PERSON_PERMISSIONS.VIEW_EMPLOYEES,\n    write: PERSON_PERMISSIONS.EDIT_EMPLOYEES,\n    create: PERSON_PERMISSIONS.CREATE_EMPLOYEES,\n    delete: PERSON_PERMISSIONS.DELETE_EMPLOYEES,\n    export: PERSON_PERMISSIONS.EXPORT\n  },\n  gdprConfig: {\n    ...PERSON_GDPR_CONFIG,\n    auditConfig: {\n      ...PERSON_GDPR_CONFIG.auditConfig,\n      level: 'comprehensive' // Livello massimo per dipendenti\n    }\n  },\n  filterConfig: {\n    roleTypes: ['COMPANY_ADMIN', 'HR_MANAGER', 'MANAGER', 'EMPLOYEE'],\n    defaultFilters: {\n      status: 'ACTIVE',\n      roleType: ['COMPANY_ADMIN', 'HR_MANAGER', 'MANAGER', 'EMPLOYEE']\n    }\n  }\n} as const;\n\n/**\n * Template di configurazione per trainers\n */\nexport const TRAINERS_TEMPLATE_CONFIG = {\n  entityType: 'trainers',\n  displayName: 'Formatori',\n  permissions: {\n    read: PERSON_PERMISSIONS.VIEW_TRAINERS,\n    write: PERSON_PERMISSIONS.EDIT_TRAINERS,\n    create: PERSON_PERMISSIONS.CREATE_TRAINERS,\n    delete: PERSON_PERMISSIONS.DELETE_TRAINERS,\n    export: PERSON_PERMISSIONS.EXPORT\n  },\n  gdprConfig: {\n    ...PERSON_GDPR_CONFIG,\n    auditConfig: {\n      ...PERSON_GDPR_CONFIG.auditConfig,\n      level: 'standard' // Livello standard per formatori\n    }\n  },\n  filterConfig: {\n    roleTypes: ['TRAINER_COORDINATOR', 'SENIOR_TRAINER', 'TRAINER', 'EXTERNAL_TRAINER'],\n    defaultFilters: {\n      status: 'ACTIVE',\n      roleType: ['TRAINER_COORDINATOR', 'SENIOR_TRAINER', 'TRAINER', 'EXTERNAL_TRAINER']\n    }\n  }\n} as const;\n\n/**\n * Utility per verificare i permessi\n */\nexport class PersonPermissionChecker {\n  \n  /**\n   * Verifica se un utente ha un permesso specifico\n   */\n  static hasPermission(userRole: string, permission: string): boolean {\n    const rolePermissions = ROLE_PERMISSIONS[userRole as keyof typeof ROLE_PERMISSIONS];\n    return rolePermissions ? rolePermissions.includes(permission as any) : false;\n  }\n  \n  /**\n   * Ottiene tutti i permessi per un ruolo\n   */\n  static getPermissionsForRole(userRole: string): readonly string[] {\n    return ROLE_PERMISSIONS[userRole as keyof typeof ROLE_PERMISSIONS] || [];\n  }\n  \n  /**\n   * Verifica se un utente può accedere alla sezione employees\n   */\n  static canAccessEmployees(userRole: string): boolean {\n    return this.hasPermission(userRole, PERSON_PERMISSIONS.VIEW_EMPLOYEES);\n  }\n  \n  /**\n   * Verifica se un utente può accedere alla sezione trainers\n   */\n  static canAccessTrainers(userRole: string): boolean {\n    return this.hasPermission(userRole, PERSON_PERMISSIONS.VIEW_TRAINERS);\n  }\n  \n  /**\n   * Verifica se un utente può gestire i dati GDPR\n   */\n  static canManageGDPR(userRole: string): boolean {\n    return this.hasPermission(userRole, PERSON_PERMISSIONS.VIEW_GDPR_DATA) ||\n           this.hasPermission(userRole, PERSON_PERMISSIONS.MANAGE_CONSENTS);\n  }\n}\n\nexport default {\n  PERSON_PERMISSIONS,\n  ROLE_PERMISSIONS,\n  PERSON_GDPR_CONFIG,\n  EMPLOYEES_TEMPLATE_CONFIG,\n  TRAINERS_TEMPLATE_CONFIG,\n  PersonPermissionChecker\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/constants/placeholders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/constants/templates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/context/AppStateContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":79,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":79,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode, useCallback } from 'react';\n\n// Type for our application state\ninterface AppState {\n  language: string;\n  theme: 'light' | 'dark';\n  sidebarExpanded: boolean;\n  attestatiGenerationProgress: number;\n}\n\n// Type for the context value\ninterface AppStateContextType {\n  state: AppState;\n  setLanguage: (lang: string) => void;\n  toggleTheme: () => void;\n  toggleSidebar: () => void;\n  setAttestatiGenerationProgress: (progress: number) => void;\n  attestatiGenerationProgress: number;\n}\n\n// Default state\nconst defaultState: AppState = {\n  language: 'it', // Default to Italian\n  theme: 'light',\n  sidebarExpanded: true,\n  attestatiGenerationProgress: 0\n};\n\n// Create context with a default value\nconst AppStateContext = createContext<AppStateContextType | undefined>(undefined);\nexport { AppStateContext };\n\n// Provider component\nexport const AppStateProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [state, setState] = useState<AppState>(defaultState);\n\n  const setLanguage = useCallback((lang: string) => {\n    setState(prevState => ({ ...prevState, language: lang }));\n  }, []);\n\n  const toggleTheme = useCallback(() => {\n    setState(prevState => ({\n      ...prevState,\n      theme: prevState.theme === 'light' ? 'dark' : 'light'\n    }));\n  }, []);\n\n  const toggleSidebar = useCallback(() => {\n    setState(prevState => ({\n      ...prevState,\n      sidebarExpanded: !prevState.sidebarExpanded\n    }));\n  }, []);\n\n  const setAttestatiGenerationProgress = useCallback((progress: number) => {\n    setState(prevState => ({\n      ...prevState,\n      attestatiGenerationProgress: progress\n    }));\n  }, []);\n\n  const value = {\n    state,\n    setLanguage,\n    toggleTheme,\n    toggleSidebar,\n    setAttestatiGenerationProgress,\n    attestatiGenerationProgress: state.attestatiGenerationProgress\n  };\n\n  return (\n    <AppStateContext.Provider value={value}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n\n// Custom hook to use the app state\nexport const useAppState = (): AppStateContextType => {\n  const context = useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useAppState must be used within an AppStateProvider');\n  }\n  return context;\n};\n\nexport default AppStateContext;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/context/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AuthVerifyResponse' is defined but never used.","line":9,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9818,9821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9818,9821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10952,10955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10952,10955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":402,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17342,17345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17342,17345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":408,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":408,"endColumn":21},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":420,"column":16,"nodeType":"Identifier","messageId":"namedExport","endLine":420,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode\n} from 'react';\nimport authService from '../services/auth';\nimport { AuthResponse, AuthVerifyResponse } from '../types';\nimport { hasBackendPermission, convertBackendToFrontendPermissions } from '../utils/permissionMapping';\n\ninterface AuthContextType {\n  user: AuthResponse['data']['user'] | null;\n  permissions: Record<string, boolean>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (identifier: string, password: string) => Promise<void>;\n  logout: () => void;\n  hasPermission: (resource: string, action: string) => boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<AuthResponse['data']['user'] | null>(null);\n  const [permissions, setPermissions] = useState<Record<string, boolean>>({});\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  // Verifica lo stato di autenticazione all'avvio\n  useEffect(() => {\n    const verifyAuth = async () => {\n      console.log('🔍 AuthContext: Verifying authentication on startup...');\n      \n      if (authService.isAuthenticated()) {\n        console.log('🔑 AuthContext: Token found, verifying...');\n        try {\n          const res = await authService.verifyToken();\n          console.log('📋 AuthContext: Verify response:', { valid: res.valid, hasUser: !!res.user, hasPermissions: !!res.permissions });\n          \n          if (res.valid && res.user) {\n          // Map backend roles array to frontend single role\n          const mappedUser = {\n            ...res.user,\n            role: res.user.roles?.includes('SUPER_ADMIN') ? 'Admin' : \n                  res.user.roles?.includes('ADMIN') ? 'Admin' : \n                  res.user.roles?.includes('COMPANY_ADMIN') ? 'Administrator' : 'User'\n          };\n          console.log('✅ AuthContext: User authenticated:', { id: mappedUser.id, role: mappedUser.role, roles: mappedUser.roles });\n          console.log('🔐 AuthContext: Raw permissions from backend:', res.permissions);\n          console.log('🔐 AuthContext: Companies permissions:', Object.keys(res.permissions || {}).filter(p => p.includes('companies')));\n          \n          // Verifica che i permessi siano validi\n          if (res.permissions && typeof res.permissions === 'object') {\n            setUser(mappedUser);\n            // Converti i permessi dal formato backend al formato frontend per compatibilità\n            const convertedPermissions = convertBackendToFrontendPermissions(res.permissions);\n            setPermissions(convertedPermissions);\n            console.log('🔐 AuthContext: Permissions set:', Object.keys(convertedPermissions).length, 'permissions');\n            console.log('🔐 AuthContext: Backend permissions:', Object.keys(res.permissions).filter(p => res.permissions[p] === true));\n            console.log('🔐 AuthContext: Frontend permissions:', Object.keys(convertedPermissions).filter(p => convertedPermissions[p] === true));\n            \n            // Test hasPermission subito dopo aver impostato i permessi\n            console.log('🧪 Testing hasPermission for companies:read immediately after setting permissions...');\n            const testResult = hasPermissionTest('companies', 'read', mappedUser, convertedPermissions || {});\n            console.log('🧪 Test result:', testResult);\n          } else {\n            console.error('❌ AuthContext: Invalid permissions object:', res.permissions);\n            setUser(mappedUser);\n            setPermissions({});\n          }\n          } else {\n            console.log('❌ AuthContext: Invalid token response');\n            throw new Error('Invalid token response');\n          }\n        } catch (error) {\n          console.error('❌ AuthContext: Error verifying token:', error);\n          authService.removeToken();\n          setUser(null);\n          setPermissions({});\n        }\n      } else {\n        console.log('🚫 AuthContext: No token found');\n      }\n      \n      console.log('🏁 AuthContext: Setting isLoading to false');\n      setIsLoading(false);\n    };\n\n    verifyAuth();\n  }, []);\n\n  // Login\n  const login = async (identifier: string, password: string) => {\n    try {\n      console.log('🔐 Starting login process...');\n      const response = await authService.login(identifier, password);\n      console.log('📋 Login response structure:', {\n        hasData: !!response,\n        hasTokens: !!response.tokens,\n        hasAccessToken: !!response.tokens?.access_token,\n        hasUser: !!response.user,\n        userRoles: response.user?.roles,\n        tenantId: response.user?.tenantId\n      });\n      \n      // La risposta del backend ha la struttura: {success, user, tokens: {access_token, refresh_token, ...}}\n      if (response.tokens?.access_token) {\n        console.log('💾 Saving token:', response.tokens.access_token.substring(0, 20) + '...');\n        authService.saveToken(response.tokens.access_token);\n        \n        // Salva il tenant ID nel localStorage per le chiamate API\n        if (response.user?.tenantId) {\n          localStorage.setItem('tenantId', response.user.tenantId);\n          console.log('🏢 Saving tenant ID:', response.user.tenantId);\n        }\n        \n        // Verifica che il token sia stato salvato correttamente\n        const savedToken = authService.getToken();\n        console.log('✅ Token saved verification:', savedToken ? savedToken.substring(0, 20) + '...' : 'NO TOKEN SAVED');\n        \n        // Verifica nuovamente che il token sia disponibile\n        const tokenAfterDelay = authService.getToken();\n        console.log('🔍 Token verification after delay:', tokenAfterDelay ? tokenAfterDelay.substring(0, 20) + '...' : 'STILL NO TOKEN');\n        \n        if (!tokenAfterDelay) {\n          console.error('🚨 CRITICAL: Token not available after delay - this will cause auth/verify to fail');\n          throw new Error('Token not saved properly');\n        }\n        \n        // Map backend roles array to frontend single role\n        // Fallback mapping in case backend doesn't provide role field\n        let mappedRole = 'User';\n        if (response.user.roles?.includes('SUPER_ADMIN') || response.user.roles?.includes('ADMIN')) {\n          mappedRole = 'Admin';\n        } else if (response.user.roles?.includes('COMPANY_ADMIN')) {\n          mappedRole = 'Administrator';\n        }\n        \n        const mappedUser = {\n          ...response.user,\n          role: response.user.role || mappedRole // Use backend role if available, otherwise use mapped role\n        };\n        \n        console.log('🔄 Role mapping:', {\n          backendRole: response.user.role,\n          mappedRole: mappedRole,\n          finalRole: mappedUser.role,\n          roles: response.user.roles\n        });\n        console.log('👤 Mapped user:', { id: mappedUser.id, role: mappedUser.role, originalRoles: mappedUser.roles });\n        console.log('🔄 Setting user in AuthContext:', mappedUser);\n        setUser(mappedUser);\n        console.log('✅ User set in AuthContext, triggering re-render');\n        \n        // Log immediate state after login\n        console.log('🔍 AuthContext state after login:', {\n          hasUser: !!mappedUser,\n          userId: mappedUser.id,\n          userRole: mappedUser.role,\n          userEmail: mappedUser.email\n        });\n        \n        // Get permissions after login - con retry\n        console.log('🔐 Getting permissions after login...');\n        let permissionsLoaded = false;\n        let retryCount = 0;\n        const maxRetries = 3;\n        \n        while (!permissionsLoaded && retryCount < maxRetries) {\n          try {\n            console.log(`🔄 Attempting to verify token (attempt ${retryCount + 1}/${maxRetries})...`);\n            const verifyRes = await authService.verifyToken();\n            console.log('📋 Verify response:', {\n              valid: verifyRes.valid,\n              hasPermissions: !!verifyRes.permissions,\n              permissionsCount: Object.keys(verifyRes.permissions || {}).length,\n              companiesRead: verifyRes.permissions?.['companies:read']\n            });\n            \n            if (verifyRes.valid && verifyRes.permissions) {\n              // Converti i permessi dal formato backend al formato frontend per compatibilità\n              const convertedPermissions = convertBackendToFrontendPermissions(verifyRes.permissions);\n              setPermissions(convertedPermissions);\n              console.log('✅ Permissions loaded successfully:', Object.keys(convertedPermissions).length, 'permissions');\n              console.log('🔐 Login: Backend permissions:', Object.keys(verifyRes.permissions).filter(p => verifyRes.permissions[p] === true));\n              console.log('🔐 Login: Frontend permissions:', Object.keys(convertedPermissions).filter(p => convertedPermissions[p] === true));\n              permissionsLoaded = true;\n            } else {\n              console.warn('⚠️ Invalid verify response or no permissions');\n              retryCount++;\n              if (retryCount < maxRetries) {\n                console.log('⏳ Retrying immediately...');\n              }\n            }\n          } catch (error) {\n            console.error(`❌ Error getting permissions (attempt ${retryCount + 1}):`, error);\n            retryCount++;\n            if (retryCount < maxRetries) {\n              console.log('⏳ Retrying immediately...');\n            }\n          }\n        }\n        \n        if (!permissionsLoaded) {\n          console.error('❌ Failed to load permissions after', maxRetries, 'attempts');\n          setPermissions({});\n        }\n        \n        console.log('🎯 Login process completed');\n      } else {\n        throw new Error('No access token received');\n      }\n    } catch (error: any) {\n      console.error('❌ Login error:', error);\n      \n      // Gestione specifica per errore 429 (Rate Limiting)\n      if (error.response?.status === 429) {\n        const retryAfter = error.response?.data?.retryAfter || '15 minutes';\n        const errorMessage = `Troppi tentativi di login. Riprova tra ${retryAfter}.`;\n        console.error('🚫 Rate limit exceeded:', errorMessage);\n        throw new Error(errorMessage);\n      }\n      \n      // Gestione altri errori di rete\n      if (error.code === 'ERR_NETWORK' || error.code === 'ERR_CONNECTION_REFUSED') {\n        throw new Error('Errore di connessione al server. Verifica la connessione di rete.');\n      }\n      \n      // Re-throw dell'errore originale per altri casi\n      throw error;\n    }\n  };\n\n  // Logout\n  const logout = () => {\n    authService.removeToken();\n    localStorage.removeItem('tenantId'); // Rimuovi anche il tenant ID\n    setUser(null);\n    setPermissions({});\n    window.location.href = '/login'; // Redirect al login\n  };\n\n  // Funzione di test per hasPermission (per debug)\n  const hasPermissionTest = (resource: string, action: string, testUser: any, testPermissions: Record<string, boolean>): boolean => {\n    console.log(`🔐 Testing permission: ${resource}:${action}`, { \n      userRole: testUser?.role, \n      isAuthenticated: !!testUser,\n      permissionsCount: Object.keys(testPermissions).length,\n      hasSpecificPermission: testPermissions[`${resource}:${action}`]\n    });\n    \n    // Se non c'è utente, nega l'accesso\n    if (!testUser) {\n      console.log('❌ Access denied: no user');\n      return false;\n    }\n    \n    // RIMOSSO: Admin o Administrator hanno sempre tutti i permessi\n    // Ora tutti gli utenti, inclusi gli admin, devono avere permessi esplicitamente assegnati\n    // Questo garantisce un controllo granulare dei permessi conforme al GDPR\n    \n    // Verifica permesso all:* (permesso universale)\n    if (testPermissions['all:' + action] === true) {\n      console.log('✅ Access granted: user has all:' + action + ' permission');\n      return true;\n    }\n    \n    // Verifica permesso resource:all (permesso per tutte le azioni sulla risorsa)\n    if (testPermissions[resource + ':all'] === true) {\n      console.log('✅ Access granted: user has ' + resource + ':all permission');\n      return true;\n    }\n    \n    // Verifica dei permessi specifici\n    const permissionKey = `${resource}:${action}`;\n    const hasSpecificPermission = testPermissions[permissionKey] === true;\n    \n    // Concedi accesso se c'è almeno un permesso con quel resource\n    if (!hasSpecificPermission && action === 'read') {\n      // For 'read' actions, check if the user has any permission for this resource\n      const hasAnyPermissionForResource = Object.keys(testPermissions)\n        .some(key => key.startsWith(resource + ':') && testPermissions[key] === true);\n      \n      if (hasAnyPermissionForResource) {\n        console.log('✅ Access granted: user has some permission for ' + resource);\n        return true;\n      }\n    }\n    \n    console.log(`${hasSpecificPermission ? '✅' : '❌'} Permission check result:`, hasSpecificPermission);\n    return hasSpecificPermission;\n  };\n\n  // Verifica se l'utente ha un permesso specifico\n  const hasPermission = (resourceOrPermission: string, action?: string): boolean => {\n    // Gestisci sia il formato con un parametro (es. 'VIEW_USERS') che con due parametri (es. 'users', 'view')\n    let permissionToCheck: string;\n    \n    if (action) {\n      // Formato con due parametri: resource e action\n      permissionToCheck = `${resourceOrPermission}:${action}`;\n      console.log(`🔐 Checking permission (two params): ${resourceOrPermission}:${action}`);\n    } else {\n      // Formato con un parametro: permesso diretto\n      permissionToCheck = resourceOrPermission;\n      console.log(`🔐 Checking permission (single param): ${resourceOrPermission}`);\n    }\n    \n    console.log(`🔐 Permission check details:`, { \n      userRole: user?.role, \n      isAuthenticated: !!user,\n      permissionsCount: Object.keys(permissions).length,\n      hasSpecificPermission: permissions[permissionToCheck],\n      allPermissions: Object.keys(permissions).filter(key => permissions[key] === true)\n    });\n    \n    // Se non c'è utente, nega l'accesso\n    if (!user) {\n      console.log('❌ Access denied: no user');\n      return false;\n    }\n    \n    // RIMOSSO: Admin o Administrator hanno sempre tutti i permessi\n    // Ora tutti gli utenti, inclusi gli admin, devono avere permessi esplicitamente assegnati\n    // Questo garantisce un controllo granulare dei permessi conforme al GDPR\n    \n    // Verifica permesso diretto (sia formato frontend che backend)\n    if (permissions[permissionToCheck] === true) {\n      console.log(`✅ Access granted: user has ${permissionToCheck} permission (direct match)`);\n      return true;\n    }\n    \n    // Se abbiamo due parametri, prova anche altri formati\n    if (action) {\n      // Verifica permesso all:* (permesso universale)\n      if (permissions['all:' + action] === true) {\n        console.log('✅ Access granted: user has all:' + action + ' permission');\n        return true;\n      }\n      \n      // Verifica permesso resource:all (permesso per tutte le azioni sulla risorsa)\n      if (permissions[resourceOrPermission + ':all'] === true) {\n        console.log('✅ Access granted: user has ' + resourceOrPermission + ':all permission');\n        return true;\n      }\n      \n      // Prova anche il formato backend usando hasBackendPermission\n      // Questo è utile quando si passa un permesso nel formato backend direttamente\n      const backendPermissionResult = hasBackendPermission(permissionToCheck, permissions);\n      if (backendPermissionResult) {\n        console.log(`✅ Access granted: user has ${permissionToCheck} permission (backend format match)`);\n        return true;\n      }\n      \n      // Concedi accesso se c'è almeno un permesso con quel resource\n      if (action === 'read') {\n        // For 'read' actions, check if the user has any permission for this resource\n        const resourcePermissions = Object.keys(permissions)\n          .filter(key => key.startsWith(resourceOrPermission + ':') && permissions[key] === true);\n        \n        console.log(`🔍 Found ${resourcePermissions.length} permissions for resource '${resourceOrPermission}':`, resourcePermissions);\n        \n        if (resourcePermissions.length > 0) {\n          console.log('✅ Access granted: user has some permission for ' + resourceOrPermission);\n          return true;\n        }\n      }\n    } else {\n      // Se è un singolo parametro, prova anche il formato backend\n      const backendPermissionResult = hasBackendPermission(permissionToCheck, permissions);\n      if (backendPermissionResult) {\n        console.log(`✅ Access granted: user has ${permissionToCheck} permission (backend format match)`);\n        return true;\n      }\n    }\n    \n    console.log(`❌ Permission check result: false for ${permissionToCheck}`);\n    return false;\n  };\n\n  const value = {\n    user,\n    permissions,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    logout,\n    hasPermission\n  };\n  \n  // Debug log per monitorare lo stato\n  console.log('🔄 AuthContext state:', {\n    hasUser: !!user,\n    userRole: user?.role,\n    isAuthenticated: !!user,\n    isLoading,\n    permissionsCount: Object.keys(permissions).length\n  });\n\n  // Esponi l'AuthContext nel browser per il testing (solo in development)\n  if (typeof window !== 'undefined' && import.meta.env.DEV) {\n    (window as any).authContextForTesting = value;\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Export named per compatibilità Vite Fast Refresh\nexport { AuthContext };\n\n// Re-export per centralizzare l'import dell'hook ottimizzato\nexport default useAuth;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/context/PreferencesContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PreferencesContextTypePreferencesFormData' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PreferencesApiResponse' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":25},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":22,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":22,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Preferences Context\n * Week 14 Implementation - User Preferences Management\n */\n\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\nimport {\n  UserPreferences,\n  PreferencesContextTypePreferencesFormData,\n  DEFAULT_USER_PREFERENCES,\n  PreferencesApiResponse\n} from '../types/preferences';\nimport { apiGet} from '../services/api';\nimport { getToken } from '../services/auth';\n\n// Create context\nconst PreferencesContext = createContext<PreferencesContextType | undefined>(undefined);\n\n// Hook to use preferences context\nexport const usePreferences = (): PreferencesContextType => {\n  const context = useContext(PreferencesContext);\n  if (!context) {\n    throw new Error('usePreferences must be used within a PreferencesProvider');\n  }\n  return context;\n};\n\n// Provider props\nexport interface PreferencesProviderProps {\n  children: React.ReactNode;\n}\n\n// Preferences provider component\nexport const PreferencesProvider: React.FC<PreferencesProviderProps> = ({ children }) => {\n  const { user, isLoading: authLoading } = useAuth();\n  const [preferences, setPreferences] = useState<UserPreferences | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Fetch user preferences from API\n   */\n  const fetchPreferences = useCallback(async () => {\n    if (!user?.id) return;\n\n    // Verifica che il token sia presente prima di fare la chiamata API\n    const token = getToken();\n    if (!token) {\n      console.log('🚫 PreferencesContext: No token available, skipping preferences fetch');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      console.log('🔍 PreferencesContext: Fetching preferences for user:', user.id);\n      const preferences = await apiGet<UserPreferences>(\n        `/api/v1/persons/preferences`\n      );\n\n      // Merge with defaults to ensure all properties exist\n      const mergedPreferences: UserPreferences = {\n        ...DEFAULT_USER_PREFERENCES,\n        ...preferences,\n        id: preferences.id || `pref_${user.id}`,\n        userId: user.id,\n        // Ensure nested objects are properly merged\n        accessibility: {\n          ...DEFAULT_USER_PREFERENCES.accessibility,\n          ...(preferences.accessibility || {})\n        },\n        notifications: {\n          ...DEFAULT_USER_PREFERENCES.notifications,\n          ...(preferences.notifications || {}),\n          email: {\n            ...DEFAULT_USER_PREFERENCES.notifications.email,\n            ...(preferences.notifications?.email || {})\n          },\n          push: {\n            ...DEFAULT_USER_PREFERENCES.notifications.push,\n            ...(preferences.notifications?.push || {})\n          },\n          inApp: {\n            ...DEFAULT_USER_PREFERENCES.notifications.inApp,\n            ...(preferences.notifications?.inApp || {})\n          }\n        },\n        dashboard: {\n          ...DEFAULT_USER_PREFERENCES.dashboard,\n          ...(preferences.dashboard || {})\n        },\n        privacy: {\n          ...DEFAULT_USER_PREFERENCES.privacy,\n          ...(preferences.privacy || {})\n        }\n      };\n\n      console.log('✅ PreferencesContext: Preferences loaded and merged with defaults');\n      setPreferences(mergedPreferences);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch preferences';\n      setError(errorMessage);\n      console.error('❌ PreferencesContext: Error fetching preferences:', err);\n      \n      // Create default preferences if none exist\n      const defaultPrefs: UserPreferences = {\n        ...DEFAULT_USER_PREFERENCES,\n        id: `pref_${user.id}`,\n        userId: user.id,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      console.log('🔧 PreferencesContext: Using default preferences due to error');\n      setPreferences(defaultPrefs);\n    } finally {\n      setLoading(false);\n    }\n  }, [user?.id]);\n\n  /**\n   * Update user preferences\n   */\n  const updatePreferences = useCallback(async (updates: Partial<UserPreferences>) => {\n    if (!user?.id || !preferences) return;\n\n    // Verifica che il token sia presente prima di fare la chiamata API\n    const token = getToken();\n    if (!token) {\n      console.log('🚫 PreferencesContext: No token available, skipping preferences update');\n      toast.error('Errore di autenticazione. Effettua nuovamente il login.');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const updatedPreferences = {\n        ...preferences,\n        ...updates,\n        updatedAt: new Date().toISOString()\n      };\n\n      const updatedPrefs = await apiPut<UserPreferences>(\n        `/api/v1/persons/preferences`,\n        updatedPreferences\n      );\n\n      setPreferences(updatedPrefs);\n      toast.success('Preferenze aggiornate con successo');\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update preferences';\n      setError(errorMessage);\n      console.error('Error updating preferences:', err);\n      toast.error('Errore nell\\'aggiornamento delle preferenze');\n    } finally {\n      setLoading(false);\n    }\n  }, [user?.id, preferences]);\n\n  /**\n   * Reset preferences to defaults\n   */\n  const resetPreferences = useCallback(async () => {\n    if (!user?.id) return;\n\n    // Verifica che il token sia presente prima di fare la chiamata API\n    const token = getToken();\n    if (!token) {\n      console.log('🚫 PreferencesContext: No token available, skipping preferences reset');\n      toast.error('Errore di autenticazione. Effettua nuovamente il login.');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const resetPrefs = await apiPost<UserPreferences>(\n        `/api/v1/persons/preferences/reset`\n      );\n\n      setPreferences(resetPrefs);\n      toast.success('Preferenze ripristinate ai valori predefiniti');\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to reset preferences';\n      setError(errorMessage);\n      console.error('Error resetting preferences:', err);\n      toast.error('Errore nel ripristino delle preferenze');\n    } finally {\n      setLoading(false);\n    }\n  }, [user?.id]);\n\n  // Load preferences when user changes and auth is complete\n  useEffect(() => {\n    // Aspetta che l'autenticazione sia completata\n    if (authLoading) {\n      console.log('🔄 PreferencesContext: Waiting for auth to complete...');\n      return;\n    }\n\n    if (user?.id) {\n      console.log('👤 PreferencesContext: User authenticated, loading preferences...');\n      fetchPreferences();\n    } else {\n      console.log('🚫 PreferencesContext: No user, clearing preferences...');\n      setPreferences(null);\n      setError(null);\n    }\n  }, [user?.id, authLoading, fetchPreferences]);\n\n  // Apply theme changes to document\n  useEffect(() => {\n    if (!preferences) return;\n\n    const { theme, themeColor } = preferences;\n    const root = document.documentElement;\n\n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n    \n    // Apply theme\n    if (theme === 'auto') {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      root.classList.add(prefersDark ? 'dark' : 'light');\n    } else {\n      root.classList.add(theme);\n    }\n\n    // Apply theme color\n    root.setAttribute('data-theme-color', themeColor);\n\n    // Apply accessibility settings with safety checks\n    if (preferences.accessibility?.highContrast) {\n      root.classList.add('high-contrast');\n    } else {\n      root.classList.remove('high-contrast');\n    }\n\n    if (preferences.accessibility?.reducedMotion) {\n      root.classList.add('reduced-motion');\n    } else {\n      root.classList.remove('reduced-motion');\n    }\n\n    root.setAttribute('data-font-size', preferences.accessibility?.fontSize || 'medium');\n  }, [preferences]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    if (!preferences || preferences.theme !== 'auto') return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      const root = document.documentElement;\n      root.classList.remove('light', 'dark');\n      root.classList.add(mediaQuery.matches ? 'dark' : 'light');\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [preferences]);\n\n  /**\n   * Export preferences to JSON file\n   */\n  const exportPreferences = useCallback(() => {\n    if (!preferences) {\n      toast.error('Nessuna preferenza da esportare');\n      return;\n    }\n\n    try {\n      const dataStr = JSON.stringify(preferences, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `user-preferences-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      URL.revokeObjectURL(url);\n      toast.success('Preferenze esportate con successo');\n    } catch (err) {\n      console.error('Error exporting preferences:', err);\n      toast.error('Errore nell\\'esportazione delle preferenze');\n    }\n  }, [preferences]);\n\n  /**\n   * Import preferences from JSON file\n   */\n  const importPreferences = useCallback(async (file: File) => {\n    if (!user?.id) return;\n\n    try {\n      const text = await file.text();\n      const importedPrefs = JSON.parse(text) as UserPreferences;\n      \n      // Validate imported preferences\n      if (!importedPrefs.userId || !importedPrefs.theme) {\n        throw new Error('File di preferenze non valido');\n      }\n\n      // Update with imported preferences (keeping current user ID)\n      const updatedPrefs = {\n        ...importedPrefs,\n        id: preferences?.id || `pref_${user.id}`,\n        userId: user.id,\n        updatedAt: new Date().toISOString()\n      };\n\n      await updatePreferences(updatedPrefs);\n      toast.success('Preferenze importate con successo');\n    } catch (err) {\n      console.error('Error importing preferences:', err);\n      toast.error('Errore nell\\'importazione delle preferenze');\n    }\n  }, [user?.id, preferences?.id, updatePreferences]);\n\n  /**\n   * Get preference value by key\n   */\n  const getPreference = useCallback(<K extends keyof UserPreferences>(\n    key: K\n  ): UserPreferences[K] | undefined => {\n    return preferences?.[key];\n  }, [preferences]);\n\n  /**\n   * Update single preference\n   */\n  const updateSinglePreference = useCallback(async <K extends keyof UserPreferences>(\n    key: K,\n    value: UserPreferences[K]\n  ) => {\n    await updatePreferences({ [key]: value } as Partial<UserPreferences>);\n  }, [updatePreferences]);\n\n  /**\n   * Check if preferences are loaded\n   */\n  const isLoaded = useCallback(() => {\n    return preferences !== null;\n  }, [preferences]);\n\n  /**\n   * Get theme-related preferences\n   */\n  const getThemePreferences = useCallback(() => {\n    if (!preferences) return null;\n    \n    return {\n      theme: preferences.theme,\n      themeColor: preferences.themeColor,\n      accessibility: preferences.accessibility\n    };\n  }, [preferences]);\n\n  /**\n   * Get notification preferences\n   */\n  const getNotificationPreferences = useCallback(() => {\n    return preferences?.notifications || null;\n  }, [preferences]);\n\n  /**\n   * Get dashboard preferences\n   */\n  const getDashboardPreferences = useCallback(() => {\n    return preferences?.dashboard || null;\n  }, [preferences]);\n\n  const value: PreferencesContextType = {\n    preferences,\n    loading,\n    error,\n    updatePreferences,\n    resetPreferences,\n    exportPreferences,\n    importPreferences,\n    // Additional utility methods\n    getPreference,\n    updateSinglePreference,\n    isLoaded,\n    getThemePreferences,\n    getNotificationPreferences,\n    getDashboardPreferences,\n    refresh: fetchPreferences\n  };\n\n  return (\n    <PreferencesContext.Provider value={value}>\n      {children}\n    </PreferencesContext.Provider>\n  );\n};\n\nexport default PreferencesProvider;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/context/TenantContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":30,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":30,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [user, user.role, user.roles]","fix":{"range":[1995,2020],"text":"[user, user.role, user.roles]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6139,6142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6139,6142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":294,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10754,10757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10754,10757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'CACHE_TTL' and 'user'. Either include them or remove the dependency array.","line":338,"column":6,"nodeType":"ArrayExpression","endLine":338,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, user, CACHE_TTL, tenant, error]","fix":{"range":[11967,12009],"text":"[isAuthenticated, user, CACHE_TTL, tenant, error]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","line":392,"column":6,"nodeType":"ArrayExpression","endLine":392,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [isAuthenticated, user.id, loadTenantContext, user]","fix":{"range":[13923,13969],"text":"[isAuthenticated, user.id, loadTenantContext, user]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode, useRef } from 'react';\nimport { Company, Permission } from '../types';\nimport { getCurrentTenant } from '../services/tenants';\nimport { getUserPermissions } from '../services/auth';\nimport { useAuth } from './AuthContext';\nimport { logGdprAction } from '../utils/gdpr';\nimport { recordApiCall, startTimer } from '../utils/metrics';\n\n// Types\nexport interface TenantContextType {\n  tenant: Company | null;\n  userRole: string;\n  permissions: Permission[];\n  hasPermission: (resource: string, action: string) => boolean;\n  isLoading: boolean;\n  error: string | null;\n  refreshTenant: () => Promise<void>;\n}\n\nexport interface Permission {\n  resource: string;\n  action: string;\n  scope?: string;\n}\n\n// Context\nconst TenantContext = createContext<TenantContextType | undefined>(undefined);\n\n// Hook per utilizzare il context\nexport const useTenant = (): TenantContextType => {\n  const context = useContext(TenantContext);\n  if (context === undefined) {\n    throw new Error('useTenant must be used within a TenantProvider');\n  }\n  return context;\n};\n\n// Provider component\nexport const TenantProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [tenant, setTenant] = useState<Company | null>(null);\n  const [userRole, setUserRole] = useState<string>('Employee');\n  const [permissions, setPermissions] = useState<Permission[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  const { user, isAuthenticated, hasPermission: authHasPermission } = useAuth();\n  \n  // Log per verificare se AuthContext ha già il ruolo corretto\n  useEffect(() => {\n    if (user && user.role) {\n      console.log('🎭 TenantContext: AuthContext already has user role:', {\n        userRole: user.role,\n        userRoles: user.roles,\n        shouldUseAuthRole: user.role !== 'Employee',\n        authContextComplete: !!user.role\n      });\n    }\n  }, [user?.role, user?.roles]);\n  \n  // Log ogni volta che user cambia\n  useEffect(() => {\n    console.log('🔄 TenantContext: User object changed:', {\n      hasUser: !!user,\n      userId: user?.id,\n      userEmail: user?.email,\n      userRole: user?.role,\n      isAuthenticated,\n      timestamp: new Date().toISOString()\n    });\n  }, [user, isAuthenticated]);\n  \n  // Refs per deduplication e controllo mount\n  const requestRef = useRef<Promise<Company> | null>(null);\n  const initializedRef = useRef(false);\n  const mountedRef = useRef(true);\n  const lastFetchRef = useRef<number>(0);\n  const CACHE_TTL = 5 * 60 * 1000; // 5 minuti cache\n\n  // Funzione per verificare i permessi\n  const hasPermission = useCallback((resource: string, action: string): boolean => {\n    if (!isAuthenticated || !user) {\n      console.log('🔐 TenantContext hasPermission: Not authenticated or no user');\n      return false;\n    }\n\n    // Se AuthContext ha una funzione hasPermission valida, usala\n    if (authHasPermission && typeof authHasPermission === 'function') {\n      console.log('🔐 TenantContext hasPermission: Using AuthContext hasPermission for', { resource, action });\n      return authHasPermission(resource, action);\n    }\n\n    // Fallback: usa la logica locale del TenantContext\n    // Admin, Super Admin e Company Admin hanno tutti i permessi\n    if (userRole === 'Admin' || userRole === 'Super Admin' || userRole === 'Company Admin') {\n      console.log('🔑 TenantContext: Admin access granted for:', { resource, action, userRole });\n      return true;\n    }\n    \n    if (!permissions || permissions.length === 0) {\n      console.log('🚫 TenantContext: No permissions found for:', { resource, action, userRole, permissionsCount: 0 });\n      return false;\n    }\n    \n    // Verifica permesso specifico\n    const hasSpecificPermission = permissions.some(p => \n      p.resource === resource && \n      (p.action === action || p.action === '*')\n    );\n    \n    console.log('🔍 TenantContext: Permission check (fallback):', {\n      resource,\n      action,\n      userRole,\n      permissionsCount: permissions.length,\n      hasSpecificPermission,\n      permissions: permissions.map(p => `${p.resource}:${p.action}`)\n    });\n    \n    return hasSpecificPermission;\n  }, [isAuthenticated, user, userRole, permissions, authHasPermission]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  // Funzione per caricare il contesto tenant con deduplication\n  const loadTenantContext = useCallback(async (forceRefresh = false): Promise<Company | null> => {\n    if (!isAuthenticated || !user) {\n      if (mountedRef.current) {\n        setIsLoading(false);\n      }\n      return null;\n    }\n\n    // Check cache TTL\n    const now = Date.now();\n    const cacheValid = (now - lastFetchRef.current) < CACHE_TTL;\n    \n    // Se abbiamo dati cached validi e non è un refresh forzato, restituisci i dati\n    if (tenant && cacheValid && !forceRefresh && !error) {\n      console.log('📦 Using cached tenant data');\n      await logGdprAction({\n        action: 'TENANT_FETCH_CACHED',\n        timestamp: new Date().toISOString(),\n        tenantId: tenant.id,\n        userId: user.id,\n        metadata: { cacheAge: now - lastFetchRef.current }\n      });\n      return tenant;\n    }\n\n    // Deduplication: se c'è già una richiesta in corso, restituisci quella\n    if (requestRef.current) {\n      console.log('🔄 Deduplicating tenant request - using existing promise');\n      await logGdprAction({\n        action: 'TENANT_FETCH_DEDUPLICATED',\n        timestamp: new Date().toISOString(),\n        userId: user.id\n      });\n      return requestRef.current;\n    }\n\n    console.log('🚀 Fetching tenant data...');\n    const timer = startTimer();\n    \n    if (mountedRef.current) {\n      setIsLoading(true);\n      setError(null);\n    }\n\n    // Crea la promise e salvala nel ref per deduplication\n    const fetchPromise = (async (): Promise<Company> => {\n      try {\n        // Carica tenant corrente\n        const tenantData = await getCurrentTenant();\n        \n        // Carica permessi utente\n        let userPermissions: any = { permissions: [], role: 'EMPLOYEE' };\n        console.log('🔍 TenantContext: User state check:', {\n          hasUser: !!user,\n          userId: user?.id,\n          userEmail: user?.email,\n          userRole: user?.role,\n          userObject: user\n        });\n        \n        if (user.id) {\n          // Se AuthContext ha già un ruolo valido (non Employee), usalo direttamente\n          if (user.role && user.role !== 'Employee') {\n            console.log('✅ TenantContext: Using role from AuthContext directly:', {\n              authRole: user.role,\n              authRoles: user.roles,\n              skipApiCall: true\n            });\n            \n            // Crea un oggetto permissions compatibile usando il ruolo dall'AuthContext\n            userPermissions = {\n              role: user.role,\n              permissions: [] // Le permissions verranno gestite dall'AuthContext\n            };\n          } else {\n            // Fallback: chiama l'API solo se AuthContext non ha un ruolo valido\n            console.log('🔍 TenantContext: AuthContext role not available, calling getUserPermissions API');\n            console.log('🔍 TenantContext: User object details:', {\n              id: user.id,\n              email: user.email,\n              role: user.role,\n              roles: user.roles,\n              fullUser: user\n            });\n            try {\n              userPermissions = await getUserPermissions(user.id);\n              console.log('🔍 TenantContext: getUserPermissions SUCCESS response:', {\n                role: userPermissions.role,\n                permissionsCount: userPermissions.permissions?.length || 0,\n                permissions: userPermissions.permissions,\n                fullResponse: userPermissions\n              });\n            } catch (error) {\n              console.error('❌ TenantContext: Error getting user permissions:', {\n                error: error.message,\n                status: error.response?.status,\n                statusText: error.response?.statusText,\n                responseData: error.response?.data,\n                stack: error.stack,\n                userId: user.id,\n                fullError: error\n              });\n              console.error('❌ TenantContext: Will use default EMPLOYEE role due to error');\n              \n              // Se l'errore è 403, potrebbe essere un problema di autorizzazione\n              if (error.response?.status === 403) {\n                console.error('🚫 TenantContext: 403 Forbidden - User ID mismatch or authorization issue');\n                console.error('🚫 TenantContext: Check if user.id matches authenticated user ID');\n              }\n            }\n          }\n        } else {\n          console.warn('⚠️ TenantContext: No user.id available, skipping getUserPermissions call');\n          console.warn('⚠️ TenantContext: User object state:', {\n            user,\n            hasUser: !!user,\n            userKeys: user ? Object.keys(user) : 'no user'\n          });\n        }\n\n        const duration = timer();\n        recordApiCall('/tenants/current', 'GET', duration, 200, { cached: false, deduplicated: false });\n        \n        // Log GDPR action per audit trail\n        await logGdprAction({\n          action: 'TENANT_FETCH_SUCCESS',\n          timestamp: new Date().toISOString(),\n          tenantId: tenantData?.id,\n          userId: user.id,\n          metadata: {\n            duration,\n            cached: false,\n            deduplicated: false,\n            permissionsCount: userPermissions.permissions?.length || 0\n          }\n        });\n\n        // Map backend role to frontend role - convert backend format to frontend format\n        const roleMapping: { [key: string]: string } = {\n          'ADMIN': 'Admin',\n          'SUPER_ADMIN': 'Super Admin',\n          'COMPANY_ADMIN': 'Company Admin',\n          'EMPLOYEE': 'Employee'\n        };\n        \n        const mappedRole = roleMapping[userPermissions.role] || 'Employee';\n        \n        console.log('🎭 TenantContext: Role mapping:', {\n          backendRole: userPermissions.role,\n          mappedRole: mappedRole,\n          permissionsCount: userPermissions.permissions?.length || 0,\n          roleMapping\n        });\n\n        // Aggiorna stato solo se componente ancora montato\n        if (mountedRef.current) {\n          setTenant(tenantData);\n          setPermissions(userPermissions.permissions || []);\n          setUserRole(mappedRole);\n          lastFetchRef.current = Date.now();\n          console.log('✅ Tenant data loaded successfully:', tenantData.name);\n        }\n        \n        return tenantData;\n      } catch (err: any) {\n        const duration = timer();\n        const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n        \n        recordApiCall('/tenants/current', 'GET', duration, err.status || 500, { \n          cached: false, \n          deduplicated: false, \n          error: errorMessage \n        });\n        \n        // Log GDPR error per audit trail\n        await logGdprAction({\n          action: 'TENANT_FETCH_ERROR',\n          timestamp: new Date().toISOString(),\n          userId: user.id,\n          error: errorMessage,\n          metadata: {\n            duration,\n            errorType: err instanceof Error ? err.constructor.name : 'UnknownError'\n          }\n        });\n        \n        // Aggiorna stato solo se componente ancora montato\n        if (mountedRef.current) {\n          setError(errorMessage);\n          console.error('❌ Failed to fetch tenant:', errorMessage);\n        }\n        \n        throw err;\n      }\n    })();\n\n    requestRef.current = fetchPromise;\n\n    try {\n      const result = await fetchPromise;\n      return result;\n    } finally {\n      // Cleanup\n      requestRef.current = null;\n      if (mountedRef.current) {\n        setIsLoading(false);\n      }\n    }\n  }, [isAuthenticated, user?.id, tenant, error]);\n\n  // Funzione per aggiornare il tenant\n  const refreshTenant = useCallback(async () => {\n    console.log('🔄 Refreshing tenant data...');\n    setTenant(null);\n    setError(null);\n    lastFetchRef.current = 0; // Invalida cache\n    \n    try {\n      await loadTenantContext(true); // Force refresh\n    } catch (error) {\n      // Error già gestito in loadTenantContext\n      console.error('Failed to refresh tenant:', error);\n    }\n  }, [loadTenantContext]);\n\n  // Inizializzazione automatica una sola volta\n  useEffect(() => {\n    console.log('🔍 TenantContext useEffect triggered:', {\n      initializedRef: initializedRef.current,\n      mountedRef: mountedRef.current,\n      isAuthenticated,\n      hasUserId: !!user?.id,\n      userId: user?.id,\n      userEmail: user?.email,\n      userObject: user,\n      userRole: user?.role,\n      timestamp: new Date().toISOString()\n    });\n    \n    if (!initializedRef.current && mountedRef.current && isAuthenticated && user?.id) {\n      initializedRef.current = true;\n      console.log('🎯 Initializing TenantContext for user:', user.id);\n      console.log('🎯 TenantContext: Starting loadTenantContext...');\n      \n      loadTenantContext().then(() => {\n        console.log('✅ TenantContext: loadTenantContext completed successfully');\n      }).catch((error) => {\n        console.error('❌ TenantContext: loadTenantContext failed:', error);\n        // Error già gestito in loadTenantContext\n      });\n    } else {\n      console.log('🚫 TenantContext: Skipping initialization:', {\n        initializedRef: initializedRef.current,\n        mountedRef: mountedRef.current,\n        isAuthenticated,\n        hasUserId: !!user?.id,\n        reason: !initializedRef.current ? 'not initialized' : \n                !mountedRef.current ? 'not mounted' :\n                !isAuthenticated ? 'not authenticated' :\n                !user?.id ? 'no user id' : 'unknown'\n      });\n    }\n  }, [isAuthenticated, user?.id, loadTenantContext]);\n\n  // Reset quando l'utente cambia o si disconnette\n  useEffect(() => {\n    console.log('🔍 TenantContext reset useEffect triggered:', {\n      isAuthenticated,\n      hasUserId: !!user?.id,\n      userId: user?.id,\n      shouldReset: !isAuthenticated || !user?.id\n    });\n    \n    if (!isAuthenticated || !user?.id) {\n      console.log('🔄 User changed or logged out, resetting tenant context');\n      setTenant(null);\n      setPermissions([]);\n      setUserRole('Employee');\n      setError(null);\n      setIsLoading(false);\n      initializedRef.current = false;\n      lastFetchRef.current = 0;\n      requestRef.current = null;\n    }\n  }, [isAuthenticated, user?.id]);\n\n  // Valore del context\n  const contextValue: TenantContextType = {\n    tenant,\n    userRole,\n    permissions,\n    hasPermission,\n    isLoading,\n    error,\n    refreshTenant\n  };\n\n  return (\n    <TenantContext.Provider value={contextValue}>\n      {children}\n    </TenantContext.Provider>\n  );\n};\n\n// Export named per compatibilità Vite Fast Refresh\nexport { TenantContext };","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/context/ToastContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'removeToast'. Either include it or remove the dependency array.","line":127,"column":5,"nodeType":"ArrayExpression","endLine":127,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [generateId, removeToast]","fix":{"range":[3543,3555],"text":"[generateId, removeToast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, ReactNode, useCallback } from 'react';\n\n/**\n * Tipi di notifica supportati\n */\nexport type ToastType = 'success' | 'error' | 'warning' | 'info';\n\n/**\n * Dati di una notifica toast\n */\nexport interface ToastData {\n  id: string;\n  message: string;\n  type: ToastType;\n  duration: number;\n}\n\n/**\n * Opzioni per la creazione di una notifica toast\n */\nexport interface ToastOptions {\n  message: string;\n  type?: ToastType;\n  duration?: number;\n}\n\n/**\n * Proprietà del contesto Toast\n */\ninterface ToastContextProps {\n  toasts: ToastData[];\n  toast: (options: ToastOptions) => void;\n  removeToast: (id: string) => void;\n  clearToasts: () => void;\n}\n\n/**\n * Contesto per la gestione delle notifiche toast\n * @example\n * // Per utilizzare il contesto:\n * const { toast } = useContext(ToastContext);\n * \n * // Per mostrare una notifica:\n * toast({ \n *   message: 'Operazione completata con successo', \n *   type: 'success',\n *   duration: 3000\n * });\n */\nexport const ToastContext = createContext<ToastContextProps>({\n  toasts: [],\n  toast: () => {},\n  removeToast: () => {},\n  clearToasts: () => {}\n});\n\ninterface ToastProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Provider per il sistema di notifiche toast\n * Avvolge l'applicazione e fornisce il contesto per le notifiche\n */\nexport const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastData[]>([]);\n\n  const generateId = useCallback(() => {\n    return `toast-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n  }, []);\n\n  /**\n   * Mostra una nuova notifica toast\n   * @param options - Opzioni per la notifica\n   */\n  const toast = useCallback(\n    ({ message, type = 'info', duration = 5000 }: ToastOptions) => {\n      let standardizedType = type;\n      \n      // Standardizziamo il tipo in base al contenuto del messaggio\n      if (type !== 'success' && type !== 'error') {\n        if (message.toLowerCase().includes('success') || \n            message.toLowerCase().includes('completat') || \n            message.toLowerCase().includes('aggiunt') || \n            message.toLowerCase().includes('modificat') || \n            message.toLowerCase().includes('salvat') ||\n            message.toLowerCase().includes('importazione completata')) {\n          standardizedType = 'success';\n        }\n        \n        if (message.toLowerCase().includes('error') || \n            message.toLowerCase().includes('errore') || \n            message.toLowerCase().includes('fallito') || \n            message.toLowerCase().includes('impossibile') || \n            message.toLowerCase().includes('non riuscito') ||\n            message.toLowerCase().includes('non valido')) {\n          standardizedType = 'error';\n        }\n      } else {\n        // Se il tipo è esplicitamente specificato, lo rispettiamo\n        standardizedType = type;\n      }\n      \n      const id = generateId();\n      const newToast: ToastData = { id, message, type: standardizedType, duration };\n      \n      setToasts((prevToasts) => {\n        // Verifica se esiste già un toast simile\n        const hasSimilar = prevToasts.some(\n          t => t.message === message && t.type === standardizedType\n        );\n        \n        if (hasSimilar) {\n          console.log('Toast simile già presente, ignorato:', message);\n          return prevToasts;\n        }\n        \n        return [...prevToasts, newToast];\n      });\n\n      if (duration > 0) {\n        setTimeout(() => {\n          removeToast(id);\n        }, duration);\n      }\n    },\n    [generateId]\n  );\n\n  /**\n   * Rimuove una notifica toast\n   * @param id - ID della notifica da rimuovere\n   */\n  const removeToast = useCallback((id: string) => {\n    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));\n  }, []);\n  \n  /**\n   * Rimuove tutte le notifiche toast\n   */\n  const clearToasts = useCallback(() => {\n    setToasts([]);\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ toasts, toast, removeToast, clearToasts }}>\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastProvider; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/context/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/data/dummyData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Employee' is defined but never used.","line":4,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Company, PersonData, Course } from '../types';\n\n// Backward compatibility alias\ntype Employee = PersonData;\n\n// Dummy data for companies\nconst companies: Company[] = [\n  {\n    id: 'c1',\n    name: 'Acme Corporation',\n    industry: 'Manufacturing',\n    status: 'ACTIVE',\n    location: 'Boston, MA',\n    employeesCount: 150,\n    establishedYear: 2005,\n    contactPerson: 'John Smith',\n    phone: '+1 (555) 123-4567',\n    email: 'contact@acmecorp.com',\n    address: '123 Industrial Park, Boston, MA 02108',\n    website: 'https://acmecorp.example.com',\n    description: 'Leading manufacturer of industrial equipment with a strong focus on employee safety and well-being.'\n  },\n  {\n    id: 'c2',\n    name: 'TechSolutions Inc',\n    industry: 'Technology',\n    status: 'Active',\n    location: 'San Francisco, CA',\n    employeesCount: 85,\n    establishedYear: 2012,\n    contactPerson: 'Jessica Wong',\n    phone: '+1 (555) 234-5678',\n    email: 'contact@techsolutions.com',\n    address: '456 Tech Avenue, San Francisco, CA 94105',\n    website: 'https://techsolutions.example.com',\n    description: 'Innovative technology company delivering cutting-edge software solutions to global clients.'\n  },\n  {\n    id: 'c3',\n    name: 'HealthPlus Medical',\n    industry: 'Healthcare',\n    status: 'Active',\n    location: 'Chicago, IL',\n    employeesCount: 210,\n    establishedYear: 1998,\n    contactPerson: 'Robert Johnson',\n    phone: '+1 (555) 345-6789',\n    email: 'info@healthplus.com',\n    address: '789 Medical Plaza, Chicago, IL 60601',\n    website: 'https://healthplus.example.com',\n    description: 'Leading healthcare provider committed to excellence in patient care and employee wellness.'\n  },\n  {\n    id: 'c4',\n    name: 'BuildRight Construction',\n    industry: 'Construction',\n    status: 'Active',\n    location: 'Denver, CO',\n    employeesCount: 75,\n    establishedYear: 2008,\n    contactPerson: 'Mike Rodriguez',\n    phone: '+1 (555) 456-7890',\n    email: 'info@buildright.com',\n    address: '101 Builder Way, Denver, CO 80202',\n    website: 'https://buildright.example.com',\n    description: 'Specializing in commercial construction projects with rigorous safety standards for all employees.'\n  },\n  {\n    id: 'c5',\n    name: 'EduForward Academy',\n    industry: 'Education',\n    status: 'Active',\n    location: 'Austin, TX',\n    employeesCount: 120,\n    establishedYear: 2010,\n    contactPerson: 'Sarah Chen',\n    phone: '+1 (555) 567-8901',\n    email: 'info@eduforward.com',\n    address: '202 Learning Lane, Austin, TX 78701',\n    website: 'https://eduforward.example.com',\n    description: 'Progressive educational institution focused on innovative teaching methods and staff development.'\n  },\n  {\n    id: 'c6',\n    name: 'LogiTrans Shipping',\n    industry: 'Logistics',\n    status: 'Inactive',\n    location: 'Seattle, WA',\n    employeesCount: 65,\n    establishedYear: 2014,\n    contactPerson: 'David Patel',\n    phone: '+1 (555) 678-9012',\n    email: 'contact@logitrans.com',\n    address: '303 Harbor Drive, Seattle, WA 98101',\n    website: 'https://logitrans.example.com',\n    description: 'Logistics and transportation company specializing in efficient supply chain management.'\n  }\n];\n\n// Dummy data for persons (employees)\nconst employees: PersonData[] = [\n  {\n    id: 'e1',\n    firstName: 'Michael',\n    lastName: 'Johnson',\n    title: 'Production Manager',\n    department: 'Operations',\n    companyId: 'c1',\n    status: 'Active',\n    email: 'michael.johnson@acmecorp.com',\n    phone: '+1 (555) 111-2233',\n    dateOfBirth: '1982-05-15',\n    address: '45 Oak Street, Boston, MA 02108',\n  },\n  {\n    id: 'e2',\n    firstName: 'Emma',\n    lastName: 'Martinez',\n    title: 'Safety Officer',\n    department: 'Health & Safety',\n    companyId: 'c1',\n    status: 'Active',\n    email: 'emma.martinez@acmecorp.com',\n    phone: '+1 (555) 111-3344',\n    dateOfBirth: '1990-08-23',\n    address: '67 Pine Avenue, Boston, MA 02109',\n  },\n  {\n    id: 'e3',\n    firstName: 'Daniel',\n    lastName: 'Wilson',\n    title: 'Software Engineer',\n    department: 'Engineering',\n    companyId: 'c2',\n    status: 'Active',\n    email: 'daniel.wilson@techsolutions.com',\n    phone: '+1 (555) 222-3344',\n    dateOfBirth: '1992-01-30',\n    address: '123 Tech Blvd, San Francisco, CA 94107',\n  },\n  {\n    id: 'e4',\n    firstName: 'Sophia',\n    lastName: 'Garcia',\n    title: 'Head Nurse',\n    department: 'Nursing',\n    companyId: 'c3',\n    status: 'Active',\n    email: 'sophia.garcia@healthplus.com',\n    phone: '+1 (555) 333-4455',\n    dateOfBirth: '1985-11-12',\n    address: '456 Wellness Way, Chicago, IL 60605',\n  },\n  {\n    id: 'e5',\n    firstName: 'James',\n    lastName: 'Taylor',\n    title: 'Construction Foreman',\n    department: 'Field Operations',\n    companyId: 'c4',\n    status: 'On Leave',\n    email: 'james.taylor@buildright.com',\n    phone: '+1 (555) 444-5566',\n    dateOfBirth: '1978-07-20',\n    address: '789 Builder Avenue, Denver, CO 80205',\n  },\n  {\n    id: 'e6',\n    firstName: 'Olivia',\n    lastName: 'Brown',\n    title: 'Lead Teacher',\n    department: 'Education',\n    companyId: 'c5',\n    status: 'Active',\n    email: 'olivia.brown@eduforward.com',\n    phone: '+1 (555) 555-6677',\n    dateOfBirth: '1988-03-25',\n    address: '101 Scholar Street, Austin, TX 78704',\n  },\n  {\n    id: 'e7',\n    firstName: 'William',\n    lastName: 'Jones',\n    title: 'Logistics Coordinator',\n    department: 'Operations',\n    companyId: 'c6',\n    status: 'Inactive',\n    email: 'william.jones@logitrans.com',\n    phone: '+1 (555) 666-7788',\n    dateOfBirth: '1983-09-18',\n    address: '202 Shipping Lane, Seattle, WA 98104',\n  },\n  {\n    id: 'e8',\n    firstName: 'Ava',\n    lastName: 'Miller',\n    title: 'HR Manager',\n    department: 'Human Resources',\n    companyId: 'c1',\n    status: 'Active',\n    email: 'ava.miller@acmecorp.com',\n    phone: '+1 (555) 111-4455',\n    dateOfBirth: '1986-12-10',\n    address: '89 Maple Drive, Boston, MA 02116',\n  },\n  {\n    id: 'e9',\n    firstName: 'Lucas',\n    lastName: 'Thomas',\n    title: 'IT Support Specialist',\n    department: 'IT',\n    companyId: 'c2',\n    status: 'Active',\n    email: 'lucas.thomas@techsolutions.com',\n    phone: '+1 (555) 222-5566',\n    dateOfBirth: '1991-06-05',\n    address: '345 Digital Road, San Francisco, CA 94110',\n  },\n  {\n    id: 'e10',\n    firstName: 'Isabella',\n    lastName: 'Davis',\n    title: 'Physician Assistant',\n    department: 'Medical',\n    companyId: 'c3',\n    status: 'Active',\n    email: 'isabella.davis@healthplus.com',\n    phone: '+1 (555) 333-6677',\n    dateOfBirth: '1984-04-17',\n    address: '678 Health Street, Chicago, IL 60607',\n  }\n];\n\n// Dummy data for courses\nconst courses: Course[] = [\n  {\n    id: 'course1',\n    title: 'First Aid Certification',\n    category: 'Safety',\n    description: 'Comprehensive first aid training that prepares employees to handle workplace emergencies with confidence. Includes CPR, AED, and basic life support techniques.',\n    duration: '8 hours',\n    status: 'Active',\n    rating: 4.8,\n    enrolled: 145,\n  },\n  {\n    id: 'course2',\n    title: 'Workplace Ergonomics',\n    category: 'Health',\n    description: 'Learn proper ergonomic practices to prevent injuries and improve productivity in office and industrial environments.',\n    duration: '4 hours',\n    status: 'Active',\n    rating: 4.5,\n    enrolled: 98,\n  },\n  {\n    id: 'course3',\n    title: 'OSHA Compliance Training',\n    category: 'Compliance',\n    description: 'Essential training on OSHA regulations and standards to ensure workplace safety compliance and prevent violations.',\n    duration: '16 hours',\n    status: 'Active',\n    rating: 4.7,\n    enrolled: 210,\n  },\n  {\n    id: 'course4',\n    title: 'Hazardous Materials Handling',\n    category: 'Safety',\n    description: 'Proper procedures for safely handling, storing, and disposing of hazardous materials in the workplace.',\n    duration: '12 hours',\n    status: 'Active',\n    rating: 4.9,\n    enrolled: 120,\n  },\n  {\n    id: 'course5',\n    title: 'Stress Management',\n    category: 'Health',\n    description: 'Techniques and strategies to effectively manage workplace stress and maintain mental well-being.',\n    duration: '2 hours',\n    status: 'Active',\n    rating: 4.6,\n    enrolled: 175,\n  },\n  {\n    id: 'course6',\n    title: 'Fire Safety and Prevention',\n    category: 'Safety',\n    description: 'Comprehensive fire safety training including prevention, emergency procedures, and proper use of fire extinguishers.',\n    duration: '6 hours',\n    status: 'Active',\n    rating: 4.8,\n    enrolled: 155,\n  },\n  {\n    id: 'course7',\n    title: 'Bloodborne Pathogens',\n    category: 'Health',\n    description: 'Essential training for healthcare workers on preventing the transmission of bloodborne diseases.',\n    duration: '4 hours',\n    status: 'Active',\n    rating: 4.7,\n    enrolled: 88,\n  },\n  {\n    id: 'course8',\n    title: 'Leadership in Safety',\n    category: 'Professional Development',\n    description: 'Advanced course for managers on implementing and maintaining a culture of safety in the workplace.',\n    duration: '8 hours',\n    status: 'Inactive',\n    rating: 4.4,\n    enrolled: 45,\n  }\n];\n\n\nexport const dummyData = {\n  companies,\n  employees,\n  courses\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/__stories__/Button.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/__stories__/Colors.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/__stories__/Overview.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { Button } from '../atoms/Button/Button';\nimport { colors } from '../tokens/colors';\nimport { spacing, borderRadius, shadows } from '../tokens/spacing';\nimport { \n  Download,\n  Plus,\n  Settings\n} from 'lucide-react';\n\nconst meta: Meta = {\n  title: 'Design System/Overview',\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: 'Panoramica completa del Design System Element Formazione. Mostra tutti i componenti, tokens e pattern disponibili.',\n      },\n    },\n  },\n};\n\nexport default meta;\n\n// Componente per mostrare una sezione del design system\nconst DesignSystemSection = ({ title, children }: { title: string; children: React.ReactNode }) => (\n  <div className=\"mb-12\">\n    <h2 className=\"text-2xl font-bold text-gray-900 mb-6 pb-2 border-b border-gray-200\">{title}</h2>\n    {children}\n  </div>\n);\n\n// Componente per mostrare una palette di colori compatta\nconst ColorShowcase = ({ title, palette, maxColors = 5 }: { title: string; palette: Record<string, string>; maxColors?: number }) => (\n  <div className=\"mb-6\">\n    <h4 className=\"text-sm font-semibold text-gray-700 mb-3\">{title}</h4>\n    <div className=\"flex gap-2\">\n      {Object.entries(palette).slice(0, maxColors).map(([key, value]) => (\n        <div key={key} className=\"text-center\">\n          <div\n            className=\"w-12 h-12 rounded-lg border border-gray-200\"\n            style={{ backgroundColor: value }}\n            title={`${key}: ${value}`}\n          />\n          <div className=\"text-xs text-gray-500 mt-1\">{key}</div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport const DesignSystemOverview: StoryObj = {\n  render: () => (\n    <div className=\"max-w-6xl mx-auto\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Design System Element Formazione</h1>\n        <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n          Sistema di design completo per garantire coerenza visiva e funzionale in tutto il frontend pubblico.\n          Include tokens, componenti atomici, molecole e organismi.\n        </p>\n      </div>\n\n      {/* Design Tokens */}\n      <DesignSystemSection title=\"🎨 Design Tokens\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Colori</h3>\n            <ColorShowcase title=\"Primari\" palette={colors.primary} />\n            <ColorShowcase title=\"Semantici - Success\" palette={colors.semantic.success} />\n            <ColorShowcase title=\"Semantici - Error\" palette={colors.semantic.error} />\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Spaziature</h3>\n            <div className=\"space-y-2\">\n              {Object.entries(spacing).slice(0, 8).map(([key, value]) => (\n                <div key={key} className=\"flex items-center gap-3\">\n                  <span className=\"text-xs font-mono w-8\">{key}</span>\n                  <div className=\"bg-blue-500 h-2\" style={{ width: value }} />\n                  <span className=\"text-xs text-gray-500\">{value}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Border Radius & Shadows</h3>\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"text-sm font-semibold text-gray-700 mb-2\">Border Radius</h4>\n                <div className=\"flex gap-2\">\n                  {Object.entries(borderRadius).slice(0, 5).map(([key, value]) => (\n                    <div key={key} className=\"text-center\">\n                      <div\n                        className=\"w-8 h-8 bg-blue-500\"\n                        style={{ borderRadius: value }}\n                      />\n                      <div className=\"text-xs text-gray-500 mt-1\">{key}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-sm font-semibold text-gray-700 mb-2\">Shadows</h4>\n                <div className=\"flex gap-2\">\n                  {Object.entries(shadows).slice(1, 5).map(([key, value]) => (\n                    <div key={key} className=\"text-center\">\n                      <div\n                        className=\"w-8 h-8 bg-white\"\n                        style={{ boxShadow: value }}\n                      />\n                      <div className=\"text-xs text-gray-500 mt-1\">{key}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DesignSystemSection>\n\n      {/* Tipografia */}\n      <DesignSystemSection title=\"📝 Tipografia\">\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Headings</h3>\n            <div className=\"space-y-2\">\n              <h1 className=\"text-4xl font-bold\">Heading 1</h1>\n              <h2 className=\"text-3xl font-bold\">Heading 2</h2>\n              <h3 className=\"text-2xl font-semibold\">Heading 3</h3>\n              <h4 className=\"text-xl font-semibold\">Heading 4</h4>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Body Text</h3>\n            <div className=\"space-y-2\">\n              <p className=\"text-lg\">Large body text per introduzioni importanti</p>\n              <p className=\"text-base\">Base body text per contenuto principale</p>\n              <p className=\"text-sm\">Small text per dettagli secondari</p>\n              <p className=\"text-xs text-gray-500\">Extra small per note e disclaimer</p>\n            </div>\n          </div>\n        </div>\n      </DesignSystemSection>\n\n      {/* Componenti Atomici */}\n      <DesignSystemSection title=\"⚛️ Componenti Atomici\">\n        <div className=\"space-y-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Buttons</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex flex-wrap gap-4\">\n                <Button variant=\"primary\">Primario</Button>\n                <Button variant=\"secondary\">Secondario</Button>\n                <Button variant=\"outline\">Outline</Button>\n                <Button variant=\"ghost\">Ghost</Button>\n                <Button variant=\"destructive\">Destructive</Button>\n              </div>\n              \n              <div className=\"flex flex-wrap items-center gap-4\">\n                <Button size=\"sm\">Piccolo</Button>\n                <Button size=\"md\">Medio</Button>\n                <Button size=\"lg\">Grande</Button>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-4\">\n                <Button leftIcon={<Plus size={16} />}>Con Icona</Button>\n                <Button loading>Loading</Button>\n                <Button disabled>Disabilitato</Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DesignSystemSection>\n\n      {/* Esempi Pratici */}\n      <DesignSystemSection title=\"🎯 Esempi Pratici\">\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Card Corso</h3>\n            <div className=\"bg-white p-6 rounded-xl border border-gray-200 shadow-sm\">\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                Sicurezza sui Luoghi di Lavoro\n              </h4>\n              <p className=\"text-sm text-gray-500 mb-3\">Corso base • 8 ore</p>\n              <p className=\"text-gray-700 mb-4\">\n                Corso fondamentale per la sicurezza nei luoghi di lavoro secondo le normative vigenti.\n              </p>\n              <div className=\"flex gap-2\">\n                <Button size=\"sm\" variant=\"outline\">Dettagli</Button>\n                <Button size=\"sm\">Iscriviti</Button>\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Form di Contatto</h3>\n            <div className=\"bg-white p-6 rounded-xl border border-gray-200 shadow-sm\">\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-4\">Richiedi Informazioni</h4>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nome</label>\n                  <input \n                    type=\"text\" \n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"Il tuo nome\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                  <input \n                    type=\"email\" \n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"la-tua-email@esempio.com\"\n                  />\n                </div>\n                <Button fullWidth leftIcon={<User size={16} />}>\n                  Invia Richiesta\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DesignSystemSection>\n\n      {/* Footer */}\n      <div className=\"text-center py-8 border-t border-gray-200\">\n        <p className=\"text-gray-600\">\n          Design System Element Formazione • Versione 1.0 • \n          <Button variant=\"ghost\" size=\"sm\" leftIcon={<Settings size={14} />} className=\"ml-2\">\n            Configurazioni\n          </Button>\n        </p>\n      </div>\n    </div>\n  ),\n  parameters: {\n    layout: 'fullscreen',\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/__stories__/Spacing.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/__stories__/Typography.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Badge/Badge.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Badge/Badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Badge/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Button/Button.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronRightIconIcon' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":30},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"React.useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":209,"column":35,"nodeType":"MemberExpression","endLine":209,"endColumn":49}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Button Stories\n * Week 8 Implementation - Component Library\n */\n\nimport React from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Button } from './Button';\nimport { ChevronRightIconIcon } from '@heroicons/react/24/outline';\n\nconst meta = {\n  title: 'Design System/Atoms/Button',\n  component: Button,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'Button component seguendo i principi dell\\'Atomic Design. Supporta diverse varianti, dimensioni e stati.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['primary', 'secondary', 'outline', 'ghost', 'destructive'],\n      description: 'Variante del button',\n    },\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg'],\n      description: 'Dimensione del button',\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Stato di caricamento',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Stato disabilitato',\n    },\n    fullWidth: {\n      control: 'boolean',\n      description: 'Button a larghezza piena',\n    },\n    children: {\n      control: 'text',\n      description: 'Contenuto del button',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Default story\nexport const Default: Story = {\n  args: {\n    children: 'Button',\n  },\n};\n\n// Variants\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n    children: 'Primary Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    variant: 'secondary',\n    children: 'Secondary Button',\n  },\n};\n\nexport const Outline: Story = {\n  args: {\n    variant: 'outline',\n    children: 'Outline Button',\n  },\n};\n\nexport const Ghost: Story = {\n  args: {\n    variant: 'ghost',\n    children: 'Ghost Button',\n  },\n};\n\nexport const Destructive: Story = {\n  args: {\n    variant: 'destructive',\n    children: 'Destructive Button',\n  },\n};\n\n// Sizes\nexport const Small: Story = {\n  args: {\n    size: 'sm',\n    children: 'Small Button',\n  },\n};\n\nexport const Medium: Story = {\n  args: {\n    size: 'md',\n    children: 'Medium Button',\n  },\n};\n\nexport const Large: Story = {\n  args: {\n    size: 'lg',\n    children: 'Large Button',\n  },\n};\n\n// States\nexport const Loading: Story = {\n  args: {\n    loading: true,\n    children: 'Loading Button',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    disabled: true,\n    children: 'Disabled Button',\n  },\n};\n\n// With Icons\nexport const WithLeftIcon: Story = {\n  args: {\n    leftIcon: <PlusIcon className=\"h-4 w-4\" />,\n    children: 'Add Item',\n  },\n};\n\nexport const WithRightIcon: Story = {\n  args: {\n    rightIcon: <ChevronRightIcon className=\"h-4 w-4\" />,\n    children: 'Continue',\n  },\n};\n\nexport const WithBothIcons: Story = {\n  args: {\n    leftIcon: <PlusIcon className=\"h-4 w-4\" />,\n    rightIcon: <ChevronRightIcon className=\"h-4 w-4\" />,\n    children: 'Add and Continue',\n  },\n};\n\n// Full Width\nexport const FullWidth: Story = {\n  args: {\n    fullWidth: true,\n    children: 'Full Width Button',\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\n// All Variants Showcase\nexport const AllVariants: Story = {\n  render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex gap-2 flex-wrap\">\n        <Button variant=\"primary\">Primary</Button>\n        <Button variant=\"secondary\">Secondary</Button>\n        <Button variant=\"outline\">Outline</Button>\n        <Button variant=\"ghost\">Ghost</Button>\n        <Button variant=\"destructive\">Destructive</Button>\n      </div>\n      <div className=\"flex gap-2 flex-wrap\">\n        <Button variant=\"primary\" disabled>Primary Disabled</Button>\n        <Button variant=\"secondary\" disabled>Secondary Disabled</Button>\n        <Button variant=\"outline\" disabled>Outline Disabled</Button>\n        <Button variant=\"ghost\" disabled>Ghost Disabled</Button>\n        <Button variant=\"destructive\" disabled>Destructive Disabled</Button>\n      </div>\n    </div>\n  ),\n  parameters: {\n    layout: 'padded',\n  },\n};\n\n// All Sizes Showcase\nexport const AllSizes: Story = {\n  render: () => (\n    <div className=\"flex items-center gap-4\">\n      <Button size=\"sm\">Small</Button>\n      <Button size=\"md\">Medium</Button>\n      <Button size=\"lg\">Large</Button>\n    </div>\n  ),\n};\n\n// Interactive Example\nexport const Interactive: Story = {\n  render: () => {\n    const [loading, setLoading] = React.useState(false);\n    \n    const handleClick = () => {\n      setLoading(true);\n      setTimeout(() => setLoading(false), 2000);\n    };\n    \n    return (\n      <Button \n        loading={loading} \n        onClick={handleClick}\n        leftIcon={!loading ? <PlusIcon className=\"h-4 w-4\" /> : undefined}\n      >\n        {loading ? 'Processing...' : 'Click me'}\n      </Button>\n    );\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Button/Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Button/Button.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'colors' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'typography' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'borderRadius' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'shadows' is defined but never used.","line":10,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":31}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Button Component (Atom)\n * Week 8 Implementation - Component Library\n */\n\nimport React, { forwardRef } from 'react';\nimport { cn } from '../../utils';\nimport { colors } from '../../tokens/colors';\nimport { typography } from '../../tokens/typography';\nimport { borderRadius, shadows } from '../../tokens/spacing';\n\n// Button variants\nexport type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\nexport type ButtonSize = 'sm' | 'md' | 'lg';\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Button variant */\n  variant?: ButtonVariant;\n  /** Button size */\n  size?: ButtonSize;\n  /** Loading state */\n  loading?: boolean;\n  /** Icon before text */\n  leftIcon?: React.ReactNode;\n  /** Icon after text */\n  rightIcon?: React.ReactNode;\n  /** Full width button */\n  fullWidth?: boolean;\n  /** Children content */\n  children?: React.ReactNode;\n}\n\n// Variant styles\nconst variantStyles: Record<ButtonVariant, string> = {\n  primary: `\n    bg-primary-600 text-white border-primary-600\n    hover:bg-primary-700 hover:border-primary-700\n    focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\n    active:bg-primary-800\n    disabled:bg-primary-300 disabled:border-primary-300\n  `,\n  secondary: `\n    bg-gray-100 text-gray-900 border-gray-300\n    hover:bg-gray-200 hover:border-gray-400\n    focus:ring-2 focus:ring-gray-500 focus:ring-offset-2\n    active:bg-gray-300\n    disabled:bg-gray-50 disabled:text-gray-400 disabled:border-gray-200\n  `,\n  outline: `\n    bg-transparent text-gray-700 border-gray-300\n    hover:bg-gray-50 hover:border-gray-400\n    focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n    active:bg-gray-100\n    disabled:text-gray-400 disabled:border-gray-200\n  `,\n  ghost: `\n    bg-transparent text-gray-700 border-transparent\n    hover:bg-gray-100\n    focus:ring-2 focus:ring-gray-500 focus:ring-offset-2\n    active:bg-gray-200\n    disabled:text-gray-400\n  `,\n  destructive: `\n    bg-red-600 text-white border-red-600\n    hover:bg-red-700 hover:border-red-700\n    focus:ring-2 focus:ring-red-500 focus:ring-offset-2\n    active:bg-red-800\n    disabled:bg-red-300 disabled:border-red-300\n  `,\n};\n\n// Size styles\nconst sizeStyles: Record<ButtonSize, string> = {\n  sm: 'px-3 py-1.5 text-sm font-medium min-h-[32px]',\n  md: 'px-4 py-2 text-sm font-medium min-h-[40px]',\n  lg: 'px-6 py-3 text-base font-medium min-h-[48px]',\n};\n\n// Base button styles\nconst baseStyles = `\n  inline-flex items-center justify-center\n  border border-solid\n  rounded-full\n  font-medium\n  transition-all duration-200\n  focus:outline-none\n  disabled:cursor-not-allowed disabled:opacity-50\n  select-none\n  whitespace-nowrap\n`;\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      variant = 'primary',\n      size = 'md',\n      loading = false,\n      leftIcon,\n      rightIcon,\n      fullWidth = false,\n      disabled,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isDisabled = disabled || loading;\n\n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        disabled={isDisabled}\n        className={cn(\n          baseStyles,\n          variantStyles[variant],\n          sizeStyles[size],\n          fullWidth && 'w-full',\n          className\n        )}\n        {...props}\n      >\n        {loading && (\n          <svg\n            className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            />\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            />\n          </svg>\n        )}\n        \n        {!loading && leftIcon && (\n          <span className=\"mr-2 flex-shrink-0\">{leftIcon}</span>\n        )}\n        \n        {children && (\n          <span className={leftIcon || rightIcon ? \"flex-1 min-w-0\" : \"truncate\"}>{children}</span>\n        )}\n        \n        {!loading && rightIcon && (\n          <span className=\"ml-2 flex-shrink-0\">{rightIcon}</span>\n        )}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport default Button;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Button/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Icon/Icon.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronUpIconIcon' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HomeIconIconIcon' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Icon Component Stories\n * Week 8 Implementation - Component Library\n */\n\nimport type { Meta, StoryObj } from '@storybook/react';\nimport {\n  Icon,\n  ChevronDownIcon,\n  ChevronUpIconIcon,\n  XIcon,\n  CheckIcon,\n  SearchIcon,\n  EditIcon,\n  DeleteIcon,\n  LoadingIcon,\n  HomeIconIconIcon\n} from './Icon';\n\nconst meta: Meta<typeof Icon> = {\n  title: 'Design System/Atoms/Icon',\n  component: Icon,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'Icon component for displaying SVG icons with consistent styling. Supports various sizes, colors, and interactive states.'\n      }\n    }\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    name: {\n      control: 'select',\n      options: [\n        'chevron-down', 'chevron-up', 'chevron-left', 'chevron-right',\n        'arrow-down', 'arrow-up', 'arrow-left', 'arrow-right',\n        'plus', 'minus', 'x', 'check',\n        'search', 'filter', 'edit', 'delete', 'trash',\n        'eye', 'eye-off', 'heart', 'star', 'bookmark',\n        'share', 'download', 'upload', 'copy', 'external-link',\n        'home', 'user', 'users', 'settings', 'bell', 'mail', 'phone',\n        'calendar', 'clock', 'map-pin', 'globe',\n        'lock', 'unlock', 'key', 'shield',\n        'alert-circle', 'alert-triangle', 'info', 'help-circle', 'question-mark',\n        'loading', 'refresh'\n      ]\n    },\n    size: {\n      control: 'select',\n      options: ['xs', 'sm', 'base', 'lg', 'xl', '2xl']\n    },\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary', 'muted', 'error', 'warning', 'success', 'info', 'inherit']\n    },\n    clickable: {\n      control: 'boolean'\n    },\n    spin: {\n      control: 'boolean'\n    },\n    rotate: {\n      control: 'number',\n      min: 0,\n      max: 360,\n      step: 45\n    }\n  }\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Icon>;\n\n// Default story\nexport const Default: Story = {\n  args: {\n    name: 'home',\n    size: 'base',\n    color: 'inherit'\n  }\n};\n\n// All sizes\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"flex items-center gap-4\">\n      <div className=\"text-center\">\n        <Icon name=\"star\" size=\"xs\" />\n        <div className=\"text-xs mt-1\">xs</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"star\" size=\"sm\" />\n        <div className=\"text-xs mt-1\">sm</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"star\" size=\"base\" />\n        <div className=\"text-xs mt-1\">base</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"star\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">lg</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"star\" size=\"xl\" />\n        <div className=\"text-xs mt-1\">xl</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"star\" size=\"2xl\" />\n        <div className=\"text-xs mt-1\">2xl</div>\n      </div>\n    </div>\n  )\n};\n\n// All colors\nexport const Colors: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-4 gap-4\">\n      <div className=\"text-center\">\n        <Icon name=\"heart\" color=\"primary\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">primary</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"heart\" color=\"secondary\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">secondary</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"heart\" color=\"muted\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">muted</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"heart\" color=\"error\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">error</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"heart\" color=\"warning\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">warning</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"heart\" color=\"success\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">success</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"heart\" color=\"info\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">info</div>\n      </div>\n      <div className=\"text-center bg-blue-600 p-2 rounded\">\n        <Icon name=\"heart\" color=\"inherit\" size=\"lg\" className=\"text-white\" />\n        <div className=\"text-xs mt-1 text-white\">inherit</div>\n      </div>\n    </div>\n  )\n};\n\n// Navigation icons\nexport const NavigationIcons: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-8 gap-4\">\n      <div className=\"text-center\">\n        <Icon name=\"chevron-up\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">chevron-up</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"chevron-down\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">chevron-down</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"chevron-left\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">chevron-left</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"chevron-right\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">chevron-right</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"arrow-up\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">arrow-up</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"arrow-down\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">arrow-down</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"arrow-left\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">arrow-left</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"arrow-right\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">arrow-right</div>\n      </div>\n    </div>\n  )\n};\n\n// Action icons\nexport const ActionIcons: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-8 gap-4\">\n      <div className=\"text-center\">\n        <Icon name=\"plus\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">plus</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"minus\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">minus</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"x\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">x</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"check\" size=\"lg\" color=\"success\" />\n        <div className=\"text-xs mt-1\">check</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"edit\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">edit</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"delete\" size=\"lg\" color=\"error\" />\n        <div className=\"text-xs mt-1\">delete</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"search\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">search</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"filter\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">filter</div>\n      </div>\n    </div>\n  )\n};\n\n// Interface icons\nexport const InterfaceIcons: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-8 gap-4\">\n      <div className=\"text-center\">\n        <Icon name=\"home\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">home</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"user\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">user</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"users\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">users</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"settings\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">settings</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"bell\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">bell</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"mail\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">mail</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"calendar\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">calendar</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"clock\" size=\"lg\" />\n        <div className=\"text-xs mt-1\">clock</div>\n      </div>\n    </div>\n  )\n};\n\n// Status icons\nexport const StatusIcons: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-6 gap-4\">\n      <div className=\"text-center\">\n        <Icon name=\"alert-circle\" size=\"lg\" color=\"error\" />\n        <div className=\"text-xs mt-1\">alert-circle</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"alert-triangle\" size=\"lg\" color=\"warning\" />\n        <div className=\"text-xs mt-1\">alert-triangle</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"info\" size=\"lg\" color=\"info\" />\n        <div className=\"text-xs mt-1\">info</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"help-circle\" size=\"lg\" color=\"secondary\" />\n        <div className=\"text-xs mt-1\">help-circle</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"check\" size=\"lg\" color=\"success\" />\n        <div className=\"text-xs mt-1\">success</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"loading\" size=\"lg\" spin />\n        <div className=\"text-xs mt-1\">loading</div>\n      </div>\n    </div>\n  )\n};\n\n// Interactive icons\nexport const InteractiveIcons: Story = {\n  render: () => (\n    <div className=\"flex gap-4\">\n      <div className=\"text-center\">\n        <Icon \n          name=\"heart\" \n          size=\"lg\" \n          clickable \n          onClick={() => alert('Heart clicked!')} \n        />\n        <div className=\"text-xs mt-1\">clickable</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"star\" size=\"lg\" color=\"warning\" />\n        <div className=\"text-xs mt-1\">static</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon \n          name=\"settings\" \n          size=\"lg\" \n          clickable \n          onClick={() => alert('Settings clicked!')} \n        />\n        <div className=\"text-xs mt-1\">clickable</div>\n      </div>\n    </div>\n  )\n};\n\n// Spinning and rotating icons\nexport const AnimatedIcons: Story = {\n  render: () => (\n    <div className=\"flex gap-8\">\n      <div className=\"text-center\">\n        <Icon name=\"loading\" size=\"lg\" spin />\n        <div className=\"text-xs mt-1\">spinning</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"refresh\" size=\"lg\" spin />\n        <div className=\"text-xs mt-1\">spinning refresh</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"arrow-right\" size=\"lg\" rotate={45} />\n        <div className=\"text-xs mt-1\">rotated 45°</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"arrow-right\" size=\"lg\" rotate={90} />\n        <div className=\"text-xs mt-1\">rotated 90°</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon name=\"arrow-right\" size=\"lg\" rotate={180} />\n        <div className=\"text-xs mt-1\">rotated 180°</div>\n      </div>\n    </div>\n  )\n};\n\n// Convenience components\nexport const ConvenienceComponents: Story = {\n  render: () => (\n    <div className=\"grid grid-cols-6 gap-4\">\n      <div className=\"text-center\">\n        <ChevronDownIcon size=\"lg\" />\n        <div className=\"text-xs mt-1\">ChevronDownIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <ChevronUpIcon size=\"lg\" />\n        <div className=\"text-xs mt-1\">ChevronUpIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <PlusIcon size=\"lg\" color=\"success\" />\n        <div className=\"text-xs mt-1\">PlusIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <XIcon size=\"lg\" color=\"error\" />\n        <div className=\"text-xs mt-1\">XIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <CheckIcon size=\"lg\" color=\"success\" />\n        <div className=\"text-xs mt-1\">CheckIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <SearchIcon size=\"lg\" />\n        <div className=\"text-xs mt-1\">SearchIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <EditIcon size=\"lg\" />\n        <div className=\"text-xs mt-1\">EditIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <DeleteIcon size=\"lg\" color=\"error\" />\n        <div className=\"text-xs mt-1\">DeleteIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <LoadingIcon size=\"lg\" />\n        <div className=\"text-xs mt-1\">LoadingIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <HomeIcon size=\"lg\" />\n        <div className=\"text-xs mt-1\">HomeIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <UserIcon size=\"lg\" />\n        <div className=\"text-xs mt-1\">UserIcon</div>\n      </div>\n      <div className=\"text-center\">\n        <SettingsIcon size=\"lg\" />\n        <div className=\"text-xs mt-1\">SettingsIcon</div>\n      </div>\n    </div>\n  )\n};\n\n// Custom SVG content\nexport const CustomSVG: Story = {\n  render: () => (\n    <div className=\"flex gap-4\">\n      <div className=\"text-center\">\n        <Icon size=\"lg\" color=\"primary\">\n          <svg fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M12 2L2 7v10c0 5.55 3.84 9.739 9 11 5.16-1.261 9-5.45 9-11V7l-10-5z\" />\n          </svg>\n        </Icon>\n        <div className=\"text-xs mt-1\">custom shield</div>\n      </div>\n      <div className=\"text-center\">\n        <Icon size=\"lg\" color=\"warning\">\n          <svg fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\n          </svg>\n        </Icon>\n        <div className=\"text-xs mt-1\">custom star</div>\n      </div>\n    </div>\n  )\n};\n\n// Real-world usage examples\nexport const RealWorldExamples: Story = {\n  render: () => (\n    <div className=\"space-y-6\">\n      {/* Button with icon */}\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium\">Buttons with icons</h3>\n        <div className=\"flex gap-2\">\n          <button className=\"flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\n            <PlusIcon size=\"sm\" />\n            Add Item\n          </button>\n          <button className=\"flex items-center gap-2 px-3 py-2 border border-gray-300 rounded hover:bg-gray-50\">\n            <EditIcon size=\"sm\" />\n            Edit\n          </button>\n          <button className=\"flex items-center gap-2 px-3 py-2 border border-red-300 text-red-600 rounded hover:bg-red-50\">\n            <DeleteIcon size=\"sm\" color=\"error\" />\n            Delete\n          </button>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium\">Navigation</h3>\n        <div className=\"flex items-center gap-1\">\n          <HomeIcon size=\"sm\" color=\"muted\" />\n          <ChevronRightIcon size=\"xs\" color=\"muted\" />\n          <span className=\"text-sm text-gray-600\">Products</span>\n          <ChevronRightIcon size=\"xs\" color=\"muted\" />\n          <span className=\"text-sm font-medium\">Laptop</span>\n        </div>\n      </div>\n\n      {/* Status indicators */}\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium\">Status indicators</h3>\n        <div className=\"space-y-1\">\n          <div className=\"flex items-center gap-2\">\n            <CheckIcon size=\"sm\" color=\"success\" />\n            <span className=\"text-sm\">Task completed successfully</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Icon name=\"alert-triangle\" size=\"sm\" color=\"warning\" />\n            <span className=\"text-sm\">Warning: Check your settings</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Icon name=\"alert-circle\" size=\"sm\" color=\"error\" />\n            <span className=\"text-sm\">Error: Something went wrong</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <LoadingIcon size=\"sm\" />\n            <span className=\"text-sm\">Loading...</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Input with icon */}\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium\">Search input</h3>\n        <div className=\"relative\">\n          <SearchIcon size=\"sm\" color=\"muted\" className=\"absolute left-3 top-1/2 transform -translate-y-1/2\" />\n          <input \n            type=\"text\" \n            placeholder=\"Search...\" \n            className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-md w-64 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Icon/Icon.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11341,11344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11341,11344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":352,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11512,11515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11512,11515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Icon Component Tests\n * Week 8 Implementation - Component Library\n */\n\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect, vi } from 'vitest';\nimport {\n  Icon,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  PlusIcon,\n  XIcon,\n  CheckIcon,\n  SearchIcon,\n  EditIcon,\n  DeleteIcon,\n  LoadingIcon,\n  HomeIcon,\n  UserIcon,\n  SettingsIcon\n} from './Icon';\n\ndescribe('Icon', () => {\n  describe('Basic rendering', () => {\n    it('renders with a valid icon name', () => {\n      render(<Icon name=\"home\" />);\n      const icon = screen.getByRole('img');\n      expect(icon).toBeInTheDocument();\n      expect(icon.tagName).toBe('svg');\n    });\n\n    it('returns null when no name or children provided', () => {\n      const { container } = render(<Icon />);\n      expect(container.firstChild).toBeNull();\n    });\n\n    it('warns and returns null for invalid icon name', () => {\n      const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});\n      const { container } = render(<Icon name=\"invalid-icon\" as any />);\n      expect(container.firstChild).toBeNull();\n      expect(consoleSpy).toHaveBeenCalledWith('Icon \"invalid-icon\" not found');\n      consoleSpy.mockRestore();\n    });\n\n    it('renders custom SVG content when children are provided', () => {\n      render(\n        <Icon>\n          <svg data-testid=\"custom-svg\">\n            <path d=\"M12 2L2 7v10c0 5.55 3.84 9.739 9 11 5.16-1.261 9-5.45 9-11V7l-10-5z\" />\n          </svg>\n        </Icon>\n      );\n      expect(screen.getByTestId('custom-svg')).toBeInTheDocument();\n    });\n  });\n\n  describe('Sizes', () => {\n    it('applies size classes correctly', () => {\n      render(<Icon name=\"home\" size=\"lg\" />);\n      expect(screen.getByRole('img')).toHaveClass('w-6', 'h-6');\n    });\n\n    it('applies extra small size correctly', () => {\n      render(<Icon name=\"home\" size=\"xs\" />);\n      expect(screen.getByRole('img')).toHaveClass('w-3', 'h-3');\n    });\n\n    it('applies extra large size correctly', () => {\n      render(<Icon name=\"home\" size=\"2xl\" />);\n      expect(screen.getByRole('img')).toHaveClass('w-10', 'h-10');\n    });\n\n    it('uses base size as default', () => {\n      render(<Icon name=\"home\" />);\n      expect(screen.getByRole('img')).toHaveClass('w-5', 'h-5');\n    });\n  });\n\n  describe('Colors', () => {\n    it('applies primary color correctly', () => {\n      render(<Icon name=\"home\" color=\"primary\" />);\n      expect(screen.getByRole('img')).toHaveClass('text-primary-600');\n    });\n\n    it('applies error color correctly', () => {\n      render(<Icon name=\"home\" color=\"error\" />);\n      expect(screen.getByRole('img')).toHaveClass('text-red-600');\n    });\n\n    it('applies muted color correctly', () => {\n      render(<Icon name=\"home\" color=\"muted\" />);\n      expect(screen.getByRole('img')).toHaveClass('text-gray-400');\n    });\n\n    it('uses inherit color as default', () => {\n      render(<Icon name=\"home\" />);\n      expect(screen.getByRole('img')).toHaveClass('text-inherit');\n    });\n  });\n\n  describe('Interactive behavior', () => {\n    it('handles click events when onClick is provided', () => {\n      const handleClick = vi.fn();\n      render(<Icon name=\"home\" onClick={handleClick} />);\n      \n      const icon = screen.getByRole('button');\n      fireEvent.click(icon);\n      \n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('applies clickable styles when clickable prop is true', () => {\n      render(<Icon name=\"home\" clickable />);\n      const icon = screen.getByRole('button');\n      expect(icon).toHaveClass('cursor-pointer', 'hover:opacity-75', 'transition-opacity');\n      expect(icon).toHaveAttribute('tabindex', '0');\n    });\n\n    it('applies clickable styles when onClick is provided', () => {\n      const handleClick = vi.fn();\n      render(<Icon name=\"home\" onClick={handleClick} />);\n      const icon = screen.getByRole('button');\n      expect(icon).toHaveClass('cursor-pointer', 'hover:opacity-75', 'transition-opacity');\n    });\n\n    it('does not apply clickable styles by default', () => {\n      render(<Icon name=\"home\" />);\n      const icon = screen.getByRole('img');\n      expect(icon).not.toHaveClass('cursor-pointer');\n      expect(icon).not.toHaveAttribute('tabIndex');\n    });\n  });\n\n  describe('Animations', () => {\n    it('applies spin animation when spin prop is true', () => {\n      render(<Icon name=\"loading\" spin />);\n      expect(screen.getByRole('img')).toHaveClass('animate-spin');\n    });\n\n    it('applies rotation transform when rotate prop is provided', () => {\n      render(<Icon name=\"arrow-right\" rotate={90} />);\n      const icon = screen.getByRole('img');\n      expect(icon).toHaveStyle({ transform: 'rotate(90deg)' });\n    });\n\n    it('does not apply animations by default', () => {\n      render(<Icon name=\"home\" />);\n      const icon = screen.getByRole('img');\n      expect(icon).not.toHaveClass('animate-spin');\n      expect(icon).not.toHaveStyle({ transform: expect.any(String) });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('applies aria-label when provided', () => {\n      render(<Icon name=\"home\" aria-label=\"Home icon\" />);\n      expect(screen.getByRole('img')).toHaveAttribute('aria-label', 'Home icon');\n    });\n\n    it('sets role to button for clickable icons', () => {\n      render(<Icon name=\"home\" clickable />);\n      expect(screen.getByRole('button')).toBeInTheDocument();\n    });\n\n    it('sets role to img for non-clickable icons', () => {\n      render(<Icon name=\"home\" />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('applies tabIndex for clickable icons', () => {\n      render(<Icon name=\"home\" clickable />);\n      expect(screen.getByRole('button')).toHaveAttribute('tabindex', '0');\n    });\n  });\n\n  describe('Custom classes and styling', () => {\n    it('applies custom className correctly', () => {\n      render(<Icon name=\"home\" className=\"custom-class\" />);\n      expect(screen.getByRole('img')).toHaveClass('custom-class');\n    });\n\n    it('merges custom classes with default classes', () => {\n      render(<Icon name=\"home\" size=\"lg\" color=\"primary\" className=\"custom-class\" />);\n      const icon = screen.getByRole('img');\n      expect(icon).toHaveClass('w-6', 'h-6', 'text-primary-600', 'custom-class');\n    });\n  });\n\n  describe('SVG attributes', () => {\n    it('renders SVG with correct default attributes', () => {\n      render(<Icon name=\"home\" />);\n      const icon = screen.getByRole('img');\n      expect(icon).toHaveAttribute('fill', 'none');\n      expect(icon).toHaveAttribute('stroke', 'currentColor');\n      expect(icon).toHaveAttribute('stroke-width', '1.5');\n      expect(icon).toHaveAttribute('viewBox', '0 0 24 24');\n    });\n\n    it('renders path with correct attributes', () => {\n      render(<Icon name=\"home\" />);\n      const path = screen.getByRole('img').querySelector('path');\n      expect(path).toHaveAttribute('stroke-linecap', 'round');\n      expect(path).toHaveAttribute('stroke-linejoin', 'round');\n    });\n  });\n});\n\ndescribe('Icon Convenience Components', () => {\n  describe('Navigation icons', () => {\n    it('renders ChevronDownIcon correctly', () => {\n      render(<ChevronDownIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('renders ChevronUpIcon correctly', () => {\n      render(<ChevronUpIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Action icons', () => {\n    it('renders PlusIcon correctly', () => {\n      render(<PlusIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('renders XIcon correctly', () => {\n      render(<XIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('renders CheckIcon correctly', () => {\n      render(<CheckIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('renders SearchIcon correctly', () => {\n      render(<SearchIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('renders EditIcon correctly', () => {\n      render(<EditIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('renders DeleteIcon correctly', () => {\n      render(<DeleteIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Interface icons', () => {\n    it('renders HomeIcon correctly', () => {\n      render(<HomeIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('renders UserIcon correctly', () => {\n      render(<UserIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n\n    it('renders SettingsIcon correctly', () => {\n      render(<SettingsIcon />);\n      expect(screen.getByRole('img')).toBeInTheDocument();\n    });\n  });\n\n  describe('Special icons', () => {\n    it('renders LoadingIcon with spin animation', () => {\n      render(<LoadingIcon />);\n      expect(screen.getByRole('img')).toHaveClass('animate-spin');\n    });\n  });\n\n  describe('Convenience components with custom props', () => {\n    it('accepts additional props in convenience components', () => {\n      render(<HomeIcon className=\"custom-home\" size=\"lg\" />);\n      const icon = screen.getByRole('img');\n      expect(icon).toHaveClass('custom-home', 'w-6', 'h-6');\n    });\n\n    it('allows overriding default props in convenience components', () => {\n      render(<CheckIcon color=\"error\" />);\n      expect(screen.getByRole('img')).toHaveClass('text-red-600');\n    });\n\n    it('handles click events in convenience components', () => {\n      const handleClick = vi.fn();\n      render(<PlusIcon onClick={handleClick} />);\n      \n      fireEvent.click(screen.getByRole('button'));\n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n\ndescribe('Icon with Custom Content', () => {\n  it('renders custom SVG children correctly', () => {\n    render(\n      <Icon size=\"lg\" color=\"primary\">\n        <svg data-testid=\"custom-icon\" viewBox=\"0 0 24 24\">\n          <circle cx=\"12\" cy=\"12\" r=\"10\" />\n        </svg>\n      </Icon>\n    );\n    \n    const wrapper = screen.getByTestId('custom-icon').parentElement;\n    expect(wrapper).toHaveClass('w-6', 'h-6', 'text-primary-600');\n  });\n\n  it('handles click events with custom content', () => {\n    const handleClick = vi.fn();\n    render(\n      <Icon onClick={handleClick}>\n        <svg data-testid=\"clickable-custom\">\n          <path d=\"M12 2L2 7v10c0 5.55 3.84 9.739 9 11\" />\n        </svg>\n      </Icon>\n    );\n    \n    const wrapper = screen.getByTestId('clickable-custom').parentElement;\n    fireEvent.click(wrapper!);\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('applies accessibility attributes to custom content wrapper', () => {\n    render(\n      <Icon aria-label=\"Custom icon\" clickable>\n        <svg data-testid=\"accessible-custom\">\n          <rect width=\"24\" height=\"24\" />\n        </svg>\n      </Icon>\n    );\n    \n    const wrapper = screen.getByTestId('accessible-custom').parentElement;\n    expect(wrapper).toHaveAttribute('aria-label', 'Custom icon');\n    expect(wrapper).toHaveAttribute('role', 'button');\n    expect(wrapper).toHaveAttribute('tabindex', '0');\n  });\n});\n\ndescribe('Icon Edge Cases', () => {\n  it('handles undefined icon name gracefully', () => {\n    const { container } = render(<Icon name={undefined as any} />);\n    expect(container.firstChild).toBeNull();\n  });\n\n  it('handles empty string icon name gracefully', () => {\n    const { container } = render(<Icon name={'' as any} />);\n    expect(container.firstChild).toBeNull();\n  });\n\n  it('combines multiple style props correctly', () => {\n    render(\n      <Icon\n        name=\"star\"\n        size=\"xl\"\n        color=\"warning\"\n        clickable\n        spin\n        rotate={45}\n        className=\"custom-icon\"\n      />\n    );\n    \n    const icon = screen.getByRole('button');\n    expect(icon).toHaveClass(\n      'w-8',\n      'h-8',\n      'text-yellow-600',\n      'cursor-pointer',\n      'animate-spin',\n      'custom-icon'\n    );\n    expect(icon).toHaveStyle({ transform: 'rotate(45deg)' });\n  });\n\n  it('handles keyboard events for clickable icons', () => {\n    const handleClick = vi.fn();\n    render(<Icon name=\"home\" onClick={handleClick} />);\n    \n    const icon = screen.getByRole('button');\n    fireEvent.keyDown(icon, { key: 'Enter' });\n    // Note: The component doesn't handle keyboard events by default,\n    // but it should be focusable with tabIndex\n    expect(icon).toHaveAttribute('tabindex', '0');\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Icon/Icon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Icon/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Input/Input.stories.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"React.useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":305,"column":45,"nodeType":"MemberExpression","endLine":305,"endColumn":59}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Input Stories\n * Week 8 Implementation - Component Library\n */\n\nimport React from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Input } from './Input';\nimport { MagnifyingGlassIcon, EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';\n\nconst meta = {\n  title: 'Design System/Atoms/Input',\n  component: Input,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'Input component seguendo i principi dell\\'Atomic Design. Supporta diverse varianti, dimensioni, stati e icone.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'filled', 'outline'],\n      description: 'Variante dell\\'input',\n    },\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg'],\n      description: 'Dimensione dell\\'input',\n    },\n    state: {\n      control: 'select',\n      options: ['default', 'error', 'success', 'disabled'],\n      description: 'Stato dell\\'input',\n    },\n    label: {\n      control: 'text',\n      description: 'Etichetta dell\\'input',\n    },\n    placeholder: {\n      control: 'text',\n      description: 'Testo placeholder',\n    },\n    helperText: {\n      control: 'text',\n      description: 'Testo di aiuto',\n    },\n    errorMessage: {\n      control: 'text',\n      description: 'Messaggio di errore',\n    },\n    successMessage: {\n      control: 'text',\n      description: 'Messaggio di successo',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Stato disabilitato',\n    },\n    required: {\n      control: 'boolean',\n      description: 'Campo obbligatorio',\n    },\n    fullWidth: {\n      control: 'boolean',\n      description: 'Larghezza piena',\n    },\n  },\n} satisfies Meta<typeof Input>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Default story\nexport const Default: Story = {\n  args: {\n    placeholder: 'Enter text...',\n  },\n};\n\n// With Label\nexport const WithLabel: Story = {\n  args: {\n    label: 'Email Address',\n    placeholder: 'Enter your email',\n    type: 'email',\n  },\n};\n\n// Required Field\nexport const Required: Story = {\n  args: {\n    label: 'Full Name',\n    placeholder: 'Enter your full name',\n    required: true,\n  },\n};\n\n// Variants\nexport const DefaultVariant: Story = {\n  args: {\n    variant: 'default',\n    label: 'Default Input',\n    placeholder: 'Default variant',\n  },\n};\n\nexport const FilledVariant: Story = {\n  args: {\n    variant: 'filled',\n    label: 'Filled Input',\n    placeholder: 'Filled variant',\n  },\n};\n\nexport const OutlineVariant: Story = {\n  args: {\n    variant: 'outline',\n    label: 'Outline Input',\n    placeholder: 'Outline variant',\n  },\n};\n\n// Sizes\nexport const Small: Story = {\n  args: {\n    size: 'sm',\n    label: 'Small Input',\n    placeholder: 'Small size',\n  },\n};\n\nexport const Medium: Story = {\n  args: {\n    size: 'md',\n    label: 'Medium Input',\n    placeholder: 'Medium size',\n  },\n};\n\nexport const Large: Story = {\n  args: {\n    size: 'lg',\n    label: 'Large Input',\n    placeholder: 'Large size',\n  },\n};\n\n// States\nexport const WithHelperText: Story = {\n  args: {\n    label: 'Username',\n    placeholder: 'Enter username',\n    helperText: 'Username must be at least 3 characters long',\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    label: 'Email',\n    placeholder: 'Enter email',\n    value: 'invalid-email',\n    errorMessage: 'Please enter a valid email address',\n  },\n};\n\nexport const SuccessState: Story = {\n  args: {\n    label: 'Email',\n    placeholder: 'Enter email',\n    value: 'user@example.com',\n    successMessage: 'Email is valid',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    label: 'Disabled Input',\n    placeholder: 'This input is disabled',\n    disabled: true,\n    value: 'Disabled value',\n  },\n};\n\n// With Icons\nexport const WithLeftIcon: Story = {\n  args: {\n    label: 'Search',\n    placeholder: 'Search...',\n    leftIcon: <MagnifyingGlassIcon className=\"h-4 w-4\" />,\n  },\n};\n\nexport const WithRightIcon: Story = {\n  args: {\n    label: 'Password',\n    type: 'password',\n    placeholder: 'Enter password',\n    rightIcon: <EyeIcon className=\"h-4 w-4\" />,\n  },\n};\n\nexport const WithBothIcons: Story = {\n  args: {\n    label: 'Search with Filter',\n    placeholder: 'Search and filter...',\n    leftIcon: <MagnifyingGlassIcon className=\"h-4 w-4\" />,\n    rightIcon: <EyeIcon className=\"h-4 w-4\" />,\n  },\n};\n\n// Input Types\nexport const EmailInput: Story = {\n  args: {\n    label: 'Email Address',\n    type: 'email',\n    placeholder: 'user@example.com',\n    helperText: 'We\\'ll never share your email',\n  },\n};\n\nexport const PasswordInput: Story = {\n  args: {\n    label: 'Password',\n    type: 'password',\n    placeholder: 'Enter your password',\n    rightIcon: <EyeSlashIcon className=\"h-4 w-4\" />,\n  },\n};\n\nexport const NumberInput: Story = {\n  args: {\n    label: 'Age',\n    type: 'number',\n    placeholder: '25',\n    min: 0,\n    max: 120,\n  },\n};\n\n// All Variants Showcase\nexport const AllVariants: Story = {\n  render: () => (\n    <div className=\"space-y-4 w-80\">\n      <Input variant=\"default\" label=\"Default\" placeholder=\"Default variant\" />\n      <Input variant=\"filled\" label=\"Filled\" placeholder=\"Filled variant\" />\n      <Input variant=\"outline\" label=\"Outline\" placeholder=\"Outline variant\" />\n    </div>\n  ),\n  parameters: {\n    layout: 'padded',\n  },\n};\n\n// All Sizes Showcase\nexport const AllSizes: Story = {\n  render: () => (\n    <div className=\"space-y-4 w-80\">\n      <Input size=\"sm\" label=\"Small\" placeholder=\"Small input\" />\n      <Input size=\"md\" label=\"Medium\" placeholder=\"Medium input\" />\n      <Input size=\"lg\" label=\"Large\" placeholder=\"Large input\" />\n    </div>\n  ),\n  parameters: {\n    layout: 'padded',\n  },\n};\n\n// All States Showcase\nexport const AllStates: Story = {\n  render: () => (\n    <div className=\"space-y-4 w-80\">\n      <Input label=\"Default\" placeholder=\"Default state\" />\n      <Input \n        label=\"Error\" \n        placeholder=\"Error state\" \n        value=\"invalid input\"\n        errorMessage=\"This field has an error\" \n      />\n      <Input \n        label=\"Success\" \n        placeholder=\"Success state\" \n        value=\"valid input\"\n        successMessage=\"This field is valid\" \n      />\n      <Input \n        label=\"Disabled\" \n        placeholder=\"Disabled state\" \n        disabled \n        value=\"Disabled input\"\n      />\n    </div>\n  ),\n  parameters: {\n    layout: 'padded',\n  },\n};\n\n// Interactive Password Toggle\nexport const InteractivePassword: Story = {\n  render: () => {\n    const [showPassword, setShowPassword] = React.useState(false);\n    \n    return (\n      <div className=\"w-80\">\n        <Input\n          label=\"Password\"\n          type={showPassword ? 'text' : 'password'}\n          placeholder=\"Enter your password\"\n          rightIcon={\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"pointer-events-auto\"\n            >\n              {showPassword ? (\n                <EyeSlashIcon className=\"h-4 w-4\" />\n              ) : (\n                <EyeIcon className=\"h-4 w-4\" />\n              )}\n            </button>\n          }\n        />\n      </div>\n    );\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Input/Input.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Input/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Input/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Label/Label.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Label/Label.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Label/Label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Label/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Select/Select.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Select/Select.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Select/Select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Select/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Typography/Typography.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Typography/Typography.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Typography/Typography.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'typography' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Typography Component (Atom)\n * Week 8 Implementation - Component Library\n */\n\nimport React from 'react';\nimport { cn } from '../../utils';\nimport { typography } from '../../tokens/typography';\n\nexport type TypographyVariant = \n  | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n  | 'body1' | 'body2' | 'caption' | 'overline'\n  | 'subtitle1' | 'subtitle2';\n\nexport type TypographySize = 'xs' | 'sm' | 'base' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl';\nexport type TypographyWeight = 'light' | 'normal' | 'medium' | 'semibold' | 'bold';\nexport type TypographyAlign = 'left' | 'center' | 'right' | 'justify';\nexport type TypographyColor = 'primary' | 'secondary' | 'muted' | 'error' | 'warning' | 'success' | 'inherit';\n\nexport interface TypographyProps {\n  /** Typography variant */\n  variant?: TypographyVariant;\n  /** Typography size override */\n  size?: TypographySize;\n  /** Font weight */\n  weight?: TypographyWeight;\n  /** Text alignment */\n  align?: TypographyAlign;\n  /** Text color */\n  color?: TypographyColor;\n  /** HTML element to render */\n  as?: keyof JSX.IntrinsicElements;\n  /** Truncate text with ellipsis */\n  truncate?: boolean;\n  /** Number of lines to show before truncating */\n  lineClamp?: number;\n  /** Custom className */\n  className?: string;\n  /** Children content */\n  children: React.ReactNode;\n}\n\n// Variant to element mapping\nconst variantElementMap: Record<TypographyVariant, keyof JSX.IntrinsicElements> = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'p',\n  subtitle2: 'p',\n  body1: 'p',\n  body2: 'p',\n  caption: 'p',\n  overline: 'p'\n};\n\n// Variant styles mapping\nconst variantStyles: Record<TypographyVariant, string> = {\n  h1: 'text-4xl font-bold leading-tight tracking-tight',\n  h2: 'text-3xl font-bold leading-tight tracking-tight',\n  h3: 'text-2xl font-semibold leading-tight',\n  h4: 'text-xl font-semibold leading-tight',\n  h5: 'text-lg font-medium leading-tight',\n  h6: 'text-base font-medium leading-tight',\n  subtitle1: 'text-lg font-medium leading-normal',\n  subtitle2: 'text-base font-medium leading-normal',\n  body1: 'text-base font-normal leading-relaxed',\n  body2: 'text-sm font-normal leading-relaxed',\n  caption: 'text-xs font-normal leading-normal',\n  overline: 'text-xs font-medium leading-normal uppercase tracking-wide'\n};\n\n// Size styles\nconst sizeStyles: Record<TypographySize, string> = {\n  xs: 'text-xs',\n  sm: 'text-sm',\n  base: 'text-base',\n  lg: 'text-lg',\n  xl: 'text-xl',\n  '2xl': 'text-2xl',\n  '3xl': 'text-3xl',\n  '4xl': 'text-4xl'\n};\n\n// Weight styles\nconst weightStyles: Record<TypographyWeight, string> = {\n  light: 'font-light',\n  normal: 'font-normal',\n  medium: 'font-medium',\n  semibold: 'font-semibold',\n  bold: 'font-bold'\n};\n\n// Alignment styles\nconst alignStyles: Record<TypographyAlign, string> = {\n  left: 'text-left',\n  center: 'text-center',\n  right: 'text-right',\n  justify: 'text-justify'\n};\n\n// Color styles\nconst colorStyles: Record<TypographyColor, string> = {\n  primary: 'text-gray-900',\n  secondary: 'text-gray-600',\n  muted: 'text-gray-500',\n  error: 'text-red-600',\n  warning: 'text-yellow-600',\n  success: 'text-green-600',\n  inherit: 'text-inherit'\n};\n\n// Line clamp styles\nconst lineClampStyles: Record<number, string> = {\n  1: 'line-clamp-1',\n  2: 'line-clamp-2',\n  3: 'line-clamp-3',\n  4: 'line-clamp-4',\n  5: 'line-clamp-5',\n  6: 'line-clamp-6'\n};\n\n/**\n * Typography component - Consistent text styling across the application\n */\nexport const Typography: React.FC<TypographyProps> = ({\n  variant = 'body1',\n  size,\n  weight,\n  align = 'left',\n  color = 'primary',\n  as,\n  truncate = false,\n  lineClamp,\n  className,\n  children,\n  ...props\n}) => {\n  // Determine the HTML element to render\n  const Component = as || variantElementMap[variant];\n\n  // Build className\n  const classes = cn(\n    // Base variant styles\n    variantStyles[variant],\n    \n    // Size override\n    size && sizeStyles[size],\n    \n    // Weight override\n    weight && weightStyles[weight],\n    \n    // Alignment\n    alignStyles[align],\n    \n    // Color\n    colorStyles[color],\n    \n    // Truncation\n    truncate && 'truncate',\n    \n    // Line clamp\n    lineClamp && lineClampStyles[lineClamp],\n    \n    // Custom className\n    className\n  );\n\n  return (\n    <Component className={classes} {...props}>\n      {children}\n    </Component>\n  );\n};\n\n// Convenience components for common use cases\nexport const Heading1: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"h1\" {...props} />\n);\n\nexport const Heading2: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"h2\" {...props} />\n);\n\nexport const Heading3: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"h3\" {...props} />\n);\n\nexport const Heading4: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"h4\" {...props} />\n);\n\nexport const Heading5: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"h5\" {...props} />\n);\n\nexport const Heading6: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"h6\" {...props} />\n);\n\nexport const Subtitle1: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"subtitle1\" {...props} />\n);\n\nexport const Subtitle2: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"subtitle2\" {...props} />\n);\n\nexport const Body1: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"body1\" {...props} />\n);\n\nexport const Body2: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"body2\" {...props} />\n);\n\nexport const Caption: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"caption\" {...props} />\n);\n\nexport const Overline: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (\n  <Typography variant=\"overline\" {...props} />\n);\n\nexport default Typography;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/Typography/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/ViewModeToggleButton/ViewModeToggleButton.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { ViewModeToggleButton } from './ViewModeToggleButton';\nimport { useState } from 'react';\n\nconst meta: Meta<typeof ViewModeToggleButton> = {\n  title: 'Design System/Atoms/ViewModeToggleButton',\n  component: ViewModeToggleButton,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    viewMode: {\n      control: { type: 'radio' },\n      options: ['grid', 'table'],\n    },\n    onChange: { action: 'changed' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Template per gestire lo stato\nconst Template = (args: any) => {\n  const [viewMode, setViewMode] = useState(args.viewMode);\n  \n  return (\n    <ViewModeToggleButton\n      {...args}\n      viewMode={viewMode}\n      onChange={(mode) => {\n        setViewMode(mode);\n        args.onChange(mode);\n      }}\n    />\n  );\n};\n\nexport const Default: Story = {\n  render: Template,\n  args: {\n    viewMode: 'grid',\n  },\n};\n\nexport const TableMode: Story = {\n  render: Template,\n  args: {\n    viewMode: 'table',\n  },\n};\n\nexport const CustomLabels: Story = {\n  render: Template,\n  args: {\n    viewMode: 'grid',\n    gridLabel: 'Griglia',\n    tableLabel: 'Lista',\n  },\n};\n\nexport const WithCustomClass: Story = {\n  render: Template,\n  args: {\n    viewMode: 'grid',\n    className: 'border border-gray-300',\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/ViewModeToggleButton/ViewModeToggleButton.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/ViewModeToggleButton/ViewModeToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/ViewModeToggleButton/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/atoms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Breadcrumb/Breadcrumb.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Breadcrumb/Breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Breadcrumb/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Card/Card.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Card/Card.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":414,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13010,13013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13010,13013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Card Component Tests\n * Week 8 Implementation - Component Library\n */\n\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect, vi } from 'vitest';\nimport { Card } from './Card';\n\ndescribe('Card', () => {\n  describe('Basic rendering', () => {\n    it('renders with default props', () => {\n      render(<Card>Card content</Card>);\n      expect(screen.getByText('Card content')).toBeInTheDocument();\n    });\n\n    it('renders with custom content', () => {\n      const customContent = (\n        <div>\n          <h2>Custom Title</h2>\n          <p>Custom description</p>\n        </div>\n      );\n      render(<Card>{customContent}</Card>);\n      expect(screen.getByText('Custom Title')).toBeInTheDocument();\n      expect(screen.getByText('Custom description')).toBeInTheDocument();\n    });\n\n    it('renders as div element by default', () => {\n      render(<Card data-testid=\"card\">Content</Card>);\n      expect(screen.getByTestId('card').tagName).toBe('DIV');\n    });\n  });\n\n  describe('Variants', () => {\n    it('renders default variant correctly', () => {\n      render(<Card variant=\"default\" data-testid=\"card\">Default card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass('bg-white', 'border', 'border-gray-200');\n    });\n\n    it('renders elevated variant correctly', () => {\n      render(<Card variant=\"elevated\" data-testid=\"card\">Elevated card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass('bg-white', 'shadow-md');\n    });\n\n    it('renders outlined variant correctly', () => {\n      render(<Card variant=\"outlined\" data-testid=\"card\">Outlined card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass('bg-white', 'border-2', 'border-gray-300');\n    });\n\n    it('renders filled variant correctly', () => {\n      render(<Card variant=\"filled\" data-testid=\"card\">Filled card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass('bg-gray-50', 'border-0');\n    });\n  });\n\n  describe('Sizes', () => {\n    it('applies small size correctly', () => {\n      render(<Card size=\"sm\" data-testid=\"card\">Small card</Card>);\n      expect(screen.getByTestId('card')).toHaveClass('p-3');\n    });\n\n    it('applies medium size as default', () => {\n      render(<Card data-testid=\"card\">Default card</Card>);\n      expect(screen.getByTestId('card')).toHaveClass('p-4');\n    });\n\n    it('applies large size correctly', () => {\n      render(<Card size=\"lg\" data-testid=\"card\">Large card</Card>);\n      expect(screen.getByTestId('card')).toHaveClass('p-6');\n    });\n\n    it('applies extra large size correctly', () => {\n      render(<Card size=\"xl\" data-testid=\"card\">Extra large card</Card>);\n      expect(screen.getByTestId('card')).toHaveClass('p-8');\n    });\n  });\n\n  describe('Interactive states', () => {\n    it('applies hover styles when hoverable', () => {\n      render(<Card hoverable data-testid=\"card\">Hoverable card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass('hover:shadow-lg', 'transition-shadow', 'duration-200');\n    });\n\n    it('does not apply hover styles by default', () => {\n      render(<Card data-testid=\"card\">Normal card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).not.toHaveClass('hover:shadow-lg');\n    });\n\n    it('applies clickable styles when clickable', () => {\n      render(<Card clickable data-testid=\"card\">Clickable card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass('cursor-pointer', 'hover:shadow-lg');\n    });\n\n    it('handles click events when clickable', () => {\n      const handleClick = vi.fn();\n      render(\n        <Card clickable onClick={handleClick} data-testid=\"card\">\n          Clickable card\n        </Card>\n      );\n      \n      fireEvent.click(screen.getByTestId('card'));\n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('does not handle click events when not clickable', () => {\n      const handleClick = vi.fn();\n      render(\n        <Card onClick={handleClick} data-testid=\"card\">\n          Non-clickable card\n        </Card>\n      );\n      \n      fireEvent.click(screen.getByTestId('card'));\n      expect(handleClick).toHaveBeenCalledTimes(1); // onClick still works, just no visual indication\n    });\n  });\n\n  describe('Loading state', () => {\n    it('shows loading state correctly', () => {\n      render(<Card loading data-testid=\"card\">Loading card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass('animate-pulse');\n      expect(screen.getByText('Loading card')).toBeInTheDocument();\n    });\n\n    it('does not show loading state by default', () => {\n      render(<Card data-testid=\"card\">Normal card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).not.toHaveClass('animate-pulse');\n    });\n  });\n\n  describe('Disabled state', () => {\n    it('applies disabled styles correctly', () => {\n      render(<Card disabled data-testid=\"card\">Disabled card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass('opacity-50', 'cursor-not-allowed');\n    });\n\n    it('prevents click events when disabled', () => {\n      const handleClick = vi.fn();\n      render(\n        <Card disabled clickable onClick={handleClick} data-testid=\"card\">\n          Disabled clickable card\n        </Card>\n      );\n      \n      fireEvent.click(screen.getByTestId('card'));\n      expect(handleClick).not.toHaveBeenCalled();\n    });\n\n    it('does not apply disabled styles by default', () => {\n      render(<Card data-testid=\"card\">Normal card</Card>);\n      const card = screen.getByTestId('card');\n      expect(card).not.toHaveClass('opacity-50', 'cursor-not-allowed');\n    });\n  });\n\n  describe('Custom classes and styling', () => {\n    it('applies custom className correctly', () => {\n      render(<Card className=\"custom-card\" data-testid=\"card\">Custom card</Card>);\n      expect(screen.getByTestId('card')).toHaveClass('custom-card');\n    });\n\n    it('merges custom classes with default classes', () => {\n      render(\n        <Card\n          variant=\"elevated\"\n          size=\"lg\"\n          hoverable\n          className=\"custom-card\"\n          data-testid=\"card\"\n        >\n          Styled card\n        </Card>\n      );\n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass(\n        'bg-white',\n        'shadow-md',\n        'p-6',\n        'hover:shadow-lg',\n        'custom-card'\n      );\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('supports custom aria attributes', () => {\n      render(\n        <Card\n          aria-label=\"Custom card\"\n          aria-describedby=\"card-description\"\n          data-testid=\"card\"\n        >\n          Accessible card\n        </Card>\n      );\n      const card = screen.getByTestId('card');\n      expect(card).toHaveAttribute('aria-label', 'Custom card');\n      expect(card).toHaveAttribute('aria-describedby', 'card-description');\n    });\n\n    it('applies role=\"button\" when clickable', () => {\n      render(\n        <Card clickable data-testid=\"card\">\n          Clickable card\n        </Card>\n      );\n      expect(screen.getByTestId('card')).toHaveAttribute('role', 'button');\n    });\n\n    it('does not apply role=\"button\" when not clickable', () => {\n      render(\n        <Card data-testid=\"card\">\n          Normal card\n        </Card>\n      );\n      expect(screen.getByTestId('card')).not.toHaveAttribute('role', 'button');\n    });\n\n    it('is focusable when clickable', () => {\n      render(\n        <Card clickable data-testid=\"card\">\n          Focusable card\n        </Card>\n      );\n      const card = screen.getByTestId('card');\n      expect(card).toHaveAttribute('tabIndex', '0');\n      \n      card.focus();\n      expect(card).toHaveFocus();\n    });\n\n    it('is not focusable when disabled', () => {\n      render(\n        <Card clickable disabled data-testid=\"card\">\n          Disabled card\n        </Card>\n      );\n      const card = screen.getByTestId('card');\n      expect(card).toHaveAttribute('tabIndex', '-1');\n    });\n  });\n\n  describe('Keyboard navigation', () => {\n    it('responds to Enter key when clickable', () => {\n      const handleClick = vi.fn();\n      render(\n        <Card clickable onClick={handleClick} data-testid=\"card\">\n          Keyboard accessible card\n        </Card>\n      );\n      \n      const card = screen.getByTestId('card');\n      fireEvent.keyDown(card, { key: 'Enter' });\n      \n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('responds to Space key when clickable', () => {\n      const handleClick = vi.fn();\n      render(\n        <Card clickable onClick={handleClick} data-testid=\"card\">\n          Keyboard accessible card\n        </Card>\n      );\n      \n      const card = screen.getByTestId('card');\n      fireEvent.keyDown(card, { key: ' ' });\n      \n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('does not respond to keyboard when disabled', () => {\n      const handleClick = vi.fn();\n      render(\n        <Card clickable disabled onClick={handleClick} data-testid=\"card\">\n          Disabled card\n        </Card>\n      );\n      \n      const card = screen.getByTestId('card');\n      fireEvent.keyDown(card, { key: 'Enter' });\n      fireEvent.keyDown(card, { key: ' ' });\n      \n      expect(handleClick).not.toHaveBeenCalled();\n    });\n\n    it('does not respond to other keys', () => {\n      const handleClick = vi.fn();\n      render(\n        <Card clickable onClick={handleClick} data-testid=\"card\">\n          Keyboard accessible card\n        </Card>\n      );\n      \n      const card = screen.getByTestId('card');\n      fireEvent.keyDown(card, { key: 'Escape' });\n      fireEvent.keyDown(card, { key: 'Tab' });\n      \n      expect(handleClick).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Complex content', () => {\n    it('renders complex nested content correctly', () => {\n      render(\n        <Card data-testid=\"card\">\n          <div>\n            <h1>Card Title</h1>\n            <p>Card description with <strong>bold text</strong></p>\n            <button>Action Button</button>\n          </div>\n        </Card>\n      );\n      \n      expect(screen.getByText('Card Title')).toBeInTheDocument();\n      expect(screen.getByText('bold text')).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: 'Action Button' })).toBeInTheDocument();\n    });\n\n    it('handles multiple child elements', () => {\n      render(\n        <Card data-testid=\"card\">\n          <h2>Title</h2>\n          <p>Description</p>\n          <div>Footer content</div>\n        </Card>\n      );\n      \n      expect(screen.getByText('Title')).toBeInTheDocument();\n      expect(screen.getByText('Description')).toBeInTheDocument();\n      expect(screen.getByText('Footer content')).toBeInTheDocument();\n    });\n  });\n\n  describe('Edge cases', () => {\n    it('handles empty content gracefully', () => {\n      render(<Card data-testid=\"card\"></Card>);\n      expect(screen.getByTestId('card')).toBeInTheDocument();\n    });\n\n    it('handles null content gracefully', () => {\n      render(<Card data-testid=\"card\">{null}</Card>);\n      expect(screen.getByTestId('card')).toBeInTheDocument();\n    });\n\n    it('handles undefined content gracefully', () => {\n      render(<Card data-testid=\"card\">{undefined}</Card>);\n      expect(screen.getByTestId('card')).toBeInTheDocument();\n    });\n\n    it('handles numeric content', () => {\n      render(<Card data-testid=\"card\">{42}</Card>);\n      expect(screen.getByText('42')).toBeInTheDocument();\n    });\n\n    it('handles boolean content', () => {\n      render(<Card data-testid=\"card\">{true}</Card>);\n      expect(screen.getByTestId('card')).toBeInTheDocument();\n      // Boolean true renders as empty in React\n    });\n\n    it('combines all props correctly', () => {\n      const handleClick = vi.fn();\n      render(\n        <Card\n          variant=\"elevated\"\n          size=\"lg\"\n          hoverable\n          clickable\n          loading\n          onClick={handleClick}\n          className=\"custom-card\"\n          aria-label=\"Complex card\"\n          data-testid=\"card\"\n        >\n          Complex card content\n        </Card>\n      );\n      \n      const card = screen.getByTestId('card');\n      expect(card).toHaveClass(\n        'bg-white',\n        'shadow-md',\n        'p-6',\n        'hover:shadow-lg',\n        'cursor-pointer',\n        'animate-pulse',\n        'custom-card'\n      );\n      expect(card).toHaveAttribute('role', 'button');\n      expect(card).toHaveAttribute('tabIndex', '0');\n      expect(card).toHaveAttribute('aria-label', 'Complex card');\n      \n      fireEvent.click(card);\n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Performance', () => {\n    it('does not re-render unnecessarily', () => {\n      const renderSpy = vi.fn();\n      const TestCard = ({ children, ...props }: { children: React.ReactNode; [key: string]: any }) => {\n        renderSpy();\n        return <Card {...props}>{children}</Card>;\n      };\n      \n      const { rerender } = render(<TestCard>Content</TestCard>);\n      expect(renderSpy).toHaveBeenCalledTimes(1);\n      \n      // Re-render with same props should not cause additional renders\n      rerender(<TestCard>Content</TestCard>);\n      expect(renderSpy).toHaveBeenCalledTimes(2); // React will still call the function\n    });\n  });\n\n  describe('Custom HTML attributes', () => {\n    it('passes through custom HTML attributes', () => {\n      render(\n        <Card\n          data-testid=\"card\"\n          id=\"custom-card\"\n          title=\"Card tooltip\"\n          style={{ backgroundColor: 'red' }}\n        >\n          Custom attributes card\n        </Card>\n      );\n      \n      const card = screen.getByTestId('card');\n      expect(card).toHaveAttribute('id', 'custom-card');\n      expect(card).toHaveAttribute('title', 'Card tooltip');\n      expect(card).toHaveAttribute('style', 'background-color: red;');\n    });\n\n    it('supports data attributes', () => {\n      render(\n        <Card\n          data-testid=\"card\"\n          data-analytics=\"card-click\"\n          data-category=\"product\"\n        >\n          Data attributes card\n        </Card>\n      );\n      \n      const card = screen.getByTestId('card');\n      expect(card).toHaveAttribute('data-analytics', 'card-click');\n      expect(card).toHaveAttribute('data-category', 'product');\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Card/Card.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoadingSkeleton' is assigned a value but never used.","line":88,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4463,4466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4463,4466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Card Component (Molecule)\n * Week 8 Implementation - Component Library\n */\n\nimport React from 'react';\nimport { cn } from '../../utils';\n\n// Card variants and sizes\nexport type CardVariant = 'default' | 'outlined' | 'elevated' | 'filled';\nexport type CardSize = 'sm' | 'md' | 'lg' | 'xl';\n\nexport interface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  /** Card variant */\n  variant?: CardVariant;\n  /** Card size */\n  size?: CardSize;\n  /** Card header content */\n  header?: React.ReactNode;\n  /** Card footer content */\n  footer?: React.ReactNode;\n  /** Card title */\n  cardTitle?: string;\n  /** Card subtitle */\n  subtitle?: string;\n  /** Card image */\n  image?: string;\n  /** Image alt text */\n  imageAlt?: string;\n  /** Card actions */\n  actions?: React.ReactNode;\n  /** Clickable card */\n  clickable?: boolean;\n  /** Hoverable card */\n  hoverable?: boolean;\n  /** Disabled state */\n  disabled?: boolean;\n  /** Loading state */\n  loading?: boolean;\n  /** Children content */\n  children?: React.ReactNode;\n}\n\n// Variant styles\nconst variantStyles: Record<CardVariant, string> = {\n  default: 'bg-white border border-gray-200',\n  outlined: 'bg-white border-2 border-gray-300',\n  elevated: 'bg-white shadow-md border-0',\n  filled: 'bg-gray-50 border-0',\n};\n\n// Size styles\nconst sizeStyles: Record<CardSize, string> = {\n  sm: 'p-3',\n  md: 'p-4', \n  lg: 'p-6',\n  xl: 'p-8',\n};\n\n// Base card styles\nconst baseStyles = `\n  rounded-2xl\n  transition-all duration-200\n  overflow-hidden\n`;\n\n// Header styles\nconst headerStyles = `\n  border-b border-gray-200 pb-4 mb-4\n`;\n\n// Footer styles\nconst footerStyles = `\n  border-t border-gray-200 pt-4 mt-4\n`;\n\n// Title styles\nconst titleStyles = `\n  text-lg font-semibold text-gray-900 mb-1\n`;\n\n// Subtitle styles\nconst subtitleStyles = `\n  text-sm text-gray-600 mb-4\n`;\n\n// Loading skeleton\nconst LoadingSkeleton = () => (\n  <div className=\"animate-pulse\">\n    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n    <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-4\"></div>\n    <div className=\"space-y-2\">\n      <div className=\"h-3 bg-gray-200 rounded\"></div>\n      <div className=\"h-3 bg-gray-200 rounded w-5/6\"></div>\n      <div className=\"h-3 bg-gray-200 rounded w-4/6\"></div>\n    </div>\n  </div>\n);\n\nexport const Card: React.FC<CardProps> = ({\n  variant = 'default',\n  size = 'md',\n  header,\n  footer,\n  cardTitle,\n  subtitle,\n  image,\n  imageAlt,\n  actions,\n  clickable = false,\n  hoverable = false,\n  disabled = false,\n  loading = false,\n  className,\n  children,\n  onClick,\n  ...props\n}) => {\n  const cardClasses = cn(\n    baseStyles,\n    variantStyles[variant],\n    sizeStyles[size],\n    hoverable && 'hover:shadow-lg transition-shadow duration-200',\n    clickable && 'cursor-pointer hover:shadow-lg hover:scale-[1.02]',\n    disabled && 'opacity-50 cursor-not-allowed',\n    loading && 'animate-pulse',\n    className\n  );\n\n  const contentClasses = cn(\n    // Content no longer needs size padding since it's applied to the main card\n  );\n\n  const renderImage = () => {\n    if (!image) return null;\n    \n    return (\n      <div className=\"aspect-video w-full overflow-hidden\">\n        <img\n          src={image}\n          alt={imageAlt || 'Card image'}\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n    );\n  };\n\n  const renderHeader = () => {\n    if (!header && !cardTitle && !subtitle) return null;\n    \n    return (\n      <div className={headerStyles}>\n        {header && header}\n        {cardTitle && <h3 className={titleStyles}>{cardTitle}</h3>}\n        {subtitle && <p className={subtitleStyles}>{subtitle}</p>}\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    return children;\n  };\n\n  const renderActions = () => {\n    if (!actions) return null;\n    \n    return (\n      <div className=\"flex items-center justify-end space-x-2 mt-4\">\n        {actions}\n      </div>\n    );\n  };\n\n  const renderFooter = () => {\n    if (!footer) return null;\n    \n    return (\n      <div className={footerStyles}>\n        {footer}\n      </div>\n    );\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n    if (onClick) {\n      onClick(e);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (disabled) {\n      return;\n    }\n    if ((e.key === 'Enter' || e.key === ' ') && onClick) {\n      e.preventDefault();\n      onClick(e as any); // Cast needed for event type compatibility\n    }\n  };\n\n  return (\n    <div\n      className={cardClasses}\n      onClick={clickable || onClick ? handleClick : undefined}\n      onKeyDown={clickable || onClick ? handleKeyDown : undefined}\n      role={clickable ? 'button' : undefined}\n      tabIndex={clickable ? (disabled ? -1 : 0) : undefined}\n      {...props}\n    >\n      {renderImage()}\n      \n      <div className={contentClasses}>\n        {renderHeader()}\n        {renderContent()}\n        {renderActions()}\n      </div>\n      \n      {renderFooter()}\n    </div>\n  );\n};\n\nCard.displayName = 'Card';\n\n// Sub-components for flexible card composition\nexport interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport const CardHeader: React.FC<CardHeaderProps> = ({ className, children, ...props }) => {\n  return (\n    <div className={cn(headerStyles, className)} {...props}>\n      {children}\n    </div>\n  );\n};\n\nCardHeader.displayName = 'CardHeader';\n\nexport interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {\n  children?: React.ReactNode;\n}\n\nexport const CardTitle: React.FC<CardTitleProps> = ({ className, children, ...props }) => {\n  return (\n    <h3 className={cn(titleStyles, className)} {...props}>\n      {children}\n    </h3>\n  );\n};\n\nCardTitle.displayName = 'CardTitle';\n\nexport interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport const CardContent: React.FC<CardContentProps> = ({ className, children, ...props }) => {\n  return (\n    <div className={cn('flex-1', className)} {...props}>\n      {children}\n    </div>\n  );\n};\n\nCardContent.displayName = 'CardContent';\n\nexport interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {\n  children?: React.ReactNode;\n}\n\nexport const CardDescription: React.FC<CardDescriptionProps> = ({ className, children, ...props }) => {\n  return (\n    <p className={cn('text-sm text-gray-600', className)} {...props}>\n      {children}\n    </p>\n  );\n};\n\nCardDescription.displayName = 'CardDescription';\n\nexport default Card;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Card/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Dropdown/Dropdown.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Dropdown/Dropdown.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Dropdown/Dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Dropdown/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/DropdownMenu/DropdownMenu.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'triggerRef'. Either include it or remove the dependency array.","line":138,"column":6,"nodeType":"ArrayExpression","endLine":138,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, align, triggerRef]","fix":{"range":[3479,3494],"text":"[isOpen, align, triggerRef]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'triggerRef'. Either include it or remove the dependency array.","line":167,"column":6,"nodeType":"ArrayExpression","endLine":167,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, setIsOpen, triggerRef]","fix":{"range":[4259,4278],"text":"[isOpen, setIsOpen, triggerRef]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - DropdownMenu Component (Molecule)\n * GDPR Entity Page Implementation\n */\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { cn } from '../../utils';\n\nexport interface DropdownMenuProps {\n  /** Dropdown content */\n  children: React.ReactNode;\n  /** Custom className */\n  className?: string;\n}\n\nexport interface DropdownMenuTriggerProps {\n  /** Trigger content */\n  children: React.ReactNode;\n  /** Custom className */\n  className?: string;\n  /** As child component */\n  asChild?: boolean;\n}\n\nexport interface DropdownMenuContentProps {\n  /** Content */\n  children: React.ReactNode;\n  /** Alignment */\n  align?: 'start' | 'center' | 'end';\n  /** Custom className */\n  className?: string;\n}\n\nexport interface DropdownMenuItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  /** Item content */\n  children: React.ReactNode;\n  /** Disabled state */\n  disabled?: boolean;\n  /** Custom className */\n  className?: string;\n}\n\n// Context for dropdown state\nconst DropdownContext = React.createContext<{\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  triggerRef: React.RefObject<HTMLElement>;\n}>({ \n  isOpen: false, \n  setIsOpen: () => {}, \n  triggerRef: { current: null } \n});\n\n/**\n * Main DropdownMenu container\n */\nexport const DropdownMenu: React.FC<DropdownMenuProps> = ({\n  children,\n  className\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const triggerRef = useRef<HTMLElement>(null);\n\n  return (\n    <DropdownContext.Provider value={{ isOpen, setIsOpen, triggerRef }}>\n      <div className={cn('relative inline-block', className)}>\n        {children}\n      </div>\n    </DropdownContext.Provider>\n  );\n};\n\n/**\n * Dropdown trigger\n */\nexport const DropdownMenuTrigger: React.FC<DropdownMenuTriggerProps> = ({\n  children,\n  className,\n  asChild = false\n}) => {\n  const { setIsOpen, triggerRef } = React.useContext(DropdownContext);\n\n  const handleClick = () => {\n    setIsOpen(true);\n  };\n\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ref: triggerRef,\n      onClick: handleClick,\n      className: cn(children.props.className, className)\n    });\n  }\n\n  return (\n    <button\n      ref={triggerRef as React.RefObject<HTMLButtonElement>}\n      onClick={handleClick}\n      className={cn('inline-flex items-center justify-center', className)}\n    >\n      {children}\n    </button>\n  );\n};\n\n/**\n * Dropdown content\n */\nexport const DropdownMenuContent: React.FC<DropdownMenuContentProps> = ({\n  children,\n  align = 'start',\n  className\n}) => {\n  const { isOpen, setIsOpen, triggerRef } = React.useContext(DropdownContext);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [position, setPosition] = useState<{ top: number; left: number } | null>(null);\n\n  useEffect(() => {\n    if (isOpen && triggerRef.current) {\n      const triggerRect = triggerRef.current.getBoundingClientRect();\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n      \n      let left = triggerRect.left + scrollLeft;\n      \n      if (align === 'end') {\n        left = triggerRect.right + scrollLeft;\n      } else if (align === 'center') {\n        left = triggerRect.left + scrollLeft + triggerRect.width / 2;\n      }\n      \n      setPosition({\n        top: triggerRect.bottom + scrollTop + 4,\n        left\n      });\n    }\n  }, [isOpen, align]);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        contentRef.current &&\n        !contentRef.current.contains(event.target as Node) &&\n        triggerRef.current &&\n        !triggerRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, setIsOpen]);\n\n  if (!isOpen || !position) {\n    return null;\n  }\n\n  const alignmentClass = align === 'end' ? '-translate-x-full' : \n                        align === 'center' ? '-translate-x-1/2' : \n                        '';\n\n  return createPortal(\n    <div\n      ref={contentRef}\n      className={cn(\n        'absolute z-50 min-w-[8rem] overflow-hidden rounded-md border bg-white p-1 shadow-md',\n        'animate-in fade-in-0 zoom-in-95',\n        alignmentClass,\n        className\n      )}\n      style={{\n        top: position.top,\n        left: position.left\n      }}\n    >\n      {children}\n    </div>,\n    document.body\n  );\n};\n\n/**\n * Dropdown menu item\n */\nexport const DropdownMenuItem: React.FC<DropdownMenuItemProps> = ({\n  children,\n  disabled = false,\n  className,\n  onClick,\n  ...props\n}) => {\n  const { setIsOpen } = React.useContext(DropdownContext);\n\n  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (disabled) return;\n    \n    onClick?.(event);\n    setIsOpen(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none',\n        'transition-colors focus:bg-gray-100 focus:text-gray-900',\n        disabled ? 'pointer-events-none opacity-50' : 'hover:bg-gray-100',\n        className\n      )}\n      onClick={handleClick}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default DropdownMenu;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/DropdownMenu/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/FormField/FormField.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1287,1290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1287,1290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":308,"column":37,"nodeType":"Identifier","endLine":308,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":319,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6631,6634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6631,6634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - FormField Component Stories\n * Week 8 Implementation - Component Library\n */\n\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { FormField } from './FormField';\nimport { useState } from 'react';\n\nconst meta: Meta<typeof FormField> = {\n  title: 'Design System/Molecules/FormField',\n  component: FormField,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component: 'A complete form field component with label, input, validation, and help text. Supports various input types and states.'\n      }\n    }\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    type: {\n      control: 'select',\n      options: ['text', 'textarea', 'number', 'email', 'password', 'select', 'checkbox', 'radio', 'date']\n    },\n    variant: {\n      control: 'select',\n      options: ['default', 'filled', 'outlined']\n    },\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg']\n    },\n    required: {\n      control: 'boolean'\n    },\n    disabled: {\n      control: 'boolean'\n    },\n    readOnly: {\n      control: 'boolean'\n    },\n    showRequiredAsterisk: {\n      control: 'boolean'\n    }\n  }\n};\n\nexport default meta;\ntype Story = StoryObj<typeof FormField>;\n\n// Interactive wrapper for controlled components\nconst FormFieldWrapper = (args: any) => {\n  const [value, setValue] = useState(args.value || '');\n  \n  return (\n    <FormField\n      {...args}\n      value={value}\n      onChange={(e) => {\n        if (args.type === 'checkbox') {\n          setValue(e.target.checked);\n        } else {\n          setValue(e.target.value);\n        }\n        args.onChange?.(e);\n      }}\n    />\n  );\n};\n\n// Basic text input\nexport const Default: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'username',\n    label: 'Username',\n    type: 'text',\n    placeholder: 'Enter your username',\n    value: ''\n  }\n};\n\n// Required field with asterisk\nexport const Required: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'email',\n    label: 'Email Address',\n    type: 'email',\n    placeholder: 'Enter your email',\n    required: true,\n    value: ''\n  }\n};\n\n// Field with error\nexport const WithError: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'password',\n    label: 'Password',\n    type: 'password',\n    placeholder: 'Enter your password',\n    required: true,\n    error: 'Password must be at least 8 characters long',\n    value: '123'\n  }\n};\n\n// Field with help text\nexport const WithHelpText: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'phone',\n    label: 'Phone Number',\n    type: 'text',\n    placeholder: '+1 (555) 123-4567',\n    helpText: 'Include country code for international numbers',\n    value: ''\n  }\n};\n\n// Textarea\nexport const Textarea: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'description',\n    label: 'Description',\n    type: 'textarea',\n    placeholder: 'Enter a detailed description...',\n    rows: 4,\n    value: ''\n  }\n};\n\n// Select dropdown\nexport const Select: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'country',\n    label: 'Country',\n    type: 'select',\n    placeholder: 'Select your country',\n    options: [\n      { value: 'us', label: 'United States' },\n      { value: 'ca', label: 'Canada' },\n      { value: 'uk', label: 'United Kingdom' },\n      { value: 'de', label: 'Germany' },\n      { value: 'fr', label: 'France' }\n    ],\n    value: ''\n  }\n};\n\n// Checkbox\nexport const Checkbox: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'terms',\n    label: 'I agree to the terms and conditions',\n    type: 'checkbox',\n    required: true,\n    value: false\n  }\n};\n\n// Radio buttons\nexport const Radio: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'plan',\n    label: 'Choose your plan',\n    type: 'radio',\n    options: [\n      { value: 'basic', label: 'Basic - $9/month' },\n      { value: 'pro', label: 'Pro - $19/month' },\n      { value: 'enterprise', label: 'Enterprise - $49/month' }\n    ],\n    value: ''\n  }\n};\n\n// Number input\nexport const Number: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'age',\n    label: 'Age',\n    type: 'number',\n    placeholder: 'Enter your age',\n    min: 0,\n    max: 120,\n    value: ''\n  }\n};\n\n// Date input\nexport const Date: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'birthdate',\n    label: 'Birth Date',\n    type: 'date',\n    value: ''\n  }\n};\n\n// Disabled state\nexport const Disabled: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'disabled',\n    label: 'Disabled Field',\n    type: 'text',\n    placeholder: 'This field is disabled',\n    disabled: true,\n    value: 'Cannot edit this'\n  }\n};\n\n// Read-only state\nexport const ReadOnly: Story = {\n  render: FormFieldWrapper,\n  args: {\n    name: 'readonly',\n    label: 'Read-only Field',\n    type: 'text',\n    readOnly: true,\n    value: 'This is read-only content'\n  }\n};\n\n// Different sizes\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <FormField\n        name=\"small\"\n        label=\"Small Size\"\n        type=\"text\"\n        size=\"sm\"\n        placeholder=\"Small input\"\n        value=\"\"\n        onChange={() => {}}\n      />\n      <FormField\n        name=\"medium\"\n        label=\"Medium Size (Default)\"\n        type=\"text\"\n        size=\"md\"\n        placeholder=\"Medium input\"\n        value=\"\"\n        onChange={() => {}}\n      />\n      <FormField\n        name=\"large\"\n        label=\"Large Size\"\n        type=\"text\"\n        size=\"lg\"\n        placeholder=\"Large input\"\n        value=\"\"\n        onChange={() => {}}\n      />\n    </div>\n  )\n};\n\n// Different variants\nexport const Variants: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <FormField\n        name=\"default\"\n        label=\"Default Variant\"\n        type=\"text\"\n        variant=\"default\"\n        placeholder=\"Default styling\"\n        value=\"\"\n        onChange={() => {}}\n      />\n      <FormField\n        name=\"filled\"\n        label=\"Filled Variant\"\n        type=\"text\"\n        variant=\"filled\"\n        placeholder=\"Filled styling\"\n        value=\"\"\n        onChange={() => {}}\n      />\n      <FormField\n        name=\"outlined\"\n        label=\"Outlined Variant\"\n        type=\"text\"\n        variant=\"outlined\"\n        placeholder=\"Outlined styling\"\n        value=\"\"\n        onChange={() => {}}\n      />\n    </div>\n  )\n};\n\n// Complex form example\nexport const ComplexForm: Story = {\n  render: () => {\n    const [formData, setFormData] = useState({\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      country: '',\n      bio: '',\n      newsletter: false,\n      plan: ''\n    });\n\n    const handleChange = (field: string) => (e: any) => {\n      const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n      setFormData(prev => ({ ...prev, [field]: value }));\n    };\n\n    return (\n      <div className=\"max-w-md space-y-4\">\n        <h3 className=\"text-lg font-semibold mb-4\">User Registration Form</h3>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            name=\"firstName\"\n            label=\"First Name\"\n            type=\"text\"\n            required\n            value={formData.firstName}\n            onChange={handleChange('firstName')}\n          />\n          <FormField\n            name=\"lastName\"\n            label=\"Last Name\"\n            type=\"text\"\n            required\n            value={formData.lastName}\n            onChange={handleChange('lastName')}\n          />\n        </div>\n        \n        <FormField\n          name=\"email\"\n          label=\"Email Address\"\n          type=\"email\"\n          required\n          value={formData.email}\n          onChange={handleChange('email')}\n          helpText=\"We'll never share your email with anyone else\"\n        />\n        \n        <FormField\n          name=\"phone\"\n          label=\"Phone Number\"\n          type=\"text\"\n          value={formData.phone}\n          onChange={handleChange('phone')}\n          placeholder=\"+1 (555) 123-4567\"\n        />\n        \n        <FormField\n          name=\"country\"\n          label=\"Country\"\n          type=\"select\"\n          required\n          value={formData.country}\n          onChange={handleChange('country')}\n          placeholder=\"Select your country\"\n          options={[\n            { value: 'us', label: 'United States' },\n            { value: 'ca', label: 'Canada' },\n            { value: 'uk', label: 'United Kingdom' }\n          ]}\n        />\n        \n        <FormField\n          name=\"bio\"\n          label=\"Bio\"\n          type=\"textarea\"\n          value={formData.bio}\n          onChange={handleChange('bio')}\n          placeholder=\"Tell us about yourself...\"\n          rows={3}\n        />\n        \n        <FormField\n          name=\"plan\"\n          label=\"Choose your plan\"\n          type=\"radio\"\n          value={formData.plan}\n          onChange={handleChange('plan')}\n          options={[\n            { value: 'basic', label: 'Basic - Free' },\n            { value: 'pro', label: 'Pro - $9/month' },\n            { value: 'enterprise', label: 'Enterprise - $29/month' }\n          ]}\n        />\n        \n        <FormField\n          name=\"newsletter\"\n          label=\"Subscribe to our newsletter\"\n          type=\"checkbox\"\n          value={formData.newsletter}\n          onChange={handleChange('newsletter')}\n        />\n      </div>\n    );\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/FormField/FormField.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/FormField/FormField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/FormField/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/InputFilter/InputFilter.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[546,549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[546,549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { InputFilter } from './InputFilter';\nimport { Search, Filter, Mail } from 'lucide-react';\nimport { useState } from 'react';\n\nconst meta: Meta<typeof InputFilter> = {\n  title: 'Design System/Molecules/InputFilter',\n  component: InputFilter,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    onChange: { action: 'changed' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Template per gestire lo stato\nconst Template = (args: any) => {\n  const [value, setValue] = useState(args.value || '');\n  \n  return (\n    <InputFilter\n      {...args}\n      value={value}\n      onChange={(e) => {\n        setValue(e.target.value);\n        args.onChange(e);\n      }}\n    />\n  );\n};\n\nexport const Default: Story = {\n  render: Template,\n  args: {\n    name: 'search',\n    placeholder: 'Cerca...',\n  },\n};\n\nexport const WithSearchIcon: Story = {\n  render: Template,\n  args: {\n    name: 'search',\n    placeholder: 'Cerca elementi...',\n    icon: <Search className=\"w-4 h-4 text-gray-400\" />,\n  },\n};\n\nexport const WithFilterIcon: Story = {\n  render: Template,\n  args: {\n    name: 'filter',\n    placeholder: 'Filtra per nome...',\n    icon: <Filter className=\"w-4 h-4 text-gray-400\" />,\n  },\n};\n\nexport const WithUserIcon: Story = {\n  render: Template,\n  args: {\n    name: 'user',\n    placeholder: 'Cerca utenti...',\n    icon: <User className=\"w-4 h-4 text-gray-400\" />,\n  },\n};\n\nexport const WithEmailIcon: Story = {\n  render: Template,\n  args: {\n    name: 'email',\n    placeholder: 'Inserisci email...',\n    icon: <Mail className=\"w-4 h-4 text-gray-400\" />,\n  },\n};\n\nexport const WithValue: Story = {\n  render: Template,\n  args: {\n    name: 'search',\n    value: 'Testo di esempio',\n    placeholder: 'Cerca...',\n    icon: <Search className=\"w-4 h-4 text-gray-400\" />,\n  },\n};\n\nexport const WithCustomClass: Story = {\n  render: Template,\n  args: {\n    name: 'search',\n    placeholder: 'Cerca...',\n    icon: <Search className=\"w-4 h-4 text-gray-400\" />,\n    className: 'border-2 border-blue-200',\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/InputFilter/InputFilter.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/InputFilter/InputFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/InputFilter/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Modal/Modal.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":112,"column":39,"nodeType":"Identifier","endLine":112,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3235,3238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3235,3238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":151,"column":39,"nodeType":"Identifier","endLine":151,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4242,4245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4242,4245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":198,"column":33,"nodeType":"Identifier","endLine":198,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":226,"column":33,"nodeType":"Identifier","endLine":226,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":227,"column":37,"nodeType":"Identifier","endLine":227,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":239,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5827,5830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5827,5830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":303,"column":33,"nodeType":"Identifier","endLine":303,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":304,"column":35,"nodeType":"Identifier","endLine":304,"endColumn":43},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":356,"column":41,"nodeType":"Identifier","endLine":356,"endColumn":49},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":357,"column":43,"nodeType":"Identifier","endLine":357,"endColumn":51}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Modal Component Stories\n * Week 8 Implementation - Component Library\n */\n\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Modal, ConfirmModal } from './Modal';\nimport { Button } from '../../atoms/Button';\nimport { FormField } from '../FormField';\nimport { useState } from 'react';\n\nconst meta: Meta<typeof Modal> = {\n  title: 'Design System/Molecules/Modal',\n  component: Modal,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component: 'A flexible modal dialog component with overlay, focus management, and accessibility features.'\n      }\n    }\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg', 'xl', 'full']\n    },\n    variant: {\n      control: 'select',\n      options: ['default', 'centered', 'drawer']\n    },\n    showCloseButton: {\n      control: 'boolean'\n    },\n    closeOnOverlayClick: {\n      control: 'boolean'\n    },\n    closeOnEscape: {\n      control: 'boolean'\n    },\n    loading: {\n      control: 'boolean'\n    },\n    preventBodyScroll: {\n      control: 'boolean'\n    }\n  }\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Modal>;\n\n// Modal wrapper for stories\nconst ModalWrapper = (args: any) => {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <div className=\"p-4\">\n      <Button onClick={() => setIsOpen(true)}>Open Modal</Button>\n      <Modal\n        {...args}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        {args.children}\n      </Modal>\n    </div>\n  );\n};\n\n// Basic modal\nexport const Default: Story = {\n  render: ModalWrapper,\n  args: {\n    title: 'Modal Title',\n    children: (\n      <div>\n        <p className=\"text-gray-600 mb-4\">\n          This is a basic modal with some content. You can put any React components here.\n        </p>\n        <p className=\"text-gray-600\">\n          Click the X button, press Escape, or click outside to close.\n        </p>\n      </div>\n    )\n  }\n};\n\n// Modal with footer\nexport const WithFooter: Story = {\n  render: ModalWrapper,\n  args: {\n    title: 'Confirm Action',\n    children: (\n      <p className=\"text-gray-600\">\n        Are you sure you want to perform this action? This cannot be undone.\n      </p>\n    ),\n    footer: (\n      <>\n        <Button variant=\"ghost\">Cancel</Button>\n        <Button variant=\"primary\">Confirm</Button>\n      </>\n    )\n  }\n};\n\n// Different sizes\nexport const Sizes: Story = {\n  render: () => {\n    const [openModal, setOpenModal] = useState<string | null>(null);\n    \n    const sizes = [\n      { key: 'sm', label: 'Small' },\n      { key: 'md', label: 'Medium' },\n      { key: 'lg', label: 'Large' },\n      { key: 'xl', label: 'Extra Large' },\n      { key: 'full', label: 'Full Width' }\n    ];\n    \n    return (\n      <div className=\"p-4 space-x-2\">\n        {sizes.map(({ key, label }) => (\n          <Button key={key} onClick={() => setOpenModal(key)}>\n            {label} Modal\n          </Button>\n        ))}\n        \n        {sizes.map(({ key, label }) => (\n          <Modal\n            key={key}\n            isOpen={openModal === key}\n            onClose={() => setOpenModal(null)}\n            title={`${label} Modal`}\n            size={key as any}\n          >\n            <p className=\"text-gray-600\">\n              This is a {label.toLowerCase()} modal. The content area adjusts based on the size prop.\n            </p>\n          </Modal>\n        ))}\n      </div>\n    );\n  }\n};\n\n// Different variants\nexport const Variants: Story = {\n  render: () => {\n    const [openModal, setOpenModal] = useState<string | null>(null);\n    \n    const variants = [\n      { key: 'default', label: 'Default (Top)' },\n      { key: 'centered', label: 'Centered' },\n      { key: 'drawer', label: 'Drawer (Bottom)' }\n    ];\n    \n    return (\n      <div className=\"p-4 space-x-2\">\n        {variants.map(({ key, label }) => (\n          <Button key={key} onClick={() => setOpenModal(key)}>\n            {label}\n          </Button>\n        ))}\n        \n        {variants.map(({ key, label }) => (\n          <Modal\n            key={key}\n            isOpen={openModal === key}\n            onClose={() => setOpenModal(null)}\n            title={label}\n            variant={key as any}\n          >\n            <p className=\"text-gray-600\">\n              This modal uses the {key} variant positioning.\n            </p>\n          </Modal>\n        ))}\n      </div>\n    );\n  }\n};\n\n// Loading state\nexport const Loading: Story = {\n  render: ModalWrapper,\n  args: {\n    title: 'Loading Modal',\n    loading: true,\n    children: <div>This content is hidden while loading</div>\n  }\n};\n\n// No close button\nexport const NoCloseButton: Story = {\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    \n    return (\n      <div className=\"p-4\">\n        <Button onClick={() => setIsOpen(true)}>Open Modal</Button>\n        <Modal\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Modal without close button\"\n          showCloseButton={false}\n          closeOnOverlayClick={false}\n          closeOnEscape={false}\n          footer={\n            <Button onClick={() => setIsOpen(false)}>Close</Button>\n          }\n        >\n          <p className=\"text-gray-600\">\n            This modal can only be closed using the button in the footer.\n          </p>\n        </Modal>\n      </div>\n    );\n  }\n};\n\n// Form modal\nexport const FormModal: Story = {\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [formData, setFormData] = useState({\n      name: '',\n      email: '',\n      message: ''\n    });\n    \n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      console.log('Form submitted:', formData);\n      setIsOpen(false);\n    };\n    \n    const handleChange = (field: string) => (e: any) => {\n      setFormData(prev => ({ ...prev, [field]: e.target.value }));\n    };\n    \n    return (\n      <div className=\"p-4\">\n        <Button onClick={() => setIsOpen(true)}>Open Form Modal</Button>\n        <Modal\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Contact Form\"\n          size=\"lg\"\n          footer={\n            <>\n              <Button variant=\"ghost\" onClick={() => setIsOpen(false)}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" form=\"contact-form\">\n                Send Message\n              </Button>\n            </>\n          }\n        >\n          <form id=\"contact-form\" onSubmit={handleSubmit} className=\"space-y-4\">\n            <FormField\n              name=\"name\"\n              label=\"Full Name\"\n              type=\"text\"\n              required\n              value={formData.name}\n              onChange={handleChange('name')}\n              placeholder=\"Enter your full name\"\n            />\n            \n            <FormField\n              name=\"email\"\n              label=\"Email Address\"\n              type=\"email\"\n              required\n              value={formData.email}\n              onChange={handleChange('email')}\n              placeholder=\"Enter your email address\"\n            />\n            \n            <FormField\n              name=\"message\"\n              label=\"Message\"\n              type=\"textarea\"\n              required\n              value={formData.message}\n              onChange={handleChange('message')}\n              placeholder=\"Enter your message...\"\n              rows={4}\n            />\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n};\n\n// Confirm modal\nexport const ConfirmModalStory: Story = {\n  render: () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [variant, setVariant] = useState<'danger' | 'warning' | 'info'>('info');\n    \n    const handleConfirm = () => {\n      console.log('Confirmed!');\n      setIsOpen(false);\n    };\n    \n    return (\n      <div className=\"p-4 space-x-2\">\n        <Button \n          onClick={() => { setVariant('info'); setIsOpen(true); }}\n        >\n          Info Confirm\n        </Button>\n        <Button \n          variant=\"outline\"\n          onClick={() => { setVariant('warning'); setIsOpen(true); }}\n        >\n          Warning Confirm\n        </Button>\n        <Button \n          variant=\"destructive\"\n          onClick={() => { setVariant('danger'); setIsOpen(true); }}\n        >\n          Danger Confirm\n        </Button>\n        \n        <ConfirmModal\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          onConfirm={handleConfirm}\n          title={`${variant.charAt(0).toUpperCase() + variant.slice(1)} Confirmation`}\n          message={`This is a ${variant} confirmation dialog. Are you sure you want to proceed?`}\n          variant={variant}\n          confirmText=\"Yes, proceed\"\n          cancelText=\"Cancel\"\n        />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'A convenience component for confirmation dialogs with different variants.'\n      }\n    }\n  }\n};\n\n// Nested modals\nexport const NestedModals: Story = {\n  render: () => {\n    const [firstModal, setFirstModal] = useState(false);\n    const [secondModal, setSecondModal] = useState(false);\n    \n    return (\n      <div className=\"p-4\">\n        <Button onClick={() => setFirstModal(true)}>Open First Modal</Button>\n        \n        <Modal\n          isOpen={firstModal}\n          onClose={() => setFirstModal(false)}\n          title=\"First Modal\"\n          zIndex={1040}\n        >\n          <div className=\"space-y-4\">\n            <p className=\"text-gray-600\">\n              This is the first modal. You can open another modal from here.\n            </p>\n            <Button onClick={() => setSecondModal(true)}>\n              Open Second Modal\n            </Button>\n          </div>\n        </Modal>\n        \n        <Modal\n          isOpen={secondModal}\n          onClose={() => setSecondModal(false)}\n          title=\"Second Modal\"\n          size=\"sm\"\n          variant=\"centered\"\n          zIndex={1050}\n        >\n          <p className=\"text-gray-600\">\n            This is the second modal, opened on top of the first one.\n          </p>\n        </Modal>\n      </div>\n    );\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Modal/Modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Modal/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Pagination/Pagination.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Pagination/Pagination.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Pagination/Pagination.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  ChevronLeft,\n  ChevronRight,\n  MoreHorizontal\n} from 'lucide-react';\nimport { Button } from '../../atoms/Button';\nimport { Select } from '../../atoms/Select';\nimport { cn } from '../../utils';\n\nexport interface PaginationProps {\n  /** Pagina corrente (1-based) */\n  currentPage: number;\n  /** Numero totale di pagine */\n  totalPages: number;\n  /** Callback chiamato quando cambia la pagina */\n  onPageChange: (page: number) => void;\n  /** Numero di pagine adiacenti da mostrare */\n  siblingCount?: number;\n  /** Classi CSS personalizzate */\n  className?: string;\n  /** Dimensione della pagina corrente */\n  pageSize?: number;\n  /** Callback per il cambio dimensione pagina */\n  onPageSizeChange?: (size: number) => void;\n  /** Opzioni disponibili per la dimensione pagina */\n  pageSizeOptions?: number[];\n  /** Numero totale di elementi */\n  totalItems?: number;\n  /** Se mostrare le informazioni sul totale */\n  showInfo?: boolean;\n  /** Se mostrare il selettore dimensione pagina */\n  showPageSizeSelector?: boolean;\n}\n\n/**\n * Componente Pagination per navigare tra pagine di contenuto.\n * \n * Supporta:\n * - Navigazione con numeri di pagina\n * - Pulsanti precedente/successivo\n * - Ellipsis per pagine non adiacenti\n * - Selettore dimensione pagina\n * - Informazioni sul totale elementi\n * \n * @example\n * ```tsx\n * <Pagination\n *   currentPage={1}\n *   totalPages={10}\n *   onPageChange={(page) => console.log(page)}\n *   pageSize={25}\n *   onPageSizeChange={(size) => console.log(size)}\n *   totalItems={250}\n *   showInfo\n *   showPageSizeSelector\n * />\n * ```\n */\nexport const Pagination: React.FC<PaginationProps> = ({\n  currentPage,\n  totalPages,\n  onPageChange,\n  siblingCount = 1,\n  className = '',\n  pageSize,\n  onPageSizeChange,\n  pageSizeOptions = [10, 25, 50, 100],\n  totalItems,\n  showInfo = false,\n  showPageSizeSelector = false,\n}) => {\n  // Genera array di numeri per la paginazione\n  const range = (start: number, end: number) => {\n    return Array.from({ length: end - start + 1 }, (_, i) => start + i);\n  };\n\n  // Genera i numeri di pagina da visualizzare\n  const generatePaginationItems = () => {\n    // Se abbiamo meno di 7 pagine, mostra tutte\n    if (totalPages <= 7) {\n      return range(1, totalPages);\n    }\n\n    // Altrimenti calcola quali numeri mostrare\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);\n    \n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;\n    \n    // Casi speciali\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      // Caso 1: niente dots a sinistra, dots a destra\n      const leftRange = range(1, 5);\n      return [...leftRange, 'dots', totalPages];\n    }\n    \n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      // Caso 2: dots a sinistra, niente dots a destra\n      const rightRange = range(totalPages - 4, totalPages);\n      return [1, 'dots', ...rightRange];\n    }\n    \n    if (shouldShowLeftDots && shouldShowRightDots) {\n      // Caso 3: dots su entrambi i lati\n      const middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [1, 'dots', ...middleRange, 'dots', totalPages];\n    }\n    \n    return range(1, totalPages);\n  };\n\n  const paginationItems = generatePaginationItems();\n\n  // Calcola le informazioni da mostrare\n  const getInfoText = () => {\n    if (!totalItems || !pageSize) return '';\n    \n    const startItem = (currentPage - 1) * pageSize + 1;\n    const endItem = Math.min(currentPage * pageSize, totalItems);\n    \n    return `Mostrando ${startItem}-${endItem} di ${totalItems} elementi`;\n  };\n\n  return (\n    <div className={cn('flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between', className)}>\n      {/* Informazioni totale elementi */}\n      {showInfo && totalItems && pageSize && (\n        <div className=\"text-sm text-gray-600\">\n          {getInfoText()}\n        </div>\n      )}\n      \n      {/* Controlli paginazione */}\n      <div className=\"flex items-center gap-2\">\n        {/* Pulsante Precedente */}\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(currentPage - 1)}\n          disabled={currentPage <= 1}\n          className=\"h-8 w-8 p-0\"\n          aria-label=\"Previous page\"\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n        </Button>\n        \n        {/* Numeri di pagina */}\n        <div className=\"flex items-center gap-1\">\n          {paginationItems.map((item, index) => {\n            if (item === 'dots') {\n              return (\n                <div key={`dots-${index}`} className=\"flex h-8 w-8 items-center justify-center\">\n                  <MoreHorizontal className=\"h-4 w-4 text-gray-400\" />\n                </div>\n              );\n            }\n            \n            const pageNumber = item as number;\n            const isActive = pageNumber === currentPage;\n            \n            return (\n              <Button\n                key={pageNumber}\n                variant={isActive ? 'primary' : 'outline'}\n                size=\"sm\"\n                onClick={() => onPageChange(pageNumber)}\n                className=\"h-8 w-8 p-0\"\n              >\n                {pageNumber}\n              </Button>\n            );\n          })}\n        </div>\n        \n        {/* Pulsante Successivo */}\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(currentPage + 1)}\n          disabled={currentPage >= totalPages}\n          className=\"h-8 w-8 p-0\"\n          aria-label=\"Next page\"\n        >\n          <ChevronRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      \n      {/* Selettore dimensione pagina */}\n      {showPageSizeSelector && pageSize && onPageSizeChange && (\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-gray-600\">Elementi per pagina:</span>\n          <Select\n            value={pageSize.toString()}\n            onChange={(e) => onPageSizeChange(parseInt(e.target.value))}\n            className=\"w-20\"\n          >\n            {pageSizeOptions.map((option) => (\n              <option key={option} value={option.toString()}>\n                {option}\n              </option>\n            ))}\n          </Select>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Pagination;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Pagination/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBar/SearchBar.stories.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":90,"column":31,"nodeType":"Identifier","endLine":90,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":141,"column":47,"nodeType":"Identifier","endLine":141,"endColumn":55},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":142,"column":43,"nodeType":"Identifier","endLine":142,"endColumn":51}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { SearchBar } from './SearchBar';\nimport { useState } from 'react';\n\nconst meta: Meta<typeof SearchBar> = {\n  title: 'Design System/Molecules/SearchBar',\n  component: SearchBar,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'A search input component with optional search button and clear functionality.',\n      },\n    },\n  },\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg'],\n    },\n    onSearch: { action: 'searched' },\n    onChange: { action: 'changed' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof SearchBar>;\n\nexport const Default: Story = {\n  args: {\n    placeholder: 'Cerca...',\n  },\n};\n\nexport const WithButton: Story = {\n  args: {\n    placeholder: 'Cerca prodotti...',\n    showButton: true,\n  },\n};\n\nexport const WithoutButton: Story = {\n  args: {\n    placeholder: 'Cerca...',\n    showButton: false,\n  },\n};\n\nexport const SearchOnType: Story = {\n  args: {\n    placeholder: 'Cerca in tempo reale...',\n    searchOnType: true,\n    showButton: false,\n    debounceMs: 500,\n  },\n};\n\nexport const Small: Story = {\n  args: {\n    placeholder: 'Cerca...',\n    size: 'sm',\n  },\n};\n\nexport const Large: Story = {\n  args: {\n    placeholder: 'Cerca...',\n    size: 'lg',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    placeholder: 'Cerca...',\n    disabled: true,\n    value: 'Testo disabilitato',\n  },\n};\n\nexport const WithoutClearButton: Story = {\n  args: {\n    placeholder: 'Cerca...',\n    showClearButton: false,\n    value: 'Testo senza clear',\n  },\n};\n\nexport const Controlled: Story = {\n  render: (args) => {\n    const [value, setValue] = useState('Valore controllato');\n    \n    return (\n      <div className=\"space-y-4\">\n        <SearchBar\n          {...args}\n          value={value}\n          onChange={setValue}\n          onSearch={(searchValue) => {\n            console.log('Searching for:', searchValue);\n          }}\n        />\n        <p className=\"text-sm text-gray-600\">\n          Valore corrente: <code>{value}</code>\n        </p>\n      </div>\n    );\n  },\n  args: {\n    placeholder: 'Componente controllato...',\n  },\n};\n\nexport const WithCustomStyling: Story = {\n  args: {\n    placeholder: 'Cerca con stile personalizzato...',\n    className: 'max-w-md border-2 border-blue-300 rounded-lg',\n  },\n};\n\nexport const AllSizes: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <div>\n        <h3 className=\"text-sm font-medium mb-2\">Small</h3>\n        <SearchBar size=\"sm\" placeholder=\"Piccola...\" />\n      </div>\n      <div>\n        <h3 className=\"text-sm font-medium mb-2\">Medium (Default)</h3>\n        <SearchBar size=\"md\" placeholder=\"Media...\" />\n      </div>\n      <div>\n        <h3 className=\"text-sm font-medium mb-2\">Large</h3>\n        <SearchBar size=\"lg\" placeholder=\"Grande...\" />\n      </div>\n    </div>\n  ),\n};\n\nexport const InteractiveExample: Story = {\n  render: () => {\n    const [searchResults, setSearchResults] = useState<string[]>([]);\n    const [isSearching, setIsSearching] = useState(false);\n    \n    const mockData = [\n      'Apple iPhone 14',\n      'Samsung Galaxy S23',\n      'Google Pixel 7',\n      'OnePlus 11',\n      'Xiaomi Mi 13',\n      'Huawei P50',\n    ];\n    \n    const handleSearch = (query: string) => {\n      setIsSearching(true);\n      \n      // Simulate API call\n      setTimeout(() => {\n        const results = mockData.filter(item => \n          item.toLowerCase().includes(query.toLowerCase())\n        );\n        setSearchResults(results);\n        setIsSearching(false);\n      }, 500);\n    };\n    \n    return (\n      <div className=\"w-96 space-y-4\">\n        <SearchBar\n          placeholder=\"Cerca smartphone...\"\n          onSearch={handleSearch}\n          searchOnType\n          debounceMs={300}\n        />\n        \n        {isSearching && (\n          <div className=\"text-sm text-gray-500\">Ricerca in corso...</div>\n        )}\n        \n        {searchResults.length > 0 && (\n          <div className=\"border rounded-lg p-3\">\n            <h4 className=\"font-medium mb-2\">Risultati ({searchResults.length}):</h4>\n            <ul className=\"space-y-1\">\n              {searchResults.map((result, index) => (\n                <li key={index} className=\"text-sm text-gray-700\">\n                  {result}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        {!isSearching && searchResults.length === 0 && (\n          <div className=\"text-sm text-gray-500\">\n            Nessun risultato trovato\n          </div>\n        )}\n      </div>\n    );\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBar/SearchBar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBar/SearchBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Input } from '../../atoms/Input';\nimport { Button } from '../../atoms/Button';\nimport { Icon } from '../../atoms/Icon';\nimport { cn } from '../../utils/index';\n\nexport interface SearchBarProps {\n  /** Placeholder text for the search input */\n  placeholder?: string;\n  /** Initial value for the search input */\n  value?: string;\n  /** Callback fired when search is performed */\n  onSearch?: (value: string) => void;\n  /** Callback fired when input value changes */\n  onChange?: (value: string) => void;\n  /** Whether to show the search button */\n  showButton?: boolean;\n  /** Whether to search on every keystroke */\n  searchOnType?: boolean;\n  /** Debounce delay for search on type (ms) */\n  debounceMs?: number;\n  /** Whether the search bar is disabled */\n  disabled?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n  /** Size variant */\n  size?: 'sm' | 'md' | 'lg';\n  /** Whether to show clear button when there's text */\n  showClearButton?: boolean;\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = ({\n  placeholder = 'Cerca...',\n  value: controlledValue,\n  onSearch,\n  onChange,\n  showButton = true,\n  searchOnType = false,\n  debounceMs = 300,\n  disabled = false,\n  className,\n  size = 'md',\n  showClearButton = true,\n}) => {\n  const [internalValue, setInternalValue] = useState(controlledValue || '');\n  const [debounceTimer, setDebounceTimer] = useState<NodeJS.Timeout | null>(null);\n\n  const isControlled = controlledValue !== undefined;\n  const searchValue = isControlled ? controlledValue : internalValue;\n\n  const handleSearch = useCallback(() => {\n    if (onSearch && searchValue.trim()) {\n      onSearch(searchValue.trim());\n    }\n  }, [onSearch, searchValue]);\n\n  const handleInputChange = useCallback(\n    (newValue: string) => {\n      if (!isControlled) {\n        setInternalValue(newValue);\n      }\n      \n      onChange?.(newValue);\n\n      if (searchOnType && onSearch) {\n        if (debounceTimer) {\n          clearTimeout(debounceTimer);\n        }\n\n        const timer = setTimeout(() => {\n          if (newValue.trim()) {\n            onSearch(newValue.trim());\n          }\n        }, debounceMs);\n\n        setDebounceTimer(timer);\n      }\n    },\n    [isControlled, onChange, searchOnType, onSearch, debounceMs, debounceTimer]\n  );\n\n  const handleClear = useCallback(() => {\n    const newValue = '';\n    if (!isControlled) {\n      setInternalValue(newValue);\n    }\n    onChange?.(newValue);\n  }, [isControlled, onChange]);\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        handleSearch();\n      }\n    },\n    [handleSearch]\n  );\n\n  const sizeClasses = {\n    sm: 'h-8',\n    md: 'h-10',\n    lg: 'h-12',\n  };\n\n  return (\n    <div \n      className={cn('relative flex items-center', sizeClasses[size], className)}\n      data-testid=\"search-bar-container\"\n    >\n      <div className=\"relative flex-1\">\n        <Input\n          type=\"text\"\n          placeholder={placeholder}\n          value={searchValue}\n          onChange={(e) => handleInputChange(e.target.value)}\n          onKeyDown={handleKeyDown}\n          disabled={disabled}\n          className={cn(\n            'pr-8',\n            showButton && 'rounded-r-none border-r-0',\n            size === 'sm' && 'text-sm',\n            size === 'lg' && 'text-lg'\n          )}\n        />\n        \n        {/* Search Icon */}\n        <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\">\n          <Icon name=\"search\" size={size === 'sm' ? 'sm' : 'md'} />\n        </div>\n\n        {/* Clear Button */}\n        {showClearButton && searchValue && (\n          <button\n            type=\"button\"\n            onClick={handleClear}\n            disabled={disabled}\n            className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 disabled:opacity-50\"\n            data-testid=\"search-bar-clear-button\"\n          >\n            <Icon name=\"x\" size=\"sm\" />\n          </button>\n        )}\n      </div>\n\n      {/* Search Button */}\n      {showButton && (\n        <Button\n          type=\"button\"\n          onClick={handleSearch}\n          disabled={disabled || !searchValue.trim()}\n          size={size}\n          className=\"rounded-l-none border-l-0\"\n          data-testid=\"search-bar-search-button\"\n        >\n          <Icon name=\"search\" size={size === 'sm' ? 'sm' : 'md'} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nSearchBar.displayName = 'SearchBar';\n\nexport default SearchBar;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBar/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBarControls/SearchBarControls.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { SearchBarControls } from './SearchBarControls';\nimport { useState } from 'react';\n\nconst meta: Meta<typeof SearchBarControls> = {\n  title: 'Design System/Molecules/SearchBarControls',\n  component: SearchBarControls,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    onSearch: { action: 'searched' },\n    onFilterChange: { action: 'filter changed' },\n    onSortChange: { action: 'sort changed' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Template per gestire lo stato\nconst Template = (args: any) => {\n  const [searchValue, setSearchValue] = useState(args.searchValue || '');\n  const [activeFilters, setActiveFilters] = useState(args.activeFilters || {});\n  const [activeSort, setActiveSort] = useState(args.activeSort || null);\n  \n  return (\n    <SearchBarControls\n      {...args}\n      searchValue={searchValue}\n      onSearch={(value) => {\n        setSearchValue(value);\n        args.onSearch(value);\n      }}\n      activeFilters={activeFilters}\n      onFilterChange={(filters) => {\n        setActiveFilters(filters);\n        args.onFilterChange(filters);\n      }}\n      activeSort={activeSort}\n      onSortChange={(sort) => {\n        setActiveSort(sort);\n        args.onSortChange(sort);\n      }}\n    />\n  );\n};\n\nexport const Default: Story = {\n  render: Template,\n  args: {\n    placeholder: 'Cerca...',\n  },\n};\n\nexport const WithFilters: Story = {\n  render: Template,\n  args: {\n    placeholder: 'Cerca corsi...',\n    filterOptions: [\n      {\n        key: 'status',\n        label: 'Stato',\n        options: [\n          { value: 'active', label: 'Attivo' },\n          { value: 'inactive', label: 'Inattivo' },\n          { value: 'draft', label: 'Bozza' },\n        ],\n      },\n      {\n        key: 'category',\n        label: 'Categoria',\n        options: [\n          { value: 'tech', label: 'Tecnologia' },\n          { value: 'business', label: 'Business' },\n          { value: 'design', label: 'Design' },\n        ],\n      },\n    ],\n  },\n};\n\nexport const WithSort: Story = {\n  render: Template,\n  args: {\n    placeholder: 'Cerca elementi...',\n    sortOptions: [\n      { value: 'name', label: 'Nome' },\n      { value: 'date', label: 'Data' },\n      { value: 'status', label: 'Stato' },\n    ],\n  },\n};\n\nexport const WithFiltersAndSort: Story = {\n  render: Template,\n  args: {\n    placeholder: 'Cerca elementi...',\n    filterOptions: [\n      {\n        key: 'status',\n        label: 'Stato',\n        options: [\n          { value: 'active', label: 'Attivo' },\n          { value: 'inactive', label: 'Inattivo' },\n        ],\n      },\n    ],\n    sortOptions: [\n      { value: 'name', label: 'Nome' },\n      { value: 'date', label: 'Data' },\n    ],\n  },\n};\n\nexport const WithActiveFilters: Story = {\n  render: Template,\n  args: {\n    placeholder: 'Cerca elementi...',\n    filterOptions: [\n      {\n        key: 'status',\n        label: 'Stato',\n        options: [\n          { value: 'active', label: 'Attivo' },\n          { value: 'inactive', label: 'Inattivo' },\n        ],\n      },\n    ],\n    activeFilters: {\n      status: 'active',\n    },\n  },\n};\n\nexport const WithCustomClass: Story = {\n  render: Template,\n  args: {\n    placeholder: 'Cerca...',\n    className: 'w-96 border-2 border-blue-200',\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBarControls/SearchBarControls.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBarControls/SearchBarControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBarControls/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBox/SearchBox.stories.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":110,"column":31,"nodeType":"Identifier","endLine":110,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":111,"column":35,"nodeType":"Identifier","endLine":111,"endColumn":43},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called in function \"render\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":112,"column":35,"nodeType":"Identifier","endLine":112,"endColumn":43}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - SearchBox Stories\n * Week 8 Implementation - Component Library\n */\n\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { SearchBox } from './SearchBox';\nimport { useState } from 'react';\n\nconst meta: Meta<typeof SearchBox> = {\n  title: 'Design System/Molecules/SearchBox',\n  component: SearchBox,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'SearchBox component per la ricerca con icone e funzionalità di clear. Supporta diversi size e stati.',\n      },\n    },\n  },\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['sm', 'md', 'lg'],\n      description: 'Dimensione del search box',\n    },\n    clearable: {\n      control: 'boolean',\n      description: 'Mostra il pulsante per cancellare il testo',\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Stato di caricamento',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Stato disabilitato',\n    },\n    placeholder: {\n      control: 'text',\n      description: 'Testo placeholder',\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof SearchBox>;\n\n// Default story\nexport const Default: Story = {\n  args: {\n    placeholder: 'Cerca...',\n    size: 'md',\n    clearable: true,\n  },\n};\n\n// Size variants\nexport const Sizes: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Small</label>\n        <SearchBox size=\"sm\" placeholder=\"Cerca (small)\" />\n      </div>\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Medium</label>\n        <SearchBox size=\"md\" placeholder=\"Cerca (medium)\" />\n      </div>\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Large</label>\n        <SearchBox size=\"lg\" placeholder=\"Cerca (large)\" />\n      </div>\n    </div>\n  ),\n};\n\n// States\nexport const States: Story = {\n  render: () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Default</label>\n        <SearchBox placeholder=\"Stato normale\" />\n      </div>\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">With Value</label>\n        <SearchBox defaultValue=\"Testo di ricerca\" placeholder=\"Con valore\" />\n      </div>\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Loading</label>\n        <SearchBox loading placeholder=\"Caricamento...\" />\n      </div>\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Disabled</label>\n        <SearchBox disabled placeholder=\"Disabilitato\" />\n      </div>\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Not Clearable</label>\n        <SearchBox clearable={false} defaultValue=\"Non cancellabile\" />\n      </div>\n    </div>\n  ),\n};\n\n// Interactive example\nexport const Interactive: Story = {\n  render: () => {\n    const [value, setValue] = useState('');\n    const [results, setResults] = useState<string[]>([]);\n    const [loading, setLoading] = useState(false);\n\n    const handleSearch = async (searchValue: string) => {\n      if (!searchValue.trim()) {\n        setResults([]);\n        return;\n      }\n\n      setLoading(true);\n      \n      // Simulate API call\n      setTimeout(() => {\n        const mockResults = [\n          `Risultato 1 per \"${searchValue}\"`,\n          `Risultato 2 per \"${searchValue}\"`,\n          `Risultato 3 per \"${searchValue}\"`,\n        ];\n        setResults(mockResults);\n        setLoading(false);\n      }, 1000);\n    };\n\n    const handleClear = () => {\n      setValue('');\n      setResults([]);\n    };\n\n    return (\n      <div className=\"w-80\">\n        <SearchBox\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onSearch={handleSearch}\n          onClear={handleClear}\n          loading={loading}\n          placeholder=\"Cerca e premi Invio...\"\n        />\n        \n        {results.length > 0 && (\n          <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">Risultati:</h4>\n            <ul className=\"space-y-1\">\n              {results.map((result, index) => (\n                <li key={index} className=\"text-sm text-gray-600\">\n                  {result}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  },\n};\n\n// Full width\nexport const FullWidth: Story = {\n  render: () => (\n    <div className=\"w-full max-w-2xl\">\n      <SearchBox \n        placeholder=\"Search box a larghezza completa\" \n        containerClassName=\"w-full\"\n      />\n    </div>\n  ),\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBox/SearchBox.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":7,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'waitFor' is defined but never used.","line":7,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - SearchBox Component Tests\n * Week 8 Implementation - Component Library\n */\n\nimport { describe, it, expect, vi } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { SearchBox } from './SearchBox';\n\ndescribe('SearchBox Component', () => {\n  it('renders with default props', () => {\n    render(<SearchBox />);\n    \n    const input = screen.getByRole('textbox');\n    expect(input).toBeInTheDocument();\n    expect(input).toHaveAttribute('placeholder', 'Cerca...');\n  });\n\n  it('renders with custom placeholder', () => {\n    render(<SearchBox placeholder=\"Custom placeholder\" />);\n    \n    const input = screen.getByPlaceholderText('Custom placeholder');\n    expect(input).toBeInTheDocument();\n  });\n\n  it('displays search icon', () => {\n    render(<SearchBox />);\n    \n    // The search icon should be present (MagnifyingGlassIcon)\n    const container = screen.getByRole('textbox').parentElement;\n    expect(container).toBeInTheDocument();\n  });\n\n  it('handles controlled value', () => {\n    const handleChange = vi.fn();\n    render(<SearchBox value=\"test value\" onChange={handleChange} />);\n    \n    const input = screen.getByRole('textbox');\n    expect(input).toHaveValue('test value');\n  });\n\n  it('handles uncontrolled value', async () => {\n    const user = userEvent.setup();\n    render(<SearchBox />);\n    \n    const input = screen.getByRole('textbox');\n    await user.type(input, 'test input');\n    \n    expect(input).toHaveValue('test input');\n  });\n\n  it('calls onChange when typing', async () => {\n    const user = userEvent.setup();\n    const handleChange = vi.fn();\n    render(<SearchBox onChange={handleChange} />);\n    \n    const input = screen.getByRole('textbox');\n    await user.type(input, 'a');\n    \n    expect(handleChange).toHaveBeenCalled();\n  });\n\n  it('calls onSearch when Enter is pressed', async () => {\n    const user = userEvent.setup();\n    const handleSearch = vi.fn();\n    render(<SearchBox onSearch={handleSearch} />);\n    \n    const input = screen.getByRole('textbox');\n    await user.type(input, 'search term');\n    await user.keyboard('{Enter}');\n    \n    expect(handleSearch).toHaveBeenCalledWith('search term');\n  });\n\n  it('shows clear button when there is value and clearable is true', async () => {\n    const user = userEvent.setup();\n    render(<SearchBox clearable />);\n    \n    const input = screen.getByRole('textbox');\n    await user.type(input, 'some text');\n    \n    const clearButton = screen.getByRole('button', { name: /cancella ricerca/i });\n    expect(clearButton).toBeInTheDocument();\n  });\n\n  it('does not show clear button when clearable is false', async () => {\n    const user = userEvent.setup();\n    render(<SearchBox clearable={false} />);\n    \n    const input = screen.getByRole('textbox');\n    await user.type(input, 'some text');\n    \n    const clearButton = screen.queryByRole('button', { name: /cancella ricerca/i });\n    expect(clearButton).not.toBeInTheDocument();\n  });\n\n  it('clears input when clear button is clicked', async () => {\n    const user = userEvent.setup();\n    const handleChange = vi.fn();\n    render(<SearchBox onChange={handleChange} clearable />);\n    \n    const input = screen.getByRole('textbox');\n    await user.type(input, 'some text');\n    \n    const clearButton = screen.getByRole('button', { name: /cancella ricerca/i });\n    await user.click(clearButton);\n    \n    expect(input).toHaveValue('');\n  });\n\n  it('calls onClear when clear button is clicked', async () => {\n    const user = userEvent.setup();\n    const handleClear = vi.fn();\n    render(<SearchBox onClear={handleClear} clearable />);\n    \n    const input = screen.getByRole('textbox');\n    await user.type(input, 'some text');\n    \n    const clearButton = screen.getByRole('button', { name: /cancella ricerca/i });\n    await user.click(clearButton);\n    \n    expect(handleClear).toHaveBeenCalled();\n  });\n\n  it('shows loading spinner when loading is true', () => {\n    render(<SearchBox loading />);\n    \n    // Check for loading spinner (svg with animate-spin class)\n    const spinner = document.querySelector('.animate-spin');\n    expect(spinner).toBeInTheDocument();\n  });\n\n  it('does not show clear button when loading', async () => {\n    const user = userEvent.setup();\n    render(<SearchBox loading clearable />);\n    \n    const input = screen.getByRole('textbox');\n    await user.type(input, 'some text');\n    \n    const clearButton = screen.queryByRole('button', { name: /cancella ricerca/i });\n    expect(clearButton).not.toBeInTheDocument();\n  });\n\n  it('applies correct size classes', () => {\n    const { rerender } = render(<SearchBox size=\"sm\" />);\n    let container = screen.getByRole('textbox').parentElement;\n    expect(container).toHaveClass('h-8');\n    \n    rerender(<SearchBox size=\"md\" />);\n    container = screen.getByRole('textbox').parentElement;\n    expect(container).toHaveClass('h-10');\n    \n    rerender(<SearchBox size=\"lg\" />);\n    container = screen.getByRole('textbox').parentElement;\n    expect(container).toHaveClass('h-12');\n  });\n\n  it('is disabled when disabled prop is true', () => {\n    render(<SearchBox disabled />);\n    \n    const input = screen.getByRole('textbox');\n    expect(input).toBeDisabled();\n  });\n\n  it('applies custom className', () => {\n    render(<SearchBox className=\"custom-class\" />);\n    \n    const input = screen.getByRole('textbox');\n    expect(input).toHaveClass('custom-class');\n  });\n\n  it('applies custom containerClassName', () => {\n    render(<SearchBox containerClassName=\"custom-container\" />);\n    \n    const container = screen.getByRole('textbox').parentElement;\n    expect(container).toHaveClass('custom-container');\n  });\n\n  it('forwards ref to input element', () => {\n    const ref = vi.fn();\n    render(<SearchBox ref={ref} />);\n    \n    expect(ref).toHaveBeenCalledWith(expect.any(HTMLInputElement));\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBox/SearchBox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SearchBox/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SelectionPills/SelectionPills.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SelectionPills/SelectionPills.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SelectionPills/SelectionPills.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":102,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":102,"endColumn":29},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":109,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":109,"endColumn":31},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":116,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":116,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport { X, Check, Trash2, CheckSquare, Square } from 'lucide-react';\nimport { cn } from '../../utils';\n\nexport interface SelectionPillAction {\n  /** Etichetta dell'azione */\n  label: string;\n  /** Funzione da eseguire quando l'azione viene selezionata */\n  onClick: () => void;\n  /** Icona opzionale da mostrare accanto all'etichetta */\n  icon?: ReactNode;\n  /** Variante di stile */\n  variant: 'primary' | 'secondary' | 'danger' | 'default';\n}\n\nexport interface SelectionPillsProps {\n  /** Lista delle azioni mostrate come pill */\n  actions: SelectionPillAction[];\n  /** Funzione chiamata quando l'utente vuole pulire la selezione */\n  onClear?: () => void;\n  /** Numero di elementi selezionati */\n  count?: number;\n  /** Nome dell'entità (es. \"righe\", \"utenti\", \"aziende\") */\n  entityName?: string;\n  /** Funzione da chiamare quando si vuole cancellare la selezione */\n  onClearSelection?: () => void;\n  /** Classi CSS aggiuntive */\n  className?: string;\n}\n\nexport const SelectionPills: React.FC<SelectionPillsProps> = ({\n  actions,\n  onClear,\n  count = 0,\n  entityName = 'elementi',\n  onClearSelection,\n  className = '',\n}) => {\n  // Stili per le diverse varianti\n  const getVariantStyle = (variant: SelectionPillAction['variant']) => {\n    switch (variant) {\n      case 'primary':\n        return 'bg-primary-100 text-primary-800 border-primary-200';\n      case 'secondary':\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n      case 'danger':\n        return 'bg-red-100 text-red-800 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-700 border-gray-200';\n    }\n  };\n\n  if (actions.length === 0 && count === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('flex flex-wrap items-center gap-2', className)}>\n      {/* Pill per il conteggio selezione */}\n      {count > 0 && (\n        <div className=\"flex items-center gap-1 px-3 py-1 bg-primary-50 text-primary-700 border border-primary-200 rounded-full text-sm font-medium\">\n          <Check className=\"w-4 h-4\" />\n          <span>\n            {count} {entityName} selezionat{count === 1 ? 'o' : 'i'}\n          </span>\n          {(onClear || onClearSelection) && (\n            <button\n              onClick={onClear || onClearSelection}\n              className=\"ml-1 p-0.5 hover:bg-primary-100 rounded-full transition-colors\"\n              aria-label=\"Cancella selezione\"\n            >\n              <X className=\"w-3 h-3\" />\n            </button>\n          )}\n        </div>\n      )}\n\n      {/* Pills per le azioni */}\n      {actions.map((action, index) => (\n        <button\n          key={index}\n          onClick={action.onClick}\n          className={cn(\n            'flex items-center gap-1.5 px-3 py-1 border rounded-full text-sm font-medium',\n            'transition-all duration-200 hover:shadow-sm',\n            getVariantStyle(action.variant)\n          )}\n        >\n          {action.icon && (\n            <span className=\"w-4 h-4 flex items-center justify-center\">\n              {action.icon}\n            </span>\n          )}\n          <span>{action.label}</span>\n        </button>\n      ))}\n    </div>\n  );\n};\n\n// Helper functions for common actions\nexport const selectAllAction = (onClick: () => void, label: string): SelectionPillAction => ({\n  label,\n  onClick,\n  icon: <CheckSquare className=\"w-4 h-4\" />,\n  variant: 'secondary'\n});\n\nexport const deselectAllAction = (onClick: () => void, label: string): SelectionPillAction => ({\n  label,\n  onClick,\n  icon: <Square className=\"w-4 h-4\" />,\n  variant: 'secondary'\n});\n\nexport const deleteSelectedAction = (onClick: () => void, label: string): SelectionPillAction => ({\n  label,\n  onClick,\n  icon: <Trash2 className=\"w-4 h-4\" />,\n  variant: 'danger'\n});","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/SelectionPills/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Table/Table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Table/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Tabs/Tabs.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1428,1431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1428,1431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4770,4773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4770,4773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5792,5795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5792,5795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8520,8523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8520,8523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9598,9601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9598,9601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from './Tabs';\nimport { fn } from '@storybook/test';\n\nconst meta: Meta<typeof Tabs> = {\n  title: 'Design System/Molecules/Tabs',\n  component: Tabs,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\nComponente Tabs per organizzare contenuto in pannelli navigabili.\n\n## Caratteristiche\n- Pattern compound component per massima flessibilità\n- Supporto per orientamento orizzontale e verticale\n- Accessibilità completa (ARIA, keyboard navigation)\n- Stili personalizzabili\n- Gestione stato integrata\n\n## Compound Components\n- \\`Tabs\\` - Container principale\n- \\`TabsList\\` - Container per i trigger\n- \\`TabsTrigger\\` - Singolo tab clickabile\n- \\`TabsContent\\` - Contenuto del pannello\n\n## Utilizzo\nUtilizza questo componente per organizzare contenuto correlato in sezioni navigabili.\n        `,\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    value: {\n      control: 'text',\n      description: 'Valore del tab attivo',\n    },\n    orientation: {\n      control: 'radio',\n      options: ['horizontal', 'vertical'],\n      description: 'Orientamento dei tabs',\n    },\n  },\n  args: {\n    onValueChange: fn(),\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Template per le storie con stato\nconst TabsTemplate = (args: any) => {\n  const [activeTab, setActiveTab] = useState(args.value || 'tab1');\n  \n  return (\n    <Tabs {...args} value={activeTab} onValueChange={setActiveTab}>\n      <TabsList>\n        <TabsTrigger value=\"tab1\">Account</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Password</TabsTrigger>\n        <TabsTrigger value=\"tab3\">Settings</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"tab1\" className=\"mt-4 p-4 border rounded-md\">\n        <h3 className=\"text-lg font-semibold mb-2\">Account Settings</h3>\n        <p className=\"text-gray-600\">\n          Manage your account settings and set e-mail preferences.\n        </p>\n        <div className=\"mt-4 space-y-2\">\n          <div>\n            <label className=\"block text-sm font-medium\">Name</label>\n            <input \n              type=\"text\" \n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md\" \n              placeholder=\"Your name\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium\">Email</label>\n            <input \n              type=\"email\" \n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md\" \n              placeholder=\"your.email@example.com\"\n            />\n          </div>\n        </div>\n      </TabsContent>\n      <TabsContent value=\"tab2\" className=\"mt-4 p-4 border rounded-md\">\n        <h3 className=\"text-lg font-semibold mb-2\">Password</h3>\n        <p className=\"text-gray-600\">\n          Change your password here. After saving, you'll be logged out.\n        </p>\n        <div className=\"mt-4 space-y-2\">\n          <div>\n            <label className=\"block text-sm font-medium\">Current Password</label>\n            <input \n              type=\"password\" \n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium\">New Password</label>\n            <input \n              type=\"password\" \n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md\"\n            />\n          </div>\n        </div>\n      </TabsContent>\n      <TabsContent value=\"tab3\" className=\"mt-4 p-4 border rounded-md\">\n        <h3 className=\"text-lg font-semibold mb-2\">Settings</h3>\n        <p className=\"text-gray-600\">\n          Configure your application preferences and notifications.\n        </p>\n        <div className=\"mt-4 space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">Email Notifications</span>\n            <input type=\"checkbox\" className=\"rounded\" />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">Push Notifications</span>\n            <input type=\"checkbox\" className=\"rounded\" />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">SMS Notifications</span>\n            <input type=\"checkbox\" className=\"rounded\" />\n          </div>\n        </div>\n      </TabsContent>\n    </Tabs>\n  );\n};\n\n// Storia base\nexport const Default: Story = {\n  render: TabsTemplate,\n  args: {\n    value: 'tab1',\n  },\n};\n\n// Con tab disabilitato\nconst TabsWithDisabledTemplate = (args: any) => {\n  const [activeTab, setActiveTab] = useState(args.value || 'tab1');\n  \n  return (\n    <Tabs {...args} value={activeTab} onValueChange={setActiveTab}>\n      <TabsList>\n        <TabsTrigger value=\"tab1\">Available</TabsTrigger>\n        <TabsTrigger value=\"tab2\" disabled>Disabled</TabsTrigger>\n        <TabsTrigger value=\"tab3\">Another Tab</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"tab1\" className=\"mt-4 p-4 border rounded-md\">\n        <p>This tab is available and active.</p>\n      </TabsContent>\n      <TabsContent value=\"tab2\" className=\"mt-4 p-4 border rounded-md\">\n        <p>This content won't be shown because the tab is disabled.</p>\n      </TabsContent>\n      <TabsContent value=\"tab3\" className=\"mt-4 p-4 border rounded-md\">\n        <p>This is another available tab.</p>\n      </TabsContent>\n    </Tabs>\n  );\n};\n\nexport const WithDisabledTab: Story = {\n  render: TabsWithDisabledTemplate,\n  args: {\n    value: 'tab1',\n  },\n};\n\n// Orientamento verticale\nconst VerticalTabsTemplate = (args: any) => {\n  const [activeTab, setActiveTab] = useState(args.value || 'overview');\n  \n  return (\n    <div className=\"w-full max-w-4xl\">\n      <Tabs {...args} value={activeTab} onValueChange={setActiveTab} orientation=\"vertical\">\n        <TabsList className=\"flex-col h-auto w-48\">\n          <TabsTrigger value=\"overview\" className=\"w-full justify-start\">Overview</TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"w-full justify-start\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"reports\" className=\"w-full justify-start\">Reports</TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"w-full justify-start\">Notifications</TabsTrigger>\n        </TabsList>\n        <div className=\"flex-1\">\n          <TabsContent value=\"overview\" className=\"p-6 border rounded-md\">\n            <h3 className=\"text-xl font-semibold mb-4\">Overview</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Get a high-level view of your application's performance and key metrics.\n            </p>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"p-4 bg-blue-50 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900\">Total Users</h4>\n                <p className=\"text-2xl font-bold text-blue-600\">1,234</p>\n              </div>\n              <div className=\"p-4 bg-green-50 rounded-lg\">\n                <h4 className=\"font-medium text-green-900\">Revenue</h4>\n                <p className=\"text-2xl font-bold text-green-600\">€12,345</p>\n              </div>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"analytics\" className=\"p-6 border rounded-md\">\n            <h3 className=\"text-xl font-semibold mb-4\">Analytics</h3>\n            <p className=\"text-gray-600\">\n              Detailed analytics and insights about user behavior and application usage.\n            </p>\n          </TabsContent>\n          <TabsContent value=\"reports\" className=\"p-6 border rounded-md\">\n            <h3 className=\"text-xl font-semibold mb-4\">Reports</h3>\n            <p className=\"text-gray-600\">\n              Generate and download comprehensive reports for your data.\n            </p>\n          </TabsContent>\n          <TabsContent value=\"notifications\" className=\"p-6 border rounded-md\">\n            <h3 className=\"text-xl font-semibold mb-4\">Notifications</h3>\n            <p className=\"text-gray-600\">\n              Manage your notification preferences and settings.\n            </p>\n          </TabsContent>\n        </div>\n      </Tabs>\n    </div>\n  );\n};\n\nexport const Vertical: Story = {\n  render: VerticalTabsTemplate,\n  args: {\n    value: 'overview',\n    orientation: 'vertical',\n  },\n};\n\n// Molti tabs\nconst ManyTabsTemplate = (args: any) => {\n  const [activeTab, setActiveTab] = useState(args.value || 'tab1');\n  \n  return (\n    <Tabs {...args} value={activeTab} onValueChange={setActiveTab}>\n      <TabsList>\n        <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n        <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n        <TabsTrigger value=\"tab4\">Tab 4</TabsTrigger>\n        <TabsTrigger value=\"tab5\">Tab 5</TabsTrigger>\n        <TabsTrigger value=\"tab6\">Tab 6</TabsTrigger>\n      </TabsList>\n      {[1, 2, 3, 4, 5, 6].map((num) => (\n        <TabsContent key={num} value={`tab${num}`} className=\"mt-4 p-4 border rounded-md\">\n          <h3 className=\"text-lg font-semibold mb-2\">Content {num}</h3>\n          <p className=\"text-gray-600\">\n            This is the content for tab {num}. Each tab can contain different content.\n          </p>\n        </TabsContent>\n      ))}\n    </Tabs>\n  );\n};\n\nexport const ManyTabs: Story = {\n  render: ManyTabsTemplate,\n  args: {\n    value: 'tab1',\n  },\n};\n\n// Stili personalizzati\nconst CustomStyledTemplate = (args: any) => {\n  const [activeTab, setActiveTab] = useState(args.value || 'design');\n  \n  return (\n    <Tabs {...args} value={activeTab} onValueChange={setActiveTab}>\n      <TabsList className=\"bg-purple-100\">\n        <TabsTrigger \n          value=\"design\" \n          className=\"data-[state=active]:bg-purple-600 data-[state=active]:text-white\"\n        >\n          Design\n        </TabsTrigger>\n        <TabsTrigger \n          value=\"development\" \n          className=\"data-[state=active]:bg-purple-600 data-[state=active]:text-white\"\n        >\n          Development\n        </TabsTrigger>\n        <TabsTrigger \n          value=\"testing\" \n          className=\"data-[state=active]:bg-purple-600 data-[state=active]:text-white\"\n        >\n          Testing\n        </TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"design\" className=\"mt-4 p-4 border-2 border-purple-200 rounded-md\">\n        <h3 className=\"text-lg font-semibold mb-2 text-purple-800\">Design Phase</h3>\n        <p className=\"text-gray-600\">\n          Create wireframes, mockups, and design systems for the project.\n        </p>\n      </TabsContent>\n      <TabsContent value=\"development\" className=\"mt-4 p-4 border-2 border-purple-200 rounded-md\">\n        <h3 className=\"text-lg font-semibold mb-2 text-purple-800\">Development Phase</h3>\n        <p className=\"text-gray-600\">\n          Implement the design using modern web technologies and best practices.\n        </p>\n      </TabsContent>\n      <TabsContent value=\"testing\" className=\"mt-4 p-4 border-2 border-purple-200 rounded-md\">\n        <h3 className=\"text-lg font-semibold mb-2 text-purple-800\">Testing Phase</h3>\n        <p className=\"text-gray-600\">\n          Perform comprehensive testing to ensure quality and reliability.\n        </p>\n      </TabsContent>\n    </Tabs>\n  );\n};\n\nexport const CustomStyled: Story = {\n  render: CustomStyledTemplate,\n  args: {\n    value: 'design',\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Tabs/Tabs.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Tabs/Tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/Tabs/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/ViewModeToggle/ViewModeToggle.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[599,602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[599,602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { ViewModeToggle } from './ViewModeToggle';\nimport { useState } from 'react';\n\nconst meta: Meta<typeof ViewModeToggle> = {\n  title: 'Design System/Molecules/ViewModeToggle',\n  component: ViewModeToggle,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    viewMode: {\n      control: { type: 'radio' },\n      options: ['table', 'grid'],\n    },\n    onChange: { action: 'changed' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Template per gestire lo stato\nconst Template = (args: any) => {\n  const [viewMode, setViewMode] = useState(args.viewMode);\n  \n  return (\n    <ViewModeToggle\n      {...args}\n      viewMode={viewMode}\n      onChange={(mode) => {\n        setViewMode(mode);\n        args.onChange(mode);\n      }}\n    />\n  );\n};\n\nexport const Default: Story = {\n  render: Template,\n  args: {\n    viewMode: 'table',\n  },\n};\n\nexport const GridMode: Story = {\n  render: Template,\n  args: {\n    viewMode: 'grid',\n  },\n};\n\nexport const CustomLabels: Story = {\n  render: Template,\n  args: {\n    viewMode: 'table',\n    tableLabel: 'Lista',\n    gridLabel: 'Griglia',\n  },\n};\n\nexport const WithCustomClass: Story = {\n  render: Template,\n  args: {\n    viewMode: 'table',\n    className: 'border border-gray-300 rounded-lg p-2',\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/ViewModeToggle/ViewModeToggle.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/ViewModeToggle/ViewModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/ViewModeToggle/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/molecules/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/organisms/FilterPanel/FilterPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isFilterActive' is assigned a value but never used.","line":96,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Filter, SortDesc } from 'lucide-react';\nimport { Button } from '../../atoms/Button';\nimport { cn } from '../../utils';\n\nexport interface FilterOption {\n  label: string;\n  value: string;\n  options?: { label: string; value: string }[];\n}\n\nexport interface SortOption {\n  label: string;\n  value: string;\n  direction?: 'asc' | 'desc';\n}\n\nexport interface FilterPanelProps {\n  /** Opzioni di filtro disponibili */\n  filterOptions?: FilterOption[];\n  /** Callback chiamato quando i filtri vengono applicati */\n  onFilterChange?: (filters: Record<string, string>) => void;\n  /** Opzioni di ordinamento disponibili */\n  sortOptions?: SortOption[];\n  /** Callback chiamato quando l'ordinamento cambia */\n  onSortChange?: (sort: { field: string, direction: 'asc' | 'desc' }) => void;\n  /** Classi personalizzate aggiuntive */\n  className?: string;\n  /** Filtri attivi */\n  activeFilters?: Record<string, string>;\n  /** Ordinamento attivo */\n  activeSort?: { field: string, direction: 'asc' | 'desc' };\n}\n\nexport const FilterPanel: React.FC<FilterPanelProps> = ({\n  filterOptions = [],\n  onFilterChange,\n  sortOptions = [],\n  onSortChange,\n  className = '',\n  activeFilters = {},\n  activeSort,\n}) => {\n  const [showFilterPopup, setShowFilterPopup] = useState(false);\n  const [showSortPopup, setShowSortPopup] = useState(false);\n  const [tempFilters, setTempFilters] = useState<Record<string, string>>(activeFilters);\n  \n  // Conta i filtri attivi\n  const activeFilterCount = Object.values(activeFilters).filter(Boolean).length;\n  \n  // Gestisce il cambio di un filtro\n  const handleFilterChange = (field: string, value: string) => {\n    setTempFilters(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n  \n  // Applica i filtri\n  const applyFilters = () => {\n    if (onFilterChange) {\n      onFilterChange(tempFilters);\n    }\n    setShowFilterPopup(false);\n  };\n  \n  // Resetta i filtri\n  const resetFilters = () => {\n    const emptyFilters = filterOptions.reduce((acc, option) => {\n      acc[option.value] = '';\n      return acc;\n    }, {} as Record<string, string>);\n    \n    setTempFilters(emptyFilters);\n    if (onFilterChange) {\n      onFilterChange(emptyFilters);\n    }\n  };\n  \n  // Gestisce il cambio di ordinamento\n  const handleSortChange = (field: string) => {\n    if (!onSortChange) return;\n    \n    let direction: 'asc' | 'desc' = 'asc';\n    \n    // Se il campo è già selezionato, inverti la direzione\n    if (activeSort && activeSort.field === field) {\n      direction = activeSort.direction === 'asc' ? 'desc' : 'asc';\n    }\n    \n    onSortChange({ field, direction });\n    setShowSortPopup(false);\n  };\n  \n  // Determina se un filtro è attivo\n  const isFilterActive = (field: string, value: string) => {\n    return activeFilters[field] === value;\n  };\n  \n  // Determina se un ordinamento è attivo\n  const isSortActive = (field: string) => {\n    return activeSort?.field === field;\n  };\n  \n  // Per garantire che i filtri funzionino anche senza opzioni\n  const hasFilterFunctionality = filterOptions.length > 0 && onFilterChange;\n  const hasSortFunctionality = sortOptions.length > 0 && onSortChange;\n  \n  return (\n    <div className={cn('flex items-center gap-2', className)}>\n      {/* Pulsante di filtro - sempre mostrato */}\n      <div className=\"relative\">\n        <Button\n          variant={activeFilterCount > 0 ? 'primary' : 'outline'}\n          leftIcon={<Filter className=\"h-4 w-4\" />}\n          onClick={() => {\n            setShowFilterPopup(!showFilterPopup);\n            setShowSortPopup(false);\n          }}\n          className=\"relative h-10\"\n        >\n          Filtri\n          {activeFilterCount > 0 && (\n            <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n              {activeFilterCount}\n            </span>\n          )}\n        </Button>\n        \n        {/* Popup di filtro - mostrato solo se ci sono opzioni di filtro */}\n        {showFilterPopup && hasFilterFunctionality && (\n          <div className=\"absolute right-0 mt-2 w-72 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50\">\n            <div className=\"p-4 space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-sm font-medium\">Filtri</h3>\n                <button \n                  onClick={resetFilters}\n                  className=\"text-xs text-blue-600 hover:text-blue-800\"\n                >\n                  Reimposta\n                </button>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {filterOptions.map((filter) => (\n                  <div key={filter.value} className=\"space-y-2\">\n                    <label className=\"block text-sm font-medium text-gray-700\">\n                      {filter.label}\n                    </label>\n                    \n                    {filter.options ? (\n                      <select\n                        value={tempFilters[filter.value] || ''}\n                        onChange={(e) => handleFilterChange(filter.value, e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        <option value=\"\">Tutti</option>\n                        {filter.options.map((option) => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                      </select>\n                    ) : (\n                      <input\n                        type=\"text\"\n                        value={tempFilters[filter.value] || ''}\n                        onChange={(e) => handleFilterChange(filter.value, e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        placeholder={`Cerca per ${filter.label.toLowerCase()}`}\n                      />\n                    )}\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowFilterPopup(false)}\n                  size=\"sm\"\n                >\n                  Annulla\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  onClick={applyFilters}\n                  size=\"sm\"\n                >\n                  Applica\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Pulsante di ordinamento - sempre mostrato */}\n      <div className=\"relative\">\n        <Button\n          variant={activeSort ? 'primary' : 'outline'}\n          leftIcon={<SortDesc className=\"h-4 w-4\" />}\n          onClick={() => {\n            setShowSortPopup(!showSortPopup);\n            setShowFilterPopup(false);\n          }}\n          className=\"h-10\"\n        >\n          Ordina\n        </Button>\n        \n        {/* Popup di ordinamento - mostrato solo se ci sono opzioni di ordinamento */}\n        {showSortPopup && hasSortFunctionality && (\n          <div className=\"absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50\">\n            <div className=\"p-2\">\n              <div className=\"space-y-1\">\n                {sortOptions.map((option) => (\n                  <button\n                    key={option.value}\n                    onClick={() => handleSortChange(option.value)}\n                    className={cn(\n                      'w-full text-left px-3 py-2 rounded-md text-sm transition-colors',\n                      isSortActive(option.value)\n                        ? 'bg-blue-50 text-blue-700'\n                        : 'hover:bg-gray-50'\n                    )}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <span>{option.label}</span>\n                      {isSortActive(option.value) && (\n                        <span className=\"text-xs\">\n                          {activeSort?.direction === 'asc' ? '↑' : '↓'}\n                        </span>\n                      )}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FilterPanel;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/organisms/FilterPanel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/organisms/HeaderPanel/HeaderPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'genderPrefix' is assigned a value but never used.","line":52,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  Download,\n  Plus,\n  Upload\n} from 'lucide-react';\nimport { Button } from '../../atoms/Button';\nimport { Dropdown, DropdownAction } from '../../molecules/Dropdown';\nimport { ViewModeToggle } from '../../molecules/ViewModeToggle';\nimport { cn } from '../../utils';\n\nexport interface HeaderPanelProps {\n  /** Etichetta per il tipo di entità (es. \"corso\", \"azienda\", \"formatore\") */\n  entityType: string;\n  /** Genere dell'entità: 'm' per maschile, 'f' per femminile */\n  entityGender?: 'm' | 'f';\n  /** Modalità di visualizzazione attuale */\n  viewMode?: 'table' | 'grid';\n  /** Funzione chiamata quando la modalità di visualizzazione cambia */\n  onViewModeChange?: (mode: 'table' | 'grid') => void;\n  /** Se mostrare il toggle della vista */\n  showViewToggle?: boolean;\n  /** Funzione chiamata quando il pulsante Aggiungi viene cliccato */\n  onAdd?: () => void;\n  /** Funzione chiamata quando il pulsante Importa viene cliccato */\n  onImport?: () => void;\n  /** Funzione chiamata quando il pulsante Download Template viene cliccato */\n  onDownloadTemplate?: () => void;\n  /** Funzione chiamata quando il pulsante Download CSV viene cliccato */\n  onDownloadCsv?: () => void;\n  /** Classi personalizzate aggiuntive */\n  className?: string;\n}\n\n/**\n * Componente HeaderPanel per i controlli principali nell'header della pagina.\n * Include il dropdown per aggiungere elementi con opzioni di importazione e download.\n */\nexport const HeaderPanel: React.FC<HeaderPanelProps> = ({\n  entityType,\n  entityGender = 'm',\n  viewMode,\n  onViewModeChange,\n  showViewToggle = true,\n  onAdd,\n  onImport,\n  onDownloadTemplate,\n  onDownloadCsv,\n  className = '',\n}) => {\n  // Determina il prefisso corretto in base al genere\n  const genderPrefix = entityGender === 'f' ? 'Nuova' : 'Nuovo';\n  \n  // Capitalizza la prima lettera del tipo di entità\n  const entityTypeCapitalized = entityType && typeof entityType === 'string' ? entityType.charAt(0).toUpperCase() + entityType.slice(1) : 'Elemento';\n  \n  // Opzioni per il dropdown di aggiunta\n  const addOptions: DropdownAction[] = [];\n  \n  // Prima opzione: Aggiungi singolo elemento\n  if (onAdd) {\n    addOptions.push({\n      label: `Aggiungi ${entityType || 'elemento'} singolo`,\n      icon: <Plus className=\"h-4 w-4\" />,\n      onClick: onAdd,\n      variant: 'default',\n    });\n  }\n  \n  // Aggiunge l'opzione di importazione se è disponibile\n  if (onImport) {\n    addOptions.push({\n      label: `Importa da CSV`,\n      icon: <Upload className=\"h-4 w-4\" />,\n      onClick: onImport,\n      variant: 'default',\n    });\n  }\n  \n  // Aggiunge l'opzione di download template se è disponibile\n  if (onDownloadTemplate || onDownloadCsv) {\n    addOptions.push({\n      label: `Scarica template CSV`,\n      icon: <Download className=\"h-4 w-4\" />,\n      onClick: onDownloadTemplate || onDownloadCsv || (() => {}),\n      variant: 'default',\n    });\n  }\n\n  // Stile comune per tutti i pulsanti\n  const commonButtonStyle = 'h-10';\n    \n  return (\n    <div className={cn('flex flex-wrap items-center justify-between gap-3', className)}>\n      {/* Toggle Vista (posizionato a sinistra) */}\n      <div className=\"flex items-center gap-3 order-first\">\n        {showViewToggle && viewMode && onViewModeChange && (\n          <ViewModeToggle\n            viewMode={viewMode}\n            onChange={onViewModeChange}\n            gridLabel=\"Griglia\"\n            tableLabel=\"Tabella\"\n            className={cn(commonButtonStyle)}\n          />\n        )}\n      </div>\n      \n      {/* Dropdown Aggiungi con icona Plus e freccia */}\n      <div className=\"flex items-center gap-3 order-last\">\n        <Dropdown\n          variant=\"primary\"\n          label={`Aggiungi ${entityTypeCapitalized}`}\n          icon={<Plus className=\"h-4 w-4\" />}\n          showArrow={true}\n          pill={true}\n          actions={addOptions}\n          className={cn(commonButtonStyle)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default HeaderPanel;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/organisms/HeaderPanel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/organisms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/themes/AreaThemeProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":102,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":102,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":111,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":111,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":117,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":117,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Area Theme Provider\n * Gestisce automaticamente il cambio di tema tra frontend pubblico e privato\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { publicTheme, publicThemeCSSVars, privateTheme, privateThemeCSSVars } from './index';\n\ntype AreaType = 'public' | 'private';\n\ninterface AreaThemeContextType {\n  area: AreaType;\n  theme: typeof publicTheme | typeof privateTheme;\n  cssVars: typeof publicThemeCSSVars | typeof privateThemeCSSVars;\n}\n\nconst AreaThemeContext = createContext<AreaThemeContextType | undefined>(undefined);\n\ninterface AreaThemeProviderProps {\n  children: React.ReactNode;\n}\n\n// Route che appartengono all'area privata\nconst PRIVATE_ROUTES = [\n  '/dashboard',\n  '/companies',\n  '/courses',\n  '/persons',\n  '/employees',\n  '/trainers',\n  '/schedules',\n  '/settings',\n  '/tenants',\n  '/quotes-and-invoices',\n  '/documents-corsi',\n  '/gdpr',\n  '/admin',\n  '/forms',\n  '/demo'\n];\n\n// Funzione per determinare se una route è privata\nconst isPrivateRoute = (pathname: string): boolean => {\n  return PRIVATE_ROUTES.some(route => pathname.startsWith(route));\n};\n\nexport const AreaThemeProvider: React.FC<AreaThemeProviderProps> = ({ children }) => {\n  const location = useLocation();\n  const [area, setArea] = useState<AreaType>('public');\n\n  // Determina l'area basata sulla route corrente\n  useEffect(() => {\n    const newArea = isPrivateRoute(location.pathname) ? 'private' : 'public';\n    setArea(newArea);\n  }, [location.pathname]);\n\n  // Seleziona tema e CSS vars basati sull'area\n  const theme = area === 'private' ? privateTheme : publicTheme;\n  const cssVars = area === 'private' ? privateThemeCSSVars : publicThemeCSSVars;\n\n  // Applica le CSS variables al documento\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Rimuovi le variabili precedenti\n    Object.keys(publicThemeCSSVars).forEach(key => {\n      root.style.removeProperty(key);\n    });\n    Object.keys(privateThemeCSSVars).forEach(key => {\n      root.style.removeProperty(key);\n    });\n    \n    // Applica le nuove variabili\n    Object.entries(cssVars).forEach(([key, value]) => {\n      root.style.setProperty(key, String(value));\n    });\n    \n    // Aggiungi una classe CSS per identificare l'area corrente\n    root.classList.remove('area-public', 'area-private');\n    root.classList.add(`area-${area}`);\n    \n    // Aggiungi attributo data per debugging\n    root.setAttribute('data-theme-area', area);\n    \n  }, [area, cssVars]);\n\n  const contextValue: AreaThemeContextType = {\n    area,\n    theme,\n    cssVars,\n  };\n\n  return (\n    <AreaThemeContext.Provider value={contextValue}>\n      {children}\n    </AreaThemeContext.Provider>\n  );\n};\n\n// Hook per utilizzare il tema dell'area\nexport const useAreaTheme = (): AreaThemeContextType => {\n  const context = useContext(AreaThemeContext);\n  if (context === undefined) {\n    throw new Error('useAreaTheme must be used within an AreaThemeProvider');\n  }\n  return context;\n};\n\n// Hook per verificare se siamo nell'area privata\nexport const useIsPrivateArea = (): boolean => {\n  const { area } = useAreaTheme();\n  return area === 'private';\n};\n\n// Hook per verificare se siamo nell'area pubblica\nexport const useIsPublicArea = (): boolean => {\n  const { area } = useAreaTheme();\n  return area === 'public';\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/themes/ThemeProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":23,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":23,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Theme Provider\n * Week 8 Implementation - Component Library\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { designTokens } from '../tokens';\n\n// Theme types\nexport type ThemeMode = 'light' | 'dark' | 'system';\n\nexport interface ThemeContextType {\n  mode: ThemeMode;\n  setMode: (mode: ThemeMode) => void;\n  isDark: boolean;\n  toggleTheme: () => void;\n}\n\n// Theme context\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Hook to use theme\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Theme provider props\nexport interface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultMode?: ThemeMode;\n  storageKey?: string;\n}\n\n// Get system theme preference\nconst getSystemTheme = (): 'light' | 'dark' => {\n  if (typeof window === 'undefined') return 'light';\n  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};\n\n// Apply CSS variables to document\nconst applyCSSVariables = (variables: Record<string, string>) => {\n  if (typeof document === 'undefined') return;\n  \n  const root = document.documentElement;\n  Object.entries(variables).forEach(([key, value]) => {\n    root.style.setProperty(key, value);\n  });\n};\n\n// Theme provider component\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({\n  children,\n  defaultMode = 'system',\n  storageKey = 'theme-mode',\n}) => {\n  const [mode, setModeState] = useState<ThemeMode>(defaultMode);\n  const [systemTheme, setSystemTheme] = useState<'light' | 'dark'>('light');\n\n  // Determine if current theme is dark\n  const isDark = mode === 'dark' || (mode === 'system' && systemTheme === 'dark');\n\n  // Load theme from localStorage on mount\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    const stored = localStorage.getItem(storageKey) as ThemeMode;\n    if (stored && ['light', 'dark', 'system'].includes(stored)) {\n      setModeState(stored);\n    }\n    \n    // Set initial system theme\n    setSystemTheme(getSystemTheme());\n  }, [storageKey]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      setSystemTheme(e.matches ? 'dark' : 'light');\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Apply theme changes\n  useEffect(() => {\n    if (typeof document === 'undefined') return;\n    \n    const root = document.documentElement;\n    \n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n    \n    // Add current theme class\n    root.classList.add(isDark ? 'dark' : 'light');\n    \n    // Apply design tokens as CSS variables\n    applyCSSVariables(designTokens);\n    \n    // Set theme-color meta tag for mobile browsers\n    const themeColorMeta = document.querySelector('meta[name=\"theme-color\"]');\n    if (themeColorMeta) {\n      themeColorMeta.setAttribute('content', isDark ? '#0f172a' : '#ffffff');\n    }\n  }, [isDark]);\n\n  // Set theme mode\n  const setMode = (newMode: ThemeMode) => {\n    setModeState(newMode);\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(storageKey, newMode);\n    }\n  };\n\n  // Toggle between light and dark\n  const toggleTheme = () => {\n    if (mode === 'system') {\n      setMode(systemTheme === 'dark' ? 'light' : 'dark');\n    } else {\n      setMode(mode === 'dark' ? 'light' : 'dark');\n    }\n  };\n\n  const value: ThemeContextType = {\n    mode,\n    setMode,\n    isDark,\n    toggleTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/themes/dark.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/themes/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/themes/light.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/themes/private.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/themes/public.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/tokens/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/tokens/colors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2858,2861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2858,2861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Color Tokens\n * Week 8 Implementation - Component Library\n */\n\nexport const colors = {\n  // Primary Brand Colors\n  primary: {\n    50: '#eff6ff',\n    100: '#dbeafe',\n    200: '#bfdbfe',\n    300: '#93c5fd',\n    400: '#60a5fa',\n    500: '#3b82f6', // Main brand color\n    600: '#2563eb',\n    700: '#1d4ed8',\n    800: '#1e40af',\n    900: '#1e3a8a',\n    950: '#172554',\n  },\n\n  // Secondary Colors\n  secondary: {\n    50: '#f8fafc',\n    100: '#f1f5f9',\n    200: '#e2e8f0',\n    300: '#cbd5e1',\n    400: '#94a3b8',\n    500: '#64748b',\n    600: '#475569',\n    700: '#334155',\n    800: '#1e293b',\n    900: '#0f172a',\n    950: '#020617',\n  },\n\n  // Semantic Colors\n  semantic: {\n    success: {\n      50: '#f0fdf4',\n      100: '#dcfce7',\n      200: '#bbf7d0',\n      300: '#86efac',\n      400: '#4ade80',\n      500: '#22c55e', // Main success\n      600: '#16a34a',\n      700: '#15803d',\n      800: '#166534',\n      900: '#14532d',\n    },\n    warning: {\n      50: '#fffbeb',\n      100: '#fef3c7',\n      200: '#fde68a',\n      300: '#fcd34d',\n      400: '#fbbf24',\n      500: '#f59e0b', // Main warning\n      600: '#d97706',\n      700: '#b45309',\n      800: '#92400e',\n      900: '#78350f',\n    },\n    error: {\n      50: '#fef2f2',\n      100: '#fee2e2',\n      200: '#fecaca',\n      300: '#fca5a5',\n      400: '#f87171',\n      500: '#ef4444', // Main error\n      600: '#dc2626',\n      700: '#b91c1c',\n      800: '#991b1b',\n      900: '#7f1d1d',\n    },\n    info: {\n      50: '#eff6ff',\n      100: '#dbeafe',\n      200: '#bfdbfe',\n      300: '#93c5fd',\n      400: '#60a5fa',\n      500: '#3b82f6', // Main info (same as primary)\n      600: '#2563eb',\n      700: '#1d4ed8',\n      800: '#1e40af',\n      900: '#1e3a8a',\n    },\n  },\n\n  // Neutral Grays\n  neutral: {\n    50: '#fafafa',\n    100: '#f5f5f5',\n    200: '#e5e5e5',\n    300: '#d4d4d4',\n    400: '#a3a3a3',\n    500: '#737373',\n    600: '#525252',\n    700: '#404040',\n    800: '#262626',\n    900: '#171717',\n    950: '#0a0a0a',\n  },\n\n  // Background Colors\n  background: {\n    primary: '#ffffff',\n    secondary: '#f8fafc',\n    tertiary: '#f1f5f9',\n    inverse: '#0f172a',\n  },\n\n  // Text Colors\n  text: {\n    primary: '#0f172a',\n    secondary: '#475569',\n    tertiary: '#64748b',\n    inverse: '#ffffff',\n    disabled: '#94a3b8',\n  },\n\n  // Border Colors\n  border: {\n    primary: '#e2e8f0',\n    secondary: '#cbd5e1',\n    focus: '#3b82f6',\n    error: '#ef4444',\n    success: '#22c55e',\n  },\n\n  // Interactive States\n  interactive: {\n    hover: '#f1f5f9',\n    active: '#e2e8f0',\n    disabled: '#f8fafc',\n    focus: '#dbeafe',\n  },\n} as const;\n\n// Type for color keys\nexport type ColorToken = keyof typeof colors;\nexport type ColorShade = keyof typeof colors.primary;\n\n// Helper function to get color value\nexport const getColor = (token: string): string => {\n  const keys = token.split('.');\n  let value: any = colors;\n  \n  for (const key of keys) {\n    value = value[key];\n    if (value === undefined) {\n      console.warn(`Color token '${token}' not found`);\n      return '#000000';\n    }\n  }\n  \n  return value;\n};\n\n// CSS Custom Properties for colors\nexport const colorCSSVars = {\n  // Primary\n  '--color-primary-50': colors.primary[50],\n  '--color-primary-100': colors.primary[100],\n  '--color-primary-200': colors.primary[200],\n  '--color-primary-300': colors.primary[300],\n  '--color-primary-400': colors.primary[400],\n  '--color-primary-500': colors.primary[500],\n  '--color-primary-600': colors.primary[600],\n  '--color-primary-700': colors.primary[700],\n  '--color-primary-800': colors.primary[800],\n  '--color-primary-900': colors.primary[900],\n  \n  // Semantic\n  '--color-success': colors.semantic.success[500],\n  '--color-warning': colors.semantic.warning[500],\n  '--color-error': colors.semantic.error[500],\n  '--color-info': colors.semantic.info[500],\n  \n  // Background\n  '--color-bg-primary': colors.background.primary,\n  '--color-bg-secondary': colors.background.secondary,\n  '--color-bg-tertiary': colors.background.tertiary,\n  \n  // Text\n  '--color-text-primary': colors.text.primary,\n  '--color-text-secondary': colors.text.secondary,\n  '--color-text-tertiary': colors.text.tertiary,\n  \n  // Border\n  '--color-border-primary': colors.border.primary,\n  '--color-border-secondary': colors.border.secondary,\n  '--color-border-focus': colors.border.focus,\n} as const;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/tokens/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/tokens/spacing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/tokens/typography.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3981,3984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3981,3984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4036,4039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4036,4039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System - Typography Tokens\n * Week 8 Implementation - Component Library\n */\n\nexport const typography = {\n  // Font Families\n  fontFamily: {\n    sans: ['Inter', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif'],\n    mono: ['JetBrains Mono', 'Menlo', 'Monaco', 'Consolas', 'Liberation Mono', 'Courier New', 'monospace'],\n    serif: ['Georgia', 'Cambria', 'Times New Roman', 'Times', 'serif'],\n  },\n\n  // Font Sizes\n  fontSize: {\n    xs: '0.75rem',    // 12px\n    sm: '0.875rem',   // 14px\n    base: '1rem',     // 16px\n    lg: '1.125rem',   // 18px\n    xl: '1.25rem',    // 20px\n    '2xl': '1.5rem',  // 24px\n    '3xl': '1.875rem', // 30px\n    '4xl': '2.25rem', // 36px\n    '5xl': '3rem',    // 48px\n    '6xl': '3.75rem', // 60px\n    '7xl': '4.5rem',  // 72px\n    '8xl': '6rem',    // 96px\n    '9xl': '8rem',    // 128px\n  },\n\n  // Font Weights\n  fontWeight: {\n    thin: '100',\n    extralight: '200',\n    light: '300',\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n\n  // Line Heights\n  lineHeight: {\n    none: '1',\n    tight: '1.25',\n    snug: '1.375',\n    normal: '1.5',\n    relaxed: '1.625',\n    loose: '2',\n  },\n\n  // Letter Spacing\n  letterSpacing: {\n    tighter: '-0.05em',\n    tight: '-0.025em',\n    normal: '0em',\n    wide: '0.025em',\n    wider: '0.05em',\n    widest: '0.1em',\n  },\n\n  // Text Styles (Semantic combinations)\n  textStyles: {\n    // Headings\n    h1: {\n      fontSize: '3rem',\n      fontWeight: '700',\n      lineHeight: '1.25',\n      letterSpacing: '-0.025em',\n    },\n    h2: {\n      fontSize: '2.25rem',\n      fontWeight: '600',\n      lineHeight: '1.25',\n      letterSpacing: '-0.025em',\n    },\n    h3: {\n      fontSize: '1.875rem',\n      fontWeight: '600',\n      lineHeight: '1.375',\n      letterSpacing: '-0.025em',\n    },\n    h4: {\n      fontSize: '1.5rem',\n      fontWeight: '600',\n      lineHeight: '1.375',\n    },\n    h5: {\n      fontSize: '1.25rem',\n      fontWeight: '600',\n      lineHeight: '1.5',\n    },\n    h6: {\n      fontSize: '1.125rem',\n      fontWeight: '600',\n      lineHeight: '1.5',\n    },\n\n    // Body Text\n    bodyLarge: {\n      fontSize: '1.125rem',\n      fontWeight: '400',\n      lineHeight: '1.625',\n    },\n    body: {\n      fontSize: '1rem',\n      fontWeight: '400',\n      lineHeight: '1.5',\n    },\n    bodySmall: {\n      fontSize: '0.875rem',\n      fontWeight: '400',\n      lineHeight: '1.5',\n    },\n\n    // UI Text\n    label: {\n      fontSize: '0.875rem',\n      fontWeight: '500',\n      lineHeight: '1.25',\n    },\n    caption: {\n      fontSize: '0.75rem',\n      fontWeight: '400',\n      lineHeight: '1.25',\n    },\n    overline: {\n      fontSize: '0.75rem',\n      fontWeight: '600',\n      lineHeight: '1.25',\n      letterSpacing: '0.05em',\n      textTransform: 'uppercase' as const,\n    },\n\n    // Interactive Elements\n    button: {\n      fontSize: '0.875rem',\n      fontWeight: '500',\n      lineHeight: '1.25',\n    },\n    buttonLarge: {\n      fontSize: '1rem',\n      fontWeight: '500',\n      lineHeight: '1.25',\n    },\n    buttonSmall: {\n      fontSize: '0.75rem',\n      fontWeight: '500',\n      lineHeight: '1.25',\n    },\n\n    // Code\n    code: {\n      fontSize: '0.875rem',\n      fontWeight: '400',\n      lineHeight: '1.5',\n      fontFamily: ['JetBrains Mono', 'monospace'],\n    },\n    codeInline: {\n      fontSize: '0.875rem',\n      fontWeight: '400',\n      fontFamily: ['JetBrains Mono', 'monospace'],\n    },\n  },\n} as const;\n\n// Type definitions\nexport type FontFamily = keyof typeof typography.fontFamily;\nexport type FontSize = keyof typeof typography.fontSize;\nexport type FontWeight = keyof typeof typography.fontWeight;\nexport type LineHeight = keyof typeof typography.lineHeight;\nexport type LetterSpacing = keyof typeof typography.letterSpacing;\nexport type TextStyle = keyof typeof typography.textStyles;\n\n// Helper function to get typography value\nexport const getTypography = (token: string): any => {\n  const keys = token.split('.');\n  let value: any = typography;\n  \n  for (const key of keys) {\n    value = value[key];\n    if (value === undefined) {\n      console.warn(`Typography token '${token}' not found`);\n      return undefined;\n    }\n  }\n  \n  return value;\n};\n\n// CSS Custom Properties for typography\nexport const typographyCSSVars = {\n  // Font Families\n  '--font-sans': typography.fontFamily.sans.join(', '),\n  '--font-mono': typography.fontFamily.mono.join(', '),\n  '--font-serif': typography.fontFamily.serif.join(', '),\n  \n  // Font Sizes\n  '--text-xs': typography.fontSize.xs,\n  '--text-sm': typography.fontSize.sm,\n  '--text-base': typography.fontSize.base,\n  '--text-lg': typography.fontSize.lg,\n  '--text-xl': typography.fontSize.xl,\n  '--text-2xl': typography.fontSize['2xl'],\n  '--text-3xl': typography.fontSize['3xl'],\n  '--text-4xl': typography.fontSize['4xl'],\n  \n  // Font Weights\n  '--font-light': typography.fontWeight.light,\n  '--font-normal': typography.fontWeight.normal,\n  '--font-medium': typography.fontWeight.medium,\n  '--font-semibold': typography.fontWeight.semibold,\n  '--font-bold': typography.fontWeight.bold,\n  \n  // Line Heights\n  '--leading-tight': typography.lineHeight.tight,\n  '--leading-normal': typography.lineHeight.normal,\n  '--leading-relaxed': typography.lineHeight.relaxed,\n} as const;\n\n// Utility function to apply text style\nexport const applyTextStyle = (style: TextStyle) => {\n  const textStyle = typography.textStyles[style];\n  if (!textStyle) {\n    console.warn(`Text style '${style}' not found`);\n    return {};\n  }\n  return textStyle;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/utils/color-contrast-audit.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3393,3396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3393,3396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3777,3780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3777,3780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Color Contrast Audit Tool\n * Verifica i contrasti dei colori secondo le linee guida WCAG 2.1\n */\n\nimport { publicTheme } from '../themes/public';\nimport { privateTheme } from '../themes/private';\n\n// Funzione per convertire hex in RGB\nfunction hexToRgb(hex: string): { r: number; g: number; b: number } | null {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\n// Funzione per calcolare la luminanza relativa\nfunction getLuminance(r: number, g: number, b: number): number {\n  const [rs, gs, bs] = [r, g, b].map(c => {\n    c = c / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  });\n  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;\n}\n\n// Funzione per calcolare il rapporto di contrasto\nfunction getContrastRatio(color1: string, color2: string): number {\n  const rgb1 = hexToRgb(color1);\n  const rgb2 = hexToRgb(color2);\n  \n  if (!rgb1 || !rgb2) return 0;\n  \n  const lum1 = getLuminance(rgb1.r, rgb1.g, rgb1.b);\n  const lum2 = getLuminance(rgb2.r, rgb2.g, rgb2.b);\n  \n  const brightest = Math.max(lum1, lum2);\n  const darkest = Math.min(lum1, lum2);\n  \n  return (brightest + 0.05) / (darkest + 0.05);\n}\n\n// Livelli di conformità WCAG\nexport const WCAG_LEVELS = {\n  AA_NORMAL: 4.5,    // Testo normale AA\n  AA_LARGE: 3,       // Testo grande AA\n  AAA_NORMAL: 7,     // Testo normale AAA\n  AAA_LARGE: 4.5,    // Testo grande AAA\n} as const;\n\n// Interfaccia per i risultati dell'audit\nexport interface ContrastAuditResult {\n  combination: string;\n  foreground: string;\n  background: string;\n  ratio: number;\n  wcagAA: boolean;\n  wcagAAA: boolean;\n  wcagAALarge: boolean;\n  wcagAAALarge: boolean;\n  recommendation?: string;\n}\n\n// Combinazioni critiche da testare\nconst CRITICAL_COMBINATIONS = [\n  // Testo su sfondi\n  { name: 'Testo primario su sfondo primario', fg: 'text.primary', bg: 'background.primary' },\n  { name: 'Testo secondario su sfondo primario', fg: 'text.secondary', bg: 'background.primary' },\n  { name: 'Testo terziario su sfondo primario', fg: 'text.tertiary', bg: 'background.primary' },\n  { name: 'Testo primario su sfondo secondario', fg: 'text.primary', bg: 'background.secondary' },\n  { name: 'Testo inverso su sfondo inverso', fg: 'text.inverse', bg: 'background.inverse' },\n  \n  // Pulsanti e elementi interattivi\n  { name: 'Testo bianco su primario 500', fg: '#ffffff', bg: 'primary.500' },\n  { name: 'Testo bianco su primario 600', fg: '#ffffff', bg: 'primary.600' },\n  { name: 'Testo bianco su primario 700', fg: '#ffffff', bg: 'primary.700' },\n  { name: 'Testo scuro su primario 100', fg: 'text.primary', bg: 'primary.100' },\n  { name: 'Testo scuro su primario 200', fg: 'text.primary', bg: 'primary.200' },\n  \n  // Stati semantici\n  { name: 'Testo bianco su successo', fg: '#ffffff', bg: 'semantic.success.500' },\n  { name: 'Testo bianco su errore', fg: '#ffffff', bg: 'semantic.error.500' },\n  { name: 'Testo bianco su warning', fg: '#ffffff', bg: 'semantic.warning.500' },\n  \n  // Bordi e focus\n  { name: 'Bordo focus su sfondo primario', fg: 'border.focus', bg: 'background.primary' },\n  { name: 'Bordo primario su sfondo primario', fg: 'border.primary', bg: 'background.primary' },\n];\n\n// Funzione per ottenere il valore del colore dal tema\nfunction getColorValue(theme: any, path: string): string {\n  if (path.startsWith('#')) return path;\n  \n  const parts = path.split('.');\n  let value = theme.colors;\n  \n  for (const part of parts) {\n    value = value[part];\n    if (!value) return '#000000';\n  }\n  \n  return typeof value === 'string' ? value : '#000000';\n}\n\n// Funzione principale per l'audit dei contrasti\nexport function auditColorContrasts(theme: any, themeName: string): ContrastAuditResult[] {\n  const results: ContrastAuditResult[] = [];\n  \n  for (const combo of CRITICAL_COMBINATIONS) {\n    const foreground = getColorValue(theme, combo.fg);\n    const background = getColorValue(theme, combo.bg);\n    const ratio = getContrastRatio(foreground, background);\n    \n    const wcagAA = ratio >= WCAG_LEVELS.AA_NORMAL;\n    const wcagAAA = ratio >= WCAG_LEVELS.AAA_NORMAL;\n    const wcagAALarge = ratio >= WCAG_LEVELS.AA_LARGE;\n    const wcagAAALarge = ratio >= WCAG_LEVELS.AAA_LARGE;\n    \n    let recommendation = '';\n    if (!wcagAA) {\n      recommendation = `⚠️ CRITICO: Contrasto insufficiente (${ratio.toFixed(2)}). Minimo richiesto: ${WCAG_LEVELS.AA_NORMAL}`;\n    } else if (!wcagAAA) {\n      recommendation = `⚡ Buono per AA, migliorabile per AAA (${ratio.toFixed(2)}). Target AAA: ${WCAG_LEVELS.AAA_NORMAL}`;\n    } else {\n      recommendation = `✅ Eccellente conformità WCAG AAA (${ratio.toFixed(2)})`;\n    }\n    \n    results.push({\n      combination: `${themeName}: ${combo.name}`,\n      foreground,\n      background,\n      ratio: Math.round(ratio * 100) / 100,\n      wcagAA,\n      wcagAAA,\n      wcagAALarge,\n      wcagAAALarge,\n      recommendation,\n    });\n  }\n  \n  return results;\n}\n\n// Funzione per generare il report completo\nexport function generateContrastReport(): {\n  publicResults: ContrastAuditResult[];\n  privateResults: ContrastAuditResult[];\n  summary: {\n    publicIssues: number;\n    privateIssues: number;\n    totalCombinations: number;\n    overallCompliance: number;\n  };\n} {\n  const publicResults = auditColorContrasts(publicTheme, 'Tema Pubblico');\n  const privateResults = auditColorContrasts(privateTheme, 'Tema Privato');\n  \n  const publicIssues = publicResults.filter(r => !r.wcagAA).length;\n  const privateIssues = privateResults.filter(r => !r.wcagAA).length;\n  const totalCombinations = publicResults.length + privateResults.length;\n  const totalIssues = publicIssues + privateIssues;\n  const overallCompliance = ((totalCombinations - totalIssues) / totalCombinations) * 100;\n  \n  return {\n    publicResults,\n    privateResults,\n    summary: {\n      publicIssues,\n      privateIssues,\n      totalCombinations,\n      overallCompliance: Math.round(overallCompliance * 100) / 100,\n    },\n  };\n}\n\n// Funzione per suggerimenti di miglioramento\nexport function generateImprovementSuggestions(results: ContrastAuditResult[]): string[] {\n  const suggestions: string[] = [];\n  const issues = results.filter(r => !r.wcagAA);\n  \n  if (issues.length === 0) {\n    suggestions.push('🎉 Tutti i contrasti rispettano le linee guida WCAG AA!');\n    return suggestions;\n  }\n  \n  suggestions.push(`📊 Trovati ${issues.length} problemi di contrasto da risolvere:`);\n  suggestions.push('');\n  \n  for (const issue of issues) {\n    suggestions.push(`• ${issue.combination}`);\n    suggestions.push(`  Contrasto attuale: ${issue.ratio} (minimo: ${WCAG_LEVELS.AA_NORMAL})`);\n    suggestions.push(`  Colori: ${issue.foreground} su ${issue.background}`);\n    suggestions.push(`  ${issue.recommendation}`);\n    suggestions.push('');\n  }\n  \n  suggestions.push('🔧 Raccomandazioni generali:');\n  suggestions.push('• Utilizzare colori più scuri per il testo su sfondi chiari');\n  suggestions.push('• Utilizzare colori più chiari per il testo su sfondi scuri');\n  suggestions.push('• Testare sempre i contrasti con strumenti automatici');\n  suggestions.push('• Considerare utenti con disabilità visive');\n  \n  return suggestions;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/design-system/utils/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[732,735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[732,735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Design System Utilities\n * Week 8 Implementation - Component Library\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combina più classi CSS utilizzando clsx e tailwind-merge\n * @param inputs - Classi CSS da combinare\n * @returns Stringa contenente le classi CSS combinate\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Utility per gestire le varianti dei componenti\n * @param base - Classi base del componente\n * @param variants - Oggetto con le varianti disponibili\n * @param props - Props del componente per selezionare le varianti\n * @returns Classi CSS combinate\n */\nexport function createVariants<T extends Record<string, any>>(\n  base: string,\n  variants: Record<keyof T, Record<string, string>>,\n  props: T\n): string {\n  const variantClasses = Object.entries(props)\n    .map(([key, value]) => {\n      const variantGroup = variants[key as keyof T];\n      return variantGroup?.[value as string] || '';\n    })\n    .filter(Boolean);\n\n  return cn(base, ...variantClasses);\n}\n\n/**\n * Utility per gestire le dimensioni responsive\n * @param size - Dimensione del componente\n * @returns Classi CSS per la dimensione\n */\nexport function getResponsiveSize(size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'): string {\n  const sizeMap = {\n    xs: 'text-xs',\n    sm: 'text-sm',\n    md: 'text-base',\n    lg: 'text-lg',\n    xl: 'text-xl',\n    '2xl': 'text-2xl'\n  };\n  \n  return sizeMap[size] || sizeMap.md;\n}\n\n/**\n * Utility per gestire gli stati di focus e accessibilità\n * @param disabled - Se il componente è disabilitato\n * @returns Classi CSS per accessibilità\n */\nexport function getAccessibilityClasses(disabled?: boolean): string {\n  if (disabled) {\n    return 'cursor-not-allowed opacity-50';\n  }\n  \n  return 'focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2';\n}\n\n/**\n * Formatta una data in formato leggibile\n * @param date - Data da formattare (string ISO o oggetto Date)\n * @param includeTime - Se includere l'orario nella formattazione\n * @returns Data formattata\n */\nexport function formatDate(date: string | Date, includeTime = false): string {\n  if (!date) return '';\n  \n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  if (isNaN(dateObj.getTime())) {\n    return '';\n  }\n  \n  const options: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    ...(includeTime && {\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  };\n  \n  return dateObj.toLocaleDateString('it-IT', options);\n}\n\n/**\n * Capitalizza la prima lettera di ogni parola\n * @param str - Stringa da capitalizzare\n * @returns Stringa con ogni parola capitalizzata\n */\nexport function capitalizeWords(str: string): string {\n  if (!str) return '';\n  \n  return str\n    .toLowerCase()\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/examples/OptimizedHooksDemo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":107,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  useAuth,\n  usePermissions,\n  useAppState,\n  useLanguage,\n  useTheme,\n  useSidebar,\n  useToast,\n  useNavigation,\n  useRouteGuard,\n  useConditionalRender\n} from '../hooks';\nimport { useCompaniesOptimized } from '../hooks/resources/useCompaniesOptimized';\nimport { Button } from '../design-system/atoms/Button';\n\n/**\n * Componente dimostrativo per i nuovi hook ottimizzati\n * Mostra come utilizzare tutti gli hook insieme per una gestione efficiente dello stato\n */\nexport const OptimizedHooksDemo: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  \n  // Hook di autenticazione\n  const { user, isAuthenticated, userName, userEmail } = useAuth();\n  const { canManageCompanies, isAdmin, canViewReports } = usePermissions();\n  \n  // Hook di stato globale\n  const { language, theme } = useAppState();\n  const { setLanguage } = useLanguage();\n  const { toggleTheme, isDarkMode } = useTheme();\n  const { isExpanded, toggleSidebar } = useSidebar();\n  \n  // Hook UI\n  const toast = useToast();\n  \n  // Hook di navigazione\n  const { goToCompanies, goToSettings, currentPath, isOnCompanies } = useNavigation();\n  \n  // Hook di protezione route\n  const { isAuthorized, isLoading: routeLoading } = useRouteGuard({\n    requireAuth: true,\n    requiredPermissions: [{ resource: 'companies', action: 'read' }]\n  });\n  \n  // Hook di rendering condizionale\n  const { renderIfPermission, renderIfRole, renderIf } = useConditionalRender();\n  \n  // Hook per dati aziende\n  const {\n    companies,\n    total,\n    isLoading: companiesLoading,\n    createCompany,\n    isCreating,\n    filters\n  } = useCompaniesOptimized({\n    search: searchTerm,\n    limit: 10\n  });\n  \n  // Handlers per dimostrare le funzionalità\n  const handleCreateTestCompany = async () => {\n    try {\n      await createCompany({\n        name: `Test Company ${Date.now()}`,\n        email: 'test@example.com',\n        phone: '+39 123 456 789',\n        address: 'Via Test 123',\n        city: 'Milano',\n        province: 'MI',\n        cap: '20100',\n        vatNumber: 'IT12345678901',\n        fiscalCode: 'TESTCMP123',\n        legalRepresentative: 'Test Representative'\n      });\n      toast.saveSuccess('Azienda');\n    } catch (error) {\n      toast.saveError('Azienda', error instanceof Error ? error.message : 'Errore sconosciuto');\n    }\n  };\n  \n  const handleTestToasts = () => {\n    toast.success('Operazione completata con successo!');\n    setTimeout(() => toast.warning('Attenzione: questo è un avviso'), 1000);\n    setTimeout(() => toast.error('Errore di esempio'), 2000);\n    setTimeout(() => toast.info('Informazione utile'), 3000);\n  };\n  \n  const handleTestPromise = async () => {\n    const mockPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (Math.random() > 0.5) {\n          resolve('Operazione completata!');\n        } else {\n          reject(new Error('Operazione fallita'));\n        }\n      }, 2000);\n    });\n    \n    try {\n      await toast.promise(mockPromise, {\n        loading: 'Elaborazione in corso...',\n        success: 'Operazione completata con successo!',\n        error: 'Operazione fallita'\n      });\n    } catch (error) {\n      // Errore già gestito dal toast\n    }\n  };\n  \n  if (routeLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg\">Verifica autorizzazioni...</div>\n      </div>\n    );\n  }\n  \n  if (!isAuthorized) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg text-red-600\">Accesso non autorizzato</div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className={`p-6 space-y-8 ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'}`}>\n      <div className=\"border-b pb-4\">\n        <h1 className=\"text-3xl font-bold mb-2\">Demo Hook Ottimizzati</h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Dimostrazione delle funzionalità dei nuovi hook ottimizzati per state management e routing\n        </p>\n      </div>\n      \n      {/* Sezione Autenticazione */}\n      <section className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold\">🔐 Autenticazione e Permessi</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"p-4 border rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Stato Utente</h3>\n            <p><strong>Autenticato:</strong> {isAuthenticated ? '✅ Sì' : '❌ No'}</p>\n            <p><strong>Nome:</strong> {userName || 'N/A'}</p>\n            <p><strong>Email:</strong> {userEmail || 'N/A'}</p>\n            <p><strong>Ruolo:</strong> {user?.role || 'N/A'}</p>\n          </div>\n          \n          <div className=\"p-4 border rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Permessi</h3>\n            <p><strong>Gestione Aziende:</strong> {canManageCompanies() ? '✅' : '❌'}</p>\n            <p><strong>Amministratore:</strong> {isAdmin() ? '✅' : '❌'}</p>\n            <p><strong>Visualizza Report:</strong> {canViewReports() ? '✅' : '❌'}</p>\n          </div>\n        </div>\n      </section>\n      \n      {/* Sezione Stato Globale */}\n      <section className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold\">🌐 Stato Globale</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"p-4 border rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Lingua</h3>\n            <p className=\"mb-2\"><strong>Corrente:</strong> {language}</p>\n            <div className=\"space-x-2\">\n              <Button \n                size=\"sm\" \n                variant={language === 'it' ? 'primary' : 'secondary'}\n                onClick={() => setLanguage('it')}\n              >\n                Italiano\n              </Button>\n              <Button \n                size=\"sm\" \n                variant={language === 'en' ? 'primary' : 'secondary'}\n                onClick={() => setLanguage('en')}\n              >\n                English\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"p-4 border rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Tema</h3>\n            <p className=\"mb-2\"><strong>Corrente:</strong> {theme}</p>\n            <Button onClick={toggleTheme}>\n              {isDarkMode ? '☀️ Modalità Chiara' : '🌙 Modalità Scura'}\n            </Button>\n          </div>\n          \n          <div className=\"p-4 border rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Sidebar</h3>\n            <p className=\"mb-2\"><strong>Espansa:</strong> {isExpanded ? '✅' : '❌'}</p>\n            <Button onClick={toggleSidebar}>\n              {isExpanded ? '⬅️ Comprimi' : '➡️ Espandi'}\n            </Button>\n          </div>\n        </div>\n      </section>\n      \n      {/* Sezione Toast */}\n      <section className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold\">🔔 Sistema Toast</h2>\n        <div className=\"flex flex-wrap gap-2\">\n          <Button onClick={handleTestToasts}>Test Toast Multipli</Button>\n          <Button onClick={handleTestPromise}>Test Promise Toast</Button>\n          <Button onClick={() => toast.networkError()}>Test Errore Rete</Button>\n          <Button onClick={() => toast.validationError('Dati non validi')}>Test Validazione</Button>\n        </div>\n      </section>\n      \n      {/* Sezione Navigazione */}\n      <section className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold\">🧭 Navigazione</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"p-4 border rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Stato Corrente</h3>\n            <p><strong>Path:</strong> {currentPath}</p>\n            <p><strong>Su Aziende:</strong> {isOnCompanies() ? '✅' : '❌'}</p>\n          </div>\n          \n          <div className=\"p-4 border rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Navigazione</h3>\n            <div className=\"space-x-2\">\n              <Button size=\"sm\" onClick={goToCompanies}>Aziende</Button>\n              <Button size=\"sm\" onClick={goToSettings}>Impostazioni</Button>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Sezione Dati Aziende */}\n      <section className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold\">🏢 Gestione Aziende</h2>\n        \n        <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center\">\n          <input\n            type=\"text\"\n            placeholder=\"Cerca aziende...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"px-3 py-2 border rounded-lg flex-1 max-w-md\"\n          />\n          \n          {renderIfPermission('companies', 'create') && (\n            <Button \n              onClick={handleCreateTestCompany}\n              disabled={isCreating}\n            >\n              {isCreating ? 'Creazione...' : 'Crea Azienda Test'}\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"p-4 border rounded-lg\">\n          <h3 className=\"font-semibold mb-2\">Statistiche</h3>\n          <p><strong>Totale Aziende:</strong> {total}</p>\n          <p><strong>Filtri Attivi:</strong> {JSON.stringify(filters)}</p>\n          <p><strong>Caricamento:</strong> {companiesLoading ? '⏳' : '✅'}</p>\n        </div>\n        \n        {companiesLoading ? (\n          <div className=\"text-center py-8\">Caricamento aziende...</div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {companies.map((company) => (\n              <div key={company.id} className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-semibold\">{company.name}</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{company.city}, {company.province}</p>\n                <p className=\"text-sm\">{company.email}</p>\n              </div>\n            ))}\n          </div>\n        )}\n      </section>\n      \n      {/* Sezione Rendering Condizionale */}\n      <section className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold\">🎯 Rendering Condizionale</h2>\n        <div className=\"space-y-2\">\n          {renderIfRole('Administrator') && (\n            <div className=\"p-3 bg-red-100 dark:bg-red-900 rounded-lg\">\n              ⚡ Contenuto visibile solo agli Amministratori\n            </div>\n          )}\n          \n          {renderIfPermission('companies', 'manage') && (\n            <div className=\"p-3 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n              🏢 Contenuto per chi può gestire le aziende\n            </div>\n          )}\n          \n          {renderIf({ authenticated: true, role: ['Administrator', 'Manager'] }) && (\n            <div className=\"p-3 bg-green-100 dark:bg-green-900 rounded-lg\">\n              👥 Contenuto per Amministratori e Manager autenticati\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default OptimizedHooksDemo;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/api/useEmployees.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { getEmployees, Employee } from '../../services/employees';\n\n// Mock data for fallback when API fails\nconst MOCK_EMPLOYEES: Employee[] = [\n  {\n    id: \"mock-emp-1\",\n    firstName: \"Mario\",\n    lastName: \"Rossi\",\n    email: \"mario.rossi@example.com\",\n    phone: \"+39 123 456 7890\",\n    companyId: \"mock-company-1\",\n    isActive: true,\n    status: \"ACTIVE\" as const,\n    roleType: \"EMPLOYEE\" as const,\n    company: {\n      id: \"mock-company-1\",\n      ragioneSociale: \"Azienda Demo SpA\"\n    }\n  },\n  {\n    id: \"mock-emp-2\", \n    firstName: \"Luigi\",\n    lastName: \"Verdi\",\n    email: \"luigi.verdi@example.com\",\n    phone: \"+39 123 456 7891\",\n    companyId: \"mock-company-1\",\n    isActive: true,\n    status: \"ACTIVE\" as const,\n    roleType: \"EMPLOYEE\" as const,\n    company: {\n      id: \"mock-company-1\",\n      ragioneSociale: \"Azienda Demo SpA\"\n    }\n  },\n  {\n    id: \"mock-emp-3\",\n    firstName: \"Giulia\",\n    lastName: \"Bianchi\",\n    email: \"giulia.bianchi@example.com\",\n    phone: \"+39 123 456 7892\",\n    companyId: \"mock-company-2\",\n    isActive: true,\n    status: \"ACTIVE\" as const,\n    roleType: \"EMPLOYEE\" as const,\n    company: {\n      id: \"mock-company-2\",\n      ragioneSociale: \"Test Srl\"\n    }\n  }\n];\n\nexport function useEmployees() {\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [filteredEmployees, setFilteredEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filter, setFilter] = useState('');\n  const [usingFallback, setUsingFallback] = useState(false);\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  useEffect(() => {\n    if (filter.trim() === '') {\n      setFilteredEmployees(employees);\n    } else {\n      const lowercaseFilter = filter.toLowerCase();\n      const filtered = employees.filter(employee => \n        employee.firstName.toLowerCase().includes(lowercaseFilter) ||\n        employee.lastName.toLowerCase().includes(lowercaseFilter) ||\n        (employee.email && employee.email.toLowerCase().includes(lowercaseFilter)) ||\n        (employee.company?.ragioneSociale && employee.company.ragioneSociale.toLowerCase().includes(lowercaseFilter))\n      );\n      setFilteredEmployees(filtered);\n    }\n  }, [filter, employees]);\n\n  const fetchEmployees = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setUsingFallback(false);\n      \n      // Use timeout to ensure we don't wait too long for API response\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 8000);\n      \n      const response = await getEmployees();\n      \n      clearTimeout(timeoutId);\n      \n      if (response && Array.isArray(response)) {\n        setEmployees(response);\n        setFilteredEmployees(response);\n      } else {\n        throw new Error('Invalid data format received from API');\n      }\n    } catch (err: unknown) {\n      // Use fallback data\n      setEmployees(MOCK_EMPLOYEES);\n      setFilteredEmployees(MOCK_EMPLOYEES);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch employees';\n      setError(errorMessage);\n      setUsingFallback(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    employees,\n    filteredEmployees,\n    loading,\n    error,\n    filter,\n    setFilter,\n    fetchEmployees,\n    usingFallback\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/api/useMutation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/api/useOptimizedQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiResponse' is defined but never used.","line":7,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[597,600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[597,600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showError' is assigned a value but never used.","line":37,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[988,991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[988,991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'queryClient' is assigned a value but never used.","line":102,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'success' is assigned a value but never used.","line":103,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showError' is assigned a value but never used.","line":103,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showError' is assigned a value but never used.","line":133,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":152,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'api'. Either include it or remove the dependency array.","line":188,"column":6,"nodeType":"ArrayExpression","endLine":188,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [queryClient, resource, api]","fix":{"range":[4930,4962],"text":"[queryClient, resource, api]"}}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';\nimport { useCallback, useMemo } from 'react';\nimport { useToast } from '../ui/useToast';\nimport { useErrorHandler } from '../useErrorHandler';\n\n// Tipi base per le API\ninterface ApiResponse<T> {\n  data: T;\n  message?: string;\n  success: boolean;\n}\n\ninterface ListResponse<T> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n}\n\ninterface QueryParams {\n  page?: number;\n  limit?: number;\n  search?: string;\n  sort?: string;\n  order?: 'asc' | 'desc';\n  [key: string]: any;\n}\n\n/**\n * Hook ottimizzato per query GET\n */\nexport const useOptimizedQuery = <T>(\n  queryKey: (string | number)[],\n  queryFn: () => Promise<T>,\n  options?: Omit<UseQueryOptions<T>, 'queryKey' | 'queryFn'>\n) => {\n  const { error: showError } = useToast();\n  const { handleError } = useErrorHandler();\n\n  return useQuery({\n    queryKey,\n    queryFn,\n    ...options,\n    onError: (error: any) => {\n      handleError(error);\n      options?.onError?.(error);\n    },\n  });\n};\n\n/**\n * Hook per liste con paginazione e filtri\n */\nexport const useListQuery = <T>(\n  resource: string,\n  params: QueryParams = {},\n  fetchFn: (params: QueryParams) => Promise<ListResponse<T>>,\n  options?: Omit<UseQueryOptions<ListResponse<T>>, 'queryKey' | 'queryFn'>\n) => {\n  const queryKey = useMemo(() => [resource, 'list', params], [resource, params]);\n  \n  return useOptimizedQuery(\n    queryKey,\n    () => fetchFn(params),\n    {\n      keepPreviousData: true, // Mantieni i dati precedenti durante il caricamento\n      staleTime: 2 * 60 * 1000, // 2 minuti per le liste\n      ...options,\n    }\n  );\n};\n\n/**\n * Hook per dettagli di una risorsa\n */\nexport const useDetailQuery = <T>(\n  resource: string,\n  id: string | number,\n  fetchFn: (id: string | number) => Promise<T>,\n  options?: Omit<UseQueryOptions<T>, 'queryKey' | 'queryFn'>\n) => {\n  const queryKey = useMemo(() => [resource, 'detail', id], [resource, id]);\n  \n  return useOptimizedQuery(\n    queryKey,\n    () => fetchFn(id),\n    {\n      enabled: !!id, // Esegui solo se l'ID è presente\n      staleTime: 5 * 60 * 1000, // 5 minuti per i dettagli\n      ...options,\n    }\n  );\n};\n\n/**\n * Hook ottimizzato per mutazioni\n */\nexport const useOptimizedMutation = <TData, TVariables>(\n  mutationFn: (variables: TVariables) => Promise<TData>,\n  options?: UseMutationOptions<TData, Error, TVariables>\n) => {\n  const queryClient = useQueryClient();\n  const { success, error: showError } = useToast();\n  const { handleError } = useErrorHandler();\n\n  return useMutation({\n    mutationFn,\n    ...options,\n    onSuccess: (data, variables, context) => {\n      options?.onSuccess?.(data, variables, context);\n    },\n    onError: (error: Error, variables, context) => {\n      handleError(error);\n      options?.onError?.(error, variables, context);\n    },\n  });\n};\n\n/**\n * Hook per operazioni CRUD ottimizzate\n */\nexport const useCrudOperations = <T>(\n  resource: string,\n  api: {\n    list: (params: QueryParams) => Promise<ListResponse<T>>;\n    get: (id: string | number) => Promise<T>;\n    create: (data: Partial<T>) => Promise<T>;\n    update: (id: string | number, data: Partial<T>) => Promise<T>;\n    delete: (id: string | number) => Promise<void>;\n  }\n) => {\n  const queryClient = useQueryClient();\n  const { success, error: showError } = useToast();\n\n  // Funzioni di invalidazione\n  const invalidateList = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: [resource, 'list'] });\n  }, [queryClient, resource]);\n\n  const invalidateDetail = useCallback((id: string | number) => {\n    queryClient.invalidateQueries({ queryKey: [resource, 'detail', id] });\n  }, [queryClient, resource]);\n\n  const invalidateAll = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: [resource] });\n  }, [queryClient, resource]);\n\n  // Mutazioni ottimizzate\n  const createMutation = useOptimizedMutation(\n    api.create,\n    {\n      onSuccess: (data) => {\n        invalidateList();\n        success(`${resource} creato con successo`);\n      },\n    }\n  );\n\n  const updateMutation = useOptimizedMutation(\n    ({ id, data }: { id: string | number; data: Partial<T> }) => api.update(id, data),\n    {\n      onSuccess: (data, { id }) => {\n        invalidateDetail(id);\n        invalidateList();\n        success(`${resource} aggiornato con successo`);\n      },\n    }\n  );\n\n  const deleteMutation = useOptimizedMutation(\n    api.delete,\n    {\n      onSuccess: (_, id) => {\n        queryClient.removeQueries({ queryKey: [resource, 'detail', id] });\n        invalidateList();\n        success(`${resource} eliminato con successo`);\n      },\n    }\n  );\n\n  // Funzioni di utilità\n  const prefetchDetail = useCallback(async (id: string | number) => {\n    await queryClient.prefetchQuery({\n      queryKey: [resource, 'detail', id],\n      queryFn: () => api.get(id),\n      staleTime: 5 * 60 * 1000,\n    });\n  }, [queryClient, resource, api.get]);\n\n  const setDetailData = useCallback((id: string | number, data: T) => {\n    queryClient.setQueryData([resource, 'detail', id], data);\n  }, [queryClient, resource]);\n\n  const getDetailData = useCallback((id: string | number): T | undefined => {\n    return queryClient.getQueryData([resource, 'detail', id]);\n  }, [queryClient, resource]);\n\n  return {\n    // Mutazioni\n    create: createMutation,\n    update: updateMutation,\n    delete: deleteMutation,\n    \n    // Utility\n    invalidateList,\n    invalidateDetail,\n    invalidateAll,\n    prefetchDetail,\n    setDetailData,\n    getDetailData,\n    \n    // Stati delle mutazioni\n    isCreating: createMutation.isPending,\n    isUpdating: updateMutation.isPending,\n    isDeleting: deleteMutation.isPending,\n    isMutating: createMutation.isPending || updateMutation.isPending || deleteMutation.isPending,\n  };\n};\n\nexport default useOptimizedQuery;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/api/useQueryData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/auth/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/auth/usePermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/import/usePersonImport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/resources/useCompaniesOptimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/routing/useNavigation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[636,639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[636,639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useNavigate, useLocation, useParams } from 'react-router-dom';\nimport { useMemo, useCallback } from 'react';\nimport { usePermissions } from '../auth/usePermissions';\n\n/**\n * Hook ottimizzato per la navigazione\n * Fornisce utility per navigazione sicura e controllo permessi\n */\nexport const useNavigation = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const params = useParams();\n  const permissions = usePermissions();\n\n  // Funzioni di navigazione memoizzate\n  const navigationActions = useMemo(() => ({\n    // Navigazione base\n    goTo: (path: string, options?: { replace?: boolean; state?: any }) => {\n      navigate(path, options);\n    },\n    \n    goBack: () => navigate(-1),\n    goForward: () => navigate(1),\n    \n    // Navigazione verso sezioni specifiche\n    goToCompanies: () => navigate('/companies'),\n    goToCompany: (id: string) => navigate(`/companies/${id}`),\n    goToNewCompany: () => navigate('/companies/new'),\n    \n    goToCourses: () => navigate('/courses'),\n    goToCourse: (id: string) => navigate(`/courses/${id}`),\n    goToNewCourse: () => navigate('/courses/new'),\n    \n    goToTrainers: () => navigate('/trainers'),\n    goToTrainer: (id: string) => navigate(`/trainers/${id}`),\n    goToNewTrainer: () => navigate('/trainers/new'),\n    \n    goToEmployees: () => navigate('/employees'),\n    goToEmployee: (id: string) => navigate(`/employees/${id}`),\n    goToNewEmployee: () => navigate('/employees/new'),\n    \n    goToSchedules: () => navigate('/schedules'),\n    goToSchedule: (id: string) => navigate(`/schedules/${id}`),\n    goToNewSchedule: () => navigate('/schedules/new'),\n    \n    goToSettings: () => navigate('/settings'),\n    goToQuotes: () => navigate('/quotes'),\n    goToInvoices: () => navigate('/invoices'),\n    goToDocuments: () => navigate('/documents'),\n    \n    // Navigazione con controllo permessi\n    goToWithPermission: (path: string, requiredPermission: string, action: string = 'read') => {\n      if (permissions.hasPermission(requiredPermission, action)) {\n        navigate(path);\n      } else {\n        // Redirect a pagina di errore o mostra messaggio\n        navigate('/unauthorized');\n      }\n    },\n    \n    // Navigazione condizionale\n    goToIfAllowed: (path: string, condition: boolean, fallbackPath?: string) => {\n      if (condition) {\n        navigate(path);\n      } else if (fallbackPath) {\n        navigate(fallbackPath);\n      }\n    },\n    \n  }), [navigate, permissions]);\n\n  // Utility per la location corrente\n  const locationUtils = useMemo(() => ({\n    // Informazioni sulla route corrente\n    currentPath: location.pathname,\n    currentSearch: location.search,\n    currentHash: location.hash,\n    currentState: location.state,\n    \n    // Controlli sulla route\n    isOnPath: (path: string) => location.pathname === path,\n    isOnPathPattern: (pattern: RegExp) => pattern.test(location.pathname),\n    \n    // Controlli per sezioni specifiche\n    isOnCompanies: () => location.pathname.startsWith('/companies'),\n    isOnCourses: () => location.pathname.startsWith('/courses'),\n    isOnTrainers: () => location.pathname.startsWith('/trainers'),\n    isOnEmployees: () => location.pathname.startsWith('/employees'),\n    isOnSchedules: () => location.pathname.startsWith('/schedules'),\n    isOnSettings: () => location.pathname.startsWith('/settings'),\n    \n    // Utility per query parameters\n    getSearchParam: (key: string) => {\n      const searchParams = new URLSearchParams(location.search);\n      return searchParams.get(key);\n    },\n    \n    getAllSearchParams: () => {\n      const searchParams = new URLSearchParams(location.search);\n      const params: Record<string, string> = {};\n      searchParams.forEach((value, key) => {\n        params[key] = value;\n      });\n      return params;\n    },\n    \n    // Utility per costruire URL\n    buildUrl: (path: string, searchParams?: Record<string, string>) => {\n      const url = new URL(path, window.location.origin);\n      if (searchParams) {\n        Object.entries(searchParams).forEach(([key, value]) => {\n          url.searchParams.set(key, value);\n        });\n      }\n      return url.pathname + url.search;\n    },\n    \n  }), [location]);\n\n  // Utility per i parametri della route\n  const paramsUtils = useMemo(() => ({\n    params,\n    \n    // Getter tipizzati per parametri comuni\n    getId: () => params.id,\n    getCompanyId: () => params.companyId,\n    getCourseId: () => params.courseId,\n    getTrainerId: () => params.trainerId,\n    getEmployeeId: () => params.employeeId,\n    getScheduleId: () => params.scheduleId,\n    \n    // Controlli sui parametri\n    hasId: () => !!params.id,\n    hasParam: (key: string) => !!params[key],\n    \n  }), [params]);\n\n  return {\n    ...navigationActions,\n    location: locationUtils,\n    params: paramsUtils,\n    \n    // Funzioni di utilità avanzate\n    refresh: useCallback(() => {\n      navigate(location.pathname + location.search, { replace: true });\n    }, [navigate, location]),\n    \n    replaceCurrentUrl: useCallback((newPath: string) => {\n      navigate(newPath, { replace: true });\n    }, [navigate]),\n  };\n};\n\nexport default useNavigation;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/routing/useRouteGuard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/routing/useValidatedParams.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showErrorToast' is assigned a value but never used.","line":40,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useParams, useNavigate } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { isValidUUID, sanitizeId } from '../../utils/validation';\n\ninterface UseValidatedParamsOptions {\n  /** Se true, reindirizza automaticamente alla lista se l'ID non è valido */\n  redirectOnInvalid?: boolean;\n  /** URL di fallback per il redirect (default: '/courses') */\n  fallbackUrl?: string;\n  /** Se true, mostra un toast di errore quando l'ID non è valido */\n  showErrorToast?: boolean;\n}\n\ninterface UseValidatedParamsResult {\n  /** L'ID validato o null se non valido */\n  id: string | null;\n  /** True se l'ID è valido */\n  isValid: boolean;\n  /** True se l'ID non è valido */\n  isInvalid: boolean;\n  /** True se sta ancora validando */\n  isValidating: boolean;\n  /** Messaggio di errore se l'ID non è valido */\n  errorMessage: string | null;\n}\n\n/**\n * Hook per validare automaticamente gli ID nei parametri delle route\n * Gestisce la validazione UUID e fornisce stati per la UI\n */\nexport const useValidatedParams = (\n  options: UseValidatedParamsOptions = {}\n): UseValidatedParamsResult => {\n  const { id: rawId } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  \n  const {\n    redirectOnInvalid = false,\n    fallbackUrl = '/courses',\n    showErrorToast = false\n  } = options;\n  \n  const [isValidating, setIsValidating] = useState(true);\n  const [validationResult, setValidationResult] = useState<{\n    id: string | null;\n    isValid: boolean;\n    errorMessage: string | null;\n  }>({\n    id: null,\n    isValid: false,\n    errorMessage: null\n  });\n  \n  useEffect(() => {\n    const validateId = () => {\n      setIsValidating(true);\n      \n      if (!rawId) {\n        setValidationResult({\n          id: null,\n          isValid: false,\n          errorMessage: 'ID mancante nell\\'URL'\n        });\n        \n        if (redirectOnInvalid) {\n          navigate(fallbackUrl, { replace: true });\n        }\n        \n        setIsValidating(false);\n        return;\n      }\n      \n      const sanitizedId = sanitizeId(rawId);\n      \n      if (!sanitizedId || !isValidUUID(sanitizedId)) {\n        setValidationResult({\n          id: null,\n          isValid: false,\n          errorMessage: 'ID non valido. L\\'ID deve essere un UUID valido.'\n        });\n        \n        if (redirectOnInvalid) {\n          navigate(fallbackUrl, { replace: true });\n        }\n        \n        setIsValidating(false);\n        return;\n      }\n      \n      setValidationResult({\n        id: sanitizedId,\n        isValid: true,\n        errorMessage: null\n      });\n      \n      setIsValidating(false);\n    };\n    \n    validateId();\n  }, [rawId, redirectOnInvalid, fallbackUrl, navigate]);\n  \n  return {\n    id: validationResult.id,\n    isValid: validationResult.isValid,\n    isInvalid: !validationResult.isValid,\n    isValidating,\n    errorMessage: validationResult.errorMessage\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/state/useAppState.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[633,636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[633,636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":50,"column":20,"nodeType":"Identifier","endLine":50,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'state'. Either include it or remove the dependency array.","line":52,"column":8,"nodeType":"ArrayExpression","endLine":52,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [state]","fix":{"range":[1390,1439],"text":"[state]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useContext, useMemo, useCallback } from 'react';\nimport { AppStateContext } from '../../context/AppStateContext';\n\n/**\n * Hook ottimizzato per lo stato globale dell'applicazione\n * Utilizza selettori per evitare re-render inutili\n */\nexport const useAppState = () => {\n  const context = useContext(AppStateContext);\n  \n  if (!context) {\n    throw new Error('useAppState must be used within an AppStateProvider');\n  }\n\n  return context;\n};\n\n/**\n * Hook con selettore per ottimizzare le performance\n * Permette di sottoscriversi solo a parti specifiche dello stato\n */\nexport const useAppStateSelector = <T>(selector: (state: any) => T) => {\n  const state = useAppState();\n  \n  return useMemo(() => selector(state), [selector, state]);\n};\n\n/**\n * Hook specifici per parti dello stato\n */\nexport const useLanguage = () => {\n  return useAppStateSelector(state => ({\n    language: state.language,\n    setLanguage: state.setLanguage\n  }));\n};\n\nexport const useTheme = () => {\n  return useAppStateSelector(state => ({\n    theme: state.theme,\n    setTheme: state.setTheme,\n    isDarkMode: state.theme === 'dark'\n  }));\n};\n\nexport const useSidebar = () => {\n  return useAppStateSelector(state => ({\n    isExpanded: state.sidebarExpanded,\n    setSidebarExpanded: state.setSidebarExpanded,\n    toggleSidebar: useCallback(() => {\n      state.setSidebarExpanded(!state.sidebarExpanded);\n    }, [state.sidebarExpanded, state.setSidebarExpanded])\n  }));\n};\n\nexport const useAttestatiProgress = () => {\n  return useAppStateSelector(state => ({\n    progress: state.attestatiGenerationProgress,\n    setProgress: state.setAttestatiGenerationProgress,\n    isGenerating: state.attestatiGenerationProgress > 0 && state.attestatiGenerationProgress < 100\n  }));\n};\n\n/**\n * Hook per azioni globali dell'applicazione\n */\nexport const useAppActions = () => {\n  const { setLanguage, setTheme, setSidebarExpanded, setAttestatiGenerationProgress } = useAppState();\n  \n  return useMemo(() => ({\n    // Azioni per il tema\n    toggleTheme: () => {\n      setTheme(prev => prev === 'light' ? 'dark' : 'light');\n    },\n    \n    // Azioni per la lingua\n    switchToItalian: () => setLanguage('it'),\n    switchToEnglish: () => setLanguage('en'),\n    \n    // Azioni per la sidebar\n    expandSidebar: () => setSidebarExpanded(true),\n    collapseSidebar: () => setSidebarExpanded(false),\n    toggleSidebar: () => setSidebarExpanded(prev => !prev),\n    \n    // Azioni per il progresso\n    startAttestatiGeneration: () => setAttestatiGenerationProgress(0),\n    updateAttestatiProgress: (progress: number) => setAttestatiGenerationProgress(progress),\n    completeAttestatiGeneration: () => setAttestatiGenerationProgress(100),\n    resetAttestatiProgress: () => setAttestatiGenerationProgress(0),\n    \n  }), [setLanguage, setTheme, setSidebarExpanded, setAttestatiGenerationProgress]);\n};\n\nexport default useAppState;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/ui/useToast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ToastType' is defined but never used.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useContext, useMemo, useCallback } from 'react';\nimport { ToastContext } from '../../context/ToastContext';\nimport type { ToastType, ToastOptions } from '../../context/ToastContext';\n\n/**\n * Hook ottimizzato per la gestione dei toast\n * Fornisce API semplificata e funzioni memoizzate\n */\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  \n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n\n  const { toasts, toast, removeToast, clearToasts } = context;\n\n  // Funzioni memoizzate per evitare re-render\n  const toastActions = useMemo(() => ({\n    // Funzioni base\n    add: toast,\n    remove: removeToast,\n    clear: clearToasts,\n    \n    // Funzioni specifiche per tipo\n    success: (message: string, options?: Omit<ToastOptions, 'type'>) => {\n      toast({ message, ...options, type: 'success' });\n    },\n    \n    error: (message: string, options?: Omit<ToastOptions, 'type'>) => {\n      toast({ message, ...options, type: 'error' });\n    },\n    \n    warning: (message: string, options?: Omit<ToastOptions, 'type'>) => {\n      toast({ message, ...options, type: 'warning' });\n    },\n    \n    info: (message: string, options?: Omit<ToastOptions, 'type'>) => {\n      toast({ message, ...options, type: 'info' });\n    },\n    \n    // Funzioni per azioni comuni\n    saveSuccess: (entity?: string) => {\n      const message = entity ? `${entity} salvato con successo` : 'Salvato con successo';\n      toast({ message, type: 'success' });\n    },\n    \n    saveError: (entity?: string, error?: string) => {\n      const message = entity \n        ? `Errore nel salvare ${entity}${error ? `: ${error}` : ''}`\n        : `Errore nel salvare${error ? `: ${error}` : ''}`;\n      toast({ message, type: 'error' });\n    },\n    \n    deleteSuccess: (entity?: string) => {\n      const message = entity ? `${entity} eliminato con successo` : 'Eliminato con successo';\n      toast({ message, type: 'success' });\n    },\n    \n    deleteError: (entity?: string, error?: string) => {\n      const message = entity \n        ? `Errore nell'eliminare ${entity}${error ? `: ${error}` : ''}`\n        : `Errore nell'eliminare${error ? `: ${error}` : ''}`;\n      toast({ message, type: 'error' });\n    },\n    \n    loadingError: (entity?: string, error?: string) => {\n      const message = entity \n        ? `Errore nel caricare ${entity}${error ? `: ${error}` : ''}`\n        : `Errore nel caricamento${error ? `: ${error}` : ''}`;\n      toast({ message, type: 'error' });\n    },\n    \n    networkError: () => {\n      toast({ \n        message: 'Errore di connessione. Verifica la tua connessione internet.', \n        type: 'error',\n        duration: 5000\n      });\n    },\n    \n    validationError: (message?: string) => {\n      toast({ message: message || 'Verifica i dati inseriti', type: 'warning' });\n    },\n    \n    // Funzioni per operazioni asincrone\n    promise: async <T>(\n      promise: Promise<T>,\n      messages: {\n        loading?: string;\n        success?: string | ((data: T) => string);\n        error?: string | ((error: unknown) => string);\n      }\n    ): Promise<T> => {\n      let loadingToastId: string | undefined;\n      \n      if (messages.loading) {\n        toast({ message: messages.loading, type: 'info', duration: 0 });\n      }\n      \n      try {\n        const result = await promise;\n        \n        if (loadingToastId) {\n          removeToast(loadingToastId);\n        }\n        \n        if (messages.success) {\n          const successMessage = typeof messages.success === 'function' \n            ? messages.success(result)\n            : messages.success;\n          toast({ message: successMessage, type: 'success' });\n        }\n        \n        return result;\n      } catch (error) {\n        if (loadingToastId) {\n          removeToast(loadingToastId);\n        }\n        \n        if (messages.error) {\n          const errorMessage = typeof messages.error === 'function'\n            ? messages.error(error)\n            : messages.error;\n          toast({ message: errorMessage, type: 'error' });\n        }\n        \n        throw error;\n      }\n    }\n    \n  }), [toast, removeToast, clearToasts]);\n\n  return {\n    toasts,\n    ...toastActions\n  };\n};\n\nexport default useToast;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useAuditTrail.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useAuthRedirect.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handlePostLoginRedirect'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [handlePostLoginRedirect, isAuthenticated, isLoading, location.pathname]","fix":{"range":[2605,2652],"text":"[handlePostLoginRedirect, isAuthenticated, isLoading, location.pathname]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from './auth/useAuth';\n\n/**\n * Hook per gestire il redirect intelligente tra frontend pubblico e privato\n * Gestisce la navigazione basata sullo stato di autenticazione\n */\nexport const useAuthRedirect = () => {\n  const { isAuthenticated, isLoading } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  /**\n   * Redirect intelligente per \"Area Riservata\"\n   * Se l'utente è già autenticato, va alla dashboard\n   * Altrimenti va al login\n   */\n  const handleAreaRiservataClick = () => {\n    if (isAuthenticated) {\n      navigate('/dashboard');\n    } else {\n      // Salva la pagina corrente per eventuale redirect post-login\n      const currentPath = location.pathname;\n      if (currentPath !== '/login') {\n        sessionStorage.setItem('redirectAfterLogin', currentPath);\n      }\n      navigate('/login');\n    }\n  };\n\n  /**\n   * Redirect alla dashboard dopo login se l'utente è autenticato\n   * Controlla se c'è un redirect salvato o va alla dashboard\n   */\n  const handlePostLoginRedirect = () => {\n    if (isAuthenticated && !isLoading) {\n      const savedRedirect = sessionStorage.getItem('redirectAfterLogin');\n      \n      // Se siamo nella pagina di login e l'utente è autenticato\n      if (location.pathname === '/login') {\n        if (savedRedirect && savedRedirect !== '/login') {\n          sessionStorage.removeItem('redirectAfterLogin');\n          navigate(savedRedirect);\n        } else {\n          navigate('/dashboard');\n        }\n      }\n    }\n  };\n\n  /**\n   * Naviga al frontend pubblico dalla dashboard\n   */\n  const goToPublicFrontend = () => {\n    navigate('/');\n  };\n\n  /**\n   * Controlla se l'utente corrente può accedere al frontend privato\n   */\n  const canAccessPrivateArea = () => {\n    return isAuthenticated && !isLoading;\n  };\n\n  /**\n   * Controlla se siamo in una pagina pubblica\n   */\n  const isPublicPage = () => {\n    const publicPaths = ['/', '/corsi', '/servizi', '/contatti', '/lavora-con-noi', '/login'];\n    return publicPaths.some(path => \n      path === '/' \n        ? location.pathname === path \n        : location.pathname.startsWith(path)\n    );\n  };\n\n  /**\n   * Controlla se siamo in una pagina privata\n   */\n  const isPrivatePage = () => {\n    const privatePaths = ['/dashboard', '/companies', '/courses', '/persons', '/employees', '/settings'];\n    return privatePaths.some(path => location.pathname.startsWith(path));\n  };\n\n  // Auto-redirect dopo login\n  useEffect(() => {\n    handlePostLoginRedirect();\n  }, [isAuthenticated, isLoading, location.pathname]);\n\n  return {\n    handleAreaRiservataClick,\n    handlePostLoginRedirect,\n    goToPublicFrontend,\n    canAccessPrivateArea,\n    isPublicPage: isPublicPage(),\n    isPrivatePage: isPrivatePage(),\n    isAuthenticated,\n    isLoading\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useCompanies.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { getCompanies, createCompany, updateCompany, deleteCompany } from '../services/companies';\nimport { Company } from '../types';\n\nexport function useCompanies() {\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const isLoadingRef = useRef(false);\n  const requestTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Debounced load function to prevent multiple rapid calls\n  const loadCompanies = useCallback(async (forceRefresh = false) => {\n    // Skip if we're already loading, unless it's a forced refresh\n    if (isLoadingRef.current && !forceRefresh) return;\n    \n    // Clear any pending timeout\n    if (requestTimeoutRef.current) {\n      clearTimeout(requestTimeoutRef.current);\n      requestTimeoutRef.current = null;\n    }\n    \n    try {\n      isLoadingRef.current = true;\n      setLoading(true);\n      setError(null);\n      \n      const data = await getCompanies();\n      setCompanies(data);\n    } catch (err) {\n      console.error('Failed to load companies:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load companies');\n    } finally {\n      setLoading(false);\n      isLoadingRef.current = false;\n    }\n  }, []);\n\n  // Initial load\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      loadCompanies();\n    }, 100);\n    \n    return () => {\n      clearTimeout(timeoutId);\n      if (requestTimeoutRef.current) {\n        clearTimeout(requestTimeoutRef.current);\n      }\n    };\n  }, [loadCompanies]);\n\n  // Add company with optimistic update\n  const addCompany = useCallback(async (company: Omit<Company, 'id'> & { id?: string }) => {\n    try {\n      setError(null);\n      \n      // Generate temporary ID for optimistic update\n      const tempId = `temp-${Date.now()}`;\n      const tempCompany = { ...company, id: tempId } as Company;\n      \n      // Optimistic update\n      setCompanies((prev) => [...prev, tempCompany]);\n      \n      // Actual API call\n      const newCompany = await createCompany(company);\n      \n      // Update with real data\n      setCompanies((prev) => prev.map((c) => c.id === tempId ? newCompany : c));\n      return newCompany;\n    } catch (err) {\n      console.error('Failed to create company:', err);\n      // Revert optimistic update on error\n      setCompanies((prev) => prev.filter((c) => !c.id.toString().startsWith('temp-')));\n      setError(err instanceof Error ? err.message : 'Failed to create company');\n      throw err;\n    }\n  }, []);\n\n  // Edit company with optimistic update\n  const editCompany = useCallback(async (id: string, company: Partial<Company>) => {\n    // Store original for potential rollback\n    const originalCompany = companies.find((c) => c.id === id);\n    \n    try {\n      setError(null);\n      \n      // Optimistic update\n      setCompanies((prev) => prev.map((c) => c.id === id ? { ...c, ...company } : c));\n      \n      // Actual API call\n      const updatedCompany = await updateCompany(id, company);\n      \n      // Update with real data\n      setCompanies((prev) => prev.map((c) => c.id === id ? updatedCompany : c));\n      return updatedCompany;\n    } catch (err) {\n      console.error('Failed to update company:', err);\n      // Rollback on error\n      if (originalCompany) {\n        setCompanies((prev) => prev.map((c) => c.id === id ? originalCompany : c));\n      }\n      setError(err instanceof Error ? err.message : 'Failed to update company');\n      throw err;\n    }\n  }, [companies]);\n\n  // Optimistic delete\n  const removeCompany = useCallback(async (id: string) => {\n    // Store original for potential rollback\n    const originalCompany = companies.find((c) => c.id === id);\n    \n    try {\n      setError(null);\n      \n      // Optimistic update\n      setCompanies((prev) => prev.filter((c) => c.id !== id));\n      \n      // Actual API call\n      await deleteCompany(id);\n    } catch (err) {\n      console.error('Failed to delete company:', err);\n      // Rollback on error\n      if (originalCompany) {\n        setCompanies((prev) => [...prev, originalCompany]);\n      }\n      setError(err instanceof Error ? err.message : 'Failed to delete company');\n      throw err;\n    }\n  }, [companies]);\n\n  // Force refresh function for manual refresh\n  const refresh = useCallback(() => loadCompanies(true), [loadCompanies]);\n\n  return {\n    companies,\n    loading,\n    error,\n    addCompany,\n    editCompany,\n    removeCompany,\n    refresh\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useCourses.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CourseSchedule' is defined but never used.","line":3,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":32}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { getCourses, createCourse, updateCourse, createCourseSchedule, enrollEmployees } from '../services/courses';\nimport { Course, CourseSchedule } from '../services/courses';\n\nexport interface CourseInsert {\n  title: string;\n  category?: string;\n  description?: string;\n  duration?: string;\n  status?: 'ACTIVE' | 'INACTIVE';\n  validityYears?: number;\n  code?: string;\n  pricePerPerson?: number;\n  maxPeople?: number;\n  renewalDuration?: string;\n  regulation?: string;\n  certifications?: string;\n  contents?: string;\n}\n\nexport interface CourseUpdate {\n  title?: string;\n  category?: string;\n  description?: string;\n  duration?: string;\n  status?: 'ACTIVE' | 'INACTIVE';\n  validityYears?: number;\n  code?: string;\n  pricePerPerson?: number;\n  maxPeople?: number;\n  renewalDuration?: string;\n  regulation?: string;\n  certifications?: string;\n  contents?: string;\n}\n\nexport interface CourseScheduleInsert {\n  courseId: string;\n  startDate: string;\n  endDate: string;\n  location?: string;\n  maxParticipants?: number;\n  status?: string;\n}\n\nexport function useCourses() {\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadCourses();\n  }, []);\n\n  async function loadCourses() {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await getCourses();\n      setCourses(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load courses');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function addCourse(course: CourseInsert) {\n    try {\n      setError(null);\n      const newCourse = await createCourse(course);\n      setCourses(prev => [...prev, newCourse]);\n      return newCourse;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create course');\n      throw err;\n    }\n  }\n\n  async function editCourse(id: string, course: CourseUpdate) {\n    try {\n      setError(null);\n      const updatedCourse = await updateCourse(id, course);\n      setCourses(prev => prev.map(c => c.id === id ? updatedCourse : c));\n      return updatedCourse;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update course');\n      throw err;\n    }\n  }\n\n  async function scheduleCourse(schedule: CourseScheduleInsert) {\n    try {\n      setError(null);\n      const newSchedule = await createCourseSchedule(schedule);\n      return newSchedule;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to schedule course');\n      throw err;\n    }\n  }\n\n  async function enrollInCourse(scheduleId: string, employeeIds: string[]) {\n    try {\n      setError(null);\n      const enrollments = await enrollEmployees(scheduleId, employeeIds);\n      return enrollments;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to enroll employees');\n      throw err;\n    }\n  }\n\n  return {\n    courses,\n    loading,\n    error,\n    addCourse,\n    editCourse,\n    scheduleCourse,\n    enrollInCourse,\n    refresh: loadCourses\n  };\n}\n\nexport default useCourses;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useDataExport.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'pollExportStatus'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [pollExportStatus]","fix":{"range":[2762,2764],"text":"[pollExportStatus]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Data Export Hook\n * Handles data export requests and downloads\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\nimport {\n  DataExportRequest,\n  DataExportFormData,\n  UseDataExportReturn,\n  DataExportResponse,\n  GDPRApiResponse\n} from '../types/gdpr';\nimport { useAuth } from '../context/AuthContext';\nimport { toast } from 'react-hot-toast';\n\nexport const useDataExport = (): UseDataExportReturn => {\n  const [exportRequests, setExportRequests] = useState<DataExportRequest[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  /**\n   * Fetch user's export requests\n   */\n  const fetchExportRequests = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiClient.get<GDPRApiResponse<{ exports: DataExportRequest[] }>>(\n        '/api/gdpr/export/requests'\n      );\n      \n      if (response.data.success && response.data.data) {\n        setExportRequests(response.data.data.exports);\n      } else {\n        throw new Error(response.data.error || 'Failed to fetch export requests');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch export requests';\n      setError(errorMessage);\n      console.error('Error fetching export requests:', err);\n      toast.error('Failed to load export requests');\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  /**\n   * Request a new data export\n   */\n  const requestExport = useCallback(async (data: DataExportFormData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiClient.post<DataExportResponse>('/api/gdpr/export', {\n        format: data.format,\n        includeAuditTrail: data.includeAuditTrail,\n        includeConsents: data.includeConsents\n      });\n\n      if (response.data.success && response.data.data) {\n        const newRequest = response.data.data.exportRequest;\n        \n        // Add to local state\n        setExportRequests(prev => [newRequest, ...prev]);\n\n        toast.success('Data export requested successfully');\n        \n        // Start polling for completion\n        pollExportStatus(newRequest.id);\n      } else {\n        throw new Error(response.data.error || 'Failed to request data export');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to request data export';\n      setError(errorMessage);\n      console.error('Error requesting data export:', err);\n      toast.error('Failed to request data export');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Download an export file\n   */\n  const downloadExport = useCallback(async (requestId: string) => {\n    try {\n      setLoading(true);\n      \n      const exportRequest = exportRequests.find(req => req.id === requestId);\n      if (!exportRequest) {\n        throw new Error('Export request not found');\n      }\n\n      if (exportRequest.status !== 'completed' || !exportRequest.downloadUrl) {\n        throw new Error('Export is not ready for download');\n      }\n\n      // Check if export has expired\n      if (exportRequest.expiryDate && new Date() > new Date(exportRequest.expiryDate)) {\n        throw new Error('Export has expired. Please request a new export.');\n      }\n\n      const response = await apiClient.get(\n        `/api/gdpr/export/download/${requestId}`,\n        { responseType: 'blob' }\n      );\n\n      // Create download link\n      const blob = new Blob([response.data]);\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      \n      // Determine file extension based on format\n      const extension = exportRequest.format === 'json' ? 'json' : \n                       exportRequest.format === 'csv' ? 'csv' : 'pdf';\n      \n      link.download = `gdpr-data-export-${requestId.slice(0, 8)}.${extension}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      toast.success('Export downloaded successfully');\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to download export';\n      console.error('Error downloading export:', err);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [exportRequests]);\n\n  /**\n   * Cancel a pending export request\n   */\n  const cancelExport = useCallback(async (requestId: string) => {\n    try {\n      setLoading(true);\n      \n      const response = await apiClient.delete<GDPRApiResponse>(\n        `/api/gdpr/export/${requestId}`\n      );\n\n      if (response.data.success) {\n        // Remove from local state\n        setExportRequests(prev => prev.filter(req => req.id !== requestId));\n        toast.success('Export request cancelled');\n      } else {\n        throw new Error(response.data.error || 'Failed to cancel export');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to cancel export';\n      console.error('Error cancelling export:', err);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Poll export status until completion\n   */\n  const pollExportStatus = useCallback(async (requestId: string) => {\n    const pollInterval = 5000; // 5 seconds\n    const maxPolls = 60; // 5 minutes max\n    let pollCount = 0;\n\n    const poll = async () => {\n      try {\n        const response = await apiClient.get<DataExportResponse>(\n          `/api/gdpr/export/status/${requestId}`\n        );\n\n        if (response.data.success && response.data.data) {\n          const updatedRequest = response.data.data.exportRequest;\n          \n          // Update local state\n          setExportRequests(prev => \n            prev.map(req => req.id === requestId ? updatedRequest : req)\n          );\n\n          // Check if completed or failed\n          if (updatedRequest.status === 'completed') {\n            toast.success('Data export completed and ready for download');\n            return;\n          } else if (updatedRequest.status === 'failed') {\n            toast.error(`Export failed: ${updatedRequest.error || 'Unknown error'}`);\n            return;\n          }\n\n          // Continue polling if still processing\n          if (updatedRequest.status === 'processing' && pollCount < maxPolls) {\n            pollCount++;\n            setTimeout(poll, pollInterval);\n          } else if (pollCount >= maxPolls) {\n            toast.error('Export is taking longer than expected. Please check back later.');\n          }\n        }\n      } catch (err) {\n        console.error('Error polling export status:', err);\n        // Don't show error toast for polling failures\n      }\n    };\n\n    // Start polling after a short delay\n    setTimeout(poll, 2000);\n  }, []);\n\n  /**\n   * Refresh export requests\n   */\n  const refreshRequests = useCallback(async () => {\n    await fetchExportRequests();\n  }, [fetchExportRequests]);\n\n  /**\n   * Get export statistics\n   */\n  const getExportStats = useCallback(() => {\n    const total = exportRequests.length;\n    const completed = exportRequests.filter(req => req.status === 'completed').length;\n    const pending = exportRequests.filter(req => req.status === 'pending').length;\n    const processing = exportRequests.filter(req => req.status === 'processing').length;\n    const failed = exportRequests.filter(req => req.status === 'failed').length;\n    const expired = exportRequests.filter(req => \n      req.expiryDate && new Date() > new Date(req.expiryDate)\n    ).length;\n\n    return {\n      total,\n      completed,\n      pending,\n      processing,\n      failed,\n      expired,\n      available: completed - expired\n    };\n  }, [exportRequests]);\n\n  /**\n   * Get the most recent export request\n   */\n  const getLatestExport = useCallback(() => {\n    if (exportRequests.length === 0) return null;\n    \n    return exportRequests.reduce((latest, current) => {\n      return new Date(current.requestDate) > new Date(latest.requestDate) ? current : latest;\n    });\n  }, [exportRequests]);\n\n  /**\n   * Check if user can request a new export\n   */\n  const canRequestNewExport = useCallback(() => {\n    const pendingOrProcessing = exportRequests.filter(req => \n      req.status === 'pending' || req.status === 'processing'\n    ).length;\n    \n    // Limit to 3 pending/processing requests at a time\n    return pendingOrProcessing < 3;\n  }, [exportRequests]);\n\n  // Load export requests on mount and when user changes\n  useEffect(() => {\n    if (user) {\n      fetchExportRequests();\n    } else {\n      setExportRequests([]);\n      setError(null);\n    }\n  }, [user, fetchExportRequests]);\n\n  // Auto-refresh every 30 seconds to check for status updates\n  useEffect(() => {\n    if (!user || exportRequests.length === 0) return;\n\n    const hasActiveRequests = exportRequests.some(req => \n      req.status === 'pending' || req.status === 'processing'\n    );\n\n    if (!hasActiveRequests) return;\n\n    const interval = setInterval(() => {\n      fetchExportRequests();\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [user, exportRequests, fetchExportRequests]);\n\n  return {\n    exportRequests,\n    loading,\n    error,\n    requestExport,\n    downloadExport,\n    cancelExport,\n    refreshRequests,\n    getExportStats,\n    getLatestExport,\n    canRequestNewExport\n  };\n};\n\nexport default useDataExport;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useDeletionRequest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useErrorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":12,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Hook personalizzato per la gestione centralizzata degli errori nell'applicazione.\n * \n * Fornisce funzioni per:\n * - Gestire errori API in modo consistente\n * - Mostrare errori all'utente in modo appropriato\n * - Tracciare errori per scopi di logging\n * \n * @module hooks/useErrorHandler\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { sanitizeErrorMessage } from '../utils/errorUtils';\n\n/**\n * Interfaccia per gli errori API\n */\nexport interface ApiError extends Error {\n  statusCode?: number;\n  details?: unknown;\n  code?: string;\n}\n\n/**\n * Opzioni per la gestione degli errori\n */\ninterface ErrorHandlerOptions {\n  /** Se mostrare automaticamente l'errore all'utente */\n  showToast?: boolean;\n  /** Se registrare l'errore nella console */\n  logToConsole?: boolean;\n  /** Callback personalizzato per errori specifici */\n  onError?: (error: ApiError) => void;\n}\n\n/**\n * Risultato del hook useErrorHandler\n */\ninterface ErrorHandlerResult {\n  /** Errore corrente */\n  error: ApiError | null;\n  /** Se è in corso la gestione di un errore */\n  isError: boolean;\n  /** Funzione per gestire un errore */\n  handleError: (error: unknown, customMessage?: string) => void;\n  /** Funzione per resettare lo stato dell'errore */\n  clearError: () => void;\n  /** Funzione per gestire errori in chiamate API */\n  wrapAsync: <T>(promise: Promise<T>, options?: ErrorHandlerOptions) => Promise<T | null>;\n}\n\n/**\n * Hook per la gestione centralizzata degli errori nell'applicazione\n * \n * @example\n * ```tsx\n * const { handleError, wrapAsync } = useErrorHandler();\n * \n * // Uso con una funzione asincrona\n * const handleSubmit = async () => {\n *   try {\n *     await saveData();\n *   } catch (error) {\n *     handleError(error, \"Impossibile salvare i dati\");\n *   }\n * };\n * \n * // Uso con wrapAsync\n * const fetchData = async () => {\n *   const data = await wrapAsync(api.fetchData(), {\n *     showToast: true,\n *     onError: (error) => {\n *       // Logica personalizzata per errori specifici\n *       if (error.statusCode === 404) {\n *         navigate('/not-found');\n *       }\n *     }\n *   });\n *   \n *   if (data) {\n *     // Procedi con i dati\n *   }\n * };\n * ```\n */\nexport function useErrorHandler(): ErrorHandlerResult {\n  const [error, setError] = useState<ApiError | null>(null);\n\n  /**\n   * Gestisce un errore, normalizzandolo e eseguendo le azioni appropriate\n   * \n   * @param error - Errore da gestire (può essere qualsiasi tipo)\n   * @param customMessage - Messaggio personalizzato da mostrare all'utente\n   */\n  const handleError = useCallback((error: unknown, customMessage?: string) => {\n    // Normalizza l'errore\n    const normalizedError: ApiError = error instanceof Error \n      ? error as ApiError\n      : new Error(typeof error === 'string' ? error : 'Si è verificato un errore sconosciuto');\n    \n    // Imposta lo stato dell'errore\n    setError(normalizedError);\n    \n    // Logga l'errore nella console\n    console.error('Error handled:', normalizedError);\n    \n    // Mostra il toast con l'errore sanitizzato\n    const message = customMessage || sanitizeErrorMessage(normalizedError, 'Si è verificato un errore');\n    toast.error(message);\n  }, []);\n\n  /**\n   * Resetta lo stato dell'errore\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  /**\n   * Avvolge una Promise per gestire automaticamente gli errori\n   * \n   * @param promise - Promise da avvolgere\n   * @param options - Opzioni per la gestione degli errori\n   * @returns Promise che restituisce il risultato o null in caso di errore\n   */\n  const wrapAsync = useCallback(async <T>(\n    promise: Promise<T>, \n    options: ErrorHandlerOptions = {}\n  ): Promise<T | null> => {\n    const { \n      showToast = true, \n      logToConsole = true,\n      onError \n    } = options;\n\n    try {\n      return await promise;\n    } catch (error) {\n      // Normalizza l'errore\n      const normalizedError: ApiError = error instanceof Error \n        ? error as ApiError \n        : new Error(typeof error === 'string' ? error : 'Si è verificato un errore sconosciuto');\n      \n      // Imposta lo stato dell'errore\n      setError(normalizedError);\n      \n      // Logga l'errore se richiesto\n      if (logToConsole) {\n        console.error('API Error:', normalizedError);\n        \n        if (normalizedError.details) {\n          console.error('Error details:', normalizedError.details);\n        }\n      }\n      \n      // Mostra il toast se richiesto\n      if (showToast) {\n        toast.error(sanitizeErrorMessage(normalizedError, 'Si è verificato un errore durante l\\'operazione'));\n      }\n      \n      // Chiama il callback personalizzato se fornito\n      if (onError) {\n        onError(normalizedError);\n      }\n      \n      return null;\n    }\n  }, []);\n\n  return {\n    error,\n    isError: error !== null,\n    handleError,\n    clearError,\n    wrapAsync,\n  };\n}\n\nexport default useErrorHandler;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useFetch.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRef' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'abortController' is defined but never used.","line":24,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":43},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchData' and 'fetchOptions.fallbackData'. Either include them or remove the dependency array. If 'setData' needs the current value of 'fetchOptions.fallbackData', you can also switch to useReducer instead of useState and read 'fetchOptions.fallbackData' in the reducer.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData, fetchOptions.fallbackData, url]","fix":{"range":[2218,2223],"text":"[fetchData, fetchOptions.fallbackData, url]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { apiGet } from '../services/api';\n\ninterface UseFetchOptions<T> {\n  initialData?: T;\n  fallbackData?: T;\n  timeoutMs?: number;\n  onSuccess?: (data: T) => void;\n  onError?: (error: string) => void;\n}\n\nfunction useFetch<T = unknown>(\n  url: string, \n  options?: Record<string, unknown>, \n  fetchOptions?: UseFetchOptions<T>\n) {\n  const [data, setData] = useState<T | undefined>(fetchOptions?.initialData);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Track if we're using fallback data\n  const [usingFallback, setUsingFallback] = useState(false);\n\n  const fetchData = async (abortController?: AbortController) => {\n    if (!url) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      console.log(`Fetching from: ${url}`);\n      \n      const response = await apiGet<T>(url);\n      \n      setData(response);\n      setUsingFallback(false);\n      fetchOptions?.onSuccess?.(response);\n    } catch (err: unknown) {\n      console.warn(`Fetch error:`, err);\n      \n      const errorMessage = err instanceof Error ? err.message : 'An error occurred';\n      \n      // Handle fallback data if provided\n      if (fetchOptions?.fallbackData !== undefined) {\n        console.log(`Using fallback data for ${url}`);\n        setData(fetchOptions.fallbackData);\n        setUsingFallback(true);\n        setError(`Using demo data (${errorMessage})`);\n      } else {\n        setError(errorMessage);\n      }\n      \n      fetchOptions?.onError?.(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    \n    if (url) {\n      fetchData(abortController);\n    } else {\n      // If URL is empty, reset everything except for fallback data\n      if (fetchOptions?.fallbackData !== undefined) {\n        setData(fetchOptions.fallbackData);\n        setUsingFallback(true);\n        setError('Using demo data (no endpoint provided)');\n      } else {\n        setData(undefined);\n        setError(null);\n      }\n      setLoading(false);\n    }\n    \n    return () => {\n      abortController.abort();\n    };\n  }, [url]);\n\n  const refetch = () => fetchData();\n\n  return { data, loading, error, refetch, usingFallback };\n}\n\nexport default useFetch;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useFilterSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":1,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":47}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo } from 'react';\n\ninterface UseFilterSearchResult<T> {\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n  filterActive: boolean;\n  toggleFilter: () => void;\n  filterItems: (items: T[]) => T[];\n  resetFilters: () => void;\n}\n\ninterface UseFilterSearchOptions<T> {\n  searchKeys?: (keyof T)[];\n  defaultSearchTerm?: string;\n  defaultFilterActive?: boolean;\n  customFilter?: (item: T, searchTerm: string) => boolean;\n}\n\n/**\n * A custom hook for managing search and filter functionality\n */\nfunction useFilterSearch<T>(options?: UseFilterSearchOptions<T>): UseFilterSearchResult<T> {\n  const { \n    searchKeys = [], \n    defaultSearchTerm = '', \n    defaultFilterActive = false,\n    customFilter\n  } = options || {};\n\n  const [searchTerm, setSearchTerm] = useState(defaultSearchTerm);\n  const [filterActive, setFilterActive] = useState(defaultFilterActive);\n\n  const toggleFilter = useCallback(() => {\n    setFilterActive(prev => !prev);\n  }, []);\n\n  const resetFilters = useCallback(() => {\n    setSearchTerm('');\n    setFilterActive(false);\n  }, []);\n\n  const filterItems = useCallback((items: T[]): T[] => {\n    if (!searchTerm.trim() || !filterActive) {\n      return items;\n    }\n\n    const lowerSearchTerm = searchTerm.toLowerCase();\n\n    return items.filter(item => {\n      if (customFilter) {\n        return customFilter(item, lowerSearchTerm);\n      }\n\n      // Default search implementation, searches across specified keys\n      if (searchKeys.length === 0) {\n        // If no keys specified, convert the whole item to string and search\n        return JSON.stringify(item).toLowerCase().includes(lowerSearchTerm);\n      }\n\n      return searchKeys.some(key => {\n        const value = item[key];\n        if (value === undefined || value === null) return false;\n        return String(value).toLowerCase().includes(lowerSearchTerm);\n      });\n    });\n  }, [searchTerm, filterActive, customFilter, searchKeys]);\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    filterActive,\n    toggleFilter,\n    filterItems,\n    resetFilters\n  };\n}\n\nexport default useFilterSearch;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useFormValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onSubmit' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleError' is assigned a value but never used.","line":53,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, Dispatch, SetStateAction } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useErrorHandler } from './index';\n\ntype ValidationRuleFn = (value: unknown, formData?: Record<string, unknown>) => string | null;\n\nexport interface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n  pattern?: RegExp;\n  email?: boolean;\n  custom?: ValidationRuleFn;\n  customMessage?: string;\n}\n\nexport type ValidationSchema = Record<string, ValidationRule>;\n\ninterface UseFormValidationReturn<T extends Record<string, unknown>> {\n  formData: T;\n  errors: Record<string, string>;\n  touched: Record<string, boolean>;\n  setFormData: Dispatch<SetStateAction<T>>;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\n  handleBlur: (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\n  validateField: (fieldName: string, value?: unknown) => string | null;\n  validateForm: () => boolean;\n  resetForm: () => void;\n  setFieldValue: (fieldName: string, value: unknown) => void;\n  getFieldProps: (fieldName: string) => {\n    name: string;\n    value: unknown;\n    onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\n    onBlur: (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\n    error: string | undefined;\n  };\n}\n\n/**\n * Hook per gestire la validazione dei form con uno schema definito\n */\nexport function useFormValidation<T extends Record<string, unknown>>(\n  initialValues: T,\n  validationSchema: ValidationSchema = {},\n  onSubmit?: (values: T) => void\n): UseFormValidationReturn<T> {\n  const { t } = useTranslation();\n  const [formData, setFormData] = useState<T>(initialValues);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [touched, setTouched] = useState<Record<string, boolean>>({});\n  const { handleError } = useErrorHandler();\n\n  /**\n   * Validazione di un singolo campo con lo schema\n   */\n  const validateField = useCallback(\n    (fieldName: string, value: unknown = undefined): string | null => {\n      const fieldValue = value !== undefined ? value : formData[fieldName];\n      const rules = validationSchema[fieldName];\n\n      if (!rules) return null;\n\n      // Validazione del campo richiesto\n      if (rules.required && (fieldValue === undefined || fieldValue === null || fieldValue === '')) {\n        return t('errors.required');\n      }\n\n      // Salta la validazione se il valore è vuoto ma non è richiesto\n      if (fieldValue === undefined || fieldValue === null || fieldValue === '') {\n        return null;\n      }\n\n      // Validazione minLength (per stringhe)\n      if (rules.minLength !== undefined && typeof fieldValue === 'string' && fieldValue.length < rules.minLength) {\n        return t('validation.minLength', { min: rules.minLength });\n      }\n\n      // Validazione maxLength (per stringhe)\n      if (rules.maxLength !== undefined && typeof fieldValue === 'string' && fieldValue.length > rules.maxLength) {\n        return t('validation.maxLength', { max: rules.maxLength });\n      }\n\n      // Validazione min (per numeri)\n      if (rules.min !== undefined && typeof fieldValue === 'number' && fieldValue < rules.min) {\n        return t('validation.min', { min: rules.min });\n      }\n\n      // Validazione max (per numeri)\n      if (rules.max !== undefined && typeof fieldValue === 'number' && fieldValue > rules.max) {\n        return t('validation.max', { max: rules.max });\n      }\n\n      // Validazione pattern (per stringhe)\n      if (rules.pattern && typeof fieldValue === 'string' && !rules.pattern.test(fieldValue)) {\n        return t('validation.pattern');\n      }\n\n      // Validazione email (per stringhe)\n      if (\n        rules.email &&\n        typeof fieldValue === 'string' &&\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(fieldValue)\n      ) {\n        return t('validation.email');\n      }\n\n      // Validazione custom\n      if (rules.custom) {\n        const customError = rules.custom(fieldValue, formData);\n        if (customError) {\n          return rules.customMessage || customError;\n        }\n      }\n\n      return null;\n    },\n    [formData, validationSchema, t]\n  );\n\n  /**\n   * Validazione dell'intero form\n   */\n  const validateForm = useCallback((): boolean => {\n    const validationErrors: Record<string, string> = {};\n    let isValid = true;\n\n    Object.keys(validationSchema).forEach((fieldName) => {\n      const errorMessage = validateField(fieldName);\n      if (errorMessage) {\n        validationErrors[fieldName] = errorMessage;\n        isValid = false;\n      }\n    });\n\n    setErrors(validationErrors);\n    return isValid;\n  }, [validateField, validationSchema]);\n\n  /**\n   * Gestione del cambio valore nei campi\n   */\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n      const { name, value, type } = e.target as HTMLInputElement;\n      let finalValue: unknown = value;\n\n      // Converti i valori in base al tipo di input\n      if (type === 'number') {\n        finalValue = value === '' ? '' : Number(value);\n      } else if (type === 'checkbox') {\n        finalValue = (e.target as HTMLInputElement).checked;\n      }\n\n      setFormData((prevData) => ({\n        ...prevData,\n        [name]: finalValue,\n      }));\n\n      // Se il campo è già stato toccato, aggiorna gli errori in tempo reale\n      if (touched[name]) {\n        const errorMessage = validateField(name, finalValue);\n        setErrors((prevErrors) => ({\n          ...prevErrors,\n          [name]: errorMessage || '',\n        }));\n      }\n    },\n    [touched, validateField]\n  );\n\n  /**\n   * Gestione dell'evento blur (uscita dal campo)\n   */\n  const handleBlur = useCallback(\n    (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n      const { name } = e.target;\n\n      // Marca il campo come toccato\n      setTouched((prevTouched) => ({\n        ...prevTouched,\n        [name]: true,\n      }));\n\n      // Valida il campo\n      const errorMessage = validateField(name);\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [name]: errorMessage || '',\n      }));\n    },\n    [validateField]\n  );\n\n  /**\n   * Imposta direttamente il valore di un campo\n   */\n  const setFieldValue = useCallback(\n    (fieldName: string, value: unknown) => {\n      setFormData((prevData) => ({\n        ...prevData,\n        [fieldName]: value,\n      }));\n\n      // Se il campo è già stato toccato, aggiorna gli errori in tempo reale\n      if (touched[fieldName]) {\n        const errorMessage = validateField(fieldName, value);\n        setErrors((prevErrors) => ({\n          ...prevErrors,\n          [fieldName]: errorMessage || '',\n        }));\n      }\n    },\n    [touched, validateField]\n  );\n\n  /**\n   * Reset del form ai valori iniziali\n   */\n  const resetForm = useCallback(() => {\n    setFormData(initialValues);\n    setErrors({});\n    setTouched({});\n  }, [initialValues]);\n\n  /**\n   * Ottieni tutte le props necessarie per un campo del form\n   */\n  const getFieldProps = useCallback(\n    (fieldName: string) => ({\n      name: fieldName,\n      value: formData[fieldName],\n      onChange: handleChange,\n      onBlur: handleBlur,\n      error: errors[fieldName],\n    }),\n    [formData, errors, handleChange, handleBlur]\n  );\n\n  return {\n    formData,\n    errors,\n    touched,\n    setFormData,\n    handleChange,\n    handleBlur,\n    validateField,\n    validateForm,\n    resetForm,\n    setFieldValue,\n    getFieldProps,\n  };\n}\n\nexport default useFormValidation;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useGDPRAdmin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useGDPRConsent.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'consents' is assigned a value but never used.","line":212,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6354,6357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6354,6357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6499,6502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6499,6502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Consent Management Hook\n * Handles user consent operations and state management\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\nimport {\n  GDPRConsent,\n  ConsentFormData,\n  ConsentWithdrawalFormData,\n  UseGDPRConsentReturn,\n  ConsentsListResponse,\n  ConsentResponse\n} from '../types/gdpr';\nimport { useAuth } from '../context/AuthContext';\nimport { toast } from 'react-hot-toast';\n\nexport const useGDPRConsent = (): UseGDPRConsentReturn => {\n  const [consents, setConsents] = useState<GDPRConsent[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  /**\n   * Fetch user's current consents\n   */\n  const fetchConsents = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiClient.get<ConsentsListResponse>('/api/gdpr/consent');\n      \n      if (response.data.success && response.data.data) {\n        setConsents(response.data.data.consents);\n      } else {\n        throw new Error(response.data.error || 'Failed to fetch consents');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch consents';\n      setError(errorMessage);\n      console.error('Error fetching consents:', err);\n      toast.error('Failed to load consent information');\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  /**\n   * Grant a new consent\n   */\n  const grantConsent = useCallback(async (data: ConsentFormData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiClient.post<ConsentResponse>('/api/gdpr/consent', {\n        consentType: data.consentType,\n        purpose: data.purpose,\n        legalBasis: data.legalBasis || 'consent'\n      });\n\n      if (response.data.success && response.data.data) {\n        const newConsent = response.data.data.consent;\n        \n        // Update local state\n        setConsents(prev => {\n          const filtered = prev.filter(c => c.consentType !== newConsent.consentType);\n          return [...filtered, newConsent];\n        });\n\n        toast.success(`Consent granted for ${data.consentType}`);\n      } else {\n        throw new Error(response.data.error || 'Failed to grant consent');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to grant consent';\n      setError(errorMessage);\n      console.error('Error granting consent:', err);\n      toast.error('Failed to grant consent');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Withdraw an existing consent\n   */\n  const withdrawConsent = useCallback(async (data: ConsentWithdrawalFormData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiClient.post<ConsentResponse>('/api/gdpr/consent/withdraw', {\n        consentType: data.consentType,\n        reason: data.reason\n      });\n\n      if (response.data.success && response.data.data) {\n        const withdrawnConsent = response.data.data.consent;\n        \n        // Update local state\n        setConsents(prev => \n          prev.map(consent => \n            consent.consentType === withdrawnConsent.consentType\n              ? { ...consent, ...withdrawnConsent }\n              : consent\n          )\n        );\n\n        toast.success(`Consent withdrawn for ${data.consentType}`);\n      } else {\n        throw new Error(response.data.error || 'Failed to withdraw consent');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to withdraw consent';\n      setError(errorMessage);\n      console.error('Error withdrawing consent:', err);\n      toast.error('Failed to withdraw consent');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Refresh consents data\n   */\n  const refreshConsents = useCallback(async () => {\n    await fetchConsents();\n  }, [fetchConsents]);\n\n  /**\n   * Get consent status for a specific type\n   */\n  const getConsentStatus = useCallback((consentType: string) => {\n    const consent = consents.find(c => c.consentType === consentType);\n    return {\n      granted: consent?.consentGiven || false,\n      date: consent?.consentDate,\n      withdrawnAt: consent?.withdrawnAt,\n      withdrawalReason: consent?.withdrawalReason\n    };\n  }, [consents]);\n\n  /**\n   * Check if a specific consent is active\n   */\n  const hasActiveConsent = useCallback((consentType: string) => {\n    const consent = consents.find(c => c.consentType === consentType);\n    return consent?.consentGiven && !consent?.withdrawnAt;\n  }, [consents]);\n\n  /**\n   * Get all active consents\n   */\n  const getActiveConsents = useCallback(() => {\n    return consents.filter(consent => consent.consentGiven && !consent.withdrawnAt);\n  }, [consents]);\n\n  /**\n   * Get consent statistics\n   */\n  const getConsentStats = useCallback(() => {\n    const total = consents.length;\n    const active = getActiveConsents().length;\n    const withdrawn = consents.filter(c => c.withdrawnAt).length;\n    \n    return {\n      total,\n      active,\n      withdrawn,\n      percentage: total > 0 ? Math.round((active / total) * 100) : 0\n    };\n  }, [consents, getActiveConsents]);\n\n  // Load consents on mount and when user changes\n  useEffect(() => {\n    if (user) {\n      fetchConsents();\n    } else {\n      setConsents([]);\n      setError(null);\n    }\n  }, [user, fetchConsents]);\n\n  return {\n    consents,\n    loading,\n    error,\n    grantConsent,\n    withdrawConsent,\n    refreshConsents,\n    // Additional utility functions\n    getConsentStatus,\n    hasActiveConsent,\n    getActiveConsents,\n    getConsentStats\n  };\n};\n\n/**\n * Hook for managing a single consent type\n * Useful for individual consent toggles\n */\nexport const useSingleConsent = (consentType: string) => {\n  const {\n    consents,\n    loading,\n    error,\n    grantConsent,\n    withdrawConsent,\n    hasActiveConsent,\n    getConsentStatus\n  } = useGDPRConsent();\n\n  const isActive = hasActiveConsent(consentType);\n  const status = getConsentStatus(consentType);\n\n  const toggle = useCallback(async (purpose: string, reason?: string) => {\n    if (isActive) {\n      await withdrawConsent({\n        consentType: consentType as any,\n        reason: reason || 'User requested withdrawal'\n      });\n    } else {\n      await grantConsent({\n        consentType: consentType as any,\n        purpose\n      });\n    }\n  }, [isActive, consentType, grantConsent, withdrawConsent]);\n\n  return {\n    isActive,\n    status,\n    loading,\n    error,\n    toggle\n  };\n};\n\nexport default useGDPRConsent;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useGDPREntityData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'readPermission' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEntities'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [apiEndpoint, entityNamePlural, loadEntities]","fix":{"range":[2339,2370],"text":"[apiEndpoint, entityNamePlural, loadEntities]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { apiGet } from '../services/api';\nimport { getLoadingErrorMessage } from '../utils/errorUtils';\n\ninterface UseGDPREntityDataProps {\n  apiEndpoint: string;\n  entityNamePlural: string;\n  entityDisplayNamePlural: string;\n  readPermission: string;\n}\n\ninterface UseGDPREntityDataReturn<T> {\n  entities: T[];\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n  setEntities: React.Dispatch<React.SetStateAction<T[]>>;\n}\n\nexport function useGDPREntityData<T = unknown>({\n  apiEndpoint,\n  entityNamePlural,\n  entityDisplayNamePlural,\n  readPermission\n}: UseGDPREntityDataProps): UseGDPREntityDataReturn<T> {\n  const [entities, setEntities] = useState<T[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadEntities = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Costruisci i parametri di query per l'endpoint delle persone\n      let apiUrl = apiEndpoint;\n      if (apiEndpoint === '/api/persons' || apiEndpoint === '/api/v1/persons') {\n        // Per l'endpoint delle persone, aggiungi i parametri necessari\n        const params = new URLSearchParams();\n        params.append('page', '1');\n        params.append('limit', '50');\n        params.append('sortBy', 'lastLogin');\n        params.append('sortOrder', 'desc');\n        \n        apiUrl = `${apiEndpoint}?${params.toString()}`;\n      }\n      \n      const response = await apiGet<{ persons?: T[] } | T[]>(apiUrl);\n      \n      // Gestisci la risposta paginata per l'endpoint delle persone\n      if ((apiEndpoint === '/api/persons' || apiEndpoint === '/api/v1/persons') && response && typeof response === 'object' && 'persons' in response && response.persons) {\n        setEntities(response.persons);\n      } else if (Array.isArray(response)) {\n        setEntities(response);\n      } else {\n        setEntities([]);\n      }\n    } catch (err: unknown) {\n      console.error(`❌ Errore caricamento ${entityDisplayNamePlural}:`, err);\n      setError(getLoadingErrorMessage(\n        (entityNamePlural as keyof typeof import('../utils/errorUtils').errorMessages.loading) || 'generic', \n        err\n      ));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadEntities();\n  }, [apiEndpoint, entityNamePlural]);\n\n  return {\n    entities,\n    loading,\n    error,\n    refetch: loadEntities,\n    setEntities\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useGDPREntityOperations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityName' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { apiDelete } from '../services/api';\nimport { useToast } from './ui/useToast';\nimport { sanitizeErrorMessage } from '../utils/errorUtils';\n\ninterface UseGDPREntityOperationsProps {\n  entityName: string;\n  entityNamePlural: string;\n  entityDisplayName: string;\n  entityDisplayNamePlural: string;\n  onDeleteEntity?: (id: string) => Promise<void>;\n  refetch: () => Promise<void>;\n}\n\ninterface UseGDPREntityOperationsReturn {\n  selectedIds: string[];\n  selectAll: boolean;\n  selectionMode: boolean;\n  setSelectedIds: React.Dispatch<React.SetStateAction<string[]>>;\n  setSelectAll: React.Dispatch<React.SetStateAction<boolean>>;\n  setSelectionMode: React.Dispatch<React.SetStateAction<boolean>>;\n  handleSelectAll: (entities: Array<{ id: string }>) => void;\n  handleSelectEntity: (id: string) => void;\n  handleDeleteEntity: (id: string) => Promise<void>;\n  handleBatchDelete: () => Promise<void>;\n  clearSelection: () => void;\n}\n\nexport function useGDPREntityOperations({\n  entityName,\n  entityNamePlural,\n  entityDisplayName,\n  entityDisplayNamePlural,\n  onDeleteEntity,\n  refetch\n}: UseGDPREntityOperationsProps): UseGDPREntityOperationsReturn {\n  const toast = useToast();\n  \n  // Stati per selezione e operazioni batch\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [selectAll, setSelectAll] = useState(false);\n  const [selectionMode, setSelectionMode] = useState(false);\n\n  const clearSelection = () => {\n    setSelectedIds([]);\n    setSelectAll(false);\n    setSelectionMode(false);\n  };\n\n  const handleSelectAll = (entities: Array<{ id: string }>) => {\n    // Validazione di sicurezza per assicurarsi che entities sia un array\n    if (!Array.isArray(entities)) {\n      console.error('handleSelectAll: entities deve essere un array, ricevuto:', typeof entities, entities);\n      return;\n    }\n    \n    if (selectAll) {\n      setSelectedIds([]);\n      setSelectAll(false);\n    } else {\n      setSelectedIds(entities.map(entity => entity.id));\n      setSelectAll(true);\n    }\n  };\n\n  const handleSelectEntity = (id: string) => {\n    setSelectedIds(prev => {\n      if (prev.includes(id)) {\n        const newSelection = prev.filter(selectedId => selectedId !== id);\n        if (newSelection.length === 0) {\n          setSelectionMode(false);\n        }\n        return newSelection;\n      } else {\n        if (!selectionMode) {\n          setSelectionMode(true);\n        }\n        return [...prev, id];\n      }\n    });\n  };\n\n  const handleDeleteEntity = async (id: string) => {\n    if (!window.confirm(`Sei sicuro di voler eliminare questo ${entityDisplayName.toLowerCase()}?`)) {\n      return;\n    }\n\n    try {\n      if (onDeleteEntity) {\n        await onDeleteEntity(id);\n      } else {\n        await apiDelete(`/api/v1/${entityNamePlural}/${id}`);\n      }\n      \n      toast.success(`${entityDisplayName} eliminato con successo`);\n      await refetch();\n      \n      // Rimuovi l'elemento dalla selezione se era selezionato\n      setSelectedIds(prev => prev.filter(selectedId => selectedId !== id));\n    } catch (error: unknown) {\n      console.error(`Errore eliminazione ${entityDisplayName.toLowerCase()}:`, error);\n      const errorMessage = error instanceof Error ? error.message : `Errore durante l'eliminazione del ${entityDisplayName.toLowerCase()}`;\n      toast.error(sanitizeErrorMessage(errorMessage));\n    }\n  };\n\n  const handleBatchDelete = async () => {\n    if (selectedIds.length === 0) return;\n\n    const confirmMessage = selectedIds.length === 1 \n      ? `Sei sicuro di voler eliminare questo ${entityDisplayName.toLowerCase()}?`\n      : `Sei sicuro di voler eliminare ${selectedIds.length} ${entityDisplayNamePlural.toLowerCase()}?`;\n\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      // Elimina tutti gli elementi selezionati in modo sequenziale per evitare rate limiting\n      for (const id of selectedIds) {\n        if (onDeleteEntity) {\n          await onDeleteEntity(id);\n        } else {\n          await apiDelete(`/api/v1/${entityNamePlural}/${id}`);\n        }\n        // Piccola pausa tra le richieste per evitare rate limiting\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      const successMessage = selectedIds.length === 1\n        ? `${entityDisplayName} eliminato con successo`\n        : `${selectedIds.length} ${entityDisplayNamePlural.toLowerCase()} eliminati con successo`;\n\n      toast.success(successMessage);\n      await refetch();\n      clearSelection();\n    } catch (error: unknown) {\n      console.error(`Errore eliminazione batch ${entityDisplayNamePlural.toLowerCase()}:`, error);\n      const errorMessage = error instanceof Error ? error.message : `Errore durante l'eliminazione dei ${entityDisplayNamePlural.toLowerCase()}`;\n      toast.error(sanitizeErrorMessage(errorMessage));\n    }\n  };\n\n  return {\n    selectedIds,\n    selectAll,\n    selectionMode,\n    setSelectedIds,\n    setSelectAll,\n    setSelectionMode,\n    handleSelectAll,\n    handleSelectEntity,\n    handleDeleteEntity,\n    handleBatchDelete,\n    clearSelection\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useGDPRPermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/usePagination.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\n\nexport interface UsePaginationOptions<T> {\n  data: T[];\n  pageSize?: number;\n  initialPage?: number;\n}\n\nexport interface UsePaginationReturn<T> {\n  currentPage: number;\n  totalPages: number;\n  pageSize: number;\n  paginatedData: T[];\n  totalItems: number;\n  goToPage: (page: number) => void;\n  nextPage: () => void;\n  prevPage: () => void;\n  setPageSize: (size: number) => void;\n}\n\nexport function usePagination<T>({\n  data,\n  pageSize: initialPageSize = 10,\n  initialPage = 1\n}: UsePaginationOptions<T>): UsePaginationReturn<T> {\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [pageSize, setPageSize] = useState(initialPageSize);\n  \n  // Resetta la pagina quando cambia dimensione\n  const handleSetPageSize = useCallback((newSize: number) => {\n    setPageSize(newSize);\n    setCurrentPage(1); // Torna alla prima pagina\n  }, []);\n  \n  // Calcola numero totale di pagine\n  const totalPages = useMemo(() => {\n    return Math.max(1, Math.ceil(data.length / pageSize));\n  }, [data.length, pageSize]);\n  \n  // Assicura che currentPage sia sempre valido\n  useMemo(() => {\n    if (currentPage > totalPages) {\n      setCurrentPage(totalPages);\n    }\n  }, [currentPage, totalPages]);\n  \n  // Estrai i dati per la pagina corrente\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return data.slice(startIndex, startIndex + pageSize);\n  }, [data, currentPage, pageSize]);\n  \n  // Funzioni di navigazione\n  const goToPage = useCallback((page: number) => {\n    const validPage = Math.min(Math.max(1, page), totalPages);\n    setCurrentPage(validPage);\n  }, [totalPages]);\n  \n  const nextPage = useCallback(() => {\n    if (currentPage < totalPages) {\n      setCurrentPage(prev => prev + 1);\n    }\n  }, [currentPage, totalPages]);\n  \n  const prevPage = useCallback(() => {\n    if (currentPage > 1) {\n      setCurrentPage(prev => prev - 1);\n    }\n  }, [currentPage]);\n  \n  return {\n    currentPage,\n    totalPages,\n    pageSize,\n    paginatedData,\n    totalItems: data.length,\n    goToPage,\n    nextPage,\n    prevPage,\n    setPageSize: handleSetPageSize\n  };\n}\n\nexport default usePagination;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/usePermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/usePersonFilters.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filterPersonsByRoleLevel' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPersons'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [autoFetch, fetchPersons, includeDeleted]","fix":{"range":[2933,2960],"text":"[autoFetch, fetchPersons, includeDeleted]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo } from 'react';\nimport { apiGet } from '../services/api';\nimport { \n  Person, \n  FilterConfig, \n  filterPersonsByRoleLevel, \n  filterEmployees, \n  filterTrainers,\n  applyCustomFilter \n} from '../services/roleHierarchyService';\n\nexport interface UsePersonFiltersOptions {\n  filterConfig?: FilterConfig;\n  filterType?: 'all' | 'employees' | 'trainers' | 'custom';\n  autoFetch?: boolean;\n  includeDeleted?: boolean;\n}\n\nexport interface UsePersonFiltersReturn {\n  persons: Person[];\n  filteredPersons: Person[];\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n  setPersons: (persons: Person[]) => void;\n  totalCount: number;\n  filteredCount: number;\n}\n\n/**\n * Hook personalizzato per la gestione delle persone con filtri gerarchici\n * Supporta filtri predefiniti per employees/trainers e filtri personalizzati\n */\nexport const usePersonFilters = ({\n  filterConfig,\n  filterType = 'all',\n  autoFetch = true,\n  includeDeleted = false\n}: UsePersonFiltersOptions = {}): UsePersonFiltersReturn => {\n  const [persons, setPersons] = useState<Person[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Calcola le persone filtrate in base alla configurazione\n  const filteredPersons = useMemo(() => {\n    if (!persons.length) return [];\n\n    switch (filterType) {\n      case 'employees':\n        return filterEmployees(persons);\n      \n      case 'trainers':\n        return filterTrainers(persons);\n      \n      case 'custom':\n        if (filterConfig) {\n          return applyCustomFilter(persons, filterConfig);\n        }\n        return persons;\n      \n      case 'all':\n      default:\n        return persons;\n    }\n  }, [persons, filterType, filterConfig]);\n\n  // Fetch delle persone dal backend\n  const fetchPersons = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Usa l'endpoint unificato per le persone con parametro includeDeleted\n      const params = includeDeleted ? '?includeDeleted=true' : '';\n      console.log(`🔍 usePersonFilters - Chiamando API: /api/v1/persons${params}`);\n      const data = await apiGet<Person[]>(`/api/v1/persons${params}`);\n      console.log(`🔍 usePersonFilters - Ricevuti ${data?.length || 0} elementi dall'API`);\n      console.log(`🔍 usePersonFilters - includeDeleted: ${includeDeleted}, filterType: ${filterType}`);\n      if (data && data.length > 0) {\n        console.log(`🔍 usePersonFilters - Primo elemento:`, data[0]);\n      }\n      setPersons(data || []);\n    } catch (err) {\n      console.error('Error fetching persons:', err);\n      setError(err instanceof Error ? err.message : 'Errore nel caricamento delle persone');\n      setPersons([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Auto-fetch al mount se richiesto\n  useEffect(() => {\n    if (autoFetch) {\n      fetchPersons();\n    }\n  }, [autoFetch, includeDeleted]);\n\n  return {\n    persons,\n    filteredPersons,\n    loading,\n    error,\n    refetch: fetchPersons,\n    setPersons,\n    totalCount: persons.length,\n    filteredCount: filteredPersons.length\n  };\n};\n\n/**\n * Hook semplificato per employees\n */\nexport const useEmployees = () => {\n  return usePersonFilters({ filterType: 'employees' });\n};\n\n/**\n * Hook semplificato per trainers\n */\nexport const useTrainers = () => {\n  return usePersonFilters({ filterType: 'trainers' });\n};\n\n/**\n * Hook per tutte le persone senza filtri\n */\nexport const useAllPersons = () => {\n  return usePersonFilters({ filterType: 'all' });\n};\n\n/**\n * Hook per tutte le persone inclusi i soft-deleted (per importazione)\n */\nexport const useAllPersonsForImport = () => {\n  return usePersonFilters({ filterType: 'all', includeDeleted: true });\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/usePrivacySettings.ts","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":94,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":109,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Privacy Settings Hook\n * Manages user privacy preferences and GDPR settings\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport apiClient from '../services/apiClient';\nimport {\n  PrivacySettings,\n  PrivacySettingsFormData,\n  UsePrivacySettingsReturn,\n  GDPRApiResponse\n} from '../types/gdpr';\nimport { useAuth } from '../context/AuthContext';\nimport { toast } from 'react-hot-toast';\n\nexport const usePrivacySettings = (): UsePrivacySettingsReturn => {\n  const [settings, setSettings] = useState<PrivacySettings | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const { user } = useAuth();\n\n  /**\n   * Fetch user's privacy settings\n   */\n  const fetchPrivacySettings = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiClient.get<GDPRApiResponse<{ settings: PrivacySettings }>>(\n        '/api/gdpr/privacy-settings'\n      );\n      \n      if (response.data.success && response.data.data) {\n        setSettings(response.data.data.settings);\n        setHasUnsavedChanges(false);\n      } else {\n        throw new Error(response.data.error || 'Failed to fetch privacy settings');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch privacy settings';\n      setError(errorMessage);\n      console.error('Error fetching privacy settings:', err);\n      toast.error('Failed to load privacy settings');\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  /**\n   * Update privacy settings\n   */\n  const updatePrivacySettings = useCallback(async (data: PrivacySettingsFormData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiClient.put<GDPRApiResponse<{ settings: PrivacySettings }>>(\n        '/api/gdpr/privacy-settings',\n        data\n      );\n\n      if (response.data.success && response.data.data) {\n        setSettings(response.data.data.settings);\n        setHasUnsavedChanges(false);\n        toast.success('Privacy settings updated successfully');\n      } else {\n        throw new Error(response.data.error || 'Failed to update privacy settings');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update privacy settings';\n      setError(errorMessage);\n      console.error('Error updating privacy settings:', err);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Update a single privacy setting\n   */\n  const updateSingleSetting = useCallback(async (\n    key: keyof PrivacySettingsFormData, \n    value: boolean\n  ) => {\n    if (!settings) return;\n\n    try {\n      const updatedSettings = {\n        dataProcessingConsent: settings.dataProcessingConsent,\n        marketingConsent: settings.marketingConsent,\n        analyticsConsent: settings.analyticsConsent,\n        profileVisibility: settings.profileVisibility,\n        dataRetentionOptOut: settings.dataRetentionOptOut,\n        thirdPartySharing: settings.thirdPartySharing,\n        [key]: value\n      };\n\n      await updatePrivacySettings(updatedSettings);\n    } catch (err) {\n      // Error handling is done in updatePrivacySettings\n      throw err;\n    }\n  }, [settings, updatePrivacySettings]);\n\n  /**\n   * Reset privacy settings to defaults\n   */\n  const resetToDefaults = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiClient.post<GDPRApiResponse<{ settings: PrivacySettings }>>(\n        '/api/gdpr/privacy-settings/reset'\n      );\n\n      if (response.data.success && response.data.data) {\n        setSettings(response.data.data.settings);\n        setHasUnsavedChanges(false);\n        toast.success('Privacy settings reset to defaults');\n      } else {\n        throw new Error(response.data.error || 'Failed to reset privacy settings');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to reset privacy settings';\n      setError(errorMessage);\n      console.error('Error resetting privacy settings:', err);\n      toast.error(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Get privacy compliance score\n   */\n  const getComplianceScore = useCallback(() => {\n    if (!settings) return 0;\n\n    const weights = {\n      dataProcessingConsent: 30, // Most important\n      marketingConsent: 15,\n      analyticsConsent: 15,\n      profileVisibility: 10,\n      dataRetentionOptOut: 15,\n      thirdPartySharing: 15\n    };\n\n    let score = 0;\n    let totalWeight = 0;\n\n    Object.entries(weights).forEach(([key, weight]) => {\n      const value = settings[key as keyof PrivacySettings];\n      totalWeight += weight;\n      \n      // For boolean settings, true = compliant\n      if (typeof value === 'boolean') {\n        if (key === 'dataRetentionOptOut' || key === 'thirdPartySharing') {\n          // These are opt-out settings, so false = more compliant\n          score += value ? 0 : weight;\n        } else {\n          // These are opt-in settings, so true = more compliant\n          score += value ? weight : 0;\n        }\n      }\n    });\n\n    return Math.round((score / totalWeight) * 100);\n  }, [settings]);\n\n  /**\n   * Get compliance recommendations\n   */\n  const getComplianceRecommendations = useCallback(() => {\n    if (!settings) return [];\n\n    const recommendations: string[] = [];\n\n    if (!settings.dataProcessingConsent) {\n      recommendations.push('Consider providing explicit consent for data processing to ensure compliance.');\n    }\n\n    if (settings.thirdPartySharing) {\n      recommendations.push('Review third-party data sharing settings to minimize privacy risks.');\n    }\n\n    if (!settings.dataRetentionOptOut && settings.profileVisibility) {\n      recommendations.push('Consider opting out of extended data retention for better privacy.');\n    }\n\n    if (!settings.analyticsConsent && !settings.marketingConsent) {\n      recommendations.push('You have opted out of analytics and marketing. This maximizes privacy but may limit personalized features.');\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('Your privacy settings are well-configured for GDPR compliance.');\n    }\n\n    return recommendations;\n  }, [settings]);\n\n  /**\n   * Check if settings have changed from saved state\n   */\n  const checkForChanges = useCallback((formData: PrivacySettingsFormData) => {\n    if (!settings) return false;\n\n    const hasChanges = Object.keys(formData).some(key => {\n      const formKey = key as keyof PrivacySettingsFormData;\n      return formData[formKey] !== settings[formKey];\n    });\n\n    setHasUnsavedChanges(hasChanges);\n    return hasChanges;\n  }, [settings]);\n\n  /**\n   * Get setting description for UI\n   */\n  const getSettingDescription = useCallback((key: keyof PrivacySettings) => {\n    const descriptions = {\n      dataProcessingConsent: 'Allow processing of your personal data for core platform functionality',\n      marketingConsent: 'Receive marketing communications and promotional content',\n      analyticsConsent: 'Allow collection of usage analytics to improve our services',\n      profileVisibility: 'Make your profile visible to other users within your organization',\n      dataRetentionOptOut: 'Opt out of extended data retention beyond legal requirements',\n      thirdPartySharing: 'Allow sharing of anonymized data with trusted third-party partners'\n    };\n\n    return descriptions[key] || '';\n  }, []);\n\n  /**\n   * Get setting impact level for UI\n   */\n  const getSettingImpact = useCallback((key: keyof PrivacySettings) => {\n    const impacts = {\n      dataProcessingConsent: 'high', // Core functionality\n      marketingConsent: 'low',\n      analyticsConsent: 'medium',\n      profileVisibility: 'medium',\n      dataRetentionOptOut: 'medium',\n      thirdPartySharing: 'low'\n    };\n\n    return impacts[key] || 'low';\n  }, []);\n\n  /**\n   * Export privacy settings\n   */\n  const exportSettings = useCallback(() => {\n    if (!settings) return null;\n\n    const exportData = {\n      ...settings,\n      exportedAt: new Date().toISOString(),\n      complianceScore: getComplianceScore(),\n      recommendations: getComplianceRecommendations()\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `privacy-settings-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n\n    toast.success('Privacy settings exported successfully');\n  }, [settings, getComplianceScore, getComplianceRecommendations]);\n\n  /**\n   * Refresh settings\n   */\n  const refreshSettings = useCallback(async () => {\n    await fetchPrivacySettings();\n  }, [fetchPrivacySettings]);\n\n  // Load privacy settings on mount and when user changes\n  useEffect(() => {\n    if (user) {\n      fetchPrivacySettings();\n    } else {\n      setSettings(null);\n      setError(null);\n      setHasUnsavedChanges(false);\n    }\n  }, [user, fetchPrivacySettings]);\n\n  // Warn user about unsaved changes before leaving\n  useEffect(() => {\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (hasUnsavedChanges) {\n        e.preventDefault();\n        e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';\n      }\n    };\n\n    if (hasUnsavedChanges) {\n      window.addEventListener('beforeunload', handleBeforeUnload);\n    }\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [hasUnsavedChanges]);\n\n  return {\n    settings,\n    loading,\n    error,\n    hasUnsavedChanges,\n    updatePrivacySettings,\n    updateSingleSetting,\n    resetToDefaults,\n    getComplianceScore,\n    getComplianceRecommendations,\n    checkForChanges,\n    getSettingDescription,\n    getSettingImpact,\n    exportSettings,\n    refreshSettings\n  };\n};\n\nexport default usePrivacySettings;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useResizable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useRoles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useSelection.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\n\ninterface UseSelectionResult<T extends string | number> {\n  selectedIds: T[];\n  isSelected: (id: T) => boolean;\n  toggleSelect: (id: T) => void;\n  toggleSelected: (id: T) => void;\n  selectAll: (ids: T[]) => void;\n  deselectAll: () => void;\n  toggleSelectAll: (ids: T[]) => void;\n}\n\n/**\n * A custom hook for managing selection in lists and tables\n */\nfunction useSelection<T extends string | number>(): UseSelectionResult<T> {\n  const [selectedIds, setSelectedIds] = useState<T[]>([]);\n\n  // Ensure we're working with an array to prevent \"includes is not a function\" errors\n  const isSelectedArray = useCallback((id: T, arr: T[]): boolean => {\n    return Array.isArray(arr) ? arr.includes(id) : false;\n  }, []);\n  \n  const isSelected = useCallback((id: T) => isSelectedArray(id, selectedIds), [selectedIds, isSelectedArray]);\n\n  const toggleSelect = useCallback((id: T) => {\n    setSelectedIds(current => \n      isSelectedArray(id, current)\n        ? current.filter(itemId => itemId !== id) \n        : [...current, id]\n    );\n  }, [isSelectedArray]);\n\n  const selectAll = useCallback((ids: T[]) => {\n    setSelectedIds(Array.isArray(ids) ? ids : []);\n  }, []);\n\n  const deselectAll = useCallback(() => {\n    setSelectedIds([]);\n  }, []);\n\n  const toggleSelectAll = useCallback((ids: T[]) => {\n    setSelectedIds(current => \n      Array.isArray(current) && current.length === ids.length ? [] : (Array.isArray(ids) ? ids : [])\n    );\n  }, []);\n\n  return {\n    selectedIds,\n    isSelected,\n    toggleSelect,\n    toggleSelected: toggleSelect,\n    selectAll,\n    deselectAll,\n    toggleSelectAll,\n  };\n}\n\nexport default useSelection;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useSelectionActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useSorting.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from 'react';\nimport { SortDirection } from '../components/shared/tables/SortableColumn';\n\nexport interface UseSortingOptions<T> {\n  data: T[];\n  defaultSortKey?: string | null;\n  defaultDirection?: SortDirection;\n}\n\nexport interface UseSortingReturn<T> {\n  sortedData: T[];\n  sortKey: string | null;\n  sortDirection: SortDirection;\n  setSorting: (key: string, direction: SortDirection) => void;\n}\n\ntype SortValueGetter<T> = (item: T, key: string) => unknown;\n\nexport function useSorting<T>({\n  data,\n  defaultSortKey = null,\n  defaultDirection = null,\n}: UseSortingOptions<T>): UseSortingReturn<T> {\n  const [sortKey, setSortKey] = useState<string | null>(defaultSortKey);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(defaultDirection);\n  \n  // Helper per ottenere il valore da una chiave (supporta dot notation)\n  const getValue: SortValueGetter<T> = useCallback((item: T, key: string) => {\n    if (!key) return null;\n    \n    // Supporto per dot notation (es. \"user.name\")\n    const keys = key.split('.');\n    let current: unknown = item;\n    \n    for (const k of keys) {\n      if (current && typeof current === 'object' && current !== null) {\n        current = (current as Record<string, unknown>)[k];\n      } else {\n        return null;\n      }\n    }\n    \n    return current;\n  }, []);\n  \n  // Ordina i dati\n  const sortedData = useMemo(() => {\n    if (!sortKey || !sortDirection) {\n      return [...data];\n    }\n    \n    return [...data].sort((a, b) => {\n      const valueA = getValue(a, sortKey);\n      const valueB = getValue(b, sortKey);\n      \n      // Gestione NULL/undefined\n      if (valueA === null || valueA === undefined) return sortDirection === 'asc' ? -1 : 1;\n      if (valueB === null || valueB === undefined) return sortDirection === 'asc' ? 1 : -1;\n      \n      // Confronto stringhe (case insensitive)\n      if (typeof valueA === 'string' && typeof valueB === 'string') {\n        return sortDirection === 'asc'\n          ? valueA.localeCompare(valueB, undefined, { sensitivity: 'base' })\n          : valueB.localeCompare(valueA, undefined, { sensitivity: 'base' });\n      }\n      \n      // Confronto numeri\n      if (typeof valueA === 'number' && typeof valueB === 'number') {\n        return sortDirection === 'asc' ? valueA - valueB : valueB - valueA;\n      }\n      \n      // Confronto date\n      if (valueA instanceof Date && valueB instanceof Date) {\n        return sortDirection === 'asc' \n          ? valueA.getTime() - valueB.getTime() \n          : valueB.getTime() - valueA.getTime();\n      }\n      \n      // Confronto booleani\n      if (typeof valueA === 'boolean' && typeof valueB === 'boolean') {\n        const numA = valueA ? 1 : 0;\n        const numB = valueB ? 1 : 0;\n        return sortDirection === 'asc' ? numA - numB : numB - numA;\n      }\n      \n      // Default: converti a stringa e confronta\n      const strA = String(valueA);\n      const strB = String(valueB);\n      return sortDirection === 'asc' \n        ? strA.localeCompare(strB) \n        : strB.localeCompare(strA);\n    });\n  }, [data, sortKey, sortDirection, getValue]);\n  \n  // Handler per cambiare ordinamento\n  const setSorting = useCallback((key: string, direction: SortDirection) => {\n    setSortKey(direction === null ? null : key);\n    setSortDirection(direction);\n  }, []);\n  \n  return {\n    sortedData,\n    sortKey,\n    sortDirection,\n    setSorting\n  };\n}\n\nexport default useSorting;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useTemplates.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { apiGet, apiDelete } from '../services/api';\nimport { Template } from '../types/template';\n\ninterface UseTemplatesReturn {\n  templates: Template[];\n  loading: boolean;\n  error: string | null;\n  success: string | null;\n  fetchTemplates: () => Promise<void>;\n  setAsDefault: (id: string, type: string) => Promise<void>;\n  removeTemplate: (id: string) => Promise<void>;\n  createTemplate: (templateData: Partial<Template>) => Promise<void>;\n  updateTemplate: (id: string, templateData: Partial<Template>) => Promise<void>;\n}\n\nexport const useTemplates = (): UseTemplatesReturn => {\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  const fetchTemplates = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await apiGet<Template[]>('/template-links');\n      setTemplates(data || []);\n    } catch (err) {\n      setError('Errore nel recupero dei template');\n      console.error('Error fetching templates:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const setAsDefault = async (id: string, type: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await apiPut(`/template-links/${id}`, { isDefault: true, type });\n      setSuccess('Template impostato come predefinito');\n      \n      // Resetta il messaggio di successo dopo 3 secondi\n      setTimeout(() => setSuccess(null), 3000);\n      \n      // Aggiorna la lista dei template\n      await fetchTemplates();\n    } catch (err) {\n      setError('Errore nell\\'impostare il template come predefinito');\n      console.error('Error setting template as default:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const removeTemplate = async (id: string) => {\n    if (window.confirm('Sei sicuro di voler eliminare questo template?')) {\n      try {\n        setLoading(true);\n        setError(null);\n        await apiDelete(`/template-links/${id}`);\n        setSuccess('Template eliminato con successo');\n        \n        // Resetta il messaggio di successo dopo 3 secondi\n        setTimeout(() => setSuccess(null), 3000);\n        \n        // Aggiorna la lista dei template\n        await fetchTemplates();\n      } catch (err) {\n        setError('Errore nell\\'eliminazione del template');\n        console.error('Error deleting template:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const createTemplate = async (templateData: Partial<Template>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await apiPost('/template-links', templateData);\n      setSuccess('Nuovo template creato con successo');\n      \n      // Resetta il messaggio di successo dopo 3 secondi\n      setTimeout(() => setSuccess(null), 3000);\n      \n      // Aggiorna la lista dei template\n      await fetchTemplates();\n    } catch (err) {\n      setError('Errore nel salvataggio del template');\n      console.error('Errore nel salvataggio del template:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateTemplate = async (id: string, templateData: Partial<Template>) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await apiPut(`/template-links/${id}`, templateData);\n      setSuccess('Template aggiornato con successo');\n      \n      // Resetta il messaggio di successo dopo 3 secondi\n      setTimeout(() => setSuccess(null), 3000);\n      \n      // Aggiorna la lista dei template\n      await fetchTemplates();\n    } catch (err) {\n      setError('Errore nell\\'aggiornamento del template');\n      console.error('Errore nell\\'aggiornamento del template:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Carica i template al primo rendering\n  useEffect(() => {\n    fetchTemplates();\n  }, []);\n\n  return {\n    templates,\n    loading,\n    error,\n    success,\n    fetchTemplates,\n    setAsDefault,\n    removeTemplate,\n    createTemplate,\n    updateTemplate\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useTenants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useToast.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":27,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":27,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { X } from 'lucide-react';\n\nexport interface Toast {\n  id: string;\n  title: string;\n  description: string;\n  status: 'success' | 'error' | 'warning' | 'info';\n}\n\nexport interface ToastOptions {\n  title: string;\n  description: string;\n  status?: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  isClosable?: boolean;\n}\n\ninterface ToastProps {\n  title: string;\n  description: string;\n  status: 'success' | 'error' | 'warning' | 'info';\n  onClose: () => void;\n}\n\n// Custom Toast notification component\nconst ToastComponent: React.FC<ToastProps> = ({ title, description, status, onClose }) => {\n  const bgColor = status === 'success' ? 'bg-green-100 border-green-500' : \n                 status === 'error' ? 'bg-red-100 border-red-500' : \n                 status === 'warning' ? 'bg-yellow-100 border-yellow-500' : 'bg-blue-100 border-blue-500';\n  \n  const textColor = status === 'success' ? 'text-green-800' : \n                   status === 'error' ? 'text-red-800' : \n                   status === 'warning' ? 'text-yellow-800' : 'text-blue-800';\n  \n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose();\n    }, 5000);\n    \n    return () => clearTimeout(timer);\n  }, [onClose]);\n  \n  return (\n    <div className={`fixed top-4 right-4 z-50 p-4 rounded shadow-lg border-l-4 ${bgColor} ${textColor} max-w-md`}>\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"font-bold\">{title}</h3>\n        <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\n          <X size={16} />\n        </button>\n      </div>\n      <p className=\"mt-1\">{description}</p>\n    </div>\n  );\n};\n\nexport const useToast = () => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n  \n  const toast = (options: ToastOptions) => {\n    const { title, description, status = 'info', duration = 5000 } = options;\n    const id = Math.random().toString(36).substring(2, 11);\n    const newToast: Toast = { id, title, description, status };\n    \n    setToasts((prev) => [...prev, newToast]);\n    \n    setTimeout(() => {\n      setToasts((prev) => prev.filter((t) => t.id !== id));\n    }, duration);\n  };\n  \n  const closeToast = (id: string) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id));\n  };\n  \n  const ToastContainer: React.FC = () => (\n    <div className=\"toast-container\">\n      {toasts.map((t) => (\n        <ToastComponent\n          key={t.id}\n          title={t.title}\n          description={t.description}\n          status={t.status}\n          onClose={() => closeToast(t.id)}\n        />\n      ))}\n    </div>\n  );\n  \n  return { toast, ToastContainer };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useTrainers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useQuery' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { getTrainers, createTrainer, updateTrainer, Trainer } from '../services/trainers';\nimport { useQuery } from '@tanstack/react-query';\n\nexport interface TrainerInsert {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  specialization?: string;\n  specialties?: string[];\n  certifications?: string[];\n  status?: 'Active' | 'Inactive';\n}\n\nexport interface TrainerUpdate {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  phone?: string;\n  specialization?: string;\n  specialties?: string[];\n  certifications?: string[];\n  status?: 'Active' | 'Inactive';\n}\n\nexport function useTrainers() {\n  const [trainers, setTrainers] = useState<Trainer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadTrainers();\n  }, []);\n\n  async function loadTrainers() {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await getTrainers();\n      \n      const processedData = data.map(trainer => ({\n        ...trainer,\n        specialties: trainer.specialties || [],\n        certifications: trainer.certifications || [],\n        status: trainer.status || 'Active'\n      }));\n      \n      setTrainers(processedData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load trainers');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function addTrainer(trainer: TrainerInsert) {\n    try {\n      setError(null);\n      const newTrainer = await createTrainer(trainer);\n      setTrainers(prev => [...prev, newTrainer]);\n      return newTrainer;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create trainer');\n      throw err;\n    }\n  }\n\n  async function editTrainer(id: string, trainer: TrainerUpdate) {\n    try {\n      setError(null);\n      const updatedTrainer = await updateTrainer(id, trainer);\n      setTrainers(prev => prev.map(t => t.id === id ? updatedTrainer : t));\n      return updatedTrainer;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update trainer');\n      throw err;\n    }\n  }\n\n  return {\n    trainers,\n    loading,\n    error,\n    addTrainer,\n    editTrainer,\n    refresh: loadTrainers\n  };\n}\n\nexport default useTrainers;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useViewMode.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n\ntype ViewMode = 'table' | 'grid';\n\nexport interface UseViewModeOptions {\n  storageKey: string;\n  defaultMode?: ViewMode;\n}\n\nexport interface UseViewModeReturn {\n  viewMode: ViewMode;\n  setViewMode: (mode: ViewMode) => void;\n  toggleViewMode: () => void;\n}\n\nexport function useViewMode({ \n  storageKey, \n  defaultMode = 'table' \n}: UseViewModeOptions): UseViewModeReturn {\n  const [viewMode, setViewMode] = useState<ViewMode>(() => {\n    const savedMode = localStorage.getItem(storageKey) as ViewMode;\n    return savedMode || defaultMode;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(storageKey, viewMode);\n  }, [viewMode, storageKey]);\n\n  const toggleViewMode = () => {\n    setViewMode(current => current === 'table' ? 'grid' : 'table');\n  };\n\n  return {\n    viewMode,\n    setViewMode,\n    toggleViewMode\n  };\n}\n\nexport default useViewMode;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/hooks/useuserpreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/lib/prisma.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/lib/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ClassValue' is defined but never used.","line":1,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clsx' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ClassValue, clsx } from \"clsx\"\n/**\n * Utility generiche per il progetto\n * \n * Questo file contiene funzioni di utilità generica utilizzate in tutta l'applicazione.\n * Quando aggiungi nuove funzioni, assicurati di documentarle adeguatamente con JSDoc.\n * \n * NOTA: La funzione cn() è stata spostata in design-system/utils/index.ts\n * per centralizzare le utility del design system.\n */\n\n// formatDate and capitalizeWords migrated to design-system/utils/index.ts\n// Use: import { formatDate, capitalizeWords } from '../design-system/utils';\n\n/**\n * Formatta un numero come valuta in Euro\n * @param value - Valore numerico da formattare\n * @param decimals - Numero di decimali da visualizzare\n * @returns Stringa formattata come valuta (es. \"€ 1.234,56\")\n */\nexport function formatCurrency(value: number, decimals = 2): string {\n  if (value === undefined || value === null) return '';\n  \n  return new Intl.NumberFormat('it-IT', {\n    style: 'currency',\n    currency: 'EUR',\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(value);\n}\n\n/**\n * Formatta un codice fiscale italiano in modo leggibile con spazi\n * (RSSMRA80A01H501Z -> RSS MRA 80A01 H501Z)\n * @param cf - Codice fiscale da formattare\n * @returns Codice fiscale formattato con spazi\n */\nexport function formatCodiceFiscale(cf: string): string {\n  if (!cf || cf.length !== 16) return cf || '';\n  \n  return `${cf.substring(0, 3)} ${cf.substring(3, 6)} ${cf.substring(6, 8)}${cf.substring(8, 10)} ${cf.substring(10, 15)}${cf.substring(15)}`.toUpperCase();\n}\n\n/**\n * Verifica se un codice fiscale italiano è formalmente valido\n * @param cf - Codice fiscale da validare\n * @param checkChecksum - Se true, verifica anche il carattere di controllo (default: true)\n * @returns True se il formato è valido, false altrimenti\n */\nexport function isValidCodiceFiscale(cf: string, checkChecksum = true): boolean {\n  if (!cf) return false;\n  \n  const normalizedCf = cf.toUpperCase().trim();\n  \n  // Verifica lunghezza\n  if (normalizedCf.length !== 16) return false;\n  \n  // Regex corretto per il codice fiscale italiano\n  // Considera i caratteri validi per il mese: A,B,C,D,E,H,L,M,P,R,S,T\n  const regex = /^[A-Z]{6}[0-9]{2}[ABCDEHLMPRST][0-9]{2}[A-Z][0-9]{3}[A-Z]$/;\n  \n  if (!regex.test(normalizedCf)) return false;\n  \n  // Verifica carattere di controllo se richiesto\n  if (checkChecksum) {\n    return isValidTaxCodeChecksum(normalizedCf);\n  }\n  \n  return true;\n}\n\n/**\n * Verifica il carattere di controllo del codice fiscale\n * @param taxCode - Codice fiscale normalizzato (16 caratteri maiuscoli)\n * @returns True se il carattere di controllo è corretto\n */\nfunction isValidTaxCodeChecksum(taxCode: string): boolean {\n  const oddMap: { [key: string]: number } = {\n    '0': 1, '1': 0, '2': 5, '3': 7, '4': 9, '5': 13, '6': 15, '7': 17, '8': 19, '9': 21,\n    'A': 1, 'B': 0, 'C': 5, 'D': 7, 'E': 9, 'F': 13, 'G': 15, 'H': 17, 'I': 19, 'J': 21,\n    'K': 2, 'L': 4, 'M': 18, 'N': 20, 'O': 11, 'P': 3, 'Q': 6, 'R': 8, 'S': 12, 'T': 14,\n    'U': 16, 'V': 10, 'W': 22, 'X': 25, 'Y': 24, 'Z': 23\n  };\n\n  const evenMap: { [key: string]: number } = {\n    '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n    'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9,\n    'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18, 'T': 19,\n    'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24, 'Z': 25\n  };\n\n  const checkMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  let sum = 0;\n  for (let i = 0; i < 15; i++) {\n    const char = taxCode[i];\n    if (i % 2 === 0) {\n      sum += oddMap[char] || 0;\n    } else {\n      sum += evenMap[char] || 0;\n    }\n  }\n\n  const expectedCheck = checkMap[sum % 26];\n  return taxCode[15] === expectedCheck;\n}\n\n/**\n * Genera un ID univoco\n * @returns Stringa con ID univoco\n */\nexport function generateUniqueId(): string {\n  return Date.now().toString(36) + Math.random().toString(36).substring(2);\n}\n\n/**\n * Crea un insieme di classi CSS condizionali\n * @param classes - Oggetto con classi come chiavi e condizioni booleane come valori\n * @returns Stringa con le classi separate da spazio\n */\nexport function classNames(...classes: (string | Record<string, boolean> | undefined)[]): string {\n  const result: string[] = [];\n  \n  classes.forEach(cls => {\n    if (!cls) return;\n    \n    if (typeof cls === 'string') {\n      result.push(cls);\n    } else {\n      Object.entries(cls).forEach(([className, condition]) => {\n        if (condition) {\n          result.push(className);\n        }\n      });\n    }\n  });\n  \n  return result.join(' ');\n}\n\n/**\n * Abbrevia un testo se supera la lunghezza massima\n * @param text - Testo da abbreviare\n * @param maxLength - Lunghezza massima\n * @param suffix - Suffisso da aggiungere (default: \"...\")\n * @returns Testo abbreviato\n */\nexport function truncateText(text: string, maxLength: number, suffix = '...'): string {\n  if (!text || text.length <= maxLength) return text || '';\n  \n  return text.substring(0, maxLength) + suffix;\n}\n\n/**\n * Genera un nome completo combinando nome e cognome\n * @param firstName - Nome\n * @param lastName - Cognome\n * @returns Nome completo formattato\n */\nexport function formatFullName(firstName: string, lastName: string): string {\n  if (!firstName && !lastName) return '';\n  \n  return [firstName, lastName].filter(Boolean).join(' ');\n}\n\n/**\n * Formatta un numero di telefono italiano\n * @param phoneNumber - Numero di telefono da formattare\n * @returns Numero di telefono formattato\n */\nexport function formatPhoneNumber(phoneNumber: string): string {\n  if (!phoneNumber) return '';\n  \n  // Rimuove tutti i caratteri non numerici\n  const cleaned = phoneNumber.replace(/\\D/g, '');\n  \n  // Formatta in base alla lunghezza\n  if (cleaned.length === 10) {\n    return `${cleaned.substring(0, 3)} ${cleaned.substring(3, 6)} ${cleaned.substring(6)}`;\n  }\n  \n  return phoneNumber;\n}\n\n/**\n * Calcola la differenza in giorni tra due date\n * @param startDate - Data di inizio\n * @param endDate - Data di fine\n * @returns Numero di giorni di differenza\n */\nexport function daysBetweenDates(startDate: Date | string, endDate: Date | string): number {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  \n  // Calcola la differenza in millisecondi e converte in giorni\n  const diffTime = Math.abs(end.getTime() - start.getTime());\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n}\n\n/**\n * Verifica se un valore è vuoto (null, undefined, stringa vuota, array vuoto, oggetto vuoto)\n * @param value - Valore da verificare\n * @returns True se il valore è vuoto, false altrimenti\n */\nexport function isEmpty(value: unknown): boolean {\n  if (value === null || value === undefined) return true;\n  if (typeof value === 'string') return value.trim() === '';\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === 'object') return Object.keys(value).length === 0;\n  \n  return false;\n}\n\n/**\n * Filtra un array di oggetti in base a una stringa di ricerca su proprietà specifiche\n * @param items - Array di oggetti da filtrare\n * @param searchTerm - Termine di ricerca\n * @param searchFields - Array di proprietà su cui cercare\n * @returns Array filtrato\n */\nexport function filterItemsBySearchTerm<T>(\n  items: T[],\n  searchTerm: string,\n  searchFields: (keyof T)[]\n): T[] {\n  if (!searchTerm || !searchFields.length) return items;\n  \n  const normalizedSearchTerm = searchTerm.toLowerCase().trim();\n  \n  return items.filter(item => {\n    return searchFields.some(field => {\n      const value = item[field];\n      if (value === null || value === undefined) return false;\n      \n      return String(value).toLowerCase().includes(normalizedSearchTerm);\n    });\n  });\n}\n\n/**\n * Formatta una durata in ore e minuti\n * @param durationInMinutes - Durata in minuti\n * @returns Durata formattata (es. \"2h 30m\")\n */\nexport function formatDuration(durationInMinutes: number): string {\n  if (!durationInMinutes && durationInMinutes !== 0) return '';\n  \n  const hours = Math.floor(durationInMinutes / 60);\n  const minutes = durationInMinutes % 60;\n  \n  if (hours === 0) {\n    return `${minutes}m`;\n  }\n  \n  if (minutes === 0) {\n    return `${hours}h`;\n  }\n  \n  return `${hours}h ${minutes}m`;\n}\n\n/**\n * Raggruppa un array di oggetti per una proprietà specifica\n * @param items - Array di oggetti da raggruppare\n * @param key - Chiave per il raggruppamento\n * @returns Oggetto con gli elementi raggruppati\n */\nexport function groupBy<T>(items: T[], key: keyof T): Record<string, T[]> {\n  return items.reduce((result, item) => {\n    const groupKey = String(item[key]);\n    \n    if (!result[groupKey]) {\n      result[groupKey] = [];\n    }\n    \n    result[groupKey].push(item);\n    return result;\n  }, {} as Record<string, T[]>);\n}\n\n/**\n * Esegue un deep clone di un oggetto\n * @param obj - Oggetto da clonare\n * @returns Clone profondo dell'oggetto\n */\nexport function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n  \n  return JSON.parse(JSON.stringify(obj));\n}\n\nexport default {\n  // formatDate, capitalizeWords migrated to design-system/utils/index.ts\n  formatCurrency,\n  formatCodiceFiscale,\n  isValidCodiceFiscale,\n  generateUniqueId,\n  classNames,\n  truncateText,\n  formatFullName,\n  formatPhoneNumber,\n  daysBetweenDates,\n  isEmpty,\n  filterItemsBySearchTerm,\n  formatDuration,\n  groupBy,\n  deepClone\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/AdminGDPR.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/AdminGDPR.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Employee' is defined but never used.","line":28,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'recordApiCall' is defined but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":127,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dataSource' is assigned a value but never used.","line":130,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":134,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isAuthenticated' is assigned a value but never used.","line":134,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":142,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fetchWithTimeout' is assigned a value but never used.","line":187,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'tenant?.id'. Either include it or remove the dependency array.","line":232,"column":6,"nodeType":"ArrayExpression","endLine":232,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [tenant?.id]","fix":{"range":[7112,7114],"text":"[tenant?.id]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":327,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10810,10813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10810,10813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10845,10848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10845,10848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12040,12043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12040,12043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":351,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12288,12291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12288,12291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":353,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12363,12366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12363,12366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'counters', 'fetchCounters', and 'loadFallbackData'. Either include them or remove the dependency array.","line":427,"column":6,"nodeType":"ArrayExpression","endLine":427,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [checkDashboardConsent, hasPermission, tenant?.id, loadFallbackData, fetchCounters, counters]","fix":{"range":[14763,14813],"text":"[checkDashboardConsent, hasPermission, tenant?.id, loadFallbackData, fetchCounters, counters]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":436,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15118,15121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15118,15121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":442,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15314,15317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15314,15317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":445,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":445,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15444,15447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15444,15447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'tenant?.id'. Either include it or remove the dependency array.","line":486,"column":6,"nodeType":"ArrayExpression","endLine":486,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData, tenant?.id]","fix":{"range":[16778,16789],"text":"[fetchData, tenant?.id]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":499,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":499,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17186,17189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17186,17189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":500,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":500,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17216,17219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17216,17219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":501,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":501,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17256,17259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17256,17259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":504,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17412,17415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17412,17415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":505,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":505,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17461,17464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17461,17464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":513,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17867,17870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17867,17870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":520,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":520,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18404,18407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18404,18407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'orari' is assigned a value but never used.","line":522,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":522,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":522,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":522,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18550,18553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18550,18553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":528,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19226,19229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19226,19229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":531,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":531,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19442,19445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19442,19445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":548,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":548,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20175,20178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20175,20178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":565,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":565,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20962,20965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20962,20965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":566,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":566,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21006,21009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21006,21009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":568,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":568,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21121,21124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21121,21124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":572,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21396,21399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21396,21399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":576,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":576,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21698,21701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21698,21701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":579,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":579,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21846,21849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21846,21849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":586,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":586,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22453,22456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22453,22456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":601,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":601,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23130,23133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23130,23133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleCreateSchedule' is assigned a value but never used.","line":626,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":626,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":626,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":626,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24126,24129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24126,24129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":921,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":921,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34708,34711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34708,34711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { \n  AlertTriangle,\n  Building2,\n  Calendar,\n  GraduationCap,\n  TrendingUp,\n  Users\n} from 'lucide-react';\nimport { Doughnut, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport { dummyData } from '../data/dummyData';\nimport StatCard from '../components/dashboard/StatCard';\nimport ScheduleCalendar, { ScheduleEvent } from '../components/dashboard/ScheduleCalendar';\nimport ScheduleEventModalLazy from '../components/schedules/ScheduleEventModal.lazy';\nimport { useNavigate } from 'react-router-dom';\nimport { apiGet} from '../services/api';\nimport { getToken } from '../services/auth';\nimport { Company, Employee, Course } from '../types';\nimport { checkConsent as checkGdprConsent, logGdprAction, ConsentRequiredError } from '../utils/gdpr';\nimport { recordApiCall, startTimer } from '../utils/metrics';\nimport { useAuth } from '../context/AuthContext';\nimport { useTenant } from '../context/TenantContext';\n\n// Interfaccia estesa per la dashboard che include campi aggiuntivi\ninterface DashboardCompany extends Partial<Company> {\n  id: string;\n  name: string;\n  employeeCount?: number;\n  ragioneSociale: string; // Campo obbligatorio per compatibilità con ScheduleEventModal\n  sector?: string;\n}\n\ninterface DashboardTrainer {\n  id: string;\n  firstName: string; // Campo obbligatorio per compatibilità con ScheduleEventModal\n  lastName: string; // Campo obbligatorio per compatibilità con ScheduleEventModal\n}\n\n// Interfacce per i dati\ninterface DashboardEmployee {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  companyId?: string;\n  company?: DashboardCompany;\n}\n\ninterface DashboardSchedule {\n  id: string;\n  courseId: string;\n  course?: Course;\n  startDate: string;\n  endDate: string;\n  location?: string;\n  trainerId?: string;\n  trainer?: DashboardTrainer;\n  maxParticipants?: number;\n  companies?: Array<{ company: DashboardCompany }>;\n  enrollments?: Array<{ employee: DashboardEmployee }>;\n  sessions?: Array<{\n    id: string;\n    date: string;\n    start: string;\n    end: string;\n    trainer?: DashboardTrainer;\n  }>;\n}\n\ninterface DummyData {\n  companies: DashboardCompany[];\n  employees: DashboardEmployee[];\n  courses: Course[];\n  schedules?: DashboardSchedule[];\n}\n\ninterface FetchOptions {\n  headers?: Record<string, string>;\n  method?: string;\n  body?: string;\n}\n\n// Register ChartJS components\nChartJS.register(\n  ArcElement,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n// Funzione helper per combinare data e ora in modo robusto\nfunction combineDateAndTime(dateStr: string, timeStr: string) {\n  const [year, month, day] = dateStr.split('T')[0].split('-');\n  const [hour, minute] = timeStr.split(':');\n  return new Date(\n    Number(year),\n    Number(month) - 1,\n    Number(day),\n    Number(hour),\n    Number(minute)\n  );\n}\n\nconst Dashboard: React.FC = () => {\n  const [showForm, setShowForm] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState<{ start: Date; end: Date; isAllDay?: boolean } | null>(null);\n  const [coursesList, setCoursesList] = useState<Course[]>([]);\n  const [trainersList, setTrainersList] = useState<DashboardTrainer[]>([]);\n  const [companiesList, setCompaniesList] = useState<DashboardCompany[]>([]);\n  const [employeesList, setEmployeesList] = useState<DashboardEmployee[]>([]);\n  const [calendarEvents, setCalendarEvents] = useState<ScheduleEvent[]>([]);\n  const [schedulesData, setSchedulesData] = useState<DashboardSchedule[]>([]); // per rimappare quando cambia vista\n  const [calendarView, setCalendarView] = useState('month');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [gdprConsent, setGdprConsent] = useState<boolean>(false);\n  const [dataSource, setDataSource] = useState<'api' | 'fallback'>('api');\n  const [counters, setCounters] = useState({ companies: 0, employees: 0 });\n  \n  const navigate = useNavigate();\n  const { user, isAuthenticated, hasPermission } = useAuth();\n  \n  // Uso condizionale di useTenant per evitare errori durante l'inizializzazione\n  let tenant = null;\n  \n  try {\n    const tenantContext = useTenant();\n    tenant = tenantContext.tenant;\n  } catch (error) {\n    console.warn('TenantContext not yet initialized, using fallback values');\n  }\n  \n  const mountedRef = useRef(true);\n  const fetchingRef = useRef(false);\n  \n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  // GDPR Consent Check\n  const checkDashboardConsent = useCallback(async () => {\n    try {\n      const hasConsent = await checkGdprConsent('dashboard_data');\n    setGdprConsent(hasConsent);\n    \n    if (!hasConsent) {\n        await logGdprAction({\n          action: 'DASHBOARD_ACCESS_DENIED',\n          timestamp: new Date().toISOString(),\n          tenantId: tenant?.id,\n          metadata: {\n            reason: 'Missing consent for dashboard data access'\n          }\n        });\n        \n        setError('Accesso ai dati del dashboard richiede il consenso GDPR');\n        setDataSource('fallback');\n        return false;\n      }\n      \n      return true;\n    } catch (error) {\n      console.warn('GDPR consent check failed, using fallback data:', error);\n      setGdprConsent(false);\n      setDataSource('fallback');\n      return false;\n    }\n  }, [tenant?.id]);\n\n  // Enhanced fetch function with timeout and retry\n  const fetchWithTimeout = useCallback(async (url: string, options: FetchOptions = {}, timeout = 5000, retries = 2): Promise<unknown> => {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    \n    // Get authentication token\n    const token = getToken();\n    \n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n          'X-Tenant-ID': tenant?.id || '1',\n          ...options.headers\n        };\n        \n        // Add authentication token if available\n        if (token) {\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        \n        const response = await fetch(url, {\n          ...options,\n          signal: controller.signal,\n          headers\n        });\n        \n        clearTimeout(timeoutId);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        return await response.json();\n      } catch (error: unknown) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        console.warn(`Attempt ${attempt + 1} failed for ${url}:`, errorMessage);\n        \n        if (attempt === retries) {\n          throw error;\n        }\n        \n        // Wait before retry (exponential backoff)\n        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n      }\n    }\n  }, []);\n\n  // Simplified counters fetch using only the working endpoint\n  const fetchCounters = useCallback(async (): Promise<{ companies: number; employees: number }> => {\n    try {\n      console.log('🔄 Fetching counters from /api/counters...');\n      const data = await apiGet<{ companies: number; employees: number }>('/api/counters');\n      const result = {\n        companies: data.companies || 0,\n        employees: data.employees || 0\n      };\n      console.log('✅ Counters fetched successfully:', result);\n      return result;\n    } catch (error) {\n      console.warn('❌ Failed to fetch counters:', error);\n      // Return fallback data from dummy data\n      const dummyDataTyped = dummyData as unknown as DummyData;\n      return {\n        companies: (dummyDataTyped.companies || []).length,\n        employees: (dummyDataTyped.employees || []).length\n      };\n    }\n  }, []);\n\n  // Optimized data fetching with GDPR compliance\n  const fetchData = useCallback(async () => {\n    if (fetchingRef.current || !mountedRef.current) return;\n    \n    fetchingRef.current = true;\n    setIsLoading(true);\n    setError(null);\n    \n    const timer = startTimer();\n    \n    try {\n      // Check GDPR consent first\n      const hasConsent = await checkDashboardConsent();\n      \n      if (!hasConsent) {\n        // Use fallback data without API calls\n        await loadFallbackData();\n        return;\n      }\n      \n      // Check permissions - permetti accesso se ha dashboard:read, companies:read o è admin\n      const hasDashboardAccess = hasPermission && (\n        hasPermission('dashboard', 'read') || \n        hasPermission('dashboard', 'view') || \n        hasPermission('companies', 'read') ||\n        hasPermission('administration', 'view')\n      );\n      \n      if (!hasDashboardAccess) {\n        throw new Error('Permessi insufficienti per accedere al dashboard');\n      }\n      \n      console.log('🚀 Fetching dashboard data with GDPR compliance...');\n      \n      // Fetch counters using enhanced strategy\n      try {\n        const countersData = await fetchCounters();\n        setCounters(countersData);\n        console.log('✅ Counters loaded:', countersData);\n      } catch (error) {\n        console.warn('Failed to fetch counters with all strategies:', error);\n        // Fallback to dummy data counters\n        const dummyDataTyped = dummyData as unknown as DummyData;\n        setCounters({\n          companies: (dummyDataTyped.companies || []).length,\n          employees: (dummyDataTyped.employees || []).length\n        });\n      }\n      \n      // Fetch data using optimized API calls (removed non-existing dashboard endpoints)\n      const [coursesData, trainersData, schedulesData] = await Promise.allSettled([\n        apiGet('/courses').catch(err => {\n          console.warn('Failed to fetch courses:', err);\n          return [];\n        }),\n        apiGet('/trainers').catch(err => {\n          console.warn('Failed to fetch trainers:', err);\n          return [];\n        }),\n        apiGet('/api/v1/schedules').catch(err => {\n          console.warn('Failed to fetch schedules:', err);\n          return [];\n        })\n      ]);\n      \n      // Process results with safety checks\n      const courses = coursesData.status === 'fulfilled' ? (Array.isArray(coursesData.value) ? coursesData.value : []) : [];\n      const trainers = trainersData.status === 'fulfilled' ? (Array.isArray(trainersData.value) ? trainersData.value : []) : [];\n      const schedules = schedulesData.status === 'fulfilled' ? (Array.isArray(schedulesData.value) ? schedulesData.value : []) : [];\n      \n      // Use empty arrays for companies and employees since we get counts from /api/counters\n      const companies: any[] = [];\n      const employees: any[] = [];\n      \n      // DEBUG: Log dettagliato dei risultati\n      console.log('🔍 [DEBUG] API Results Details:');\n      console.log('📊 Courses:', { status: coursesData.status, length: courses.length, data: courses });\n      console.log('👨‍🏫 Trainers:', { status: trainersData.status, length: trainers.length, data: trainers });\n      console.log('🏢 Companies:', { length: companies.length, data: companies, note: 'Using empty array - counts from /api/counters' });\n      console.log('👥 Employees:', { length: employees.length, data: employees, note: 'Using empty array - counts from /api/counters' });\n      console.log('📅 Schedules:', { status: schedulesData.status, length: schedules.length, data: schedules });\n      \n      // DEBUG: Log errori se presenti\n      if (coursesData.status === 'rejected') console.error('❌ Courses error:', coursesData.reason);\n      if (trainersData.status === 'rejected') console.error('❌ Trainers error:', trainersData.reason);\n      if (schedulesData.status === 'rejected') console.error('❌ Schedules error:', schedulesData.reason);\n      \n      // Transform trainers data for compatibility\n      const transformedTrainers = trainers.map((trainer: any) => ({\n        id: trainer.id,\n        firstName: trainer.firstName || '',\n        lastName: trainer.lastName || ''\n      }));\n      \n      // Add employeeCount and ensure compatibility\n      const companiesWithCounts = companies.map((company: any) => ({\n        ...company,\n        employeeCount: employees.filter((e: any) => \n          e.companyId === company.id\n        ).length,\n        sector: company.industry || company.sector || company.type || '',\n        ragioneSociale: company.ragioneSociale || company.name || ''\n      }));\n      \n      // Update state only if component is still mounted\n      if (mountedRef.current) {\n        setCoursesList(courses);\n        setTrainersList(transformedTrainers);\n        setCompaniesList(companiesWithCounts);\n        setEmployeesList(employees);\n        setSchedulesData(schedules);\n        setDataSource('api');\n        \n        // Counters are now handled exclusively by fetchCounters() using /api/counters\n        console.log('✅ Counters managed by /api/counters endpoint:', counters);\n        \n        console.log('✅ Dashboard data loaded successfully:', {\n          courses: courses.length,\n          trainers: transformedTrainers.length,\n          companies: companiesWithCounts.length,\n          employees: employees.length,\n          schedules: schedules.length\n        });\n      }\n      \n      // Log successful data fetch\n      await logGdprAction({\n        action: 'DASHBOARD_DATA_LOADED',\n        timestamp: new Date().toISOString(),\n        tenantId: tenant?.id,\n        metadata: {\n          duration: timer(),\n          dataSource: 'api',\n          recordCounts: {\n            courses: courses.length,\n            trainers: transformedTrainers.length,\n            companies: companiesWithCounts.length,\n            employees: employees.length,\n            schedules: schedules.length\n          }\n        }\n      });\n      \n    } catch (error) {\n      console.error('❌ Error loading dashboard data:', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Errore di connessione al server';\n      \n      // Log error\n      await logGdprAction({\n        action: 'DASHBOARD_DATA_ERROR',\n        timestamp: new Date().toISOString(),\n        tenantId: tenant?.id,\n        error: errorMessage,\n        metadata: {\n          duration: timer(),\n          errorType: error instanceof Error ? error.constructor.name : 'UnknownError'\n        }\n      });\n      \n      if (mountedRef.current) {\n        setError(errorMessage);\n        // Load fallback data on error\n        await loadFallbackData();\n      }\n    } finally {\n      fetchingRef.current = false;\n      if (mountedRef.current) {\n        setIsLoading(false);\n      }\n    }\n  }, [tenant?.id, hasPermission, checkDashboardConsent]);\n  \n  // Load fallback data (dummy data)\n  const loadFallbackData = useCallback(async () => {\n    console.log('📦 Loading fallback data...');\n    \n    try {\n      const dummyDataTyped = dummyData as unknown as DummyData;\n      \n      const transformedTrainers = (dummyDataTyped.employees || []).map((e: any) => ({\n        id: e.id,\n        firstName: e.firstName || '',\n        lastName: e.lastName || ''\n      }));\n      \n      const transformedCompanies = (dummyDataTyped.companies || []).map((c: any) => ({\n        ...c,\n        ragioneSociale: c.name || '',\n        employeeCount: (dummyDataTyped.employees || []).filter((e: any) => \n          e.companyId === c.id\n        ).length,\n        sector: c.industry || c.sector || c.type || ''\n      }));\n      \n      if (mountedRef.current) {\n        setCoursesList(dummyDataTyped.courses || []);\n        setTrainersList(transformedTrainers);\n        setCompaniesList(transformedCompanies);\n        setEmployeesList(dummyDataTyped.employees || []);\n        setSchedulesData(dummyDataTyped.schedules || []);\n        setDataSource('fallback');\n        // Set fallback counters\n        setCounters({\n          companies: transformedCompanies.length,\n          employees: (dummyDataTyped.employees || []).length\n        });\n      }\n      \n      await logGdprAction({\n        action: 'DASHBOARD_FALLBACK_DATA_LOADED',\n        timestamp: new Date().toISOString(),\n        tenantId: tenant?.id,\n        metadata: {\n          reason: gdprConsent ? 'API error' : 'Missing GDPR consent'\n        }\n      });\n      \n    } catch (error) {\n      console.error('Failed to load fallback data:', error);\n    }\n  }, [tenant?.id, gdprConsent]);\n  \n  // Initial data load\n  useEffect(() => {\n    // Load data even without tenant for testing - tenant is only used for GDPR logging\n    if (mountedRef.current) {\n      console.log('🚀 Dashboard: Loading data (tenant:', tenant?.id || 'not available', ')');\n      fetchData();\n    }\n  }, [fetchData]);\n  \n  // Log when tenant becomes available\n  useEffect(() => {\n    if (tenant) {\n      console.log('✅ Dashboard: Tenant loaded:', tenant.id);\n    }\n  }, [tenant]);\n\n  // Rimappa gli eventi ogni volta che cambia la vista o i dati\n  useEffect(() => {\n    if (!schedulesData.length) return;\n    // Helper: group sessions by scheduleId+date for month view\n    function groupSessionsByDay(schedules: any[]) {\n      const grouped: any[] = [];\n      schedules.forEach((s: any) => {\n        if (Array.isArray(s.sessions) && s.sessions.length > 0) {\n          // Raggruppa per giorno\n          const sessionsByDay: Record<string, any[]> = {};\n          s.sessions.forEach((sess: any) => {\n            const day = sess.date.split('T')[0];\n            if (!sessionsByDay[day]) sessionsByDay[day] = [];\n            sessionsByDay[day].push(sess);\n          });\n          Object.entries(sessionsByDay).forEach(([day, sessions]) => {\n            // Tooltip con tutte le sessioni (HTML)\n            const allSessions = s.sessions;\n            const sessioniTooltipHtml = allSessions.map((ss: any, i: number) => {\n              const dateStr = new Date(ss.date).toLocaleDateString('it-IT');\n              const orario = `${ss.start || '--:--'} - ${ss.end || '--:--'}`;\n              const trainer = ss.trainer ? ` (${ss.trainer.firstName} ${ss.trainer.lastName})` : '';\n              return `<span style='color:#2563eb;font-weight:700'>Sessione ${i+1}: ${dateStr}, ${orario}${trainer}</span>`;\n            }).join('<br>');\n            // Aziende senza duplicati\n            const aziende = [...new Set((s.companies || []).map((c: any) => c.company?.ragioneSociale || c.company?.name))].join(', ');\n            // Orari del giorno\n            const orari = sessions.map((sess: any, idx: number) => `Sessione ${idx + 1}: ${sess.start || '--:--'} - ${sess.end || '--:--'}${sess.trainer ? ' (' + sess.trainer.firstName + ' ' + sess.trainer.lastName + ')' : ''}`).join('\\n');\n            const sortedSessions = [...sessions].sort((a, b) => a.start.localeCompare(b.start));\n            const start = combineDateAndTime(day, sortedSessions[0].start);\n            const end = combineDateAndTime(day, sortedSessions[sessions.length-1].end);\n            // Titolo: aggiungi \" - Sessione X\" solo se ci sono sessioni in giorni diversi\n            let title = `${s.course?.title || s.course?.name || 'Corso'}`;\n            const allSameDay = allSessions.every((ss: any) => ss.date.split('T')[0] === day);\n            if (!allSameDay && allSessions.length > 1) {\n              // Trova la sessione corrispondente a questo giorno\n              const idx = allSessions.findIndex((ss: any) => ss.date.split('T')[0] === day);\n              if (idx !== -1) title += ` - Sessione ${idx + 1}`;\n            }\n            grouped.push({\n              id: s.id + '-' + day,\n              scheduleId: s.id,\n              title,\n              start,\n              end,\n              resource: s,\n              status: s.status,\n              tooltip: `Corso: ${s.course?.title || s.course?.name}\\nAziende: ${aziende}\\nLuogo: ${s.location || '-'}\\nData: ${new Date(day).toLocaleDateString('it-IT')}\\nStato: ${s.status}`,\n              sessioniTooltipHtml\n            });\n          });\n        } else {\n          // fallback: usa startDate/endDate della schedule\n          const aziende = [...new Set((s.companies || []).map((c: any) => c.company?.ragioneSociale || c.company?.name))].join(', ');\n          grouped.push({\n            id: s.id,\n            scheduleId: s.id,\n            title: s.course?.title || s.course?.name || 'Corso',\n            start: new Date(s.startDate),\n            end: new Date(s.endDate),\n            resource: s,\n            status: s.status,\n            tooltip: `Corso: ${s.course?.title || s.course?.name}\\nAziende: ${aziende}\\nLuogo: ${s.location || '-'}\\nData: ${s.startDate ? new Date(s.startDate).toLocaleDateString('it-IT') : '-'}\\nOrario: --:--\\nStato: ${s.status}`,\n            sessioniTooltipHtml: ''\n          });\n        }\n      });\n      return grouped;\n    }\n    // Helper: eventi separati per sessione (settimana/giorno)\n    function mapSessionsIndividually(schedules: any[]) {\n      return schedules.flatMap((s: any) => {\n        if (Array.isArray(s.sessions) && s.sessions.length > 0) {\n          return s.sessions.map((sess: any, idx: number) => {\n            const start = new Date(combineDateAndTime(sess.date, sess.start));\n            const end = new Date(combineDateAndTime(sess.date, sess.end));\n            const allSessions = s.sessions;\n            const allSameDay = allSessions.every((ss: any) => ss.date.split('T')[0] === sess.date.split('T')[0]);\n            let sessionTitle = s.course?.title || s.course?.name || 'Corso';\n            let sessionNumber = '';\n            if (!allSameDay && allSessions.length > 1) {\n              sessionNumber = ` - Sessione ${allSessions.findIndex((ss: any) => ss === sess) + 1}`;\n              sessionTitle += sessionNumber;\n            }\n            const sessioniTooltipHtml = allSessions.map((ss: any, i: number) => {\n              const dateStr = new Date(ss.date).toLocaleDateString('it-IT');\n              const orario = `${ss.start || '--:--'} - ${ss.end || '--:--'}`;\n              const trainer = ss.trainer ? ` (${ss.trainer.firstName} ${ss.trainer.lastName})` : '';\n              const isCurrent = allSameDay || ss === sess;\n              return `<span style='color:${isCurrent ? '#2563eb' : '#1e293b'};font-weight:${isCurrent ? 700 : 400}'>Sessione ${i+1}: ${dateStr}, ${orario}${trainer}</span>`;\n            }).join('<br>');\n            const aziende = [...new Set((s.companies || []).map((c: any) => c.company?.ragioneSociale || c.company?.name))].join(', ');\n            return {\n              id: s.id + '-' + (sess.id || idx),\n              scheduleId: s.id,\n              title: sessionTitle,\n              start,\n              end,\n              allDay: false,\n              resource: s,\n              status: s.status,\n              tooltip: `Corso: ${s.course?.title || s.course?.name}\\nAziende: ${aziende}\\nLuogo: ${s.location || '-'}\\nData: ${new Date(sess.date).toLocaleDateString('it-IT')}\\nStato: ${s.status}`,\n              sessioniTooltipHtml\n            };\n          });\n        } else {\n          const aziende = [...new Set((s.companies || []).map((c: any) => c.company?.ragioneSociale || c.company?.name))].join(', ');\n          return [{\n            id: s.id,\n            scheduleId: s.id,\n            title: s.course?.title || s.course?.name || 'Corso',\n            start: new Date(s.startDate),\n            end: new Date(s.endDate),\n            resource: s,\n            status: s.status,\n            tooltip: `Corso: ${s.course?.title || s.course?.name}\\nAziende: ${aziende}\\nLuogo: ${s.location || '-'}\\nData: ${s.startDate ? new Date(s.startDate).toLocaleDateString('it-IT') : '-'}\\nOrario: --:--\\nStato: ${s.status}`,\n            sessioniTooltipHtml: ''\n          }];\n        }\n      });\n    }\n    // Scegli mapping in base alla vista (default: month)\n    let events;\n    if (calendarView === 'month') {\n      events = groupSessionsByDay(schedulesData);\n    } else {\n      events = mapSessionsIndividually(schedulesData);\n    }\n    setCalendarEvents(events);\n  }, [calendarView, schedulesData]);\n\n  const handleCreateSchedule = async (data: any) => {\n    try {\n      // Check GDPR consent for creating schedules\n      const hasConsent = await checkGdprConsent('schedule_create');\n      if (!hasConsent) {\n        throw new ConsentRequiredError('Creating schedules requires user consent');\n      }\n      \n      // Check permissions\n      if (!hasPermission || !hasPermission('schedules', 'create')) {\n        throw new Error('Permessi insufficienti per creare pianificazioni');\n      }\n      \n      await logGdprAction({\n        action: 'SCHEDULE_CREATE_ATTEMPT',\n        timestamp: new Date().toISOString(),\n        tenantId: tenant?.id,\n        metadata: {\n          courseId: data.courseId,\n          companiesCount: data.companies?.length || 0\n        }\n      });\n      \n      const result = await apiPost('/schedules', data);\n      \n      await logGdprAction({\n        action: 'SCHEDULE_CREATE_SUCCESS',\n        timestamp: new Date().toISOString(),\n        tenantId: tenant?.id,\n        metadata: {\n          scheduleId: result.id,\n          courseId: data.courseId\n        }\n      });\n      \n      setShowForm(false);\n      setSelectedSlot(null);\n      \n      // Refresh calendar data\n      await fetchData();\n      \n    } catch (error) {\n      console.error('Error creating schedule:', error);\n      \n      await logGdprAction({\n        action: 'SCHEDULE_CREATE_ERROR',\n        timestamp: new Date().toISOString(),\n        tenantId: tenant?.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        metadata: {\n          errorType: error instanceof Error ? error.constructor.name : 'UnknownError'\n        }\n      });\n      \n      const errorMessage = error instanceof ConsentRequiredError \n        ? 'Consenso GDPR richiesto per creare pianificazioni'\n        : error instanceof Error \n          ? error.message \n          : 'Errore nella creazione della pianificazione';\n      \n      setError(errorMessage);\n    }\n  };\n\n  // Chart data\n  const doughnutData = {\n    labels: ['Complete', 'In Progress', 'Not Started'],\n    datasets: [\n      {\n        data: [65, 25, 10],\n        backgroundColor: ['#4ade80', '#facc15', '#f87171'],\n        borderColor: ['#4ade80', '#facc15', '#f87171'],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const barData = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n    datasets: [\n      {\n        label: 'New Employees',\n        data: [12, 19, 8, 15, 12, 18],\n        backgroundColor: 'rgba(59, 130, 246, 0.5)',\n      },\n      {\n        label: 'Completed Courses',\n        data: [7, 11, 5, 8, 3, 14],\n        backgroundColor: 'rgba(16, 185, 129, 0.5)',\n      },\n    ],\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-800\">Dashboard</h1>\n        <p className=\"text-gray-500\">Welcome to your occupational medicine management dashboard.</p>\n        {error && (\n          <div className=\"mt-2 p-3 bg-red-50 border border-red-200 text-red-700 rounded-md\">\n            <p className=\"flex items-center gap-2\">\n              <AlertTriangle size={16} />\n              <span>Si è verificato un errore: {error}</span>\n            </p>\n            <p className=\"text-sm mt-1\">L'applicazione sta utilizzando dati di esempio. Verifica la connessione al server.</p>\n          </div>\n        )}\n      </div>\n\n      {/* Stats Cards - moved above calendar */}\n      <div className=\"grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-4\">\n        <StatCard \n          title=\"Totale Aziende\" \n          value={counters.companies.toString()} \n          icon={<Building2 className=\"h-7 w-7 text-blue-500\" />} \n          trend=\"\"\n          trendDirection=\"up\"\n        />\n        <StatCard \n          title=\"Totale Dipendenti\" \n          value={counters.employees.toString()} \n          icon={<Users className=\"h-7 w-7 text-green-500\" />} \n          trend=\"\"\n          trendDirection=\"up\"\n        />\n        <StatCard \n          title=\"Corsi Programmati Futuri\" \n          value={(() => {\n            // Conta solo le schedule la cui PRIMA sessione è futura (una per scheduled-course)\n            const now = new Date();\n            // Raggruppa per scheduleId\n            const firstSessionBySchedule: Record<string, ScheduleEvent> = {};\n            calendarEvents.forEach(e => {\n              if (!e.scheduleId) return;\n              if (!firstSessionBySchedule[e.scheduleId] || e.start < firstSessionBySchedule[e.scheduleId].start) {\n                firstSessionBySchedule[e.scheduleId] = e;\n              }\n            });\n            const futureCount = Object.values(firstSessionBySchedule).filter((e) => e.start > now).length;\n            return futureCount.toString();\n          })()}\n          icon={<GraduationCap className=\"h-7 w-7 text-amber-500\" />} \n          trend=\"\"\n          trendDirection=\"up\"\n        />\n        <StatCard \n          title=\"Corsi in Scadenza\" \n          value={\"0\"} \n          icon={<Calendar className=\"h-7 w-7 text-red-500\" />} \n          trend=\"\"\n          trendDirection=\"up\"\n        />\n      </div>\n\n      {/* Calendar Section - now below stats */}\n      <ScheduleCalendar\n        events={calendarEvents}\n        eventPropGetter={(event) => {\n          let bg = '#f3f4f6';\n          if (event.status === 'Preventivo') bg = '#fef9c3';\n          else if (event.status === 'Confermato') bg = '#fef3c7';\n          else if (event.status === 'Fatturato') bg = '#dbeafe';\n          else if (event.status === 'Pagato') bg = '#bbf7d0';\n          return {\n            style: {\n              backgroundColor: bg,\n              color: '#334155',\n              borderRadius: '0.5rem',\n              border: 'none',\n              padding: '2px 8px',\n              fontWeight: 400,\n              fontSize: '0.85rem',\n              boxShadow: '0 1px 4px rgba(0,0,0,0.04)',\n              cursor: 'pointer',\n            }\n          };\n        }}\n        onSelectEvent={(event) => {\n          if (event.scheduleId) {\n            navigate(`/schedules/${event.scheduleId}`);\n          }\n        }}\n        onSelectSlot={(slotInfo) => {\n          const start = slotInfo.start;\n          const end = slotInfo.end;\n          const isAllDay = start.getHours() === 0 && start.getMinutes() === 0 && end.getHours() === 0 && end.getMinutes() === 0;\n          setSelectedSlot({ start, end, isAllDay });\n          setShowForm(true);\n        }}\n        view={calendarView}\n        onView={setCalendarView}\n      />\n\n      {/* Charts */}\n      <div className=\"grid gap-6 grid-cols-1 lg:grid-cols-2\">\n        <div className=\"bg-white rounded-2xl shadow p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Training Status Overview</h2>\n          <div className=\"h-64 flex items-center justify-center\">\n            <Doughnut\n              data={doughnutData}\n              options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    position: 'bottom',\n                  },\n                },\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"bg-white rounded-2xl shadow p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Monthly Statistics</h2>\n          <div className=\"h-64\">\n            <Bar\n              data={barData}\n              options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    position: 'bottom',\n                  },\n                },\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Activity and Alerts */}\n      <div className=\"grid gap-6 grid-cols-1 lg:grid-cols-2\">\n        <div className=\"bg-white rounded-2xl shadow p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-gray-800\">Recent Activity</h2>\n            <a href=\"#\" className=\"text-sm font-medium text-blue-600 hover:text-blue-800\">\n              View All\n            </a>\n          </div>\n          <ul className=\"space-y-4\">\n            {[1, 2, 3, 4].map((item) => (\n              <li key={item} className=\"border-b border-gray-100 pb-3 last:border-0 last:pb-0\">\n                <div className=\"flex items-start\">\n                  <span className=\"flex items-center justify-center bg-blue-100 rounded-full w-8 h-8 mt-1\">\n                    <TrendingUp className=\"h-4 w-4 text-blue-600\" />\n                  </span>\n                  <div className=\"ml-3\">\n                    <p className=\"text-sm font-medium text-gray-800\">\n                      {item % 2 === 0 \n                        ? 'New employee added to Acme Corp' \n                        : 'Course completion updated for John Smith'}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">2 hours ago</p>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"bg-white rounded-2xl shadow p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-gray-800\">Alerts</h2>\n            <a href=\"#\" className=\"text-sm font-medium text-blue-600 hover:text-blue-800\">\n              View All\n            </a>\n          </div>\n          <ul className=\"space-y-4\">\n            {[1, 2, 3].map((item) => (\n              <li key={item} className=\"border-b border-gray-100 pb-3 last:border-0 last:pb-0\">\n                <div className=\"flex items-start\">\n                  <span className=\"flex items-center justify-center bg-amber-100 rounded-full w-8 h-8 mt-1\">\n                    <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n                  </span>\n                  <div className=\"ml-3\">\n                    <p className=\"text-sm font-medium text-gray-800\">\n                      {item === 1 \n                        ? '5 certifications expiring this month' \n                        : item === 2 \n                          ? '3 employees need to complete required training' \n                          : 'Annual health checks due for Tech Solutions Inc.'}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {item === 1 ? 'High priority' : 'Medium priority'}\n                    </p>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      {showForm && (\n        <ScheduleEventModalLazy\n          trainings={coursesList.map((c: any) => ({ ...c, title: c.title || c.name }))}\n          trainers={trainersList}\n          companies={companiesList}\n          employees={employeesList}\n          existingEvent={undefined}\n          initialDate={\n            selectedSlot\n              ? selectedSlot.start.getFullYear() +\n                '-' +\n                String(selectedSlot.start.getMonth() + 1).padStart(2, '0') +\n                '-' +\n                String(selectedSlot.start.getDate()).padStart(2, '0')\n              : undefined\n          }\n          initialTime={selectedSlot\n            ? selectedSlot.isAllDay\n              ? { start: '09:00', end: '13:00' }\n              : {\n                  start: selectedSlot.start.toTimeString().slice(0, 5),\n                  end: selectedSlot.end.toTimeString().slice(0, 5),\n                }\n            : undefined}\n          onClose={() => {\n            setShowForm(false);\n            setSelectedSlot(null);\n          }}\n          onSuccess={() => {\n            setShowForm(false);\n            setSelectedSlot(null);\n            // Optionally refresh calendar data here\n          }}\n        />\n      )}\n    </div>\n  );\n};\n  \n  export default Dashboard;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/Dashboard.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/DashboardRefactored.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4851,4854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4851,4854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  AlertTriangle,\n  Calendar\n} from 'lucide-react';\nimport ScheduleCalendar from '../../components/dashboard/ScheduleCalendar';\nimport ScheduleEventModalLazy from '../../components/schedules/ScheduleEventModal.lazy';\nimport { DashboardStats, DashboardCharts, RecentActivity, DashboardAlerts } from './components';\nimport { useDashboardData, useCalendarEvents, useScheduleCreation } from './hooks';\n\nconst DashboardRefactored: React.FC = () => {\n  // Custom hooks for data and functionality\n  const {\n    data,\n    counters,\n    loading,\n    error,\n    refreshData\n  } = useDashboardData();\n\n  const {\n    calendarEvents,\n    calendarView,\n    setCalendarView,\n    futureCoursesCount\n  } = useCalendarEvents(data.schedules);\n\n  const {\n    showForm,\n    selectedSlot,\n    error: scheduleError,\n    handleCreateSchedule,\n    handleSelectSlot,\n    closeForm\n  } = useScheduleCreation(refreshData);\n\n  // Loading state\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Caricamento dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">Errore nel caricamento</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={refreshData}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            Riprova\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Dashboard</h1>\n          <p className=\"text-gray-600 mt-2\">Panoramica generale del sistema di formazione</p>\n        </div>\n\n        {/* Error Alert for Schedule Creation */}\n        {scheduleError && (\n          <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex\">\n              <AlertTriangle className=\"h-5 w-5 text-red-400 mr-2 mt-0.5\" />\n              <div>\n                <h3 className=\"text-sm font-medium text-red-800\">Errore</h3>\n                <p className=\"text-sm text-red-700 mt-1\">{scheduleError}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Stats Cards */}\n        <div className=\"mb-8\">\n          <DashboardStats \n            counters={counters} \n            futureCoursesCount={futureCoursesCount} \n          />\n        </div>\n\n        {/* Calendar Section */}\n        <div className=\"mb-8\">\n          <div className=\"bg-white rounded-2xl shadow p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800\">Calendario Corsi</h2>\n              <div className=\"flex space-x-2\">\n                {(['month', 'week', 'day'] as const).map((view) => (\n                  <button\n                    key={view}\n                    onClick={() => setCalendarView(view)}\n                    className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\n                      calendarView === view\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    {view === 'month' ? 'Mese' : view === 'week' ? 'Settimana' : 'Giorno'}\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            <ScheduleCalendar\n              events={calendarEvents}\n              onSelectSlot={handleSelectSlot}\n              view={calendarView}\n              onViewChange={setCalendarView}\n            />\n          </div>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"mb-8\">\n          <DashboardCharts />\n        </div>\n\n        {/* Bottom Section: Recent Activity and Alerts */}\n        <div className=\"grid gap-6 grid-cols-1 lg:grid-cols-2\">\n          <RecentActivity />\n          <DashboardAlerts />\n        </div>\n\n        {/* Schedule Creation Modal */}\n        {showForm && selectedSlot && (\n          <ScheduleEventModalLazy\n            isOpen={showForm}\n            onClose={closeForm}\n            onSave={handleCreateSchedule}\n            trainings={data.courses.map((c: any) => ({ ...c, title: c.title || c.name }))}\n            trainers={data.trainers}\n            companies={data.companies}\n            employees={data.employees}\n            existingEvent={undefined}\n            initialDate={\n              selectedSlot\n                ? selectedSlot.start.getFullYear() +\n                  '-' +\n                  String(selectedSlot.start.getMonth() + 1).padStart(2, '0') +\n                  '-' +\n                  String(selectedSlot.start.getDate()).padStart(2, '0')\n                : undefined\n            }\n            initialStartTime={\n              selectedSlot && !selectedSlot.isAllDay\n                ? String(selectedSlot.start.getHours()).padStart(2, '0') +\n                  ':' +\n                  String(selectedSlot.start.getMinutes()).padStart(2, '0')\n                : undefined\n            }\n            initialEndTime={\n              selectedSlot && !selectedSlot.isAllDay\n                ? String(selectedSlot.end.getHours()).padStart(2, '0') +\n                  ':' +\n                  String(selectedSlot.end.getMinutes()).padStart(2, '0')\n                : undefined\n            }\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardRefactored;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/components/DashboardAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/components/DashboardCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/components/DashboardStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/components/RecentActivity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/components/StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/hooks/useCalendarEvents.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[201,204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[201,204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[380,383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[380,383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'combineDateAndTime' function makes the dependencies of useMemo Hook (at line 97) change on every render. To fix this, wrap the definition of 'combineDateAndTime' in its own useCallback() Hook.","line":23,"column":9,"nodeType":"VariableDeclarator","endLine":26,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'combineDateAndTime' in its own useCallback() Hook.","fix":{"range":[620,743],"text":"useCallback((date: string, time: string): string => {\n    const dateOnly = date.split('T')[0];\n    return `${dateOnly}T${time}:00`;\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'combineDateAndTime' function makes the dependencies of useMemo Hook (at line 153) change on every render. To fix this, wrap the definition of 'combineDateAndTime' in its own useCallback() Hook.","line":23,"column":9,"nodeType":"VariableDeclarator","endLine":26,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'combineDateAndTime' in its own useCallback() Hook.","fix":{"range":[620,743],"text":"useCallback((date: string, time: string): string => {\n    const dateOnly = date.split('T')[0];\n    return `${dateOnly}T${time}:00`;\n  })"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[863,866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[863,866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[942,945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[942,945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1139,1142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1139,1142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1538,1541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1538,1541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2072,2075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2072,2075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2661,2664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2661,2664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2871,2874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2871,2874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3613,3616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3613,3616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4405,4408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4405,4408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4450,4453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4450,4453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4561,4564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4561,4564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4828,4831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4828,4831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5105,5108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5105,5108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5258,5261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5258,5261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5862,5865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5862,5865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6520,6523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6520,6523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo } from 'react';\n\nexport interface ScheduleEvent {\n  id: string;\n  scheduleId: string;\n  title: string;\n  start: Date;\n  end: Date;\n  allDay?: boolean;\n  resource: any;\n  status: string;\n  tooltip: string;\n  sessioniTooltipHtml: string;\n}\n\nexport type CalendarView = 'month' | 'week' | 'day';\n\nexport const useCalendarEvents = (schedulesData: any[]) => {\n  const [calendarView, setCalendarView] = useState<CalendarView>('month');\n  const [calendarEvents, setCalendarEvents] = useState<ScheduleEvent[]>([]);\n\n  // Helper function to combine date and time\n  const combineDateAndTime = (date: string, time: string): string => {\n    const dateOnly = date.split('T')[0];\n    return `${dateOnly}T${time}:00`;\n  };\n\n  // Helper: group sessions by scheduleId+date for month view\n  const groupSessionsByDay = useMemo(() => (schedules: any[]) => {\n    const grouped: ScheduleEvent[] = [];\n    schedules.forEach((s: any) => {\n      if (Array.isArray(s.sessions) && s.sessions.length > 0) {\n        // Raggruppa per giorno\n        const sessionsByDay: Record<string, any[]> = {};\n        s.sessions.forEach((sess: any) => {\n          const day = sess.date.split('T')[0];\n          if (!sessionsByDay[day]) sessionsByDay[day] = [];\n          sessionsByDay[day].push(sess);\n        });\n        \n        Object.entries(sessionsByDay).forEach(([day, sessions]) => {\n          // Tooltip con tutte le sessioni (HTML)\n          const allSessions = s.sessions;\n          const sessioniTooltipHtml = allSessions.map((ss: any, i: number) => {\n            const dateStr = new Date(ss.date).toLocaleDateString('it-IT');\n            const orario = `${ss.start || '--:--'} - ${ss.end || '--:--'}`;\n            const trainer = ss.trainer ? ` (${ss.trainer.firstName} ${ss.trainer.lastName})` : '';\n            return `<span style='color:#2563eb;font-weight:700'>Sessione ${i+1}: ${dateStr}, ${orario}${trainer}</span>`;\n          }).join('<br>');\n          \n          // Aziende senza duplicati\n          const aziende = [...new Set((s.companies || []).map((c: any) => c.company?.ragioneSociale || c.company?.name))].join(', ');\n          \n          // Orari del giorno\n          const sortedSessions = [...sessions].sort((a, b) => a.start.localeCompare(b.start));\n          const start = combineDateAndTime(day, sortedSessions[0].start);\n          const end = combineDateAndTime(day, sortedSessions[sessions.length-1].end);\n          \n          // Titolo: aggiungi \" - Sessione X\" solo se ci sono sessioni in giorni diversi\n          let title = `${s.course?.title || s.course?.name || 'Corso'}`;\n          const allSameDay = allSessions.every((ss: any) => ss.date.split('T')[0] === day);\n          if (!allSameDay && allSessions.length > 1) {\n            // Trova la sessione corrispondente a questo giorno\n            const idx = allSessions.findIndex((ss: any) => ss.date.split('T')[0] === day);\n            if (idx !== -1) title += ` - Sessione ${idx + 1}`;\n          }\n          \n          grouped.push({\n            id: s.id + '-' + day,\n            scheduleId: s.id,\n            title,\n            start: new Date(start),\n            end: new Date(end),\n            resource: s,\n            status: s.status,\n            tooltip: `Corso: ${s.course?.title || s.course?.name}\\nAziende: ${aziende}\\nLuogo: ${s.location || '-'}\\nData: ${new Date(day).toLocaleDateString('it-IT')}\\nStato: ${s.status}`,\n            sessioniTooltipHtml\n          });\n        });\n      } else {\n        // fallback: usa startDate/endDate della schedule\n        const aziende = [...new Set((s.companies || []).map((c: any) => c.company?.ragioneSociale || c.company?.name))].join(', ');\n        grouped.push({\n          id: s.id,\n          scheduleId: s.id,\n          title: s.course?.title || s.course?.name || 'Corso',\n          start: new Date(s.startDate),\n          end: new Date(s.endDate),\n          resource: s,\n          status: s.status,\n          tooltip: `Corso: ${s.course?.title || s.course?.name}\\nAziende: ${aziende}\\nLuogo: ${s.location || '-'}\\nData: ${s.startDate ? new Date(s.startDate).toLocaleDateString('it-IT') : '-'}\\nOrario: --:--\\nStato: ${s.status}`,\n          sessioniTooltipHtml: ''\n        });\n      }\n    });\n    return grouped;\n  }, [combineDateAndTime]);\n\n  // Helper: eventi separati per sessione (settimana/giorno)\n  const mapSessionsIndividually = useMemo(() => (schedules: any[]) => {\n    return schedules.flatMap((s: any) => {\n      if (Array.isArray(s.sessions) && s.sessions.length > 0) {\n        return s.sessions.map((sess: any, idx: number) => {\n          const start = new Date(combineDateAndTime(sess.date, sess.start));\n          const end = new Date(combineDateAndTime(sess.date, sess.end));\n          const allSessions = s.sessions;\n          const allSameDay = allSessions.every((ss: any) => ss.date.split('T')[0] === sess.date.split('T')[0]);\n          \n          let sessionTitle = s.course?.title || s.course?.name || 'Corso';\n          if (!allSameDay && allSessions.length > 1) {\n            const sessionNumber = ` - Sessione ${allSessions.findIndex((ss: any) => ss === sess) + 1}`;\n            sessionTitle += sessionNumber;\n          }\n          \n          const sessioniTooltipHtml = allSessions.map((ss: any, i: number) => {\n            const dateStr = new Date(ss.date).toLocaleDateString('it-IT');\n            const orario = `${ss.start || '--:--'} - ${ss.end || '--:--'}`;\n            const trainer = ss.trainer ? ` (${ss.trainer.firstName} ${ss.trainer.lastName})` : '';\n            const isCurrent = allSameDay || ss === sess;\n            return `<span style='color:${isCurrent ? '#2563eb' : '#1e293b'};font-weight:${isCurrent ? 700 : 400}'>Sessione ${i+1}: ${dateStr}, ${orario}${trainer}</span>`;\n          }).join('<br>');\n          \n          const aziende = [...new Set((s.companies || []).map((c: any) => c.company?.ragioneSociale || c.company?.name))].join(', ');\n          \n          return {\n            id: s.id + '-' + (sess.id || idx),\n            scheduleId: s.id,\n            title: sessionTitle,\n            start,\n            end,\n            allDay: false,\n            resource: s,\n            status: s.status,\n            tooltip: `Corso: ${s.course?.title || s.course?.name}\\nAziende: ${aziende}\\nLuogo: ${s.location || '-'}\\nData: ${new Date(sess.date).toLocaleDateString('it-IT')}\\nStato: ${s.status}`,\n            sessioniTooltipHtml\n          };\n        });\n      } else {\n        const aziende = [...new Set((s.companies || []).map((c: any) => c.company?.ragioneSociale || c.company?.name))].join(', ');\n        return [{\n          id: s.id,\n          scheduleId: s.id,\n          title: s.course?.title || s.course?.name || 'Corso',\n          start: new Date(s.startDate),\n          end: new Date(s.endDate),\n          resource: s,\n          status: s.status,\n          tooltip: `Corso: ${s.course?.title || s.course?.name}\\nAziende: ${aziende}\\nLuogo: ${s.location || '-'}\\nData: ${s.startDate ? new Date(s.startDate).toLocaleDateString('it-IT') : '-'}\\nOrario: --:--\\nStato: ${s.status}`,\n          sessioniTooltipHtml: ''\n        }];\n      }\n    });\n  }, [combineDateAndTime]);\n\n  // Rimappa gli eventi ogni volta che cambia la vista o i dati\n  useEffect(() => {\n    if (!schedulesData.length) {\n      setCalendarEvents([]);\n      return;\n    }\n\n    // Scegli mapping in base alla vista (default: month)\n    let events: ScheduleEvent[];\n    if (calendarView === 'month') {\n      events = groupSessionsByDay(schedulesData);\n    } else {\n      events = mapSessionsIndividually(schedulesData);\n    }\n    \n    setCalendarEvents(events);\n  }, [calendarView, schedulesData, groupSessionsByDay, mapSessionsIndividually]);\n\n  // Calculate future courses count\n  const futureCoursesCount = useMemo(() => {\n    const now = new Date();\n    // Raggruppa per scheduleId\n    const firstSessionBySchedule: Record<string, ScheduleEvent> = {};\n    calendarEvents.forEach(e => {\n      if (!e.scheduleId) return;\n      if (!firstSessionBySchedule[e.scheduleId] || e.start < firstSessionBySchedule[e.scheduleId].start) {\n        firstSessionBySchedule[e.scheduleId] = e;\n      }\n    });\n    return Object.values(firstSessionBySchedule).filter((e) => e.start > now).length;\n  }, [calendarEvents]);\n\n  return {\n    calendarEvents,\n    calendarView,\n    setCalendarView,\n    futureCoursesCount\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/hooks/useDashboardData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkConsent' is defined but never used.","line":4,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[417,420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[417,420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[436,439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[436,439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[456,459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[456,459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[476,479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[476,479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[496,499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[496,499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[883,886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[883,886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1078,1081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1078,1081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1135,1138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1135,1138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1773,1776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1773,1776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1860,1863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1860,1863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2056,2059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2056,2059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2186,2189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2186,2189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4192,4195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4192,4195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4295,4298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4295,4298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4401,4404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4401,4404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4517,4520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4517,4520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { apiGet } from '../../../services/api';\nimport { useAuth } from '../../../context/AuthContext';\nimport { logGdprAction, checkConsent } from '../../../utils/gdpr';\nimport { dummyData } from '../../../data/dummyData';\n\nexport interface DashboardCounters {\n  companies: number;\n  employees: number;\n}\n\nexport interface DashboardData {\n  courses: any[];\n  trainers: any[];\n  companies: any[];\n  employees: any[];\n  schedules: any[];\n}\n\ninterface DashboardTrainer {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface DashboardCompany {\n  id: string;\n  name: string;\n  employeeCount?: number;\n  ragioneSociale: string;\n  sector?: string;\n}\n\nexport const useDashboardData = () => {\n  const { tenant } = useTenant();\n  const { hasPermission } = useAuth();\n  \n  const [courses, setCourses] = useState<any[]>([]);\n  const [trainers, setTrainers] = useState<DashboardTrainer[]>([]);\n  const [companies, setCompanies] = useState<DashboardCompany[]>([]);\n  const [employees, setEmployees] = useState<any[]>([]);\n  const [schedules, setSchedules] = useState<any[]>([]);\n  const [counters, setCounters] = useState<DashboardCounters>({ companies: 0, employees: 0 });\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [dataSource, setDataSource] = useState<'api' | 'fallback'>('api');\n  const mountedRef = useRef(true);\n  const fetchingRef = useRef(false);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  const loadFallbackData = useCallback(async () => {\n    console.log('📦 Loading fallback data...');\n    \n    try {\n      const dummyDataTyped = dummyData as any;\n      \n      const transformedTrainers = (dummyDataTyped.employees || []).map((e: any) => ({\n        id: e.id,\n        firstName: e.firstName || '',\n        lastName: e.lastName || ''\n      }));\n      \n      const transformedCompanies = (dummyDataTyped.companies || []).map((c: any) => ({\n        ...c,\n        ragioneSociale: c.name || '',\n        employeeCount: (dummyDataTyped.employees || []).filter((e: any) => \n          e.companyId === c.id\n        ).length,\n        sector: c.industry || c.sector || c.type || ''\n      }));\n      \n      if (mountedRef.current) {\n        setCourses(dummyDataTyped.courses || []);\n        setTrainers(transformedTrainers);\n        setCompanies(transformedCompanies);\n        setEmployees(dummyDataTyped.employees || []);\n        setSchedules(dummyDataTyped.schedules || []);\n        setCounters({\n          companies: transformedCompanies.length,\n          employees: (dummyDataTyped.employees || []).length\n        });\n        setDataSource('fallback');\n      }\n      \n      logGdprAction(\n        tenant?.id || 'unknown',\n        'DASHBOARD_FALLBACK_DATA_LOADED',\n        'dashboard',\n        'read',\n        {\n          reason: 'API error or missing GDPR consent'\n        }\n      );\n      \n    } catch (error) {\n      console.error('Failed to load fallback data:', error);\n    }\n  }, [tenant?.id]);\n\n  const fetchData = useCallback(async () => {\n    if (fetchingRef.current || !mountedRef.current) return;\n    \n    fetchingRef.current = true;\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Check permissions\n      const hasDashboardAccess = hasPermission && (\n        hasPermission('dashboard', 'read') || \n        hasPermission('dashboard', 'view') || \n        hasPermission('companies', 'read') ||\n        hasPermission('administration', 'view')\n      );\n      \n      if (!hasDashboardAccess) {\n        throw new Error('Permessi insufficienti per accedere al dashboard');\n      }\n      \n      // Fetch counters\n      const countersData = await apiGet<DashboardCounters>('/api/counters');\n      \n      // Fetch other data\n      const [coursesData, trainersData, schedulesData] = await Promise.allSettled([\n        apiGet('/courses').catch(() => []),\n        apiGet('/trainers').catch(() => []),\n        apiGet('/api/v1/schedules').catch(() => [])\n      ]);\n      \n      const coursesResult = coursesData.status === 'fulfilled' ? (coursesData.value as any[]) : [];\n      const trainersResult = trainersData.status === 'fulfilled' ? (trainersData.value as any[]) : [];\n      const schedulesResult = schedulesData.status === 'fulfilled' ? (schedulesData.value as any[]) : [];\n      \n      // Transform trainers data\n      const transformedTrainers = trainersResult.map((trainer: any) => ({\n        id: trainer.id,\n        firstName: trainer.firstName || '',\n        lastName: trainer.lastName || ''\n      }));\n      \n      if (mountedRef.current) {\n        setCourses(coursesResult);\n        setTrainers(transformedTrainers);\n        setCompanies([]);\n        setEmployees([]);\n        setSchedules(schedulesResult);\n        setCounters(countersData);\n        setDataSource('api');\n      }\n      \n      logGdprAction(\n        tenant?.id || 'unknown',\n        'DASHBOARD_DATA_LOADED',\n        'dashboard',\n        'read',\n        {\n          dataSource: 'api',\n          recordCounts: {\n            courses: coursesResult.length,\n            trainers: transformedTrainers.length,\n            schedules: schedulesResult.length\n          }\n        }\n      );\n      \n    } catch (error) {\n      console.error('❌ Error loading dashboard data:', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Errore di connessione al server';\n      \n      logGdprAction(\n        tenant?.id || 'unknown',\n        'DASHBOARD_DATA_ERROR',\n        'dashboard',\n        'read',\n        {\n          errorType: error instanceof Error ? error.constructor.name : 'UnknownError'\n        },\n        false,\n        errorMessage\n      );\n      \n      if (mountedRef.current) {\n        setError(errorMessage);\n        await loadFallbackData();\n      }\n    } finally {\n      fetchingRef.current = false;\n      if (mountedRef.current) {\n        setLoading(false);\n      }\n    }\n  }, [tenant?.id, hasPermission, loadFallbackData]);\n\n  // Initial data load\n  useEffect(() => {\n    if (mountedRef.current) {\n      fetchData();\n    }\n  }, [fetchData]);\n\n  return {\n    courses,\n    trainers,\n    companies,\n    employees,\n    schedules,\n    counters,\n    loading,\n    error,\n    dataSource,\n    refetch: fetchData\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/Dashboard/hooks/useScheduleCreation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[545,548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[545,548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2161,2164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2161,2164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { logGdprAction } from '../../../utils/gdpr';\n\nexport interface SelectedSlot {\n  start: Date;\n  end: Date;\n  isAllDay: boolean;\n}\n\nexport const useScheduleCreation = (onSuccess?: () => void) => {\n  const { tenant, hasPermission } = useTenant();\n  const [showForm, setShowForm] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState<SelectedSlot | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleCreateSchedule = useCallback(async (data: any) => {\n    try {\n      setError(null);\n      \n      // Check permissions\n      if (!hasPermission || !hasPermission('schedules', 'create')) {\n        throw new Error('Permessi insufficienti per creare pianificazioni');\n      }\n      \n      logGdprAction(\n        tenant?.id || 'unknown',\n        'SCHEDULE_CREATE_ATTEMPT',\n        'schedule',\n        'create',\n        {\n          courseId: data.courseId,\n          companiesCount: data.companies?.length || 0\n        }\n      );\n      \n      const result = await apiPost('/schedules', data);\n      \n      logGdprAction(\n        tenant?.id || 'unknown',\n        'SCHEDULE_CREATE_SUCCESS',\n        'schedule',\n        'create',\n        {\n          scheduleId: result.id,\n          courseId: data.courseId\n        }\n      );\n      \n      setShowForm(false);\n      setSelectedSlot(null);\n      \n      // Call success callback\n      if (onSuccess) {\n        onSuccess();\n      }\n      \n    } catch (error) {\n      console.error('Error creating schedule:', error);\n      \n      logGdprAction(\n        tenant?.id || 'unknown',\n        'SCHEDULE_CREATE_ERROR',\n        'schedule',\n        'create',\n        {\n          errorType: error instanceof Error ? error.constructor.name : 'UnknownError'\n        },\n        false,\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n      \n      const errorMessage = error instanceof Error \n        ? error.message \n        : 'Errore nella creazione della pianificazione';\n      \n      setError(errorMessage);\n    }\n  }, [tenant, hasPermission, onSuccess]);\n\n  const handleSelectSlot = useCallback((slotInfo: any) => {\n    const start = slotInfo.start;\n    const end = slotInfo.end;\n    const isAllDay = start.getHours() === 0 && start.getMinutes() === 0 && \n                     end.getHours() === 0 && end.getMinutes() === 0;\n    \n    setSelectedSlot({ start, end, isAllDay });\n    setShowForm(true);\n  }, []);\n\n  const closeForm = useCallback(() => {\n    setShowForm(false);\n    setSelectedSlot(null);\n    setError(null);\n  }, []);\n\n  return {\n    showForm,\n    selectedSlot,\n    error,\n    handleCreateSchedule,\n    handleSelectSlot,\n    closeForm\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/DocumentsCorsi.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/DocumentsCorsi.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/GDPRDashboard.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/GDPRDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Dashboard\n * Main dashboard for GDPR compliance management\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Chip,\n  LinearProgress,\n  Alert,\n  Tabs,\n  Tab,\n  IconButton,\n  Tooltip,\n  Divider,\n  Stack\n} from '@mui/material';\nimport {\n  Security as SecurityIcon,\n  Download as DownloadIcon,\n  Delete as DeleteIcon,\n  Settings as SettingsIcon,\n  History as HistoryIcon,\n  Assessment as AssessmentIcon,\n  Refresh as RefreshIcon,\n  Info as InfoIcon\n} from '@mui/icons-material';\nimport { useGDPRConsent } from '../hooks/useGDPRConsent';\nimport { useAuditTrail } from '../hooks/useAuditTrail';\nimport { useDataExport } from '../hooks/useDataExport';\nimport { useDeletionRequest } from '../hooks/useDeletionRequest';\nimport { usePrivacySettings } from '../hooks/usePrivacySettings';\nimport { ConsentManagementTab } from '../components/gdpr/ConsentManagementTab';\nimport { AuditTrailTab } from '../components/gdpr/AuditTrailTab';\nimport { DataExportTab } from '../components/gdpr/DataExportTab';\nimport { DeletionRequestTab } from '../components/gdpr/DeletionRequestTab';\nimport { PrivacySettingsTab } from '../components/gdpr/PrivacySettingsTab';\nimport { GDPROverviewCard } from '../components/gdpr/GDPROverviewCard';\nimport { ComplianceScoreCard } from '../components/gdpr/ComplianceScoreCard';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`gdpr-tabpanel-${index}`}\n      aria-labelledby={`gdpr-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ py: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `gdpr-tab-${index}`,\n    'aria-controls': `gdpr-tabpanel-${index}`,\n  };\n}\n\nexport const GDPRDashboard: React.FC = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [refreshing, setRefreshing] = useState(false);\n\n  // GDPR Hooks\n  const consentHook = useGDPRConsent();\n  const auditHook = useAuditTrail();\n  const exportHook = useDataExport();\n  const deletionHook = useDeletionRequest();\n  const privacyHook = usePrivacySettings();\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  const handleRefreshAll = async () => {\n    setRefreshing(true);\n    try {\n      await Promise.all([\n        consentHook.refreshConsents(),\n        auditHook.refreshAuditTrail(),\n        exportHook.refreshRequests(),\n        deletionHook.refreshRequests(),\n        privacyHook.refreshSettings()\n      ]);\n    } catch (error) {\n      console.error('Error refreshing GDPR data:', error);\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  // Calculate overall compliance score\n  const getOverallComplianceScore = () => {\n    const privacyScore = privacyHook.getComplianceScore();\n    const consentStats = consentHook.getConsentStats();\n    const consentScore = consentStats.total > 0 \n      ? (consentStats.granted / consentStats.total) * 100 \n      : 100;\n    \n    return Math.round((privacyScore + consentScore) / 2);\n  };\n\n  // Get compliance status color\n  const getComplianceColor = (score: number) => {\n    if (score >= 90) return 'success';\n    if (score >= 70) return 'warning';\n    return 'error';\n  };\n\n  const overallScore = getOverallComplianceScore();\n  const complianceColor = getComplianceColor(overallScore);\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 3 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: 2 }}>\n          <Typography variant=\"h4\" component=\"h1\" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <SecurityIcon color=\"primary\" />\n            GDPR Dashboard\n          </Typography>\n          \n          <Stack direction=\"row\" spacing={1}>\n            <Tooltip title=\"Refresh all data\">\n              <IconButton \n                onClick={handleRefreshAll} \n                disabled={refreshing}\n                color=\"primary\"\n              >\n                <RefreshIcon />\n              </IconButton>\n            </Tooltip>\n            \n            <Chip\n              icon={<AssessmentIcon />}\n              label={`Compliance Score: ${overallScore}%`}\n              color={complianceColor}\n              variant=\"outlined\"\n            />\n          </Stack>\n        </Stack>\n        \n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Manage your data privacy, consent preferences, and GDPR compliance settings.\n        </Typography>\n      </Box>\n\n      {/* Loading indicator */}\n      {refreshing && (\n        <Box sx={{ mb: 2 }}>\n          <LinearProgress />\n        </Box>\n      )}\n\n      {/* Overview Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} md={6} lg={3}>\n          <GDPROverviewCard\n            title=\"Consent Status\"\n            icon={<SecurityIcon />}\n            stats={consentHook.getConsentStats()}\n            loading={consentHook.loading}\n            error={consentHook.error}\n          />\n        </Grid>\n        \n        <Grid item xs={12} md={6} lg={3}>\n          <GDPROverviewCard\n            title=\"Data Exports\"\n            icon={<DownloadIcon />}\n            stats={exportHook.getExportStats()}\n            loading={exportHook.loading}\n            error={exportHook.error}\n          />\n        </Grid>\n        \n        <Grid item xs={12} md={6} lg={3}>\n          <GDPROverviewCard\n            title=\"Deletion Requests\"\n            icon={<DeleteIcon />}\n            stats={deletionHook.getDeletionStats()}\n            loading={deletionHook.loading}\n            error={deletionHook.error}\n          />\n        </Grid>\n        \n        <Grid item xs={12} md={6} lg={3}>\n          <ComplianceScoreCard\n            score={overallScore}\n            recommendations={privacyHook.getComplianceRecommendations()}\n            loading={privacyHook.loading}\n          />\n        </Grid>\n      </Grid>\n\n      {/* Error Alerts */}\n      {(consentHook.error || auditHook.error || exportHook.error || deletionHook.error || privacyHook.error) && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Some GDPR services are experiencing issues:\n          </Typography>\n          <ul style={{ margin: 0, paddingLeft: 20 }}>\n            {consentHook.error && <li>Consent Management: {consentHook.error}</li>}\n            {auditHook.error && <li>Audit Trail: {auditHook.error}</li>}\n            {exportHook.error && <li>Data Export: {exportHook.error}</li>}\n            {deletionHook.error && <li>Deletion Requests: {deletionHook.error}</li>}\n            {privacyHook.error && <li>Privacy Settings: {privacyHook.error}</li>}\n          </ul>\n        </Alert>\n      )}\n\n      {/* Main Content Tabs */}\n      <Card>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs \n            value={activeTab} \n            onChange={handleTabChange} \n            aria-label=\"GDPR dashboard tabs\"\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n          >\n            <Tab \n              label=\"Consent Management\" \n              icon={<SecurityIcon />} \n              iconPosition=\"start\"\n              {...a11yProps(0)} \n            />\n            <Tab \n              label=\"Privacy Settings\" \n              icon={<SettingsIcon />} \n              iconPosition=\"start\"\n              {...a11yProps(1)} \n            />\n            <Tab \n              label=\"Data Export\" \n              icon={<DownloadIcon />} \n              iconPosition=\"start\"\n              {...a11yProps(2)} \n            />\n            <Tab \n              label=\"Deletion Requests\" \n              icon={<DeleteIcon />} \n              iconPosition=\"start\"\n              {...a11yProps(3)} \n            />\n            <Tab \n              label=\"Audit Trail\" \n              icon={<HistoryIcon />} \n              iconPosition=\"start\"\n              {...a11yProps(4)} \n            />\n          </Tabs>\n        </Box>\n\n        <TabPanel value={activeTab} index={0}>\n          <ConsentManagementTab hook={consentHook} />\n        </TabPanel>\n\n        <TabPanel value={activeTab} index={1}>\n          <PrivacySettingsTab hook={privacyHook} />\n        </TabPanel>\n\n        <TabPanel value={activeTab} index={2}>\n          <DataExportTab hook={exportHook} />\n        </TabPanel>\n\n        <TabPanel value={activeTab} index={3}>\n          <DeletionRequestTab hook={deletionHook} />\n        </TabPanel>\n\n        <TabPanel value={activeTab} index={4}>\n          <AuditTrailTab hook={auditHook} />\n        </TabPanel>\n      </Card>\n\n      {/* Footer Info */}\n      <Box sx={{ mt: 4, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <InfoIcon color=\"info\" fontSize=\"small\" />\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            This dashboard helps you manage your data privacy rights under GDPR. \n            For questions about data processing, contact our Data Protection Officer.\n          </Typography>\n        </Stack>\n      </Box>\n    </Container>\n  );\n};\n\nexport default GDPRDashboard;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/PersonGDPRPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[718,721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[718,721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[863,866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[863,866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1002,1005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1002,1005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1142,1145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1142,1145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1301,1304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1301,1304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1533,1536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1533,1536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { GDPREntityPage } from '../templates/gdpr-entity-page/components/GDPREntityPage';\n\ninterface Person {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  dateOfBirth?: string;\n  residenceAddress?: string;\n  createdAt: string;\n  updatedAt: string;\n  deletedAt?: string;\n}\n\n/**\n * Pagina per la gestione delle persone con conformità GDPR\n * Utilizza il template GDPREntityPage per fornire tutte le funzionalità necessarie\n */\nexport function PersonGDPRPage() {\n  // Configurazione delle colonne per la tabella delle persone\n  const personColumns = [\n    {\n      key: 'firstName',\n      label: 'Nome',\n      sortable: true,\n      render: (value: any, person: Person) => person.firstName\n    },\n    {\n      key: 'lastName',\n      label: 'Cognome',\n      sortable: true,\n      render: (value: any, person: Person) => person.lastName\n    },\n    {\n      key: 'email',\n      label: 'Email',\n      sortable: true,\n      render: (value: any, person: Person) => person.email\n    },\n    {\n      key: 'phone',\n      label: 'Telefono',\n      sortable: false,\n      render: (value: any, person: Person) => person.phone || '-'\n    },\n    {\n      key: 'dateOfBirth',\n      label: 'Data di nascita',\n      sortable: true,\n      render: (value: any, person: Person) => person.dateOfBirth \n        ? new Date(person.dateOfBirth).toLocaleDateString('it-IT')\n        : '-'\n    },\n    {\n      key: 'createdAt',\n      label: 'Creato il',\n      sortable: true,\n      render: (value: any, person: Person) => new Date(person.createdAt).toLocaleDateString('it-IT')\n    }\n  ];\n\n  // Gestori delle azioni\n  const handleViewPerson = (person: Person) => {\n    console.log('Visualizza persona:', person);\n    // Implementare navigazione al dettaglio\n  };\n\n  const handleEditPerson = (person: Person) => {\n    console.log('Modifica persona:', person);\n    // Implementare navigazione al form di modifica\n  };\n\n  const handleDeletePerson = (person: Person) => {\n    console.log('Elimina persona:', person);\n    // Implementare logica di eliminazione\n  };\n\n  const handleExportPerson = (person: Person) => {\n    console.log('Esporta persona:', person);\n    // Implementare logica di esportazione\n  };\n\n  const handleCreatePerson = () => {\n    console.log('Crea nuova persona');\n    // Implementare navigazione al form di creazione\n  };\n\n  const handleImportPersons = () => {\n    console.log('Importa persone');\n    // Implementare logica di importazione\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Gestione Persone\n          </h1>\n          <p className=\"mt-2 text-gray-600\">\n            Gestisci le persone nel sistema con conformità GDPR completa\n          </p>\n        </div>\n\n        <GDPREntityPage<Person>\n          // Configurazione entità\n          entityType=\"person\"\n          entityName=\"persona\"\n          entityNamePlural=\"persone\"\n          \n          // Configurazione API\n          apiEndpoint=\"/api/persons\"\n          \n          // Configurazione colonne\n          columns={personColumns}\n          \n          // Configurazione permessi GDPR\n          permissions={{\n            read: \"person:read\",\n            create: \"person:write\",\n            update: \"person:write\",\n            delete: \"person:delete\",\n            export: \"person:export\"\n          }}\n          \n          // Azioni\n          actions={{\n            onView: handleViewPerson,\n            onEdit: handleEditPerson,\n            onDelete: handleDeletePerson,\n            onExport: handleExportPerson,\n            onCreate: handleCreatePerson,\n            onImport: handleImportPersons,\n            custom: [\n              {\n                label: 'Invia email',\n                icon: <span>📧</span>,\n                onClick: (person: Person) => {\n                  console.log('Invia email a:', person.email);\n                  // Implementare invio email\n                },\n                variant: 'secondary',\n                permission: 'person:email'\n              }\n            ]\n          }}\n          \n          // Configurazione vista\n          defaultViewMode=\"table\"\n          showBatchOperations={true}\n          showFilters={true}\n          showColumnSettings={true}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default PersonGDPRPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/QuotesAndInvoices.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/QuotesAndInvoices.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/auth/LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":17,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\nimport { useAuthRedirect } from '../../hooks/useAuthRedirect';\nimport { Eye, EyeOff, Lock, User } from 'lucide-react';\nimport { PublicLayout } from '../../components/public/PublicLayout';\n\nconst LoginPage: React.FC = () => {\n  const [identifier, setIdentifier] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  const { login, isAuthenticated } = useAuth();\n  const { handlePostLoginRedirect } = useAuthRedirect();\n  const navigate = useNavigate();\n\n  // Se già autenticato, reindirizza alla dashboard\n  if (isAuthenticated) {\n    return <Navigate to=\"/dashboard\" replace />;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    try {\n      await login(identifier, password);\n      // Il redirect viene gestito dall'hook useAuthRedirect\n      handlePostLoginRedirect();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Errore durante il login');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <PublicLayout>\n      <div className=\"min-h-[calc(100vh-200px)] flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Accedi al tuo account\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Inserisci le tue credenziali per accedere\n          </p>\n        </div>\n        \n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"rounded-md shadow-sm space-y-4\">\n            <div>\n              <label htmlFor=\"identifier\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Email, Username o Codice Fiscale\n              </label>\n              <div className=\"relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <User className=\"h-5 w-5 text-gray-400\" />\n                </div>\n                <input\n                  id=\"identifier\"\n                  name=\"identifier\"\n                  type=\"text\"\n                  autoComplete=\"username\"\n                  required\n                  className=\"appearance-none relative block w-full pl-10 pr-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"Email, username o codice fiscale\"\n                  value={identifier}\n                  onChange={(e) => {\n                    console.log('🔍 Input change - Raw value:', e.target.value);\n                    console.log('🔍 Input change - Value length:', e.target.value.length);\n                    setIdentifier(e.target.value);\n                  }}\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <Lock className=\"h-5 w-5 text-gray-400\" />\n                </div>\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  className=\"appearance-none relative block w-full pl-10 pr-10 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"Inserisci la tua password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-5 w-5 text-gray-400 hover:text-gray-600\" />\n                  ) : (\n                    <Eye className=\"h-5 w-5 text-gray-400 hover:text-gray-600\" />\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"rounded-md bg-red-50 p-4\">\n              <div className=\"text-sm text-red-700\">{error}</div>\n            </div>\n          )}\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Accesso in corso...\n                </div>\n              ) : (\n                'Accedi'\n              )}\n            </button>\n          </div>\n        </form>\n        </div>\n      </div>\n    </PublicLayout>\n  );\n};\n\nexport default LoginPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/companies/CompaniesPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/companies/CompaniesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[956,959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[956,959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5923,5926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5923,5926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loadingCompanies' is assigned a value but never used.","line":329,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":329,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":352,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":352,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":352,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11687,11690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11687,11690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":365,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12111,12114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12111,12114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { GDPREntityTemplate } from '../../templates/gdpr-entity-page/GDPREntityTemplate';\nimport { DataTableColumn } from '../../components/shared/tables/DataTable';\nimport { Badge } from '../../design-system';\nimport { Building2, MapPin, Phone, Mail, Globe } from 'lucide-react';\nimport CompanyImport from '../../components/companies/CompanyImport';\nimport { apiGet, apiPost } from '../../services/api';\n\ninterface Company {\n  id: string;\n  ragioneSociale?: string;\n  codiceAteco?: string;\n  iban?: string;\n  pec?: string;\n  sdi?: string;\n  cap?: string;\n  citta?: string;\n  codiceFiscale?: string;\n  mail?: string;\n  note?: string;\n  personaRiferimento?: string;\n  piva?: string;\n  provincia?: string;\n  sedeAzienda?: string;\n  nomeSede?: string; // Campo per il nome della sede specifica\n  telefono?: string;\n  deletedAt?: string;\n  tenantId?: string;\n  slug?: string;\n  domain?: string;\n  settings?: any;\n  subscriptionPlan?: string;\n  isActive?: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n  // Campi legacy per compatibilità con il frontend\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  postalCode?: string;\n  province?: string;\n  vatNumber?: string;\n  taxCode?: string;\n  website?: string;\n  status?: 'ACTIVE' | 'INACTIVE' | 'PENDING';\n}\n\n// Configurazione colonne per la tabella\nconst getCompaniesColumns = (): DataTableColumn<Company>[] => [\n  {\n      key: 'ragioneSociale',\n      label: 'Nome',\n      sortable: true,\n      renderCell: (company: Company) => (\n        <div className=\"font-medium text-gray-900\">\n          {company.ragioneSociale || 'N/A'}\n        </div>\n      )\n    },\n  {\n    key: 'mail',\n    label: 'Email',\n    sortable: true,\n    renderCell: (company) => (\n      <div className=\"flex items-center gap-2\">\n        <Mail className=\"h-4 w-4 text-gray-400\" />\n        <a href={`mailto:${company.mail}`} className=\"text-blue-600 hover:text-blue-800\">\n          {company.mail}\n        </a>\n      </div>\n    )\n  },\n  {\n    key: 'telefono',\n    label: 'Telefono',\n    sortable: true,\n    renderCell: (company) => (\n      <div className=\"flex items-center gap-2\">\n        <Phone className=\"h-4 w-4 text-gray-400\" />\n        <a href={`tel:${company.telefono}`} className=\"text-gray-900\">\n          {company.telefono}\n        </a>\n      </div>\n    )\n  },\n  {\n    key: 'citta',\n    label: 'Località',\n    sortable: false,\n    renderCell: (company) => (\n      <div className=\"flex items-center gap-2\">\n        <MapPin className=\"h-4 w-4 text-gray-400\" />\n        <div>\n          <div className=\"text-gray-900\">{company.citta}</div>\n          <div className=\"text-sm text-gray-500\">{company.provincia || 'N/A'}</div>\n        </div>\n      </div>\n    )\n  },\n  {\n    key: 'piva',\n    label: 'P.IVA',\n    sortable: true,\n    renderCell: (company) => (\n      <span className=\"font-mono text-sm\">{company.piva || 'N/A'}</span>\n    )\n  },\n  {\n    key: 'website',\n    label: 'Sito Web',\n    sortable: false,\n    renderCell: (company) => company.website ? (\n      <div className=\"flex items-center gap-2\">\n        <Globe className=\"h-4 w-4 text-gray-400\" />\n        <a \n          href={company.website.startsWith('http') ? company.website : `https://${company.website}`} \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          className=\"text-blue-600 hover:text-blue-800 truncate max-w-32\"\n        >\n          {company.website}\n        </a>\n      </div>\n    ) : (\n      <span className=\"text-gray-400\">N/A</span>\n    )\n  },\n  {\n    key: 'status',\n    label: 'Stato',\n    sortable: true,\n    renderCell: (company) => {\n      const statusConfig = {\n        Active: { label: 'Attiva', color: 'default' as const },\n        Inactive: { label: 'Inattiva', color: 'destructive' as const },\n        Pending: { label: 'In attesa', color: 'outline' as const }\n      };\n      const config = (company.status && statusConfig[company.status]) || { label: company.status || 'Sconosciuto', color: 'secondary' as const };\n      return <Badge variant={config.color}>{config.label}</Badge>;\n    }\n  }\n];\n\n// Configurazione card per la vista griglia\nconst getCompanyCardConfig = () => ({\n  titleField: 'ragioneSociale' as keyof Company,\n  subtitleField: 'citta' as keyof Company,\n  badgeField: 'status' as keyof Company,\n  descriptionField: 'website' as keyof Company,\n  // Configurazione dinamica per compatibilità\n  title: (company: Company) => company.ragioneSociale || 'N/A',\n  subtitle: (company: Company) => company.citta || 'Località non specificata',\n  badge: (company: Company) => {\n    const statusConfig = {\n      Active: { label: 'Attiva', variant: 'default' as const },\n      Inactive: { label: 'Inattiva', variant: 'destructive' as const },\n      Pending: { label: 'In attesa', variant: 'outline' as const }\n    };\n    const config = (company.status && statusConfig[company.status]) || { label: company.status || 'Sconosciuto', variant: 'secondary' as const };\n    return { text: config.label, variant: config.variant };\n  },\n  icon: () => <Building2 className=\"h-5 w-5\" />,\n  fields: [\n    {\n      label: 'Email',\n      value: (company: Company) => company.mail || 'N/A',\n      icon: <Mail className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Telefono',\n      value: (company: Company) => company.telefono || 'N/A',\n      icon: <Phone className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Località',\n      value: (company: Company) => `${company.citta || ''}${company.provincia ? `, ${company.provincia}` : ''}` || 'N/A',\n      icon: <MapPin className=\"h-4 w-4\" />\n    },\n    {\n      label: 'P.IVA',\n      value: (company: Company) => company.piva || 'N/A',\n      icon: <Building2 className=\"h-4 w-4\" />\n    }\n  ],\n  description: (company: Company) => company.website ? `Sito web: ${company.website}` : undefined\n});\n\n// Template CSV per l'import - COMPLETO CON TUTTI I CAMPI DELLO SCHEMA PRISMA\nconst csvTemplateData: any[] = [\n  {\n    // === CAMPI COMPANY ===\n    ragioneSociale: 'Esempio Azienda S.r.l.',\n    codiceAteco: '62.01.00',\n    piva: '12345678901',\n    codiceFiscale: '12345678901',\n    sdi: 'ABCDEFG',\n    pec: 'pec@esempio.com',\n    iban: 'IT60 X054 2811 1010 0000 0123 456',\n    sedeAzienda: 'Via Roma 123',\n    citta: 'Milano',\n    provincia: 'MI',\n    cap: '20100',\n    mail: 'info@esempio.com',\n    telefono: '+39 02 1234567',\n    personaRiferimento: 'Mario Rossi',\n    note: 'Note azienda',\n    slug: 'esempio-azienda',\n    domain: 'esempio.com',\n    settings: '{}',\n    subscriptionPlan: 'basic',\n    isActive: true,\n    // === CAMPI COMPANY SITE ===\n    siteName: 'Sede Principale',\n    siteIndirizzo: 'Via Roma 123',\n    siteCitta: 'Milano',\n    siteProvincia: 'MI',\n    siteCap: '20100',\n    sitePersonaRiferimento: 'Mario Rossi',\n    siteTelefono: '+39 02 1234567',\n    siteMail: 'sede@esempio.com',\n    dvr: 'DVR-001',\n    rsppId: '1',\n    medicoCompetenteId: '1',\n    ultimoSopralluogo: '2024-01-15',\n    prossimoSopralluogo: '2024-07-15',\n    valutazioneSopralluogo: 'Positiva',\n    sopralluogoEseguitoDa: 'Ing. Bianchi',\n    ultimoSopralluogoRSPP: '2024-01-10',\n    prossimoSopralluogoRSPP: '2024-07-10',\n    noteSopralluogoRSPP: 'Tutto regolare',\n    ultimoSopralluogoMedico: '2024-01-20',\n    prossimoSopralluogoMedico: '2024-07-20',\n    noteSopralluogoMedico: 'Visite mediche aggiornate'\n  },\n  {\n    // === CAMPI COMPANY ===\n    ragioneSociale: 'Altra Azienda S.p.A.',\n    codiceAteco: '47.11.10',\n    piva: '98765432109',\n    codiceFiscale: '98765432109',\n    sdi: 'HIJKLMN',\n    pec: 'pec@altraazienda.com',\n    iban: 'IT60 X054 2811 1010 0000 0987 654',\n    sedeAzienda: 'Via Nazionale 456',\n    citta: 'Roma',\n    provincia: 'RM',\n    cap: '00100',\n    mail: 'info@altraazienda.com',\n    telefono: '+39 06 7654321',\n    personaRiferimento: 'Giulia Verdi',\n    note: 'Azienda di distribuzione',\n    slug: 'altra-azienda',\n    domain: 'altraazienda.com',\n    settings: '{}',\n    subscriptionPlan: 'premium',\n    isActive: true,\n    // === CAMPI COMPANY SITE ===\n    siteName: 'Sede Secondaria',\n    siteIndirizzo: 'Via Nazionale 456',\n    siteCitta: 'Roma',\n    siteProvincia: 'RM',\n    siteCap: '00100',\n    sitePersonaRiferimento: 'Giulia Verdi',\n    siteTelefono: '+39 06 7654321',\n    siteMail: 'sede@altraazienda.com',\n    dvr: 'DVR-002',\n    rsppId: '2',\n    medicoCompetenteId: '2',\n    ultimoSopralluogo: '2024-02-01',\n    prossimoSopralluogo: '2024-08-01',\n    valutazioneSopralluogo: 'Buona',\n    sopralluogoEseguitoDa: 'Dott. Neri',\n    ultimoSopralluogoRSPP: '2024-01-25',\n    prossimoSopralluogoRSPP: '2024-07-25',\n    noteSopralluogoRSPP: 'Miglioramenti necessari',\n    ultimoSopralluogoMedico: '2024-02-05',\n    prossimoSopralluogoMedico: '2024-08-05',\n    noteSopralluogoMedico: 'Controlli periodici'\n  }\n];\n\n// Headers CSV - RIORDINATI SECONDO RICHIESTA UTENTE\nconst csvHeaders = [\n  // === ORDINE PRIORITARIO RICHIESTO ===\n  { key: 'ragioneSociale', label: 'Ragione Sociale' },\n  { key: 'codiceAteco', label: 'Codice ATECO' },\n  { key: 'piva', label: 'P.IVA' },\n  { key: 'codiceFiscale', label: 'Codice Fiscale' },\n  { key: 'sdi', label: 'SDI' },\n  { key: 'pec', label: 'PEC' },\n  { key: 'iban', label: 'IBAN' },\n  { key: 'siteName', label: 'Nome Sede' },\n  { key: 'siteIndirizzo', label: 'Indirizzo Sede' },\n  { key: 'siteCitta', label: 'Città Sede' },\n  { key: 'siteProvincia', label: 'Provincia Sede' },\n  { key: 'siteCap', label: 'CAP Sede' },\n  { key: 'sitePersonaRiferimento', label: 'Persona Riferimento Sede' },\n  { key: 'siteTelefono', label: 'Telefono Sede' },\n  { key: 'siteMail', label: 'Mail Sede' },\n  { key: 'domain', label: 'Sito (Domain)' },\n  { key: 'note', label: 'Note' },\n  \n  // === ALTRI CAMPI COMPANY SITE ===\n  { key: 'dvr', label: 'DVR' },\n  { key: 'rsppId', label: 'RSPP ID' },\n  { key: 'medicoCompetenteId', label: 'Medico Competente ID' },\n  { key: 'ultimoSopralluogo', label: 'Ultimo Sopralluogo' },\n  { key: 'prossimoSopralluogo', label: 'Prossimo Sopralluogo' },\n  { key: 'valutazioneSopralluogo', label: 'Valutazione Sopralluogo' },\n  { key: 'sopralluogoEseguitoDa', label: 'Sopralluogo Eseguito Da' },\n  { key: 'ultimoSopralluogoRSPP', label: 'Ultimo Sopralluogo RSPP' },\n  { key: 'prossimoSopralluogoRSPP', label: 'Prossimo Sopralluogo RSPP' },\n  { key: 'noteSopralluogoRSPP', label: 'Note Sopralluogo RSPP' },\n  { key: 'ultimoSopralluogoMedico', label: 'Ultimo Sopralluogo Medico' },\n  { key: 'prossimoSopralluogoMedico', label: 'Prossimo Sopralluogo Medico' },\n  { key: 'noteSopralluogoMedico', label: 'Note Sopralluogo Medico' },\n\n  // === ALTRI CAMPI COMPANY ===\n  { key: 'slug', label: 'Slug' },\n  { key: 'settings', label: 'Settings' },\n  { key: 'subscriptionPlan', label: 'Subscription Plan' },\n  { key: 'isActive', label: 'Is Active' },\n];\n\nexport const CompaniesPage: React.FC = () => {\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [loadingCompanies, setLoadingCompanies] = useState(false);\n\n  // Carica i dati delle aziende per l'import\n  const loadCompanies = async () => {\n    try {\n      setLoadingCompanies(true);\n      const response = await apiGet('/api/v1/companies') as Company[];\n      console.log('Aziende caricate per import:', response?.length || 0, response?.[0]); // Debug log\n      setCompanies(response || []);\n    } catch (error) {\n      console.error('Errore nel caricamento delle aziende:', error);\n      setCompanies([]);\n    } finally {\n      setLoadingCompanies(false);\n    }\n  };\n\n  // Carica le aziende al mount del componente\n  useEffect(() => {\n    loadCompanies();\n  }, []);\n\n  // Funzione per gestire l'import delle aziende\n  const handleImportEntities = async (data: any[]) => {\n    // Ricarica i dati delle aziende prima di aprire il modal\n    await loadCompanies();\n    setShowImportModal(true);\n    return Promise.resolve();\n  };\n\n  // Funzione per gestire la creazione di una nuova azienda\n  const handleCreateCompany = () => {\n    // Naviga alla pagina di creazione azienda\n    window.location.href = '/companies/create';\n  };\n\n  const handleImportCompanies = async (importedCompanies: any[], overwriteIds?: string[]) => {\n    try {\n      // Invia i dati al backend\n      const response = await apiPost('/api/v1/companies/import', {\n        companies: importedCompanies,\n        overwriteIds: overwriteIds || []\n      });\n      \n      // Aggiorna la lista locale (il template si ricaricherà automaticamente)\n      console.log('Import completato:', response);\n      \n      // Ricarica i dati delle aziende per aggiornare la lista\n      await loadCompanies();\n      \n      // Chiudi il modal\n      setShowImportModal(false);\n    } catch (error) {\n      console.error('Errore durante l\\'import:', error);\n      throw error; // Rilancia l'errore per permettere al modal di gestirlo\n    }\n  };\n\n  return (\n    <>\n      <GDPREntityTemplate<Company>\n        entityName=\"company\"\n        entityNamePlural=\"companies\"\n        entityDisplayName=\"Azienda\"\n        entityDisplayNamePlural=\"Aziende\"\n        readPermission=\"companies:read\"\n        writePermission=\"companies:write\"\n        deletePermission=\"companies:delete\"\n        exportPermission=\"companies:export\"\n        apiEndpoint=\"/api/v1/companies\"\n        columns={getCompaniesColumns()}\n        searchFields={['ragioneSociale', 'mail', 'citta', 'piva']}\n        filterOptions={[\n          {\n            key: 'status',\n            label: 'Stato',\n            options: [\n              { value: 'Active', label: 'Attiva' },\n              { value: 'Inactive', label: 'Inattiva' },\n              { value: 'Pending', label: 'In attesa' }\n            ]\n          }\n        ]}\n        sortOptions={[\n          { key: 'ragioneSociale', label: 'Nome' },\n          { key: 'mail', label: 'Email' },\n          { key: 'citta', label: 'Città' },\n          { key: 'status', label: 'Stato' },\n          { key: 'createdAt', label: 'Data creazione' }\n        ]}\n        csvHeaders={csvHeaders}\n        csvTemplateData={csvTemplateData}\n        cardConfig={getCompanyCardConfig()}\n        enableBatchOperations={true}\n        enableImportExport={true}\n        enableColumnSelector={true}\n        enableAdvancedFilters={true}\n        defaultViewMode=\"table\"\n        onCreateEntity={handleCreateCompany}\n        onImportEntities={handleImportEntities}\n      />\n      \n      {showImportModal && (\n        <CompanyImport\n          onImport={handleImportCompanies}\n          onClose={() => setShowImportModal(false)}\n          existingCompanies={companies}\n        />\n      )}\n    </>\n  );\n};\n\n// Export default per compatibilità\nexport default CompaniesPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/companies/CompanyCreate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/companies/CompanyDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Building2' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":63,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1422,1425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1422,1425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'companySites' is assigned a value but never used.","line":68,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1669,1672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1669,1672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport { \n  AlertTriangle,\n  BookOpen,\n  Building2,\n  Calendar,\n  ChevronRight,\n  ClipboardCheck,\n  Clock,\n  Edit,\n  Globe,\n  GraduationCap,\n  Mail,\n  MapPin,\n  Phone,\n  Shield,\n  Stethoscope,\n  User\n} from 'lucide-react';\nimport { getLoadingErrorMessage } from '../../utils/errorUtils';\nimport { apiGet } from '../../services/api';\nimport CompanySites from '../../components/companies/CompanySites';\nimport EmployeesSection from '../../components/companies/EmployeesSection';\n\ninterface CompanySite {\n  id: string;\n  siteName: string;\n  citta: string;\n  indirizzo: string;\n  cap: string;\n  provincia: string;\n  personaRiferimento?: string;\n  telefono?: string;\n  mail?: string;\n  dvr?: string;\n  rsppId?: string;\n  medicoCompetenteId?: string;\n  ultimoSopralluogo?: string;\n  prossimoSopralluogo?: string;\n  valutazioneSopralluogo?: string;\n  sopralluogoEseguitoDa?: string;\n  rspp?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  medicoCompetente?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\ninterface CompanySitesResponse {\n  sites: CompanySite[];\n}\n\nconst CompanyDetails: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const [company, setCompany] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedSiteId, setSelectedSiteId] = useState<string | null>(null);\n  const [companySites, setCompanySites] = useState<any[]>([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      try {\n        const [companyData, sitesResponse] = await Promise.all([\n        apiGet(`/api/v1/companies/${id}`),\n        apiGet(`/api/v1/company-sites/company/${id}`) as Promise<CompanySitesResponse>\n      ]);\n      setCompany(companyData);\n      setCompanySites(Array.isArray(sitesResponse?.sites) ? sitesResponse.sites : []);\n      } catch (err) {\n        console.error('Error fetching company data:', err);\n        setError(getLoadingErrorMessage('companies', err));\n        setCompany(null);\n        setCompanySites([]);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [id]);\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-80\">Loading...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-80\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-red-600\">Errore nel caricamento</h2>\n          <p className=\"text-gray-600 mt-2\">{error}</p>\n          <Link to=\"/companies\" className=\"mt-4 inline-block text-blue-600 hover:text-blue-800\">\n            Torna alle Aziende\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (!company) {\n    return (\n      <div className=\"flex items-center justify-center h-80\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-800\">Azienda non trovata</h2>\n          <p className=\"text-gray-600 mt-2\">L'azienda che stai cercando non esiste o è stata rimossa.</p>\n          <Link to=\"/companies\" className=\"mt-4 inline-block text-blue-600 hover:text-blue-800\">\n            Torna alle Aziende\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back link */}\n      <div>\n        <Link \n          to=\"/companies\" \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <span className=\"transform rotate-180\">\n            <ChevronRight className=\"h-4 w-4 mr-1\" />\n          </span>\n          Torna alle Aziende\n        </Link>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"h-16 w-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-xl font-bold text-white\">{company.ragioneSociale?.substring(0, 2)?.toUpperCase() || 'NA'}</span>\n            </div>\n            <div className=\"ml-4\">\n              <h1 className=\"text-2xl font-bold text-gray-800\">{company.ragioneSociale}</h1>\n            </div>\n          </div>\n          <div className=\"mt-4 md:mt-0\">\n            <Link to={`/companies/${company.id}/edit`} className=\"btn-primary flex items-center rounded-full\">\n              <Edit className=\"h-4 w-4 mr-1\" />\n              Modifica Azienda\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"mt-4 border-t border-gray-200 pt-4 grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Informazioni di Contatto</h2>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-start\">\n                <User className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Persona di Riferimento</span>\n                  <span className=\"block text-sm text-gray-600\">{company.persona_riferimento}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Phone className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Telefono</span>\n                  <span className=\"block text-sm text-gray-600\">{company.telefono}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Mail className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Mail</span>\n                  <span className=\"block text-sm text-gray-600\">{company.mail}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <MapPin className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Sede Azienda</span>\n                  <span className=\"block text-sm text-gray-600\">{company.sede_azienda}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Dati Fiscali</h2>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">P.IVA</span>\n                  <span className=\"block text-sm text-gray-600\">{company.piva}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Codice Fiscale</span>\n                  <span className=\"block text-sm text-gray-600\">{company.codice_fiscale}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Codice ATECO</span>\n                  <span className=\"block text-sm text-gray-600\">{company.codice_ateco}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">SDI</span>\n                  <span className=\"block text-sm text-gray-600\">{company.sdi}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Dati Aggiuntivi</h2>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">PEC</span>\n                  <span className=\"block text-sm text-gray-600\">{company.pec}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">IBAN</span>\n                  <span className=\"block text-sm text-gray-600\">{company.iban}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Località</span>\n                  <span className=\"block text-sm text-gray-600\">{company.citta}, {company.provincia} {company.cap}</span>\n                </div>\n              </li>\n              {company.note && (\n                <li className=\"flex items-start\">\n                  <div className=\"ml-0\">\n                    <span className=\"block text-xs font-medium text-gray-800\">Note</span>\n                    <span className=\"block text-sm text-gray-600\">{company.note}</span>\n                  </div>\n                </li>\n              )}\n            </ul>\n          </div>\n        </div>\n\n      </div>\n\n      {/* Company Sites Section */}\n      <CompanySites \n        companyId={id!} \n        selectedSiteId={selectedSiteId} \n        onSiteFilterChange={setSelectedSiteId}\n      />\n\n      {/* Dipendenti Section */}\n      <EmployeesSection companyId={id!} />\n\n      {/* Prossime Scadenze e Corsi/Visite - Layout affiancato con altezza doppia */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Prossime Scadenze Section */}\n        <div className=\"bg-white rounded-lg shadow p-6 h-96\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <Clock className=\"h-5 w-5 mr-2 text-orange-600\" />\n              Prossime Scadenze\n            </h2>\n            <button className=\"text-orange-600 hover:text-orange-800 flex items-center\">\n              Vedi Tutte\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-3 overflow-y-auto h-80\">\n            {/* Scadenza Esempio 1 */}\n            <div className=\"flex items-center justify-between p-3 bg-orange-50 rounded-lg border-l-4 border-orange-400\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 text-orange-600 mr-3\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">Rinnovo Certificazione Sicurezza</p>\n                  <p className=\"text-sm text-gray-600\">Sede Principale</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-orange-600\">15 giorni</p>\n                <p className=\"text-xs text-gray-500\">31/12/2024</p>\n              </div>\n            </div>\n\n            {/* Scadenza Esempio 2 */}\n            <div className=\"flex items-center justify-between p-3 bg-yellow-50 rounded-lg border-l-4 border-yellow-400\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 text-yellow-600 mr-3\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">Aggiornamento Formazione Antincendio</p>\n                  <p className=\"text-sm text-gray-600\">Sede Secondaria</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-yellow-600\">30 giorni</p>\n                <p className=\"text-xs text-gray-500\">15/01/2025</p>\n              </div>\n            </div>\n\n            {/* Scadenza Esempio 3 */}\n            <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg border-l-4 border-green-400\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 text-green-600 mr-3\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">Controllo Periodico Attrezzature</p>\n                  <p className=\"text-sm text-gray-600\">Tutte le sedi</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-green-600\">45 giorni</p>\n                <p className=\"text-xs text-gray-500\">30/01/2025</p>\n              </div>\n            </div>\n\n            {/* Scadenza Esempio 4 */}\n            <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg border-l-4 border-blue-400\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 text-blue-600 mr-3\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">Revisione DVR</p>\n                  <p className=\"text-sm text-gray-600\">Sede Principale</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-blue-600\">60 giorni</p>\n                <p className=\"text-xs text-gray-500\">15/02/2025</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Corsi e Visite Programmate Section */}\n        <div className=\"bg-white rounded-lg shadow p-6 h-96\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <Calendar className=\"h-5 w-5 mr-2 text-purple-600\" />\n              Corsi e Visite Programmate\n            </h2>\n            <button className=\"text-purple-600 hover:text-purple-800 flex items-center\">\n              Pianifica Nuovo\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-3 overflow-y-auto h-80\">\n            {/* Corso Esempio 1 */}\n            <div className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center\">\n                  <BookOpen className=\"h-5 w-5 text-blue-600 mr-2\" />\n                  <span className=\"text-xs font-medium text-blue-600 bg-blue-100 px-2 py-1 rounded\">CORSO</span>\n                </div>\n                <span className=\"text-xs text-gray-500\">15 Gen 2025</span>\n              </div>\n              <h3 className=\"font-medium text-gray-900 mb-2\">Formazione Sicurezza sul Lavoro</h3>\n              <p className=\"text-sm text-gray-600 mb-2\">Sede Principale - Aula A</p>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-500\">20 partecipanti</span>\n                <span className=\"text-green-600 font-medium\">Confermato</span>\n              </div>\n            </div>\n\n            {/* Visita Esempio 1 */}\n            <div className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center\">\n                  <Stethoscope className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span className=\"text-xs font-medium text-green-600 bg-green-100 px-2 py-1 rounded\">VISITA</span>\n                </div>\n                <span className=\"text-xs text-gray-500\">22 Gen 2025</span>\n              </div>\n              <h3 className=\"font-medium text-gray-900 mb-2\">Sorveglianza Sanitaria</h3>\n              <p className=\"text-sm text-gray-600 mb-2\">Sede Secondaria - Ambulatorio</p>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-500\">15 dipendenti</span>\n                <span className=\"text-yellow-600 font-medium\">In Programma</span>\n              </div>\n            </div>\n\n            {/* Corso Esempio 2 */}\n            <div className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center\">\n                  <BookOpen className=\"h-5 w-5 text-blue-600 mr-2\" />\n                  <span className=\"text-xs font-medium text-blue-600 bg-blue-100 px-2 py-1 rounded\">CORSO</span>\n                </div>\n                <span className=\"text-xs text-gray-500\">28 Gen 2025</span>\n              </div>\n              <h3 className=\"font-medium text-gray-900 mb-2\">Aggiornamento Antincendio</h3>\n              <p className=\"text-sm text-gray-600 mb-2\">Sede Principale - Piazzale</p>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-500\">12 partecipanti</span>\n                <span className=\"text-blue-600 font-medium\">Da Confermare</span>\n              </div>\n            </div>\n\n            {/* Visita Esempio 2 */}\n            <div className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center\">\n                  <Stethoscope className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span className=\"text-xs font-medium text-green-600 bg-green-100 px-2 py-1 rounded\">VISITA</span>\n                </div>\n                <span className=\"text-xs text-gray-500\">05 Feb 2025</span>\n              </div>\n              <h3 className=\"font-medium text-gray-900 mb-2\">Controlli Periodici</h3>\n              <p className=\"text-sm text-gray-600 mb-2\">Tutte le sedi</p>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-500\">45 dipendenti</span>\n                <span className=\"text-green-600 font-medium\">Confermato</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Sopralluoghi RSPP e Medico Competente - Card affiancate */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Sopralluogo RSPP */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <Shield className=\"h-5 w-5 mr-2 text-blue-600\" />\n              Sopralluogo RSPP\n            </h2>\n            <button className=\"text-blue-600 hover:text-blue-800 flex items-center\">\n              Pianifica\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {/* Ultimo Sopralluogo */}\n            <div className=\"border-l-4 border-blue-400 bg-blue-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"font-medium text-gray-900\">Ultimo Sopralluogo</h3>\n                <span className=\"text-sm text-blue-600 font-medium\">Completato</span>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-1\">Data: 15 Novembre 2024</p>\n              <p className=\"text-sm text-gray-600 mb-1\">Sede: Sede Principale</p>\n              <p className=\"text-sm text-gray-600\">RSPP: Dott. Mario Rossi</p>\n            </div>\n\n            {/* Prossimo Sopralluogo */}\n            <div className=\"border-l-4 border-orange-400 bg-orange-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"font-medium text-gray-900\">Prossimo Sopralluogo</h3>\n                <span className=\"text-sm text-orange-600 font-medium\">Programmato</span>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-1\">Data: 15 Febbraio 2025</p>\n              <p className=\"text-sm text-gray-600 mb-1\">Sede: Sede Secondaria</p>\n              <p className=\"text-sm text-gray-600\">RSPP: Dott. Mario Rossi</p>\n            </div>\n\n            {/* Statistiche */}\n            <div className=\"grid grid-cols-2 gap-4 pt-2\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-blue-600\">4</p>\n                <p className=\"text-sm text-gray-600\">Sopralluoghi 2024</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-green-600\">2</p>\n                <p className=\"text-sm text-gray-600\">Programmati 2025</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Sopralluogo Medico Competente */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <Stethoscope className=\"h-5 w-5 mr-2 text-green-600\" />\n              Sopralluogo Medico Competente\n            </h2>\n            <button className=\"text-green-600 hover:text-green-800 flex items-center\">\n              Pianifica\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {/* Ultimo Sopralluogo */}\n            <div className=\"border-l-4 border-green-400 bg-green-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"font-medium text-gray-900\">Ultimo Sopralluogo</h3>\n                <span className=\"text-sm text-green-600 font-medium\">Completato</span>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-1\">Data: 20 Ottobre 2024</p>\n              <p className=\"text-sm text-gray-600 mb-1\">Sede: Sede Principale</p>\n              <p className=\"text-sm text-gray-600\">Medico: Dott.ssa Anna Bianchi</p>\n            </div>\n\n            {/* Prossimo Sopralluogo */}\n            <div className=\"border-l-4 border-yellow-400 bg-yellow-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"font-medium text-gray-900\">Prossimo Sopralluogo</h3>\n                <span className=\"text-sm text-yellow-600 font-medium\">Da Programmare</span>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-1\">Data: Da definire</p>\n              <p className=\"text-sm text-gray-600 mb-1\">Sede: Tutte le sedi</p>\n              <p className=\"text-sm text-gray-600\">Medico: Dott.ssa Anna Bianchi</p>\n            </div>\n\n            {/* Statistiche */}\n            <div className=\"grid grid-cols-2 gap-4 pt-2\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-green-600\">3</p>\n                <p className=\"text-sm text-gray-600\">Sopralluoghi 2024</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-orange-600\">1</p>\n                <p className=\"text-sm text-gray-600\">Da Programmare</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Link to=\"#\" className=\"bg-white p-4 rounded-full shadow flex items-center transition-all duration-200 hover:shadow-md hover:translate-y-[-2px]\">\n          <div className=\"p-3 bg-green-100 rounded-full\">\n            <ClipboardCheck className=\"h-6 w-6 text-green-600\" />\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-gray-800\">Assessments</h3>\n            <p className=\"text-xs text-gray-500\">View health assessments</p>\n          </div>\n          <ChevronRight className=\"h-5 w-5 text-gray-400 ml-auto\" />\n        </Link>\n        <Link to=\"#\" className=\"bg-white p-4 rounded-full shadow flex items-center transition-all duration-200 hover:shadow-md hover:translate-y-[-2px]\">\n          <div className=\"p-3 bg-amber-100 rounded-full\">\n            <GraduationCap className=\"h-6 w-6 text-amber-600\" />\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-gray-800\">Training History</h3>\n            <p className=\"text-xs text-gray-500\">Review past training</p>\n          </div>\n          <ChevronRight className=\"h-5 w-5 text-gray-400 ml-auto\" />\n        </Link>\n      </div>\n\n    </div>\n  );\n};\n\nexport default CompanyDetails;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/companies/CompanyEdit.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'companies' is assigned a value but never used.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[783,786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[783,786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { ChevronLeft } from 'lucide-react';\nimport CompanyFormNew from '../../components/companies/CompanyFormNew';\nimport { useCompanies } from '../../hooks/useCompanies';\nimport { useToast } from '../../hooks/useToast';\nimport { apiGet } from '../../services/api';\nimport { getLoadingErrorMessage } from '../../utils/errorUtils';\n\nexport default function CompanyEdit() {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { companies, refresh: refreshCompanies } = useCompanies();\n  const { showToast } = useToast();\n  const [loading, setLoading] = useState(id ? true : false);\n  const [company, setCompany] = useState<any>(null);\n  const [fetchAttempts, setFetchAttempts] = useState(0);\n  const isFetchingRef = useRef(false);\n  const companyDataFetchedRef = useRef(false); // Track if we've already fetched company data\n  const MAX_RETRY_ATTEMPTS = 3;\n  \n  // Fetch company data with improved retry logic\n  useEffect(() => {\n    // If we've already successfully fetched the company data, don't fetch again\n    // This prevents the company data from being reloaded during form editing\n    if (!id || isFetchingRef.current || companyDataFetchedRef.current) return;\n    \n    const fetchCompany = async () => {\n      if (fetchAttempts >= MAX_RETRY_ATTEMPTS) {\n        showToast({\n          message: `Failed to load company data after ${MAX_RETRY_ATTEMPTS} attempts.`,\n          type: 'error'\n        });\n        setLoading(false);\n        navigate('/companies');\n        return;\n      }\n      \n      isFetchingRef.current = true;\n      \n      try {\n        const data = await apiGet(`/companies/${id}`);\n        setCompany(data);\n        companyDataFetchedRef.current = true; // Mark that we've successfully fetched company data\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching company:', error);\n        \n        // Increment attempt counter\n        const nextAttempt = fetchAttempts + 1;\n        setFetchAttempts(nextAttempt);\n        \n        if (error instanceof Error && error.message.includes('not found')) {\n          // If it's a 404, show message and navigate away immediately\n          showToast({\n            message: 'Errore: Azienda non trovata',\n            type: 'error'\n          });\n          setLoading(false);\n          navigate('/companies');\n        } else if (nextAttempt >= MAX_RETRY_ATTEMPTS) {\n          // If we've reached max attempts, give up\n          const sanitizedError = getLoadingErrorMessage('companies', error);\n          showToast({\n            message: `Errore: ${sanitizedError}`,\n            type: 'error'\n          });\n          setLoading(false);\n          navigate('/companies');\n        } else {\n          // Try again after delay with exponential backoff\n          setTimeout(() => {\n            isFetchingRef.current = false;\n            // Force re-render to trigger useEffect again\n            setLoading(true);\n          }, 1000 * Math.pow(2, nextAttempt - 1));\n        }\n      } finally {\n        isFetchingRef.current = false;\n      }\n    };\n    \n    fetchCompany();\n  }, [id, navigate, showToast, fetchAttempts]);\n\n  const handleSuccess = () => {\n    refreshCompanies();\n    navigate('/companies');\n  };\n\n  const handleClose = () => {\n    navigate('/companies');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-full p-8\">\n        <div className=\"flex flex-col items-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n          <p className=\"mt-4 text-gray-600\">\n            {fetchAttempts > 0 ? `Loading company data (attempt ${fetchAttempts + 1}/${MAX_RETRY_ATTEMPTS})...` : 'Loading company data...'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-5xl\">\n      <div className=\"mb-4\">\n        <Link \n          to=\"/companies\" \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-1\" />\n          Torna all'elenco aziende\n        </Link>\n      </div>\n      \n      <CompanyFormNew\n        company={company}\n        onSuccess={handleSuccess}\n        onClose={handleClose}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/courses/CourseCreate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showToast' is assigned a value but never used.","line":9,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { ChevronLeft } from 'lucide-react';\nimport { CourseForm } from '../../components/courses/CourseForm';\nimport { useToast } from '../../hooks/useToast';\n\nconst CourseCreate: React.FC = () => {\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n\n  const handleSuccess = () => {\n    navigate('/courses');\n  };\n\n  const handleClose = () => {\n    navigate('/courses');\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-5xl\">\n      <div className=\"mb-6\">\n        <Link \n          to=\"/courses\" \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-1\" />\n          Torna all'elenco corsi\n        </Link>\n      </div>\n      \n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Nuovo Corso</h1>\n        <p className=\"text-gray-600 mt-1\">Inserisci i dettagli del nuovo corso</p>\n      </div>\n      \n      <CourseForm \n        onSubmit={handleSuccess} \n        onCancel={handleClose}\n        submitLabel=\"Crea Corso\"\n        cancelLabel=\"Annulla\"\n      />\n    </div>\n  );\n};\n\nexport default CourseCreate; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/courses/CourseDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[717,720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[717,720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2820,2823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2820,2823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCourse'. Either include it or remove the dependency array.","line":144,"column":6,"nodeType":"ArrayExpression","endLine":144,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [id, isValid, isValidating, errorMessage, showToast, fetchCourse]","fix":{"range":[3586,3638],"text":"[id, isValid, isValidating, errorMessage, showToast, fetchCourse]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Award,\n  BookOpen,\n  Calendar,\n  CheckCircle,\n  ChevronRight,\n  Clock,\n  Edit,\n  Euro,\n  FileText,\n  GraduationCap,\n  MapPin,\n  Star,\n  Target,\n  User,\n  Users\n} from 'lucide-react';\nimport { Button } from '../../design-system/atoms/Button';\nimport { useToast } from '../../hooks/useToast';\nimport { getCourse } from '../../services/courses';\nimport { useValidatedParams } from '../../hooks/routing/useValidatedParams';\n\nconst CourseDetails: React.FC = () => {\n  const { id, isValidating, isValid, errorMessage } = useValidatedParams();\n  const { showToast } = useToast();\n  const [course, setCourse] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [notFound, setNotFound] = useState(false);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Mock data for course modules\n  const mockModules = [\n    {\n      id: '1',\n      title: 'Introduzione alla Sicurezza sul Lavoro',\n      duration: '2 ore',\n      description: 'Panoramica generale sui principi di sicurezza'\n    },\n    {\n      id: '2',\n      title: 'Normative e Regolamenti',\n      duration: '3 ore',\n      description: 'Studio delle normative vigenti in materia di sicurezza'\n    },\n    {\n      id: '3',\n      title: 'Dispositivi di Protezione Individuale',\n      duration: '2 ore',\n      description: 'Utilizzo corretto dei DPI'\n    },\n    {\n      id: '4',\n      title: 'Gestione delle Emergenze',\n      duration: '3 ore',\n      description: 'Procedure di evacuazione e primo soccorso'\n    }\n  ];\n\n  // Mock data for upcoming sessions\n  const mockSessions = [\n    {\n      id: '1',\n      startDate: '2024-02-15',\n      endDate: '2024-02-16',\n      location: 'Aula A - Sede Principale',\n      instructor: 'Dott. Mario Rossi',\n      availableSpots: 8,\n      totalSpots: 20\n    },\n    {\n      id: '2',\n      startDate: '2024-03-10',\n      endDate: '2024-03-11',\n      location: 'Aula B - Sede Secondaria',\n      instructor: 'Ing. Laura Bianchi',\n      availableSpots: 15,\n      totalSpots: 20\n    }\n  ];\n\n  // Mock data for enrolled employees\n  const mockEnrolledEmployees = [\n    {\n      id: '1',\n      firstName: 'Marco',\n      lastName: 'Verdi',\n      company: 'ABC S.r.l.',\n      enrollmentDate: '2024-01-15',\n      status: 'Confermato'\n    },\n    {\n      id: '2',\n      firstName: 'Anna',\n      lastName: 'Neri',\n      company: 'XYZ S.p.A.',\n      enrollmentDate: '2024-01-20',\n      status: 'In attesa'\n    }\n  ];\n\n  const fetchCourse = async (courseId: string, retryCount = 0) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await getCourse(courseId);\n      setCourse(data);\n      setNotFound(false);\n    } catch (err: any) {\n      console.error('Error fetching course:', err);\n      \n      if (err.status === 404) {\n        setNotFound(true);\n        setError(null);\n      } else if (retryCount < 2) {\n        // Retry up to 2 times for non-404 errors\n        setTimeout(() => fetchCourse(courseId, retryCount + 1), 1000);\n        return;\n      } else {\n        setError(err.message || 'Errore nel caricamento del corso');\n        setNotFound(false);\n      }\n      setCourse(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isValidating) return;\n    \n    if (!isValid) {\n        if (errorMessage) {\n          showToast({ message: errorMessage, type: 'error' });\n        }\n        return;\n      }\n\n    if (id) {\n      fetchCourse(id);\n    }\n  }, [id, isValid, isValidating, errorMessage, showToast]);\n\n  if (isValidating || loading) {\n    return (\n      <div className=\"flex items-center justify-center h-80\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Caricamento corso...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isValid || notFound) {\n    return (\n      <div className=\"flex items-center justify-center h-80\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-800\">Corso non trovato</h2>\n          <p className=\"text-gray-600 mt-2\">Il corso che stai cercando non esiste o è stato rimosso.</p>\n          <Link to=\"/courses\" className=\"mt-4 inline-block text-blue-600 hover:text-blue-800\">\n            Torna ai Corsi\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-80\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-red-600\">Errore nel caricamento</h2>\n          <p className=\"text-gray-600 mt-2\">{error}</p>\n          <div className=\"mt-4 space-x-4\">\n            <Button \n              onClick={() => fetchCourse(id!)} \n              variant=\"primary\"\n            >\n              Riprova\n            </Button>\n            <Link to=\"/courses\" className=\"text-blue-600 hover:text-blue-800\">\n              Torna ai Corsi\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back link */}\n      <div>\n        <Link \n          to=\"/courses\" \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <span className=\"transform rotate-180\">\n            <ChevronRight className=\"h-4 w-4 mr-1\" />\n          </span>\n          Torna ai Corsi\n        </Link>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"h-16 w-16 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center\">\n              <GraduationCap className=\"h-8 w-8 text-white\" />\n            </div>\n            <div className=\"ml-4\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <span className=\"px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\">\n                  {course.category || 'Sicurezza'}\n                </span>\n                <span className=\"px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full\">\n                  {course.code || 'CORSO-001'}\n                </span>\n                <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                  course.status === 'active' \n                    ? 'bg-green-100 text-green-800' \n                    : 'bg-yellow-100 text-yellow-800'\n                }`}>\n                  {course.status === 'active' ? 'Attivo' : 'Bozza'}\n                </span>\n              </div>\n              <h1 className=\"text-2xl font-bold text-gray-800\">\n                {course.title || 'Corso di Sicurezza sul Lavoro'}\n              </h1>\n            </div>\n          </div>\n          <div className=\"mt-4 md:mt-0\">\n            <Link to={`/courses/${course.id}/edit`} className=\"btn-primary flex items-center rounded-full\">\n              <Edit className=\"h-4 w-4 mr-1\" />\n              Modifica Corso\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"mt-4 border-t border-gray-200 pt-4 grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Informazioni Generali</h2>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-start\">\n                <Clock className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Durata</span>\n                  <span className=\"block text-sm text-gray-600\">{course.duration || '10 ore'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Calendar className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Validità</span>\n                  <span className=\"block text-sm text-gray-600\">{course.validity || '3 anni'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Users className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Max Partecipanti</span>\n                  <span className=\"block text-sm text-gray-600\">{course.maxParticipants || '20'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Star className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Valutazione</span>\n                  <span className=\"block text-sm text-gray-600\">{course.rating || '4.5'}/5</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Dettagli Commerciali</h2>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-start\">\n                <Euro className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Prezzo</span>\n                  <span className=\"block text-sm text-gray-600\">€{course.price || '150,00'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Award className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Certificazioni</span>\n                  <span className=\"block text-sm text-gray-600\">{course.certifications || 'Attestato di Partecipazione'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <FileText className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Normativa</span>\n                  <span className=\"block text-sm text-gray-600\">{course.regulation || 'D.Lgs. 81/08'}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Descrizione</h2>\n            <p className=\"text-sm text-gray-600 leading-relaxed\">\n              {course.content || course.description || 'Questo corso fornisce una formazione completa sui principi fondamentali della sicurezza sul lavoro, in conformità con le normative vigenti.'}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8 px-6\">\n            <button\n              onClick={() => setActiveTab('overview')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'overview'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <BookOpen className=\"h-4 w-4 inline mr-2\" />\n              Panoramica\n            </button>\n            <button\n              onClick={() => setActiveTab('sessions')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'sessions'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <Calendar className=\"h-4 w-4 inline mr-2\" />\n              Sessioni Programmate\n            </button>\n            <button\n              onClick={() => setActiveTab('enrolled')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'enrolled'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <Users className=\"h-4 w-4 inline mr-2\" />\n              Dipendenti Iscritti\n            </button>\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'overview' && (\n            <div className=\"space-y-6\">\n              {/* Course Description */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Descrizione del Corso</h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  {course.description || 'Questo corso fornisce una formazione completa sui principi fondamentali della sicurezza sul lavoro, in conformità con le normative vigenti. I partecipanti acquisiranno le competenze necessarie per identificare i rischi, implementare misure preventive e gestire situazioni di emergenza nel proprio ambiente lavorativo.'}\n                </p>\n              </div>\n\n              {/* What You'll Learn */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n                  <Target className=\"h-5 w-5 mr-2 text-blue-600\" />\n                  Cosa Imparerai\n                </h3>\n                <ul className=\"space-y-2\">\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-gray-600\">Principi fondamentali della sicurezza sul lavoro</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-gray-600\">Identificazione e valutazione dei rischi</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-gray-600\">Utilizzo corretto dei dispositivi di protezione individuale</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-gray-600\">Procedure di emergenza e primo soccorso</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-gray-600\">Normative e regolamenti vigenti</span>\n                  </li>\n                </ul>\n              </div>\n\n              {/* Course Content */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Contenuto del Corso</h3>\n                <div className=\"space-y-3\">\n                  {mockModules.map((module, index) => (\n                    <div key={module.id} className=\"border border-gray-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                          <div className=\"h-8 w-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium mr-3\">\n                            {index + 1}\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium text-gray-900\">{module.title}</h4>\n                            <p className=\"text-sm text-gray-600\">{module.description}</p>\n                          </div>\n                        </div>\n                        <span className=\"text-sm text-gray-500 font-medium\">{module.duration}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'sessions' && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Sessioni Programmate</h3>\n                <Button variant=\"primary\" size=\"sm\">\n                  <Calendar className=\"h-4 w-4 mr-1\" />\n                  Nuova Sessione\n                </Button>\n              </div>\n              {mockSessions.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {mockSessions.map((session) => (\n                    <div key={session.id} className=\"border border-gray-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-start\">\n                          <Calendar className=\"h-5 w-5 text-blue-600 mr-3 mt-0.5\" />\n                          <div>\n                            <h4 className=\"font-medium text-gray-900\">\n                              {new Date(session.startDate).toLocaleDateString('it-IT')} - {new Date(session.endDate).toLocaleDateString('it-IT')}\n                            </h4>\n                            <div className=\"mt-1 space-y-1\">\n                              <p className=\"text-sm text-gray-600 flex items-center\">\n                                <MapPin className=\"h-4 w-4 mr-1\" />\n                                {session.location}\n                              </p>\n                              <p className=\"text-sm text-gray-600 flex items-center\">\n                                <User className=\"h-4 w-4 mr-1\" />\n                                Formatore: {session.instructor}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            {session.availableSpots}/{session.totalSpots} posti disponibili\n                          </p>\n                          <div className=\"w-24 bg-gray-200 rounded-full h-2 mt-2\">\n                            <div \n                              className=\"bg-blue-600 h-2 rounded-full\" \n                              style={{ width: `${((session.totalSpots - session.availableSpots) / session.totalSpots) * 100}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Nessuna sessione programmata al momento.</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'enrolled' && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Dipendenti Iscritti</h3>\n                <Button variant=\"primary\" size=\"sm\">\n                  <Users className=\"h-4 w-4 mr-1\" />\n                  Aggiungi Dipendente\n                </Button>\n              </div>\n              {mockEnrolledEmployees.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Dipendente\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Azienda\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Data Iscrizione\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Stato\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {mockEnrolledEmployees.map((employee) => (\n                        <tr key={employee.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"h-8 w-8 bg-gradient-to-r from-green-500 to-green-600 rounded-full flex items-center justify-center\">\n                                <span className=\"text-xs font-bold text-white\">\n                                  {employee.firstName.charAt(0)}{employee.lastName.charAt(0)}\n                                </span>\n                              </div>\n                              <div className=\"ml-3\">\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {employee.firstName} {employee.lastName}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-600\">{employee.company}</div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-600\">\n                              {new Date(employee.enrollmentDate).toLocaleDateString('it-IT')}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                              employee.status === 'Confermato' \n                                ? 'bg-green-100 text-green-800' \n                                : 'bg-yellow-100 text-yellow-800'\n                            }`}>\n                              {employee.status}\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Nessun dipendente iscritto al momento.</p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CourseDetails;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/courses/CourseEdit.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronLeft' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1899,1902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1899,1902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3634,3637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3634,3637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { \n  ChevronLeft,\n  ChevronRight,\n  Edit\n} from 'lucide-react';\nimport { CourseForm } from '../../components/courses/CourseForm';\nimport { useToast } from '../../hooks/useToast';\nimport { getCourse, updateCourse } from '../../services/courses';\nimport type { Course } from '../../types/courses';\n\nconst CourseEdit: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n  const [course, setCourse] = useState<Course | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isRetrying, setIsRetrying] = useState<boolean>(false);\n  \n  // Utilizziamo un ref per tracciare se stiamo già eseguendo una richiesta\n  const isLoadingRef = useRef(false);\n  // E un ref per contare i tentativi automatici\n  const fetchAttemptsRef = useRef(0);\n\n  const fetchCourse = useCallback(async (shouldShowLoading = true) => {\n    if (!id) return;\n    \n    // Evita chiamate multiple simultanee\n    if (isLoadingRef.current) return;\n    isLoadingRef.current = true;\n    \n    if (shouldShowLoading) {\n      setLoading(true);\n    }\n    \n    try {\n      // Aggiungiamo un piccolo delay prima di ogni fetch per dare tempo al browser di liberare risorse\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const data = await getCourse(id);\n      setCourse(data);\n      setError(null);\n      fetchAttemptsRef.current = 0; // Reset dei tentativi dopo successo\n    } catch (e) {\n      console.error('Error fetching course:', e);\n      \n      // Gestione specifica per ERR_INSUFFICIENT_RESOURCES\n      const errorMessage = e instanceof Error ? e.message : 'Errore sconosciuto';\n      const errorCode = (e as any)?.code || '';\n      \n      if (errorCode === 'ERR_INSUFFICIENT_RESOURCES' || errorCode === 'ERR_NETWORK') {\n        setError(`Problema di risorse del browser. ${fetchAttemptsRef.current > 0 ? 'Ritenta tra qualche secondo.' : 'Riprova.'}`);\n        \n        // Limita i tentativi automatici a 1\n        if (fetchAttemptsRef.current < 1) {\n          fetchAttemptsRef.current++;\n          \n          // Se è un problema di risorse, attendiamo più a lungo prima di riprovare automaticamente\n          setTimeout(() => {\n            console.log(\"Ritentativo automatico dopo errore di risorse\");\n            setIsRetrying(true);\n            fetchCourse(true);\n          }, 3000); // Attendi 3 secondi prima di riprovare\n        }\n      } else {\n        setError(`Errore durante il caricamento: ${errorMessage}`);\n        \n        if (e instanceof Error && e.message.includes('404')) {\n          setError('Corso non trovato. Verifica l\\'URL e riprova.');\n        }\n      }\n    } finally {\n      setLoading(false);\n      setIsRetrying(false);\n      isLoadingRef.current = false;\n    }\n  }, [id]);\n\n  // Effetto iniziale con cleanup per evitare effetti con componente smontato\n  useEffect(() => {\n    let isMounted = true;\n    \n    const loadData = async () => {\n      if (!isMounted) return;\n      await fetchCourse(true);\n    };\n    \n    loadData();\n    \n    // Cleanup function\n    return () => {\n      isMounted = false;\n    };\n  }, [fetchCourse]);\n\n  const handleRetry = () => {\n    if (isRetrying) return;\n    \n    setIsRetrying(true);\n    \n    // Attendi un po' prima di ritentare per dare tempo al sistema di liberare risorse\n    setTimeout(() => {\n      fetchCourse(true);\n    }, 2000);\n  };\n\n  const handleSave = async (formData: any) => {\n    try {\n      if (!id) return;\n      \n      await updateCourse(id, formData);\n      \n      showToast({\n        message: 'Corso aggiornato con successo!',\n        type: 'success'\n      });\n      \n      navigate(`/courses/${id}`);\n    } catch (e) {\n      console.error('Error saving course:', e);\n      \n      showToast({\n        message: `Errore durante il salvataggio: ${e instanceof Error ? e.message : 'Errore sconosciuto'}`,\n        type: 'error'\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-80 text-gray-500\">\n        <div className=\"flex flex-col items-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n          <p className=\"mt-4\">\n            {isRetrying ? 'Ritentativo di caricamento...' : 'Caricamento corso...'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-80\">\n        <div className=\"text-center bg-red-50 border border-red-200 rounded-md p-6 max-w-md\">\n          <h2 className=\"text-xl font-semibold text-red-700 mb-3\">Errore</h2>\n          <p className=\"text-gray-700 mb-4\">{error}</p>\n          <div className=\"flex justify-center space-x-3\">\n            <button \n              onClick={handleRetry}\n              disabled={isRetrying}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors disabled:opacity-50\"\n            >\n              {isRetrying ? 'Caricamento...' : 'Riprova'}\n            </button>\n            <Link to=\"/courses\" className=\"px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100 transition-colors\">\n              Torna ai corsi\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-5xl\">\n      <div className=\"mb-6\">\n        <Link \n          to={`/courses/${id}`}\n          className=\"inline-flex items-center text-blue-600 hover:text-blue-800\"\n        >\n          <span className=\"transform rotate-180\">\n            <ChevronRight className=\"h-5 w-5\" />\n          </span>\n          <span>Torna ai dettagli del corso</span>\n        </Link>\n      </div>\n      \n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Modifica Corso</h1>\n        <p className=\"text-gray-600 mt-1\">Modifica i dettagli del corso {course?.title}</p>\n      </div>\n      \n      {course && (\n        <CourseForm\n          course={course}\n          onSubmit={handleSave}\n          onCancel={() => navigate(`/courses/${id}`)}\n          submitLabel=\"Aggiorna Corso\"\n          cancelLabel=\"Annulla\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CourseEdit; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/courses/CourseSchedule.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPins' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CourseParticipantsList' is defined but never used.","line":16,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":22,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1199,1202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1199,1202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1366,1369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1366,1369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1491,1494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1491,1494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1598,1601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1598,1601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { PDFDownloadLink } from '@react-pdf/renderer';\nimport { \n  Clock,\n  Download,\n  MapPins,\n  Users\n} from 'lucide-react';\nimport { useCourses } from '../../hooks/useCourses';\nimport { useTrainers } from '../../hooks/useTrainers';\nimport CourseParticipantsList from '../../components/courses/CourseParticipantsList';\nimport CourseScheduleForm from '../../components/courses/CourseScheduleForm';\nimport ParticipantsPDF from '../../components/courses/ParticipantsPDF';\n\nexport default function CourseSchedule() {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { courses, scheduleCourse } = useCourses();\n  const { trainers } = useTrainers();\n  const [showScheduleForm, setShowScheduleForm] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [selectedEvent, setSelectedEvent] = useState<any>(null);\n  \n  const course = courses.find(c => c.id === id);\n\n  if (!course) {\n    return <div>Course not found</div>;\n  }\n\n  const handleDateSelect = (selectInfo: any) => {\n    setSelectedDate(selectInfo.start);\n    setShowScheduleForm(true);\n  };\n\n  const handleEventClick = (clickInfo: any) => {\n    setSelectedEvent(clickInfo.event);\n  };\n\n  const handleScheduleSubmit = async (scheduleData: any) => {\n    try {\n      await scheduleCourse(scheduleData);\n      setShowScheduleForm(false);\n      // Refresh calendar data\n    } catch (error) {\n      console.error('Failed to schedule course:', error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">{course.title}</h1>\n          <p className=\"text-gray-500\">Schedule and manage course sessions</p>\n        </div>\n        <button\n          onClick={() => setShowScheduleForm(true)}\n          className=\"btn-primary\"\n        >\n          Schedule New Session\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-2xl shadow p-6\">\n            <FullCalendar\n              plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n              initialView=\"dayGridMonth\"\n              headerToolbar={{\n                left: 'prev,next today',\n                center: 'title',\n                right: 'dayGridMonth,timeGridWeek,timeGridDay'\n              }}\n              editable={true}\n              selectable={true}\n              selectMirror={true}\n              dayMaxEvents={true}\n              select={handleDateSelect}\n              eventClick={handleEventClick}\n              events={[]} // We'll populate this with actual course schedule data\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {selectedEvent ? (\n            <div className=\"bg-white rounded-2xl shadow p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">\n                Session Details\n              </h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-5 w-5 text-gray-400\" />\n                  <span className=\"ml-2 text-gray-600\">\n                    {selectedEvent.start.toLocaleString()}\n                  </span>\n                </div>\n                <div className=\"flex items-center\">\n                  <MapPin className=\"h-5 w-5 text-gray-400\" />\n                  <span className=\"ml-2 text-gray-600\">\n                    {selectedEvent.extendedProps.location}\n                  </span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Users className=\"h-5 w-5 text-gray-400\" />\n                  <span className=\"ml-2 text-gray-600\">\n                    {selectedEvent.extendedProps.participants} participants\n                  </span>\n                </div>\n\n                <PDFDownloadLink\n                  document={<ParticipantsPDF event={selectedEvent} />}\n                  fileName=\"participants-list.pdf\"\n                  className=\"flex items-center text-blue-600 hover:text-blue-800\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download Participants List\n                </PDFDownloadLink>\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-white rounded-2xl shadow p-6\">\n              <p className=\"text-gray-500 text-center\">\n                Select a session to view details\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {showScheduleForm && (\n        <CourseScheduleForm\n          course={course}\n          initialDate={selectedDate}\n          trainers={trainers}\n          onSubmit={handleScheduleSubmit}\n          onCancel={() => setShowScheduleForm(false)}\n        />\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/courses/CoursesPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/courses/CoursesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCourses' is assigned a value but never used.","line":231,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":234,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":234,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6972,6975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6972,6975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7254,7257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7254,7257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { GDPREntityTemplate } from '../../templates/gdpr-entity-page/GDPREntityTemplate';\nimport { DataTableColumn } from '../../components/shared/tables/DataTable';\nimport { Badge } from '../../design-system';\nimport { \n  Award,\n  BookOpen,\n  Building,\n  Calendar,\n  Clock,\n  Euro,\n  FileText,\n  Hash,\n  Users\n} from 'lucide-react';\nimport type { Course } from '../../types/courses';\nimport CourseImport from '../../components/courses/CourseImport';\nimport { apiPost } from '../../services/api';\n// Configurazione colonne per la tabella\nconst getCoursesColumns = (): DataTableColumn<Course>[] => [\n  {\n    key: 'title',\n    label: 'Titolo',\n    sortable: true,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-3\">\n        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n          <BookOpen className=\"h-4 w-4 text-blue-600\" />\n        </div>\n        <div>\n          <div className=\"font-medium text-gray-900\">{course.title}</div>\n          <div className=\"text-sm text-gray-500\">{course.code}</div>\n        </div>\n      </div>\n    )\n  },\n  {\n    key: 'code',\n    label: 'Codice',\n    sortable: true,\n    renderCell: (course) => (\n      <span className=\"font-mono text-sm bg-gray-100 px-2 py-1 rounded\">{course.code}</span>\n    )\n  },\n  {\n    key: 'category',\n    label: 'Categoria',\n    sortable: true,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-2\">\n        <Building className=\"h-4 w-4 text-gray-400\" />\n        <Badge variant=\"secondary\">{course.category}</Badge>\n      </div>\n    )\n  },\n  {\n    key: 'duration',\n    label: 'Durata',\n    sortable: true,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-2\">\n        <Clock className=\"h-4 w-4 text-gray-400\" />\n        <span>{course.duration}h</span>\n      </div>\n    )\n  },\n  {\n    key: 'validityYears',\n    label: 'Validità',\n    sortable: true,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-2\">\n        <Calendar className=\"h-4 w-4 text-gray-400\" />\n        <span>{course.validityYears} anni</span>\n      </div>\n    )\n  },\n  {\n    key: 'renewalDuration',\n    label: 'Rinnovo',\n    sortable: true,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-2\">\n        <Award className=\"h-4 w-4 text-gray-400\" />\n        <span>{course.renewalDuration}h</span>\n      </div>\n    )\n  },\n  {\n    key: 'pricePerPerson',\n    label: 'Prezzo',\n    sortable: true,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-2\">\n        <Euro className=\"h-4 w-4 text-gray-400\" />\n        <span className=\"font-medium\">€{Number(course.pricePerPerson || 0).toFixed(2)}</span>\n      </div>\n    )\n  },\n  {\n    key: 'maxPeople',\n    label: 'Max persone',\n    sortable: true,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-2\">\n        <Users className=\"h-4 w-4 text-gray-400\" />\n        <span>{course.maxPeople}</span>\n      </div>\n    )\n  },\n  {\n    key: 'certifications',\n    label: 'Certificazioni',\n    sortable: false,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-2\">\n        <Award className=\"h-4 w-4 text-gray-400\" />\n        <span className=\"text-sm\">{course.certifications || 'N/A'}</span>\n      </div>\n    )\n  },\n  {\n    key: 'regulation',\n    label: 'Normativa',\n    sortable: false,\n    renderCell: (course) => (\n      <div className=\"flex items-center gap-2\">\n        <FileText className=\"h-4 w-4 text-gray-400\" />\n        <span className=\"text-sm\">{course.regulation || 'N/A'}</span>\n      </div>\n    )\n  },\n  {\n    key: 'description',\n    label: 'Descrizione',\n    sortable: false,\n    renderCell: (course) => (\n      <span className=\"text-sm text-gray-600 truncate max-w-xs block\" title={course.description}>\n        {course.description}\n      </span>\n    )\n  }\n];\n\n// Configurazione card per la vista griglia\nconst getCourseCardConfig = () => ({\n  titleField: 'title' as keyof Course,\n  subtitleField: 'category' as keyof Course,\n  badgeField: 'status' as keyof Course,\n  descriptionField: 'description' as keyof Course,\n  // Configurazione dinamica per compatibilità\n  title: (course: Course) => course.title,\n  subtitle: (course: Course) => course.category || 'Categoria non specificata',\n  badge: (course: Course) => {\n    const statusConfig = {\n      Active: { label: 'Attivo', variant: 'default' as const },\n      Inactive: { label: 'Inattivo', variant: 'destructive' as const },\n      Draft: { label: 'Bozza', variant: 'outline' as const }\n    };\n    const status = course.status || 'Draft';\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.Draft;\n    return { text: config.label, variant: config.variant };\n  },\n  icon: () => <BookOpen className=\"h-5 w-5\" />,\n  fields: [\n    {\n      label: 'Codice',\n      value: (course: Course) => course.code || 'N/A',\n      icon: <Hash className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Durata',\n      value: (course: Course) => `${course.duration || 0} ore`,\n      icon: <Clock className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Validità',\n      value: (course: Course) => `${course.validityYears || 0} anni`,\n      icon: <Calendar className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Prezzo',\n      value: (course: Course) => `€${course.pricePerPerson || 0}`,\n      icon: <Euro className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Max partecipanti',\n      value: (course: Course) => (course.maxPeople || 0).toString(),\n      icon: <Users className=\"h-4 w-4\" />\n    }\n  ],\n  description: (course: Course) => course.description\n});\n\n// Template CSV per l'import\nconst csvTemplateData: Partial<Course>[] = [\n  {\n    code: 'CORSO001',\n    title: 'Esempio Corso di Sicurezza',\n    category: 'Sicurezza',\n    duration: 8,\n    validityYears: 5,\n    renewalDuration: '4',\n    pricePerPerson: 150.00,\n    maxPeople: 20,\n    certifications: 'ISO 45001',\n    regulation: 'D.Lgs. 81/08',\n    description: 'Corso di formazione sulla sicurezza sul lavoro',\n    contents: 'Contenuti del corso di esempio'\n  }\n];\n\n// Headers CSV\nconst csvHeaders = [\n  { key: 'title', label: 'Titolo' },\n  { key: 'code', label: 'Codice' },\n  { key: 'category', label: 'Categoria' },\n  { key: 'duration', label: 'Durata (ore)' },\n  { key: 'validityYears', label: 'Validità (anni)' },\n  { key: 'renewalDuration', label: 'Durata rinnovo (ore)' },\n  { key: 'pricePerPerson', label: 'Prezzo per persona' },\n  { key: 'maxPeople', label: 'Max partecipanti' },\n  { key: 'certifications', label: 'Certificazioni' },\n  { key: 'regulation', label: 'Normativa' },\n  { key: 'description', label: 'Descrizione' },\n  { key: 'status', label: 'Stato' }\n];\n\nexport default function CoursesPage(): JSX.Element {\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [courses, setCourses] = useState<Course[]>([]);\n\n  // Funzione per gestire l'import dei corsi\n  const handleImportEntities = async (data: any[]) => {\n    // Questa funzione viene chiamata dal template quando c'è onImportEntities\n    // Ma noi vogliamo aprire il modal invece, quindi apriamo il modal\n    setShowImportModal(true);\n    return Promise.resolve();\n  };\n\n  const handleImportCourses = async (importedCourses: any[], overwriteIds?: string[]) => {\n    try {\n      // Invia i dati al backend\n      const response = await apiPost('/api/v1/courses/import', {\n        courses: importedCourses,\n        overwriteIds: overwriteIds || []\n      });\n      \n      // Aggiorna la lista locale (il template si ricaricherà automaticamente)\n      console.log('Import completato:', response);\n      \n      // Chiudi il modal\n      setShowImportModal(false);\n    } catch (error) {\n      console.error('Errore durante l\\'import:', error);\n      throw error; // Rilancia l'errore per permettere al modal di gestirlo\n    }\n  };\n\n  return (\n    <>\n      <GDPREntityTemplate<Course>\n        entityName=\"course\"\n        entityNamePlural=\"courses\"\n        entityDisplayName=\"Corso\"\n        entityDisplayNamePlural=\"Corsi\"\n        readPermission=\"courses:read\"\n        writePermission=\"courses:write\"\n        deletePermission=\"courses:delete\"\n        exportPermission=\"courses:export\"\n        apiEndpoint=\"/api/v1/courses\"\n        columns={getCoursesColumns()}\n        searchFields={['title', 'code', 'category', 'description', 'certifications', 'regulation', 'contents']}\n        filterOptions={[\n          {\n            key: 'category',\n            label: 'Categoria',\n            options: [\n              { value: 'Sicurezza', label: 'Sicurezza' },\n              { value: 'Qualità', label: 'Qualità' },\n              { value: 'Ambiente', label: 'Ambiente' },\n              { value: 'Privacy', label: 'Privacy' },\n              { value: 'Formazione generale', label: 'Formazione generale' },\n              { value: 'Tecnico', label: 'Tecnico' },\n              { value: 'Gestionale', label: 'Gestionale' }\n            ]\n          },\n          {\n            key: 'duration_range',\n            label: 'Durata',\n            options: [\n              { value: 'short', label: 'Breve (≤4h)' },\n              { value: 'medium', label: 'Media (4-8h)' },\n              { value: 'long', label: 'Lunga (>8h)' }\n            ]\n          },\n          {\n            key: 'price_range',\n            label: 'Fascia prezzo',\n            options: [\n              { value: 'low', label: 'Economico (≤100€)' },\n              { value: 'medium', label: 'Medio (101-300€)' },\n              { value: 'high', label: 'Premium (>300€)' }\n            ]\n          }\n        ]}\n        sortOptions={[\n          { key: 'title', label: 'Titolo' },\n          { key: 'code', label: 'Codice' },\n          { key: 'category', label: 'Categoria' },\n          { key: 'duration', label: 'Durata' },\n          { key: 'pricePerPerson', label: 'Prezzo' },\n          { key: 'validityYears', label: 'Validità' },\n          { key: 'maxPeople', label: 'Max partecipanti' },\n          { key: 'createdAt', label: 'Data creazione' }\n        ]}\n        csvHeaders={csvHeaders}\n        csvTemplateData={csvTemplateData}\n        cardConfig={getCourseCardConfig()}\n        enableBatchOperations={true}\n        enableImportExport={true}\n         enableColumnSelector={true}\n         enableAdvancedFilters={true}\n         defaultViewMode=\"table\"\n         onImportEntities={handleImportEntities}\n      />\n      \n      {showImportModal && (\n        <CourseImport\n          onImport={handleImportCourses}\n          onClose={() => setShowImportModal(false)}\n          existingCourses={courses}\n        />\n      )}\n    </>\n  );\n}\n\nexport { CoursesPage };","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/documents/Attestati.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showGenerateModal' is defined but never used.","line":109,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowGenerateModal' is defined but never used.","line":110,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4394,4397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4394,4397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { apiGet, apiDelete } from '../../services/api';\nimport { Button } from '../../design-system/atoms/Button';\nimport { SearchBar } from '../../design-system/molecules';\nimport { SearchBarControls } from '../../design-system/molecules/SearchBarControls';\nimport ResizableTable from '../../components/shared/ResizableTable';\nimport { sanitizeErrorMessage } from '../../utils/errorUtils';\nimport { Company } from '../../types';\n\ninterface Attestato {\n  id: string;\n  employeeId: string;\n  scheduledCourseId: string;\n  templateId: string;\n  url: string;\n  fileUrl?: string;\n  nomeFile: string;\n  numeroProgressivo: number;\n  annoProgressivo: number;\n  issued: boolean;\n  dataGenerazione: string;\n  employee: {\n    firstName: string;\n    lastName: string;\n    codice_fiscale: string;\n    company?: Company;\n  };\n  scheduledCourse: {\n    course: {\n      id: string;\n      title: string;\n    };\n  };\n}\n\n// DropdownMenu component\nconst DropdownMenu: React.FC<{ children: (close: () => void) => React.ReactNode; trigger: React.ReactNode }> = ({ children, trigger }) => {\n  const [open, setOpen] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (e: MouseEvent) => {\n      if (\n        ref.current && !ref.current.contains(e.target as Node) &&\n        menuRef.current && !menuRef.current.contains(e.target as Node)\n      ) {\n        setOpen(false);\n      }\n    };\n    if (open) document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedown', handleClick);\n  }, [open]);\n\n  // Portal rendering\n  const [menuPos, setMenuPos] = useState<{top: number, left: number} | null>(null);\n  const triggerRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (open && triggerRef.current) {\n      const rect = triggerRef.current.getBoundingClientRect();\n      setMenuPos({\n        top: rect.bottom + window.scrollY,\n        left: rect.left + window.scrollX\n      });\n    }\n  }, [open]);\n\n  return (\n    <div ref={ref} className=\"relative inline-block text-left\" style={{overflow: 'visible'}}>\n      <span ref={triggerRef} onClick={() => setOpen(o => !o)}>{trigger}</span>\n      {open && menuPos && ReactDOM.createPortal(\n        <div ref={menuRef} style={{ position: 'absolute', zIndex: 99999, left: menuPos.left, top: menuPos.top, background: '#fffbe6', minWidth: '8rem', boxShadow: '0 8px 24px rgba(0,0,0,0.18)' }} className=\"w-32 bg-white border border-gray-200 rounded shadow-lg\">\n          {children(() => setOpen(false))}\n        </div>,\n        document.body\n      )}\n    </div>\n  );\n};\n\ninterface AttestatiProps {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  activeFilters: Record<string, string>;\n  setActiveFilters: (filters: Record<string, string>) => void;\n  activeSort: { field: string, direction: 'asc' | 'desc' };\n  setActiveSort: (sort: { field: string, direction: 'asc' | 'desc' }) => void;\n  selectionMode: boolean;\n  setSelectionMode: (mode: boolean) => void;\n  selectedIds: string[];\n  setSelectedIds: (ids: string[]) => void;\n  showGenerateModal: boolean;\n  setShowGenerateModal: (show: boolean) => void;\n}\n\nconst Attestati: React.FC<AttestatiProps> = ({\n  searchTerm,\n  setSearchTerm,\n  activeFilters,\n  setActiveFilters,\n  activeSort,\n  setActiveSort,\n  selectionMode,\n  setSelectionMode,\n  selectedIds,\n  setSelectedIds,\n  showGenerateModal,\n  setShowGenerateModal\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [attestati, setAttestati] = useState<Attestato[]>([]);\n\n  useEffect(() => {\n    fetchAttestati();\n  }, []);\n\n  const fetchAttestati = async () => {\n    try {\n      setLoading(true);\n      const data = await apiGet<Attestato[]>('/api/attestati');\n      setAttestati(data as Attestato[]);\n    } catch (err) {\n      setError('Errore nel caricamento degli attestati');\n      console.error('Error fetching attestati:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteAttestato = async (id: string, close?: () => void) => {\n    try {\n      await apiDelete(`/api/attestati/${id}`);\n      setAttestati(attestati.filter(a => a.id !== id));\n      if (close) setTimeout(close, 100);\n    } catch (err: any) {\n      const userMessage = sanitizeErrorMessage(err, 'Errore durante l\\'eliminazione dell\\'attestato');\n      alert(userMessage);\n    }\n  };\n\n  const handleDeleteMultipleAttestati = async () => {\n    if (selectedIds.length === 0) {\n      alert('Nessun attestato selezionato');\n      return;\n    }\n    try {\n      // Use the attestatiService for multiple deletion\n      const attestatiService = await import('../../services/attestatiService');\n      await attestatiService.default.deleteMultipleAttestati(selectedIds);\n      setAttestati(attestati.filter(a => !selectedIds.includes(a.id)));\n      setSelectedIds([]);\n    } catch (err) {\n      const userMessage = sanitizeErrorMessage(err, 'Errore durante l\\'eliminazione multipla degli attestati');\n      alert(userMessage);\n    }\n  };\n  \n  // Opzioni di filtro per gli attestati\n  const attestatiFilterOptions = [\n    {\n      label: 'Corso',\n      value: 'course',\n      options: [...new Set(attestati.map(a => a.scheduledCourse.course.title))].map(title => ({\n        label: title,\n        value: title\n      }))\n    },\n    {\n      label: 'Azienda',\n      value: 'company',\n      options: [...new Set(attestati.map(a => a.employee.company?.ragioneSociale).filter(Boolean))].map(name => ({\n        label: name || '',\n        value: name || ''\n      }))\n    }\n  ];\n\n  // Opzioni di ordinamento per gli attestati\n  const attestatiSortOptions = [\n    { label: 'Corso', value: 'corso' },\n    { label: 'Dipendente', value: 'dipendente' },\n    { label: 'Azienda', value: 'azienda' },\n    { label: 'Data Generazione', value: 'dataGenerazione' }\n  ];\n\n  // Configurazione colonne per tabella attestati\n  const attestatiColumns = [\n    { \n      key: 'actions',\n      label: 'Azioni',\n      width: 120,\n      renderCell: (attestato: Attestato) => (\n        <DropdownMenu\n          trigger={\n            <button type=\"button\" className=\"inline-flex items-center px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm hover:bg-blue-200 transition-colors\">\n              Azioni\n              <svg className=\"ml-2 w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" /></svg>\n            </button>\n          }\n        >\n          {(close) => <>\n            <a href={`/api${attestato.url}`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">Download</a>\n            <button type=\"button\" onClick={e => { e.stopPropagation(); handleDeleteAttestato(attestato.id, close); }} className=\"block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100\">Elimina</button>\n          </>}\n        </DropdownMenu>\n      ),\n    },\n    { \n      key: 'corso',\n      label: 'Corso',\n      width: 200,\n      renderCell: (attestato: Attestato) => attestato.scheduledCourse.course.title\n    },\n    { \n      key: 'dipendente',\n      label: 'Dipendente',\n      width: 180,\n      renderCell: (attestato: Attestato) => `${attestato.employee.firstName} ${attestato.employee.lastName}`\n    },\n    { \n      key: 'codice_fiscale',\n      label: 'Codice Fiscale',\n      width: 150,\n      renderCell: (attestato: Attestato) => attestato.employee.codice_fiscale\n    },\n    { \n      key: 'azienda',\n      label: 'Azienda',\n      width: 180,\n      renderCell: (attestato: Attestato) => attestato.employee.company?.ragioneSociale || '--'\n    },\n    { \n      key: 'dataGenerazione',\n      label: 'Data Generazione',\n      width: 150,\n      renderCell: (attestato: Attestato) => attestato.dataGenerazione ? new Date(attestato.dataGenerazione).toLocaleDateString('it-IT') : '--'\n    },\n    { \n      key: 'numeroProgressivo',\n      label: 'Numero Progressivo',\n      width: 160,\n      renderCell: (attestato: Attestato) => (attestato.numeroProgressivo && attestato.annoProgressivo) ? `${attestato.numeroProgressivo}/${attestato.annoProgressivo}` : '--'\n    },\n    { \n      key: 'issued',\n      label: 'Stato',\n      width: 120,\n      renderCell: (attestato: Attestato) => (\n        <span className={`inline-block px-2 py-1 rounded-full text-xs ${attestato.issued ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>\n          {attestato.issued ? 'Emesso' : 'In Attesa'}\n        </span>\n      )\n    }\n  ];\n  \n  // Filtra gli attestati in base alla ricerca\n  let filteredAttestati = attestati;\n  \n  if (searchTerm) {\n    const lowercaseSearchTerm = searchTerm.toLowerCase();\n    filteredAttestati = attestati.filter(\n      (attestato) =>\n        attestato.scheduledCourse.course.title.toLowerCase().includes(lowercaseSearchTerm) ||\n        `${attestato.employee.firstName} ${attestato.employee.lastName}`.toLowerCase().includes(lowercaseSearchTerm) ||\n        attestato.employee.codice_fiscale.toLowerCase().includes(lowercaseSearchTerm) ||\n        (attestato.employee.company?.ragioneSociale || '').toLowerCase().includes(lowercaseSearchTerm)\n    );\n  }\n  \n  // Applica i filtri\n  if (activeFilters.course) {\n    filteredAttestati = filteredAttestati.filter(\n      (attestato) => attestato.scheduledCourse.course.title === activeFilters.course\n    );\n  }\n  \n  if (activeFilters.company) {\n    filteredAttestati = filteredAttestati.filter(\n      (attestato) => attestato.employee.company?.ragioneSociale === activeFilters.company\n    );\n  }\n\n  // Search filter bar component\n  const SearchFilterBar = () => (\n    <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-4 gap-3\">\n      <div className=\"flex-grow max-w-lg\">\n        <SearchBar\n          value={searchTerm}\n          onChange={setSearchTerm}\n          placeholder=\"Cerca attestati...\"\n        />\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <SearchBarControls\n          onToggleSelectionMode={() => {\n            setSelectionMode(true);\n            setSelectedIds([]);\n          }}\n          isSelectionMode={selectionMode}\n          selectedCount={selectedIds.length}\n          onDeleteSelected={handleDeleteMultipleAttestati}\n          onExportSelected={() => console.log('Export selected', selectedIds)}\n          onClearSelection={() => {\n            setSelectedIds([]);\n            setSelectionMode(false);\n          }}\n          filterOptions={attestatiFilterOptions}\n          sortOptions={attestatiSortOptions}\n          onFilterChange={(filters) => {\n            setActiveFilters(filters);\n          }}\n          activeFilters={activeFilters}\n          activeSort={activeSort}\n          onSortChange={setActiveSort}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <SearchFilterBar />\n      \n      {loading ? (\n        <div className=\"text-center py-8 text-gray-500\">Caricamento...</div>\n      ) : error ? (\n        <div className=\"text-center py-8 text-red-500\">{error}</div>\n      ) : filteredAttestati.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">Nessun attestato trovato</div>\n      ) : (\n        <div className=\"overflow-x-auto bg-white rounded-lg shadow\">\n          <ResizableTable\n            columns={attestatiColumns}\n            data={filteredAttestati}\n            tableProps={{\n              className: \"min-w-full divide-y divide-gray-200\"\n            }}\n            tbodyProps={{\n              className: \"bg-white divide-y divide-gray-200\",\n              onClick: (e: React.MouseEvent) => {\n                const target = e.target as HTMLElement;\n                if (target.closest('button,input,a')) return;\n                \n                const row = target.closest('tr');\n                if (!row) return;\n                \n                const index = parseInt(row.dataset.index || '0', 10);\n                const attestato = filteredAttestati[index];\n                \n                if (attestato && attestato.url) {\n                  window.open(`/api${attestato.url}`, '_blank');\n                }\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Attestati;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/documents/LettereIncarico.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showGenerateModal' is defined but never used.","line":103,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowGenerateModal' is defined but never used.","line":104,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4445,4448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4445,4448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":147,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7914,7917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7914,7917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { apiGet, apiDelete } from '../../services/api';\nimport { Button } from '../../design-system/atoms/Button';\nimport { SearchBar } from '../../design-system/molecules';\nimport { SearchBarControls } from '../../design-system/molecules/SearchBarControls';\nimport ResizableTable from '../../components/shared/ResizableTable';\nimport { Company } from '../../types';\n\ninterface LetteraIncarico {\n  id: string;\n  scheduledCourseId: string;\n  trainerId: string;\n  nomeFile: string;\n  url: string;\n  numeroProgressivo: number;\n  annoProgressivo?: number;\n  dataGenerazione: string;\n  scheduledCourse: {\n    course: { title: string; };\n    sessions: { date: string; trainer?: { firstName: string; lastName: string; }; co_trainer?: { firstName: string; lastName: string; } }[];\n    companies: { company: Company }[];\n  };\n  trainer: {\n    firstName: string;\n  lastName: string;\n    tariffa_oraria?: number;\n  };\n}\n\n// DropdownMenu component\nconst DropdownMenu: React.FC<{ children: (close: () => void) => React.ReactNode; trigger: React.ReactNode }> = ({ children, trigger }) => {\n  const [open, setOpen] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (e: MouseEvent) => {\n      if (\n        ref.current && !ref.current.contains(e.target as Node) &&\n        menuRef.current && !menuRef.current.contains(e.target as Node)\n      ) {\n        setOpen(false);\n      }\n    };\n    if (open) document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedown', handleClick);\n  }, [open]);\n\n  // Portal rendering\n  const [menuPos, setMenuPos] = useState<{top: number, left: number} | null>(null);\n  const triggerRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (open && triggerRef.current) {\n      const rect = triggerRef.current.getBoundingClientRect();\n      setMenuPos({\n        top: rect.bottom + window.scrollY,\n        left: rect.left + window.scrollX\n      });\n    }\n  }, [open]);\n\n  return (\n    <div ref={ref} className=\"relative inline-block text-left\" style={{overflow: 'visible'}}>\n      <span ref={triggerRef} onClick={() => setOpen(o => !o)}>{trigger}</span>\n      {open && menuPos && ReactDOM.createPortal(\n        <div ref={menuRef} style={{ position: 'absolute', zIndex: 99999, left: menuPos.left, top: menuPos.top, background: '#fffbe6', minWidth: '8rem', boxShadow: '0 8px 24px rgba(0,0,0,0.18)' }} className=\"w-32 bg-white border border-gray-200 rounded shadow-lg\">\n          {children(() => setOpen(false))}\n        </div>,\n        document.body\n      )}\n    </div>\n  );\n};\n\ninterface LettereIncaricoProps {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  activeFilters: Record<string, string>;\n  setActiveFilters: (filters: Record<string, string>) => void;\n  activeSort: { field: string, direction: 'asc' | 'desc' };\n  setActiveSort: (sort: { field: string, direction: 'asc' | 'desc' }) => void;\n  selectionMode: boolean;\n  setSelectionMode: (mode: boolean) => void;\n  selectedIds: string[];\n  setSelectedIds: (ids: string[]) => void;\n  showGenerateModal: boolean;\n  setShowGenerateModal: (show: boolean) => void;\n}\n\nconst LettereIncarico: React.FC<LettereIncaricoProps> = ({\n  searchTerm,\n  setSearchTerm,\n  activeFilters,\n  setActiveFilters,\n  activeSort,\n  setActiveSort,\n  selectionMode,\n  setSelectionMode,\n  selectedIds,\n  setSelectedIds,\n  showGenerateModal,\n  setShowGenerateModal\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lettere, setLettere] = useState<LetteraIncarico[]>([]);\n\n  useEffect(() => {\n    fetchLettere();\n  }, []);\n\n  const fetchLettere = async () => {\n    try {\n      setLoading(true);\n      const data = await apiGet<LetteraIncarico[]>('/api/lettere-incarico');\n      setLettere(data as LetteraIncarico[]);\n    } catch (err) {\n      setError('Errore nel caricamento delle lettere di incarico');\n      console.error('Error fetching lettere:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteLettera = async (id: string, close?: () => void) => {\n    try {\n      await apiDelete(`/api/lettere-incarico/${id}`);\n      setLettere(lettere.filter(l => l.id !== id));\n      if (close) setTimeout(close, 100);\n    } catch (err: any) {\n      alert('Errore durante l\\'eliminazione: ' + (err?.message || err));\n    }\n  };\n\n  const handleDeleteMultipleLettere = async () => {\n    if (selectedIds.length === 0) {\n      alert('Nessuna lettera selezionata');\n      return;\n    }\n    try {\n      // Delete one by one since we don't have a bulk delete endpoint\n      await Promise.all(selectedIds.map(id => apiDelete(`/api/lettere-incarico/${id}`)));\n      setLettere(lettere.filter(l => !selectedIds.includes(l.id)));\n      setSelectedIds([]);\n    } catch (err) {\n      alert('Errore durante l\\'eliminazione multipla');\n    }\n  };\n  \n  // Opzioni di filtro per le lettere\n  const lettereFilterOptions = [\n    {\n      label: 'Corso',\n      value: 'course',\n      options: [...new Set(lettere.map(l => l.scheduledCourse.course.title))].map(title => ({\n        label: title,\n        value: title\n      }))\n    },\n    {\n      label: 'Formatore',\n      value: 'trainer',\n      options: [...new Set(lettere.map(l => `${l.trainer.firstName} ${l.trainer.lastName}`))].map(name => ({\n        label: name,\n        value: name\n      }))\n    }\n  ];\n\n  // Opzioni di ordinamento per le lettere\n  const lettereSortOptions = [\n    { label: 'Corso', value: 'corso' },\n    { label: 'Azienda', value: 'azienda' },\n    { label: 'Formatore', value: 'formatore' },\n    { label: 'Data Generazione', value: 'dataGenerazione' }\n  ];\n\n  // Configurazione colonne per tabella lettere\n  const lettereColumns = [\n    { \n      key: 'actions',\n      label: 'Azioni',\n      width: 120,\n      renderCell: (lettera: LetteraIncarico) => (\n        <DropdownMenu\n          trigger={\n            <button type=\"button\" className=\"inline-flex items-center px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm hover:bg-blue-200 transition-colors\">\n              Azioni\n              <svg className=\"ml-2 w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" /></svg>\n            </button>\n          }\n        >\n          {(close) => <>\n            <a href={`/api${lettera.url}`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">Download</a>\n            <button type=\"button\" onClick={e => { e.stopPropagation(); handleDeleteLettera(lettera.id, close); }} className=\"block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100\">Elimina</button>\n          </>}\n        </DropdownMenu>\n      ),\n    },\n    { \n      key: 'corso',\n      label: 'Corso',\n      width: 200,\n      renderCell: (lettera: LetteraIncarico) => lettera.scheduledCourse.course.title\n    },\n    { \n      key: 'azienda',\n      label: 'Azienda',\n      width: 180,\n      renderCell: (lettera: LetteraIncarico) => lettera.scheduledCourse.companies?.[0]?.company?.ragioneSociale || '--'\n    },\n    { \n      key: 'formatore',\n      label: 'Formatore',\n      width: 180,\n      renderCell: (lettera: LetteraIncarico) => `${lettera.trainer.firstName} ${lettera.trainer.lastName}`\n    },\n    { \n      key: 'tariffa',\n      label: 'Tariffa Oraria',\n      width: 120,\n      renderCell: (lettera: LetteraIncarico) => lettera.trainer.tariffa_oraria?.toFixed(2) || '--'\n    },\n    { \n      key: 'compenso',\n      label: 'Compenso Totale',\n      width: 150,\n      renderCell: (lettera: LetteraIncarico) => {\n        const tariffa = lettera.trainer.tariffa_oraria?.toFixed(2) || '--';\n        const oreTotali = (lettera as any).ORE_TOTALI;\n        return tariffa !== '--' && oreTotali ? (parseFloat(tariffa) * parseFloat(oreTotali)).toFixed(2) : '--';\n      }\n    },\n    { \n      key: 'dataGenerazione',\n      label: 'Data Generazione',\n      width: 150,\n      renderCell: (lettera: LetteraIncarico) => lettera.dataGenerazione ? new Date(lettera.dataGenerazione).toLocaleDateString('it-IT') : '--'\n    },\n    { \n      key: 'numeroProgressivo',\n      label: 'Numero Progressivo',\n      width: 160,\n      renderCell: (lettera: LetteraIncarico) => (lettera.numeroProgressivo != null && lettera.annoProgressivo != null) ? `${lettera.numeroProgressivo}/${lettera.annoProgressivo}` : '--'\n    }\n  ];\n  \n  // Filtra le lettere in base alla ricerca\n  let filteredLettere = lettere;\n  \n  if (searchTerm) {\n    const lowercaseSearchTerm = searchTerm.toLowerCase();\n    filteredLettere = lettere.filter(\n      (lettera) =>\n        lettera.scheduledCourse.course.title.toLowerCase().includes(lowercaseSearchTerm) ||\n        `${lettera.trainer.firstName} ${lettera.trainer.lastName}`.toLowerCase().includes(lowercaseSearchTerm) ||\n        (lettera.scheduledCourse.companies?.[0]?.company?.ragioneSociale || '').toLowerCase().includes(lowercaseSearchTerm)\n    );\n  }\n  \n  // Applica i filtri\n  if (activeFilters.course) {\n    filteredLettere = filteredLettere.filter(\n      (lettera) => lettera.scheduledCourse.course.title === activeFilters.course\n    );\n  }\n  \n  if (activeFilters.trainer) {\n    filteredLettere = filteredLettere.filter(\n      (lettera) => `${lettera.trainer.firstName} ${lettera.trainer.lastName}` === activeFilters.trainer\n    );\n  }\n\n  // Search filter bar component\n  const SearchFilterBar = () => (\n    <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-4 gap-3\">\n      <div className=\"flex-grow max-w-lg\">\n        <SearchBar\n          value={searchTerm}\n          onChange={setSearchTerm}\n          placeholder=\"Cerca lettere di incarico...\"\n        />\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <SearchBarControls\n          onToggleSelectionMode={() => {\n            setSelectionMode(true);\n            setSelectedIds([]);\n          }}\n          isSelectionMode={selectionMode}\n          selectedCount={selectedIds.length}\n          onDeleteSelected={handleDeleteMultipleLettere}\n          onExportSelected={() => console.log('Export selected', selectedIds)}\n          onClearSelection={() => {\n            setSelectedIds([]);\n            setSelectionMode(false);\n          }}\n          filterOptions={lettereFilterOptions}\n          sortOptions={lettereSortOptions}\n          onFilterChange={(filters) => {\n            setActiveFilters(filters);\n          }}\n          activeFilters={activeFilters}\n          activeSort={activeSort}\n          onSortChange={setActiveSort}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <SearchFilterBar />\n      \n      {loading ? (\n        <div className=\"text-center py-8 text-gray-500\">Caricamento...</div>\n      ) : error ? (\n        <div className=\"text-center py-8 text-red-500\">{error}</div>\n      ) : filteredLettere.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">Nessuna lettera di incarico trovata</div>\n      ) : (\n        <div className=\"overflow-x-auto bg-white rounded-lg shadow\">\n          <ResizableTable\n            columns={lettereColumns}\n            data={filteredLettere}\n            tableProps={{\n              className: \"min-w-full divide-y divide-gray-200\"\n            }}\n            tbodyProps={{\n              className: \"bg-white divide-y divide-gray-200\",\n              onClick: (e: React.MouseEvent) => {\n                const target = e.target as HTMLElement;\n                if (target.closest('button,input,a')) return;\n                \n                const row = target.closest('tr');\n                if (!row) return;\n                \n                const index = parseInt(row.dataset.index || '0', 10);\n                const lettera = filteredLettere[index];\n                \n                if (lettera && lettera.url) {\n                  window.open(`/api${lettera.url}`, '_blank');\n                }\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LettereIncarico;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/documents/RegistriPresenze.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ResizableTable' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used.","line":32,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '../../design-system/atoms/Button';\nimport { SearchBar } from '../../design-system/molecules';\nimport { SearchBarControls } from '../../design-system/molecules/SearchBarControls';\nimport ResizableTable from '../../components/shared/ResizableTable';\n\ninterface RegistriPresenzeProps {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  activeFilters: Record<string, string>;\n  setActiveFilters: (filters: Record<string, string>) => void;\n  activeSort: { field: string, direction: 'asc' | 'desc' };\n  setActiveSort: (sort: { field: string, direction: 'asc' | 'desc' }) => void;\n  selectionMode: boolean;\n  setSelectionMode: (mode: boolean) => void;\n  selectedIds: string[];\n  setSelectedIds: (ids: string[]) => void;\n}\n\nconst RegistriPresenze: React.FC<RegistriPresenzeProps> = ({\n  searchTerm,\n  setSearchTerm,\n  activeFilters,\n  setActiveFilters,\n  activeSort,\n  setActiveSort,\n  selectionMode,\n  setSelectionMode,\n  selectedIds,\n  setSelectedIds\n}) => {\n  const [loading, setLoading] = useState(false);\n\n  // Opzioni di filtro per i registri presenze\n  const registriFilterOptions = [\n    {\n      label: 'Corso',\n      value: 'course',\n      options: [\n        {label: 'Corso A', value: 'corso_a'},\n        {label: 'Corso B', value: 'corso_b'},\n      ]\n    },\n    {\n      label: 'Formatore',\n      value: 'trainer',\n      options: [\n        {label: 'Mario Rossi', value: 'mario_rossi'},\n        {label: 'Luca Bianchi', value: 'luca_bianchi'},\n      ]\n    }\n  ];\n\n  // Opzioni di ordinamento per i registri presenze\n  const registriSortOptions = [\n    { label: 'Corso', value: 'corso' },\n    { label: 'Data', value: 'data' },\n    { label: 'Formatore', value: 'formatore' }\n  ];\n\n  // Search filter bar component\n  const SearchFilterBar = () => (\n    <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-4 gap-3\">\n      <div className=\"flex-grow max-w-lg\">\n        <SearchBar\n          value={searchTerm}\n          onChange={setSearchTerm}\n          placeholder=\"Cerca registri presenze...\"\n        />\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <SearchBarControls\n          onToggleSelectionMode={() => {\n            setSelectionMode(true);\n            setSelectedIds([]);\n          }}\n          isSelectionMode={selectionMode}\n          selectedCount={selectedIds.length}\n          onDeleteSelected={() => console.log('Delete selected registri')}\n          onExportSelected={() => console.log('Export selected', selectedIds)}\n          onClearSelection={() => {\n            setSelectedIds([]);\n            setSelectionMode(false);\n          }}\n          filterOptions={registriFilterOptions}\n          sortOptions={registriSortOptions}\n          onFilterChange={(filters) => {\n            setActiveFilters(filters);\n          }}\n          activeFilters={activeFilters}\n          activeSort={activeSort}\n          onSortChange={setActiveSort}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <SearchFilterBar />\n      \n      <div className=\"bg-white rounded-lg shadow p-6 min-h-[200px] flex items-center justify-center text-gray-400\">\n        {loading ? (\n          <div>Caricamento in corso...</div>\n        ) : (\n          <div>(Qui verrà mostrata la tabella dei registri presenze)</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RegistriPresenze;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/employees/EmployeeCreate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/employees/EmployeeDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EntityProfileHeader' is defined but never used.","line":17,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[557,560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[557,560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[610,613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[610,613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[897,900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[897,900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1034,1037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1034,1037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { \n  AlertTriangle,\n  Building2,\n  Calendar,\n  ChevronRight,\n  Edit,\n  FileText,\n  GraduationCap,\n  Mail,\n  MapPin,\n  Phone,\n  User\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport EntityProfileHeader from '../../components/shared/EntityProfileHeader';\nimport { apiGet } from '../../services/api';\n\nconst EmployeeDetails: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [employee, setEmployee] = useState<any>(null);\n  const [company, setCompany] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!id || id === 'new') {\n      setLoading(false);\n      return;\n    }\n    async function fetchData() {\n      setLoading(true);\n      try {\n        const emp = await apiGet(`/api/v1/persons/${id}`) as any;\n        setEmployee(emp);\n        if (emp.companyId) {\n          const comp = await apiGet(`/api/v1/companies/${emp.companyId}`) as any;\n          setCompany(comp);\n        }\n      } catch (err) {\n        console.error('Error fetching employee data:', err);\n        setEmployee(null);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [id]);\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-80\">Loading...</div>;\n  }\n\n  if (!employee) {\n    return (\n      <div className=\"flex items-center justify-center h-80\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-800\">Employee not found</h2>\n          <p className=\"text-gray-600 mt-2\">The employee you're looking for doesn't exist or has been removed.</p>\n          <Link to=\"/employees\" className=\"mt-4 inline-block text-blue-600 hover:text-blue-800\">\n            Back to Employees\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Generate some mock data for the employee\n  const mockMedicalRecords = [\n    {\n      id: '1',\n      date: new Date(2023, 3, 15),\n      type: 'Annual Checkup',\n      status: 'Completed',\n      notes: 'All tests normal. Recommended exercise program.',\n    },\n    {\n      id: '2',\n      date: new Date(2022, 3, 12),\n      type: 'Annual Checkup',\n      status: 'Completed',\n      notes: 'Mild hypertension detected. Follow-up recommended.',\n    },\n    {\n      id: '3',\n      date: new Date(2021, 2, 28),\n      type: 'Annual Checkup',\n      status: 'Completed',\n      notes: 'All tests normal.',\n    },\n  ];\n\n  const mockTrainingRecords = [\n    {\n      id: '1',\n      courseName: 'First Aid Certification',\n      completionDate: new Date(2023, 1, 15),\n      expiryDate: new Date(2025, 1, 15),\n      status: 'Valid',\n    },\n    {\n      id: '2',\n      courseName: 'Workplace Safety',\n      completionDate: new Date(2023, 5, 10),\n      expiryDate: new Date(2024, 5, 10),\n      status: 'Valid',\n    },\n    {\n      id: '3',\n      courseName: 'Hazardous Materials Handling',\n      completionDate: new Date(2022, 8, 23),\n      expiryDate: new Date(2023, 8, 23),\n      status: 'Expired',\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back link */}\n      <div>\n        <Link \n          to=\"/employees\" \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <span className=\"transform rotate-180\">\n            <ChevronRight className=\"h-4 w-4 mr-1\" />\n          </span>\n          Back to Employees\n        </Link>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"h-16 w-16 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-xl font-bold text-white\">\n                {employee.firstName?.charAt(0)}{employee.lastName?.charAt(0)}\n              </span>\n            </div>\n            <div className=\"ml-4\">\n              <h1 className=\"text-2xl font-bold text-gray-800\">{employee.firstName} {employee.lastName}</h1>\n              <p className=\"text-gray-600\">\n                {employee.title}\n                {company && <><span className=\"mx-2 text-gray-400\">•</span><span>{company.ragioneSociale || company.name}</span></>}\n              </p>\n              <p className=\"text-sm text-gray-500\">Codice Fiscale: {employee.taxCode || 'Non disponibile'}</p>\n            </div>\n          </div>\n          <div className=\"mt-4 md:mt-0\">\n            <Link to={`/employees/${employee.id}/edit`} className=\"btn-primary flex items-center rounded-full\">\n              <Edit className=\"h-4 w-4 mr-1\" />\n              Modifica Dipendente\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"mt-4 border-t border-gray-200 pt-4 grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Informazioni Personali</h2>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-start\">\n                <User className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Nome Completo</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.lastName}, {employee.firstName}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Calendar className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Data di Nascita</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.birthDate ? new Date(employee.birthDate).toLocaleDateString('it-IT') : 'Non disponibile'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Phone className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Telefono</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.phone || 'Non disponibile'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Mail className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Email</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.email || 'Non disponibile'}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Informazioni Lavorative</h2>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-start\">\n                <Building2 className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Azienda</span>\n                  {company ? (\n                    <Link to={`/companies/${company.id}`} className=\"block text-sm text-blue-600 hover:text-blue-800\">\n                      {company.ragioneSociale || company.name}\n                    </Link>\n                  ) : (\n                    <span className=\"block text-sm text-gray-600\">Non assegnata</span>\n                  )}\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Posizione</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.title || 'Non specificata'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">ID Dipendente</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.employeeId || 'EMP-' + Math.floor(1000 + Math.random() * 9000)}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Data Assunzione</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.hiredDate ? new Date(employee.hiredDate).toLocaleDateString('it-IT') : 'Non disponibile'}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Residenza</h2>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-start\">\n                <MapPin className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                <div className=\"ml-2\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Indirizzo</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.residenceAddress || 'Non disponibile'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Città</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.residenceCity || 'Non disponibile'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">Provincia</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.province || 'Non disponibile'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"ml-0\">\n                  <span className=\"block text-xs font-medium text-gray-800\">CAP</span>\n                  <span className=\"block text-sm text-gray-600\">{employee.postalCode || 'Non disponibile'}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Formazione e Certificazioni - Layout affiancato */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Formazione Section */}\n        <div className=\"bg-white rounded-lg shadow p-6 h-96\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <GraduationCap className=\"h-5 w-5 mr-2 text-blue-600\" />\n              Formazione Completata\n            </h2>\n            <button className=\"text-blue-600 hover:text-blue-800 flex items-center\">\n              Vedi Tutto\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-3 overflow-y-auto h-80\">\n            {mockTrainingRecords.map((record) => (\n              <div key={record.id} className={`flex items-center justify-between p-3 rounded-lg border-l-4 ${\n                record.status === 'Valid' ? 'bg-green-50 border-green-400' : 'bg-red-50 border-red-400'\n              }`}>\n                <div className=\"flex items-center\">\n                  <GraduationCap className={`h-5 w-5 mr-3 ${\n                    record.status === 'Valid' ? 'text-green-600' : 'text-red-600'\n                  }`} />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{record.courseName}</p>\n                    <p className=\"text-sm text-gray-600\">Completato: {record.completionDate.toLocaleDateString('it-IT')}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className={`text-sm font-medium ${\n                    record.status === 'Valid' ? 'text-green-600' : 'text-red-600'\n                  }`}>{record.status === 'Valid' ? 'Valido' : 'Scaduto'}</p>\n                  <p className=\"text-xs text-gray-500\">Scade: {record.expiryDate.toLocaleDateString('it-IT')}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Visite Mediche Section */}\n        <div className=\"bg-white rounded-lg shadow p-6 h-96\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <FileText className=\"h-5 w-5 mr-2 text-purple-600\" />\n              Visite Mediche\n            </h2>\n            <button className=\"text-purple-600 hover:text-purple-800 flex items-center\">\n              Vedi Tutte\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-3 overflow-y-auto h-80\">\n            {mockMedicalRecords.map((record) => (\n              <div key={record.id} className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg border-l-4 border-purple-400\">\n                <div className=\"flex items-center\">\n                  <FileText className=\"h-5 w-5 text-purple-600 mr-3\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{record.type}</p>\n                    <p className=\"text-sm text-gray-600\">{record.notes}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-purple-600\">{record.status}</p>\n                  <p className=\"text-xs text-gray-500\">{record.date.toLocaleDateString('it-IT')}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Sezione aggiuntiva per compatibilità */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Stato Lavorativo</h2>\n            <div className=\"space-y-3\">\n              <div>\n                <span className=\"block text-sm font-medium text-gray-800\">Stato</span>\n                <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                  employee.status === 'Active'\n                    ? 'bg-green-100 text-green-800'\n                    : employee.status === 'On Leave'\n                      ? 'bg-yellow-100 text-yellow-800'\n                      : 'bg-gray-100 text-gray-800'\n                }`}>\n                  {employee.status || 'Attivo'}\n                </span>\n              </div>\n            </div>\n\n            <h2 className=\"text-lg font-semibold text-gray-800 mt-6 mb-4\">Stato Sanitario</h2>\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <div className=\"flex items-start\">\n                <div className=\"mr-4 p-2 bg-green-100 rounded-lg\">\n                  <FileText className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <span className=\"block text-sm font-medium text-gray-800\">Ultima Visita Medica</span>\n                  <span className=\"block text-sm text-gray-600\">15 Aprile 2023</span>\n                  <span className=\"mt-1 block text-xs text-gray-500\">Prossima programmata: Aprile 2024</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-4 bg-amber-50 rounded-lg p-4\">\n              <div className=\"flex items-start\">\n                <div className=\"mr-4 p-2 bg-amber-100 rounded-lg\">\n                  <AlertTriangle className=\"h-6 w-6 text-amber-600\" />\n                </div>\n                <div>\n                  <span className=\"block text-sm font-medium text-gray-800\">Notifiche</span>\n                  <span className=\"block text-sm text-gray-600\">Certificazione Primo Soccorso in scadenza tra 2 mesi</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Note Aggiuntive</h2>\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <p className=\"text-sm text-gray-600\">\n                {employee.notes || 'Nessuna nota aggiuntiva disponibile per questo dipendente.'}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeDetails;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/employees/EmployeeEdit.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[582,585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[582,585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1647,1650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1647,1650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-self-assign","severity":2,"message":"'personData.companyId' is assigned to itself.","line":49,"column":34,"nodeType":"MemberExpression","messageId":"selfAssignment","endLine":49,"endColumn":54}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams, Link } from 'react-router-dom';\nimport { \n  ChevronLeft,\n  Edit\n} from 'lucide-react';\nimport EmployeeFormNew from '../../components/employees/EmployeeFormNew';\nimport { useToast } from '../../hooks/useToast';\nimport { apiGet } from '../../services/api';\nimport { Company } from '../../types';\n\nconst EmployeeEdit: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n  const [person, setPerson] = useState<any>(null);\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [fetchAttempts, setFetchAttempts] = useState(0);\n  const isFetchingRef = useRef(false);\n  const dataFetchedRef = useRef(false); // Track if we've already fetched data\n  const MAX_RETRY_ATTEMPTS = 3;\n\n  // Fetch employee and companies with improved retry logic\n  useEffect(() => {\n    if (isFetchingRef.current || dataFetchedRef.current) return;\n    \n    const fetchData = async () => {\n      if (fetchAttempts >= MAX_RETRY_ATTEMPTS) {\n        showToast({\n          message: `Failed to load data after ${MAX_RETRY_ATTEMPTS} attempts.`,\n          type: 'error'\n        });\n        setLoading(false);\n        return;\n      }\n\n      isFetchingRef.current = true;\n      \n      try {\n        // Fetch companies first\n        const companiesData = await apiGet<Company[]>('/api/v1/companies');\n        setCompanies(companiesData || []);\n        \n        // Fetch person data\n        const personData = await apiGet(`/api/v1/persons/${id}`) as any;\n        // Ensure companyId is correctly set for compatibility with the form\n        if (personData.companyId && !personData.companyId) {\n          personData.companyId = personData.companyId;\n        }\n        setPerson(personData);\n        \n        // If we get here, both fetches succeeded\n        dataFetchedRef.current = true; // Mark that we've successfully fetched data\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        \n        // Increment attempt counter\n        const nextAttempt = fetchAttempts + 1;\n        setFetchAttempts(nextAttempt);\n        \n        if (nextAttempt >= MAX_RETRY_ATTEMPTS) {\n          showToast({\n            message: `Error: ${error instanceof Error ? error.message : 'Failed to load data'}`,\n            type: 'error'\n          });\n          setLoading(false);\n          \n          // Only navigate away on person not found\n          if (error instanceof Error && error.message.includes('Person not found')) {\n            navigate('/employees');\n          }\n        } else {\n          // Try again after delay with exponential backoff\n          setTimeout(() => {\n            isFetchingRef.current = false;\n            // Force re-render to trigger useEffect again\n            setLoading(true);\n          }, 1000 * Math.pow(2, nextAttempt - 1));\n        }\n      } finally {\n        isFetchingRef.current = false;\n      }\n    };\n    \n    fetchData();\n  }, [id, navigate, showToast, fetchAttempts]);\n\n  const handleSuccess = () => {\n    navigate(id ? `/employees/${id}` : '/employees');\n  };\n\n  const handleClose = () => {\n    navigate(id ? `/employees/${id}` : '/employees');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-full p-8\">\n        <div className=\"flex flex-col items-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n          <p className=\"mt-4 text-gray-600\">\n            {fetchAttempts > 0 ? `Loading data (attempt ${fetchAttempts + 1}/${MAX_RETRY_ATTEMPTS})...` : 'Loading data...'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (id && !person) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-80\">\n        <p className=\"text-red-500 mb-4\">Persona non trovata</p>\n        <Link \n          to=\"/employees\" \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-1\" />\n          Torna all'elenco persone\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-5xl\">\n      <div className=\"mb-4\">\n        <Link \n          to=\"/employees\" \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-1\" />\n          Torna all'elenco persone\n        </Link>\n      </div>\n      \n      <EmployeeFormNew\n        person={person}\n        companies={companies}\n        onSuccess={handleSuccess}\n        onClose={handleClose}\n      />\n    </div>\n  );\n};\n\nexport default EmployeeEdit;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/employees/EmployeesPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/employees/EmployeesPageNew.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/employees/EmployeesPageNew.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/finance/Invoices.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'axios' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4188,4191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4188,4191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { Button } from '../../design-system/atoms/Button';\nimport { SearchBar } from '../../design-system/molecules';\nimport { SearchBarControls } from '../../design-system/molecules/SearchBarControls';\nimport ResizableTable from '../../components/shared/ResizableTable';\nimport { sanitizeErrorMessage } from '../../utils/errorUtils';\nimport { Company } from '../../types';\n\ninterface Invoice {\n  id: string;\n  number: string;\n  date: string;\n  company?: Company;\n  total: number;\n  status: 'draft' | 'issued' | 'paid' | 'overdue';\n  payment_date?: string;\n  due_date: string;\n}\n\n// DropdownMenu component\nconst DropdownMenu: React.FC<{ children: (close: () => void) => React.ReactNode; trigger: React.ReactNode }> = ({ children, trigger }) => {\n  const [open, setOpen] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (e: MouseEvent) => {\n      if (\n        ref.current && !ref.current.contains(e.target as Node) &&\n        menuRef.current && !menuRef.current.contains(e.target as Node)\n      ) {\n        setOpen(false);\n      }\n    };\n    if (open) document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedown', handleClick);\n  }, [open]);\n\n  // Portal rendering\n  const [menuPos, setMenuPos] = useState<{top: number, left: number} | null>(null);\n  const triggerRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (open && triggerRef.current) {\n      const rect = triggerRef.current.getBoundingClientRect();\n      setMenuPos({\n        top: rect.bottom + window.scrollY,\n        left: rect.left + window.scrollX\n      });\n    }\n  }, [open]);\n\n  return (\n    <div ref={ref} className=\"relative inline-block text-left\" style={{overflow: 'visible'}}>\n      <span ref={triggerRef} onClick={() => setOpen(o => !o)}>{trigger}</span>\n      {open && menuPos && ReactDOM.createPortal(\n        <div ref={menuRef} style={{ position: 'absolute', zIndex: 99999, left: menuPos.left, top: menuPos.top, background: '#fffbe6', minWidth: '8rem', boxShadow: '0 8px 24px rgba(0,0,0,0.18)' }} className=\"w-32 bg-white border border-gray-200 rounded shadow-lg\">\n          {children(() => setOpen(false))}\n        </div>,\n        document.body\n      )}\n    </div>\n  );\n};\n\ninterface InvoicesProps {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  activeFilters: Record<string, string>;\n  setActiveFilters: (filters: Record<string, string>) => void;\n  activeSort: { field: string, direction: 'asc' | 'desc' };\n  setActiveSort: (sort: { field: string, direction: 'asc' | 'desc' }) => void;\n  selectionMode: boolean;\n  setSelectionMode: (mode: boolean) => void;\n  selectedIds: string[];\n  setSelectedIds: (ids: string[]) => void;\n}\n\nconst Invoices: React.FC<InvoicesProps> = ({\n  searchTerm,\n  setSearchTerm,\n  activeFilters,\n  setActiveFilters,\n  activeSort,\n  setActiveSort,\n  selectionMode,\n  setSelectionMode,\n  selectedIds,\n  setSelectedIds\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\n\n  useEffect(() => {\n    fetchInvoices();\n  }, []);\n\n  const fetchInvoices = async () => {\n    try {\n      setLoading(true);\n      // In futuro qui verrà fatta una chiamata API reale\n      // const response = await axios.get<Invoice[]>('/api/invoices');\n      // setInvoices(response.data);\n      setInvoices([]);\n      setError(null);\n    } catch (err) {\n      setError('Errore nel caricamento delle fatture');\n      console.error('Error fetching invoices:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteInvoice = async (id: string, close?: () => void) => {\n    try {\n      // In futuro qui verrà fatta una chiamata API reale\n      // const res = await axios.delete('/api/invoices/${id}');\n      setInvoices(invoices.filter(i => i.id !== id));\n      if (close) setTimeout(close, 100);\n      alert('Fattura eliminata con successo');\n    } catch (err: any) {\n      const userMessage = sanitizeErrorMessage(err, 'Errore durante l\\'eliminazione della fattura');\n      alert(userMessage);\n    }\n  };\n  \n  // Opzioni di filtro per le fatture\n  const invoiceFilterOptions = [\n    {\n      label: 'Stato',\n      value: 'status',\n      options: [\n        { label: 'Bozza', value: 'draft' },\n        { label: 'Emessa', value: 'issued' },\n        { label: 'Pagata', value: 'paid' },\n        { label: 'Scaduta', value: 'overdue' }\n      ]\n    },\n    {\n      label: 'Azienda',\n      value: 'company',\n      options: [...new Set(invoices.filter(i => i.company).map(i => i.company?.ragioneSociale))].map(name => ({\n        label: name || '',\n        value: name || ''\n      }))\n    }\n  ];\n\n  // Opzioni di ordinamento per le fatture\n  const invoiceSortOptions = [\n    { label: 'Numero', value: 'number' },\n    { label: 'Data', value: 'date' },\n    { label: 'Azienda', value: 'company' },\n    { label: 'Importo', value: 'total' },\n    { label: 'Scadenza', value: 'due_date' },\n    { label: 'Data Pagamento', value: 'payment_date' }\n  ];\n\n  // Configurazione colonne per tabella fatture\n  const invoiceColumns = [\n    {\n      key: 'actions',\n      label: 'Azioni',\n      width: 120,\n      renderCell: (invoice: Invoice) => (\n        <DropdownMenu\n          trigger={\n            <button type=\"button\" className=\"inline-flex items-center px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm hover:bg-blue-200 transition-colors\">\n              Azioni\n              <svg className=\"ml-2 w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" /></svg>\n            </button>\n          }\n        >\n          {(close) => <>\n            <button className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\" onClick={() => { console.log('Visualizza'); close(); }}>Visualizza</button>\n            <button className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\" onClick={() => { console.log('Modifica'); close(); }}>Modifica</button>\n            <button type=\"button\" onClick={() => { handleDeleteInvoice(invoice.id, close); }} className=\"block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100\">Elimina</button>\n          </>}\n        </DropdownMenu>\n      )\n    },\n    {\n      key: 'number',\n      label: 'Numero',\n      width: 150,\n      renderCell: (invoice: Invoice) => invoice.number\n    },\n    {\n      key: 'date',\n      label: 'Data',\n      width: 120,\n      renderCell: (invoice: Invoice) => new Date(invoice.date).toLocaleDateString('it-IT')\n    },\n    {\n      key: 'company',\n      label: 'Azienda',\n      width: 200,\n      renderCell: (invoice: Invoice) => invoice.company?.ragioneSociale || '-'\n    },\n    {\n      key: 'total',\n      label: 'Importo',\n      width: 120,\n      renderCell: (invoice: Invoice) => `€ ${invoice.total.toLocaleString('it-IT', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`\n    },\n    {\n      key: 'status',\n      label: 'Stato',\n      width: 120,\n      renderCell: (invoice: Invoice) => {\n        const statusMap: Record<string, { label: string, className: string }> = {\n          'draft': { label: 'Bozza', className: 'bg-gray-100 text-gray-800' },\n          'issued': { label: 'Emessa', className: 'bg-blue-100 text-blue-800' },\n          'paid': { label: 'Pagata', className: 'bg-green-100 text-green-800' },\n          'overdue': { label: 'Scaduta', className: 'bg-red-100 text-red-800' }\n        };\n        const { label, className } = statusMap[invoice.status] || { label: invoice.status, className: 'bg-gray-100' };\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${className}`}>\n            {label}\n          </span>\n        );\n      }\n    },\n    {\n      key: 'due_date',\n      label: 'Scadenza',\n      width: 120,\n      renderCell: (invoice: Invoice) => new Date(invoice.due_date).toLocaleDateString('it-IT')\n    },\n    {\n      key: 'payment_date',\n      label: 'Data Pagamento',\n      width: 140,\n      renderCell: (invoice: Invoice) => invoice.payment_date ? new Date(invoice.payment_date).toLocaleDateString('it-IT') : '-'\n    }\n  ];\n  \n  // Filtra le fatture in base alla ricerca\n  let filteredInvoices = invoices;\n  \n  if (searchTerm) {\n    const lowercaseSearchTerm = searchTerm.toLowerCase();\n    filteredInvoices = invoices.filter(\n      (invoice) =>\n        invoice.number.toLowerCase().includes(lowercaseSearchTerm) ||\n        (invoice.company?.ragioneSociale || '').toLowerCase().includes(lowercaseSearchTerm)\n    );\n  }\n  \n  // Applica filtri specifici\n  if (activeFilters.status) {\n    filteredInvoices = filteredInvoices.filter(\n      (invoice) => invoice.status === activeFilters.status\n    );\n  }\n  \n  if (activeFilters.company) {\n    filteredInvoices = filteredInvoices.filter(\n      (invoice) => invoice.company?.ragioneSociale === activeFilters.company\n    );\n  }\n\n  // Search filter bar component\n  const SearchFilterBar = () => (\n    <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-4 gap-3\">\n      <div className=\"flex-grow max-w-lg\">\n        <SearchBar\n          value={searchTerm}\n          onChange={setSearchTerm}\n          placeholder=\"Cerca fatture...\"\n        />\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <SearchBarControls\n          onToggleSelectionMode={() => {\n            setSelectionMode(true);\n            setSelectedIds([]);\n          }}\n          isSelectionMode={selectionMode}\n          selectedCount={selectedIds.length}\n          onDeleteSelected={() => {\n            if (selectedIds.length === 0) {\n              alert('Nessuna fattura selezionata');\n              return;\n            }\n            if (confirm(`Sei sicuro di voler eliminare ${selectedIds.length} fatture?`)) {\n              setInvoices(invoices.filter(i => !selectedIds.includes(i.id)));\n              setSelectedIds([]);\n              setSelectionMode(false);\n            }\n          }}\n          onExportSelected={() => console.log('Export selected', selectedIds)}\n          onClearSelection={() => {\n            setSelectedIds([]);\n            setSelectionMode(false);\n          }}\n          filterOptions={invoiceFilterOptions}\n          sortOptions={invoiceSortOptions}\n          onFilterChange={(filters) => {\n            setActiveFilters(filters);\n          }}\n          activeFilters={activeFilters}\n          activeSort={activeSort}\n          onSortChange={setActiveSort}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <SearchFilterBar />\n      \n      {loading ? (\n        <div className=\"text-center py-8 text-gray-500\">Caricamento...</div>\n      ) : error ? (\n        <div className=\"text-center py-8 text-red-500\">{error}</div>\n      ) : filteredInvoices.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">Nessuna fattura trovata</div>\n      ) : (\n        <div className=\"overflow-x-auto bg-white rounded-lg shadow\">\n          <ResizableTable\n            columns={invoiceColumns}\n            data={filteredInvoices}\n            tableProps={{\n              className: \"min-w-full divide-y divide-gray-200\"\n            }}\n            tbodyProps={{\n              className: \"bg-white divide-y divide-gray-200\"\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Invoices;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/finance/Quotes.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'axios' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4078,4081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4078,4081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { Button } from '../../design-system/atoms/Button';\nimport { SearchBar } from '../../design-system/molecules';\nimport { SearchBarControls } from '../../design-system/molecules/SearchBarControls';\nimport ResizableTable from '../../components/shared/ResizableTable';\nimport { Company } from '../../types';\n\ninterface Quote {\n  id: string;\n  number: string;\n  date: string;\n  company?: Company;\n  total: number;\n  status: 'draft' | 'sent' | 'accepted' | 'rejected';\n  expiration_date: string;\n}\n\n// DropdownMenu component\nconst DropdownMenu: React.FC<{ children: (close: () => void) => React.ReactNode; trigger: React.ReactNode }> = ({ children, trigger }) => {\n  const [open, setOpen] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (e: MouseEvent) => {\n      if (\n        ref.current && !ref.current.contains(e.target as Node) &&\n        menuRef.current && !menuRef.current.contains(e.target as Node)\n      ) {\n        setOpen(false);\n      }\n    };\n    if (open) document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedown', handleClick);\n  }, [open]);\n\n  // Portal rendering\n  const [menuPos, setMenuPos] = useState<{top: number, left: number} | null>(null);\n  const triggerRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (open && triggerRef.current) {\n      const rect = triggerRef.current.getBoundingClientRect();\n      setMenuPos({\n        top: rect.bottom + window.scrollY,\n        left: rect.left + window.scrollX\n      });\n    }\n  }, [open]);\n\n  return (\n    <div ref={ref} className=\"relative inline-block text-left\" style={{overflow: 'visible'}}>\n      <span ref={triggerRef} onClick={() => setOpen(o => !o)}>{trigger}</span>\n      {open && menuPos && ReactDOM.createPortal(\n        <div ref={menuRef} style={{ position: 'absolute', zIndex: 99999, left: menuPos.left, top: menuPos.top, background: '#fffbe6', minWidth: '8rem', boxShadow: '0 8px 24px rgba(0,0,0,0.18)' }} className=\"w-32 bg-white border border-gray-200 rounded shadow-lg\">\n          {children(() => setOpen(false))}\n        </div>,\n        document.body\n      )}\n    </div>\n  );\n};\n\ninterface QuotesProps {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  activeFilters: Record<string, string>;\n  setActiveFilters: (filters: Record<string, string>) => void;\n  activeSort: { field: string, direction: 'asc' | 'desc' };\n  setActiveSort: (sort: { field: string, direction: 'asc' | 'desc' }) => void;\n  selectionMode: boolean;\n  setSelectionMode: (mode: boolean) => void;\n  selectedIds: string[];\n  setSelectedIds: (ids: string[]) => void;\n}\n\nconst Quotes: React.FC<QuotesProps> = ({\n  searchTerm,\n  setSearchTerm,\n  activeFilters,\n  setActiveFilters,\n  activeSort,\n  setActiveSort,\n  selectionMode,\n  setSelectionMode,\n  selectedIds,\n  setSelectedIds\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [quotes, setQuotes] = useState<Quote[]>([]);\n\n  useEffect(() => {\n    fetchQuotes();\n  }, []);\n\n  const fetchQuotes = async () => {\n    try {\n      setLoading(true);\n      // In futuro qui verrà fatta una chiamata API reale\n      // const response = await axios.get<Quote[]>('/api/quotes');\n      // setQuotes(response.data);\n      setQuotes([]);\n      setError(null);\n    } catch (err) {\n      setError('Errore nel caricamento dei preventivi');\n      console.error('Error fetching quotes:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteQuote = async (id: string, close?: () => void) => {\n    try {\n      // In futuro qui verrà fatta una chiamata API reale\n      // const res = await axios.delete('/api/quotes/${id}');\n      setQuotes(quotes.filter(q => q.id !== id));\n      if (close) setTimeout(close, 100);\n      alert('Preventivo eliminato con successo');\n    } catch (err: any) {\n      alert('Errore durante l\\'eliminazione: ' + (err?.message || err));\n    }\n  };\n  \n  // Opzioni di filtro per i preventivi\n  const quoteFilterOptions = [\n    {\n      label: 'Stato',\n      value: 'status',\n      options: [\n        { label: 'Bozza', value: 'draft' },\n        { label: 'Inviato', value: 'sent' },\n        { label: 'Accettato', value: 'accepted' },\n        { label: 'Rifiutato', value: 'rejected' }\n      ]\n    },\n    {\n      label: 'Azienda',\n      value: 'company',\n      options: [...new Set(quotes.filter(q => q.company).map(q => q.company?.ragioneSociale))].map(name => ({\n        label: name || '',\n        value: name || ''\n      }))\n    }\n  ];\n\n  // Opzioni di ordinamento per i preventivi\n  const quoteSortOptions = [\n    { label: 'Numero', value: 'number' },\n    { label: 'Data', value: 'date' },\n    { label: 'Azienda', value: 'company' },\n    { label: 'Importo', value: 'total' },\n    { label: 'Scadenza', value: 'expiration_date' }\n  ];\n\n  // Configurazione colonne per tabella preventivi\n  const quoteColumns = [\n    {\n      key: 'actions',\n      label: 'Azioni',\n      width: 120,\n      renderCell: (quote: Quote) => (\n        <DropdownMenu\n          trigger={\n            <button type=\"button\" className=\"inline-flex items-center px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm hover:bg-blue-200 transition-colors\">\n              Azioni\n              <svg className=\"ml-2 w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" /></svg>\n            </button>\n          }\n        >\n          {(close) => <>\n            <button className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\" onClick={() => { console.log('Visualizza'); close(); }}>Visualizza</button>\n            <button className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\" onClick={() => { console.log('Modifica'); close(); }}>Modifica</button>\n            <button type=\"button\" onClick={() => { handleDeleteQuote(quote.id, close); }} className=\"block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100\">Elimina</button>\n          </>}\n        </DropdownMenu>\n      )\n    },\n    {\n      key: 'number',\n      label: 'Numero',\n      width: 150,\n      renderCell: (quote: Quote) => quote.number\n    },\n    {\n      key: 'date',\n      label: 'Data',\n      width: 120,\n      renderCell: (quote: Quote) => new Date(quote.date).toLocaleDateString('it-IT')\n    },\n    {\n      key: 'company',\n      label: 'Azienda',\n      width: 200,\n      renderCell: (quote: Quote) => quote.company?.ragioneSociale || '-'\n    },\n    {\n      key: 'total',\n      label: 'Importo',\n      width: 120,\n      renderCell: (quote: Quote) => `€ ${quote.total.toLocaleString('it-IT', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`\n    },\n    {\n      key: 'status',\n      label: 'Stato',\n      width: 120,\n      renderCell: (quote: Quote) => {\n        const statusMap: Record<string, { label: string, className: string }> = {\n          'draft': { label: 'Bozza', className: 'bg-gray-100 text-gray-800' },\n          'sent': { label: 'Inviato', className: 'bg-blue-100 text-blue-800' },\n          'accepted': { label: 'Accettato', className: 'bg-green-100 text-green-800' },\n          'rejected': { label: 'Rifiutato', className: 'bg-red-100 text-red-800' }\n        };\n        const { label, className } = statusMap[quote.status] || { label: quote.status, className: 'bg-gray-100' };\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${className}`}>\n            {label}\n          </span>\n        );\n      }\n    },\n    {\n      key: 'expiration_date',\n      label: 'Scadenza',\n      width: 120,\n      renderCell: (quote: Quote) => new Date(quote.expiration_date).toLocaleDateString('it-IT')\n    }\n  ];\n  \n  // Filtra i preventivi in base alla ricerca\n  let filteredQuotes = quotes;\n  \n  if (searchTerm) {\n    const lowercaseSearchTerm = searchTerm.toLowerCase();\n    filteredQuotes = quotes.filter(\n      (quote) =>\n        quote.number.toLowerCase().includes(lowercaseSearchTerm) ||\n        (quote.company?.ragioneSociale || '').toLowerCase().includes(lowercaseSearchTerm)\n    );\n  }\n  \n  // Applica filtri specifici\n  if (activeFilters.status) {\n    filteredQuotes = filteredQuotes.filter(\n      (quote) => quote.status === activeFilters.status\n    );\n  }\n  \n  if (activeFilters.company) {\n    filteredQuotes = filteredQuotes.filter(\n      (quote) => quote.company?.ragioneSociale === activeFilters.company\n    );\n  }\n\n  // Search filter bar component\n  const SearchFilterBar = () => (\n    <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-4 gap-3\">\n      <div className=\"flex-grow max-w-lg\">\n        <SearchBar\n          value={searchTerm}\n          onChange={setSearchTerm}\n          placeholder=\"Cerca preventivi...\"\n        />\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <SearchBarControls\n          onToggleSelectionMode={() => {\n            setSelectionMode(true);\n            setSelectedIds([]);\n          }}\n          isSelectionMode={selectionMode}\n          selectedCount={selectedIds.length}\n          onDeleteSelected={() => {\n            if (selectedIds.length === 0) {\n              alert('Nessun preventivo selezionato');\n              return;\n            }\n            if (confirm(`Sei sicuro di voler eliminare ${selectedIds.length} preventivi?`)) {\n              setQuotes(quotes.filter(q => !selectedIds.includes(q.id)));\n              setSelectedIds([]);\n              setSelectionMode(false);\n            }\n          }}\n          onExportSelected={() => console.log('Export selected', selectedIds)}\n          onClearSelection={() => {\n            setSelectedIds([]);\n            setSelectionMode(false);\n          }}\n          filterOptions={quoteFilterOptions}\n          sortOptions={quoteSortOptions}\n          onFilterChange={(filters) => {\n            setActiveFilters(filters);\n          }}\n          activeFilters={activeFilters}\n          activeSort={activeSort}\n          onSortChange={setActiveSort}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <SearchFilterBar />\n      \n      {loading ? (\n        <div className=\"text-center py-8 text-gray-500\">Caricamento...</div>\n      ) : error ? (\n        <div className=\"text-center py-8 text-red-500\">{error}</div>\n      ) : filteredQuotes.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">Nessun preventivo trovato</div>\n      ) : (\n        <div className=\"overflow-x-auto bg-white rounded-lg shadow\">\n          <ResizableTable\n            columns={quoteColumns}\n            data={filteredQuotes}\n            tableProps={{\n              className: \"min-w-full divide-y divide-gray-200\"\n            }}\n            tbodyProps={{\n              className: \"bg-white divide-y divide-gray-200\"\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Quotes;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/ContactSubmissionsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TablePagination' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getContactSubmissionStats' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":28},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSubmissions'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [filters, loadSubmissions, pagination.page]","fix":{"range":[1955,1981],"text":"[filters, loadSubmissions, pagination.page]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":307,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9182,9185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9182,9185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":314,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9452,9455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9452,9455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  IconButton,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  MenuItem,\n  Alert,\n  Tooltip,\n  Stack,\n  Card,\n  CardContent,\n  Divider\n} from '@mui/material';\nimport {\n  Visibility,\n  Edit,\n  Delete,\n  Download,\n  FilterList,\n  Refresh\n} from '@mui/icons-material';\nimport { useAuth } from '../../hooks/auth/useAuth';\nimport {\n  getContactSubmissions,\n  getContactSubmission,\n  updateContactSubmissionStatus,\n  deleteContactSubmission,\n  exportContactSubmissions,\n  getContactSubmissionStats\n} from '../../services/contactSubmissionsManagement';\nimport type { ContactSubmission, ContactSubmissionFilters } from '../../services/contactSubmissionsManagement';\n\nconst ContactSubmissionsPage: React.FC = () => {\n  const [submissions, setSubmissions] = useState<ContactSubmission[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedSubmission, setSelectedSubmission] = useState<ContactSubmission | null>(null);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [statusDialogOpen, setStatusDialogOpen] = useState(false);\n  const [newStatus, setNewStatus] = useState('');\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 20,\n    total: 0,\n    pages: 0\n  });\n  const [filters, setFilters] = useState<ContactSubmissionFilters>({\n    status: '',\n    type: '',\n    search: '',\n    sortBy: 'createdAt',\n    sortOrder: 'desc'\n  });\n\n  const { hasPermission } = useAuth();\n  const canEdit = hasPermission('submissions', 'update');\n  const canDelete = hasPermission('submissions', 'delete');\n  const canExport = hasPermission('submissions', 'export');\n\n  useEffect(() => {\n    loadSubmissions();\n  }, [filters, pagination.page]);\n\n  const loadSubmissions = async () => {\n    try {\n      setLoading(true);\n      const response = await getContactSubmissions({\n        ...filters,\n        page: pagination.page,\n        limit: pagination.limit\n      });\n      setSubmissions(response.submissions);\n      setPagination(response.pagination);\n      setError(null);\n    } catch (err) {\n      setError('Errore nel caricamento delle submissions');\n      console.error('Error loading submissions:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleViewSubmission = async (id: string) => {\n    try {\n      const submission = await getContactSubmission(id);\n      setSelectedSubmission(submission);\n      setViewDialogOpen(true);\n    } catch (err) {\n      setError('Errore nel caricamento della submission');\n      console.error('Error loading submission:', err);\n    }\n  };\n\n  const handleStatusChange = (submission: ContactSubmission) => {\n    setSelectedSubmission(submission);\n    setNewStatus(submission.status);\n    setStatusDialogOpen(true);\n  };\n\n  const handleUpdateStatus = async () => {\n    if (!selectedSubmission) return;\n\n    try {\n      await updateContactSubmissionStatus(\n        selectedSubmission.id, \n        newStatus as ContactSubmission['status']\n      );\n      setStatusDialogOpen(false);\n      loadSubmissions();\n    } catch (err) {\n      setError('Errore nell\\'aggiornamento dello status');\n      console.error('Error updating status:', err);\n    }\n  };\n\n  const handleDeleteSubmission = async (id: string) => {\n    if (!window.confirm('Sei sicuro di voler eliminare questa submission?')) return;\n\n    try {\n      await deleteContactSubmission(id);\n      loadSubmissions();\n    } catch (err) {\n      setError('Errore nell\\'eliminazione della submission');\n      console.error('Error deleting submission:', err);\n    }\n  };\n\n  const handleExport = async () => {\n    try {\n      const blob = await exportContactSubmissions(filters, 'csv');\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `contact-submissions-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (err) {\n      setError('Errore nell\\'esportazione');\n      console.error('Error exporting:', err);\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    const labels = {\n      NEW: 'Nuovo',\n      READ: 'Letto',\n      IN_PROGRESS: 'In Lavorazione',\n      RESOLVED: 'Risolto',\n      ARCHIVED: 'Archiviato'\n    };\n    return labels[status as keyof typeof labels] || status;\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      NEW: 'error',\n      READ: 'warning',\n      IN_PROGRESS: 'info',\n      RESOLVED: 'success',\n      ARCHIVED: 'default'\n    };\n    return colors[status as keyof typeof colors] || 'default';\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const colors = {\n      LOW: 'default',\n      MEDIUM: 'warning',\n      HIGH: 'error',\n      URGENT: 'error'\n    };\n    return colors[priority as keyof typeof colors] || 'default';\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Gestione Contact Submissions\n      </Typography>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Filtri */}\n      <Paper sx={{ p: 2, mb: 3 }}>\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, alignItems: 'center' }}>\n          <Box sx={{ minWidth: 200 }}>\n            <TextField\n              fullWidth\n              label=\"Cerca\"\n              value={filters.search}\n              onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n              placeholder=\"Nome, email, oggetto...\"\n              size=\"small\"\n            />\n          </Box>\n          <Box sx={{ minWidth: 150 }}>\n            <TextField\n              fullWidth\n              select\n              label=\"Status\"\n              value={filters.status}\n              onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n              size=\"small\"\n            >\n              <MenuItem value=\"\">Tutti</MenuItem>\n              <MenuItem value=\"NEW\">Nuovo</MenuItem>\n              <MenuItem value=\"READ\">Letto</MenuItem>\n              <MenuItem value=\"IN_PROGRESS\">In Lavorazione</MenuItem>\n              <MenuItem value=\"RESOLVED\">Risolto</MenuItem>\n              <MenuItem value=\"ARCHIVED\">Archiviato</MenuItem>\n            </TextField>\n          </Box>\n          <Box sx={{ minWidth: 150 }}>\n            <TextField\n              fullWidth\n              select\n              label=\"Tipo\"\n              value={filters.type}\n              onChange={(e) => setFilters({ ...filters, type: e.target.value })}\n              size=\"small\"\n            >\n              <MenuItem value=\"\">Tutti</MenuItem>\n              <MenuItem value=\"CONTACT\">Contatto</MenuItem>\n              <MenuItem value=\"QUOTE\">Preventivo</MenuItem>\n              <MenuItem value=\"INFO\">Informazioni</MenuItem>\n            </TextField>\n          </Box>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Button\n              variant=\"outlined\"\n              onClick={loadSubmissions}\n            >\n              Aggiorna\n            </Button>\n            {canExport && (\n              <Button\n                variant=\"outlined\"\n                startIcon={<Download />}\n                onClick={handleExport}\n              >\n                Esporta\n              </Button>\n            )}\n          </Box>\n        </Box>\n      </Paper>\n\n      {/* Tabella Submissions */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>ID</TableCell>\n              <TableCell>Nome</TableCell>\n              <TableCell>Email</TableCell>\n              <TableCell>Oggetto</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Priorità</TableCell>\n              <TableCell>Data</TableCell>\n              <TableCell>Azioni</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {loading ? (\n              <TableRow>\n                <TableCell colSpan={8} align=\"center\">\n                  Caricamento...\n                </TableCell>\n              </TableRow>\n            ) : submissions.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={8} align=\"center\">\n                  Nessuna submission trovata\n                </TableCell>\n              </TableRow>\n            ) : (\n              submissions.map((submission) => (\n                <TableRow key={submission.id}>\n                  <TableCell>{submission.id.slice(-8)}</TableCell>\n                  <TableCell>{submission.name}</TableCell>\n                  <TableCell>{submission.email}</TableCell>\n                  <TableCell>{submission.subject}</TableCell>\n                  <TableCell>\n                    <Chip\n                      label={getStatusLabel(submission.status)}\n                      color={getStatusColor(submission.status) as any}\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Chip\n                      label={submission.priority}\n                      color={getPriorityColor(submission.priority) as any}\n                      size=\"small\"\n                      variant=\"outlined\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    {new Date(submission.createdAt).toLocaleDateString('it-IT')}\n                  </TableCell>\n                  <TableCell>\n                    <Tooltip title=\"Visualizza\">\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => handleViewSubmission(submission.id)}\n                      >\n                        <Visibility />\n                      </IconButton>\n                    </Tooltip>\n                    {canEdit && (\n                      <Tooltip title=\"Modifica Status\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => handleStatusChange(submission)}\n                        >\n                          <Edit />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                    {canDelete && (\n                      <Tooltip title=\"Elimina\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => handleDeleteSubmission(submission.id)}\n                          color=\"error\"\n                        >\n                          <Delete />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Paginazione */}\n      <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center', gap: 1 }}>\n        <Button\n          disabled={pagination.page <= 1}\n          onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}\n        >\n          Precedente\n        </Button>\n        <Typography sx={{ alignSelf: 'center', mx: 2 }}>\n          Pagina {pagination.page} di {pagination.pages}\n        </Typography>\n        <Button\n          disabled={pagination.page >= pagination.pages}\n          onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}\n        >\n          Successiva\n        </Button>\n      </Box>\n\n      {/* Dialog Visualizzazione */}\n      <Dialog \n        open={viewDialogOpen} \n        onClose={() => setViewDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Dettagli Submission</DialogTitle>\n        <DialogContent>\n          {selectedSubmission && (\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                <Box sx={{ flex: 1, minWidth: 300 }}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Informazioni Contatto\n                      </Typography>\n                      <Typography><strong>Nome:</strong> {selectedSubmission.name}</Typography>\n                      <Typography><strong>Email:</strong> {selectedSubmission.email}</Typography>\n                      {selectedSubmission.phone && (\n                        <Typography><strong>Telefono:</strong> {selectedSubmission.phone}</Typography>\n                      )}\n                      {selectedSubmission.company && (\n                        <Typography><strong>Azienda:</strong> {selectedSubmission.company}</Typography>\n                      )}\n                    </CardContent>\n                  </Card>\n                </Box>\n                <Box sx={{ flex: 1, minWidth: 300 }}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Dettagli Richiesta\n                      </Typography>\n                      <Typography><strong>Oggetto:</strong> {selectedSubmission.subject}</Typography>\n                      <Typography><strong>Status:</strong> {getStatusLabel(selectedSubmission.status)}</Typography>\n                      <Typography><strong>Priorità:</strong> {selectedSubmission.priority}</Typography>\n                      <Typography><strong>Data:</strong> {new Date(selectedSubmission.createdAt).toLocaleString('it-IT')}</Typography>\n                    </CardContent>\n                  </Card>\n                </Box>\n              </Box>\n              <Box>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Messaggio\n                    </Typography>\n                    <Typography style={{ whiteSpace: 'pre-wrap' }}>\n                      {selectedSubmission.message}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Box>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setViewDialogOpen(false)}>Chiudi</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Dialog Modifica Status */}\n      <Dialog open={statusDialogOpen} onClose={() => setStatusDialogOpen(false)}>\n        <DialogTitle>Modifica Status</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            select\n            label=\"Nuovo Status\"\n            value={newStatus}\n            onChange={(e) => setNewStatus(e.target.value)}\n            sx={{ mt: 1 }}\n          >\n            <MenuItem value=\"NEW\">Nuovo</MenuItem>\n            <MenuItem value=\"READ\">Letto</MenuItem>\n            <MenuItem value=\"IN_PROGRESS\">In Lavorazione</MenuItem>\n            <MenuItem value=\"RESOLVED\">Risolto</MenuItem>\n            <MenuItem value=\"ARCHIVED\">Archiviato</MenuItem>\n          </TextField>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setStatusDialogOpen(false)}>Annulla</Button>\n          <Button onClick={handleUpdateStatus} variant=\"contained\">\n            Salva\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ContactSubmissionsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormSubmissionsPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormSubmissionsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormSubmissionFilters' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSubmissions'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [filters, loadSubmissions]","fix":{"range":[2023,2032],"text":"[filters, loadSubmissions]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2197,2200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2197,2200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getStatusColor' is assigned a value but never used.","line":146,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Eye, \n  Edit, \n  Trash2, \n  Download, \n  Filter, \n  AlertCircle,\n  Loader2\n} from 'lucide-react';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Card } from '../../design-system/molecules/Card';\nimport { Badge } from '../../design-system/atoms/Badge';\nimport { Modal } from '../../design-system/molecules/Modal';\nimport { Input } from '../../design-system/atoms/Input';\nimport { Select } from '../../design-system/atoms/Select';\nimport { useAuth } from '../../context/AuthContext';\nimport { \n  getFormSubmissions, \n  getFormSubmission, \n  updateSubmissionStatus, \n  deleteSubmission, \n  exportSubmissions,\n  FormSubmission,\n  FormSubmissionFilters \n} from '../../services/formTemplates';\n\nconst FormSubmissionsPage: React.FC = () => {\n  const [submissions, setSubmissions] = useState<FormSubmission[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedSubmission, setSelectedSubmission] = useState<FormSubmission | null>(null);\n  const [selectedTemplateId, setSelectedTemplateId] = useState<string | null>(null);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [statusDialogOpen, setStatusDialogOpen] = useState(false);\n  const [newStatus, setNewStatus] = useState<'pending' | 'processed' | 'archived'>('pending');\n  const [filters, setFilters] = useState<{\n    status: 'pending' | 'processed' | 'archived' | '';\n    formTemplateId: string;\n    dateFrom: string;\n    dateTo: string;\n  }>({\n    status: '',\n    formTemplateId: '',\n    dateFrom: '',\n    dateTo: ''\n  });\n\n  const { hasPermission, isLoading: authLoading } = useAuth();\n  const canView = hasPermission('form_submissions', 'read');\n  const canEdit = hasPermission('form_submissions', 'update');\n  const canDelete = hasPermission('form_submissions', 'delete');\n  const canExport = hasPermission('form_submissions', 'export');\n\n  useEffect(() => {\n    loadSubmissions();\n  }, [filters]);\n\n  const loadSubmissions = async () => {\n    try {\n      setLoading(true);\n      // Prepara i filtri per l'API, rimuovendo i valori vuoti\n      const apiFilters: any = {\n        // Filtri fissi per mostrare solo le submissions pubbliche di tipo CONTACT\n        type: 'CONTACT',\n        source: 'public_website'\n      };\n      \n      if (filters.status) {\n        apiFilters.status = filters.status;\n      }\n      if (filters.formTemplateId) apiFilters.formTemplateId = filters.formTemplateId;\n      if (filters.dateFrom) apiFilters.dateFrom = filters.dateFrom;\n      if (filters.dateTo) apiFilters.dateTo = filters.dateTo;\n      \n      const data = await getFormSubmissions(apiFilters);\n      setSubmissions(data.submissions || data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Errore nel caricamento delle submission');\n      console.error('Error loading submissions:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleViewSubmission = async (id: string) => {\n    try {\n      const submission = await getFormSubmission(id);\n      setSelectedSubmission(submission);\n      setViewDialogOpen(true);\n    } catch (err) {\n      setError('Errore nel caricamento della submission');\n      console.error('Error loading submission:', err);\n    }\n  };\n\n  const handleStatusChange = (submission: FormSubmission) => {\n    setSelectedSubmission(submission);\n    setNewStatus(submission.status);\n    setStatusDialogOpen(true);\n  };\n\n  const handleUpdateStatus = async () => {\n    if (!selectedSubmission) return;\n\n    try {\n      await updateSubmissionStatus(selectedSubmission.id, newStatus);\n      setStatusDialogOpen(false);\n      setSelectedSubmission(null);\n      loadSubmissions();\n    } catch (err) {\n      setError('Errore nell\\'aggiornamento dello status');\n      console.error('Error updating status:', err);\n    }\n  };\n\n  const handleDeleteSubmission = async (id: string) => {\n    if (!window.confirm('Sei sicuro di voler eliminare questa submission?')) return;\n\n    try {\n      await deleteSubmission(id);\n      loadSubmissions();\n    } catch (err) {\n      setError('Errore nell\\'eliminazione della submission');\n      console.error('Error deleting submission:', err);\n    }\n  };\n\n  const handleExport = async () => {\n    try {\n      const blob = await exportSubmissions(filters.formTemplateId, 'excel');\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `submissions_${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (err) {\n      setError('Errore nell\\'esportazione');\n      console.error('Error exporting:', err);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'warning';\n      case 'processed': return 'success';\n      case 'archived': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'pending': return 'In Attesa';\n      case 'processed': return 'Elaborata';\n      case 'archived': return 'Archiviata';\n      default: return status;\n    }\n  };\n\n  const groupSubmissionsByTemplate = (submissions: FormSubmission[]): Record<string, FormSubmission[]> => {\n    return submissions.reduce((groups, submission) => {\n      const templateId = submission.formTemplateId || 'unknown';\n      if (!groups[templateId]) {\n        groups[templateId] = [];\n      }\n      groups[templateId].push(submission);\n      return groups;\n    }, {} as Record<string, FormSubmission[]>);\n  };\n\n  // Mostra loading se l'AuthContext sta ancora caricando\n  if (authLoading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-96\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n        <span className=\"ml-2\">Caricamento permessi...</span>\n      </div>\n    );\n  }\n\n  if (!canView) {\n    return (\n      <div className=\"flex justify-center items-center min-h-96\">\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 flex items-center\">\n          <AlertCircle className=\"h-5 w-5 text-red-500 mr-2\" />\n          <span className=\"text-red-700\">Non hai i permessi per visualizzare questa pagina.</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-96\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-end items-center\">\n        {canExport && (\n          <Button\n            variant=\"outline\"\n            onClick={handleExport}\n            className=\"flex items-center gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Esporta\n          </Button>\n        )}\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <AlertCircle className=\"h-5 w-5 text-red-500 mr-2\" />\n            <span className=\"text-red-700\">{error}</span>\n          </div>\n          <button \n            onClick={() => setError(null)}\n            className=\"text-red-500 hover:text-red-700\"\n          >\n            ×\n          </button>\n        </div>\n      )}\n\n      {/* Filtri */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Filter className=\"h-5 w-5 text-gray-600\" />\n          <h2 className=\"text-lg font-semibold text-gray-900\">Filtri</h2>\n        </div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Status\n            </label>\n            <Select\n               value={filters.status}\n               onChange={(e) => setFilters({ ...filters, status: e.target.value as 'pending' | 'processed' | 'archived' | '' })}\n               placeholder=\"Tutti\"\n             >\n               <option value=\"\">Tutti</option>\n               <option value=\"pending\">In Attesa</option>\n               <option value=\"processed\">Elaborata</option>\n               <option value=\"archived\">Archiviata</option>\n             </Select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Data Da\n            </label>\n            <Input\n              type=\"date\"\n              value={filters.dateFrom}\n              onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Data A\n            </label>\n            <Input\n              type=\"date\"\n              value={filters.dateTo}\n              onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n            />\n          </div>\n        </div>\n      </Card>\n\n      {/* Cards Submissions raggruppate per Form Template */}\n      <div className=\"space-y-6\">\n        {Object.entries(groupSubmissionsByTemplate(submissions)).map(([templateId, templateSubmissions]) => {\n          const template = templateSubmissions[0]?.formTemplate;\n          const pendingCount = templateSubmissions.filter(s => s.status === 'pending').length;\n          const processedCount = templateSubmissions.filter(s => s.status === 'processed').length;\n          const archivedCount = templateSubmissions.filter(s => s.status === 'archived').length;\n\n          return (\n            <Card key={templateId} className=\"overflow-hidden\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">\n                      {template?.name || 'Form Template Sconosciuto'}\n                    </h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {template?.description || 'Nessuna descrizione disponibile'}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\">\n                      {templateSubmissions.length} submission{templateSubmissions.length !== 1 ? 's' : ''}\n                    </Badge>\n                    {pendingCount > 0 && (\n                      <Badge variant=\"secondary\">\n                        {pendingCount} in attesa\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\n                  <div className=\"bg-blue-50 p-3 rounded-lg\">\n                    <div className=\"text-sm text-blue-600 font-medium\">In Attesa</div>\n                    <div className=\"text-2xl font-bold text-blue-900\">{pendingCount}</div>\n                  </div>\n                  <div className=\"bg-green-50 p-3 rounded-lg\">\n                    <div className=\"text-sm text-green-600 font-medium\">Elaborate</div>\n                    <div className=\"text-2xl font-bold text-green-900\">{processedCount}</div>\n                  </div>\n                  <div className=\"bg-gray-50 p-3 rounded-lg\">\n                    <div className=\"text-sm text-gray-600 font-medium\">Archiviate</div>\n                    <div className=\"text-2xl font-bold text-gray-900\">{archivedCount}</div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h4 className=\"text-md font-medium text-gray-900\">\n                      Submissions Recenti\n                    </h4>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setSelectedTemplateId(templateId)}\n                    >\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      Vedi Tutte ({templateSubmissions.length})\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    {templateSubmissions.slice(0, 3).map((submission) => (\n                      <div\n                        key={submission.id}\n                        className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-colors\"\n                        onClick={() => handleViewSubmission(submission.id)}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-sm font-medium text-gray-900\">\n                              {submission.data?.email || submission.data?.name || 'Anonimo'}\n                            </span>\n                            <Badge\n                              variant={\n                                submission.status === 'pending' ? 'secondary' :\n                                submission.status === 'processed' ? 'default' :\n                                submission.status === 'archived' ? 'destructive' : 'outline'\n                              }\n                              className=\"text-xs\"\n                            >\n                              {getStatusLabel(submission.status)}\n                            </Badge>\n                          </div>\n                          <div className=\"text-xs text-gray-600 mt-1\">\n                            {new Date(submission.submittedAt).toLocaleString('it-IT')}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          {canEdit && (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleStatusChange(submission);\n                              }}\n                              className=\"p-1 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded transition-colors\"\n                              title=\"Modifica Status\"\n                            >\n                              <Edit className=\"h-3 w-3\" />\n                            </button>\n                          )}\n                          {canDelete && (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleDeleteSubmission(submission.id);\n                              }}\n                              className=\"p-1 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded transition-colors\"\n                              title=\"Elimina\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Modal Visualizzazione Submission */}\n      <Modal\n        isOpen={viewDialogOpen}\n        onClose={() => setViewDialogOpen(false)}\n        title=\"Dettagli Submission\"\n        size=\"lg\"\n      >\n        {selectedSubmission && (\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Form: {selectedSubmission.formTemplate?.name}\n              </h3>\n              <p className=\"text-sm text-gray-600\">\n                Inviato il: {new Date(selectedSubmission.submittedAt).toLocaleString('it-IT')}\n              </p>\n              <div className=\"flex items-center gap-2 mt-2\">\n                <span className=\"text-sm text-gray-600\">Status:</span>\n                <Badge\n                   variant={\n                     selectedSubmission.status === 'pending' ? 'secondary' :\n                     selectedSubmission.status === 'processed' ? 'default' :\n                     selectedSubmission.status === 'archived' ? 'destructive' : 'outline'\n                   }\n                 >\n                  {getStatusLabel(selectedSubmission.status)}\n                </Badge>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-md font-medium text-gray-900 mb-2\">\n                Dati Inviati:\n              </h4>\n              <Card className=\"p-4\">\n                <pre className=\"whitespace-pre-wrap text-sm text-gray-700 overflow-auto max-h-96\">\n                  {JSON.stringify(selectedSubmission.data, null, 2)}\n                </pre>\n              </Card>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button variant=\"outline\" onClick={() => setViewDialogOpen(false)}>\n                Chiudi\n              </Button>\n            </div>\n          </div>\n        )}\n      </Modal>\n\n      {/* Modal Visualizza Tutte le Submissions di un Template */}\n      <Modal\n        isOpen={!!selectedTemplateId}\n        onClose={() => setSelectedTemplateId(null)}\n        title=\"Tutte le Submissions\"\n        size=\"xl\"\n      >\n        {selectedTemplateId && (\n          <div className=\"space-y-4\">\n            {(() => {\n              const templateSubmissions = groupSubmissionsByTemplate(submissions)[selectedTemplateId] || [];\n              const template = templateSubmissions[0]?.formTemplate;\n              \n              return (\n                <div>\n                  <div className=\"mb-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-900\">\n                      {template?.name || 'Form Template Sconosciuto'}\n                    </h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {templateSubmissions.length} submission{templateSubmissions.length !== 1 ? 's' : ''} totali\n                    </p>\n                  </div>\n                  \n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {templateSubmissions.map((submission) => (\n                      <div\n                        key={submission.id}\n                        className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-colors\"\n                        onClick={() => {\n                          setSelectedTemplateId(null);\n                          handleViewSubmission(submission.id);\n                        }}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-sm font-medium text-gray-900\">\n                              {submission.data?.email || submission.data?.name || 'Anonimo'}\n                            </span>\n                            <Badge\n                              variant={\n                                submission.status === 'pending' ? 'secondary' :\n                                submission.status === 'processed' ? 'default' :\n                                submission.status === 'archived' ? 'destructive' : 'outline'\n                              }\n                              className=\"text-xs\"\n                            >\n                              {getStatusLabel(submission.status)}\n                            </Badge>\n                          </div>\n                          <div className=\"text-xs text-gray-600 mt-1\">\n                            {new Date(submission.submittedAt).toLocaleString('it-IT')}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          {canEdit && (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setSelectedTemplateId(null);\n                                handleStatusChange(submission);\n                              }}\n                              className=\"p-1 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded transition-colors\"\n                              title=\"Modifica Status\"\n                            >\n                              <Edit className=\"h-3 w-3\" />\n                            </button>\n                          )}\n                          {canDelete && (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleDeleteSubmission(submission.id);\n                              }}\n                              className=\"p-1 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded transition-colors\"\n                              title=\"Elimina\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"flex justify-end mt-4\">\n                    <Button variant=\"outline\" onClick={() => setSelectedTemplateId(null)}>\n                      Chiudi\n                    </Button>\n                  </div>\n                </div>\n              );\n            })()}\n          </div>\n        )}\n      </Modal>\n\n      {/* Modal Modifica Status */}\n      <Modal\n        isOpen={statusDialogOpen}\n        onClose={() => setStatusDialogOpen(false)}\n        title=\"Modifica Status\"\n      >\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Nuovo Status\n            </label>\n            <Select\n              value={newStatus}\n              onChange={(e) => setNewStatus(e.target.value as 'pending' | 'processed' | 'archived')}\n            >\n              <option value=\"pending\">In Attesa</option>\n              <option value=\"processed\">Elaborata</option>\n              <option value=\"archived\">Archiviata</option>\n            </Select>\n          </div>\n          <div className=\"flex justify-end gap-3\">\n            <Button variant=\"outline\" onClick={() => setStatusDialogOpen(false)}>\n              Annulla\n            </Button>\n            <Button variant=\"primary\" onClick={handleUpdateStatus}>\n              Salva\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default FormSubmissionsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormTemplateCreate.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormTemplateCreate.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1995,1998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1995,1998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9346,9349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9346,9349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft,\n  Plus,\n  Save,\n  Trash2\n} from 'lucide-react';\nimport { Button } from '../../design-system/atoms/Button';\nimport { formTemplatesService } from '../../services/formTemplates';\nimport { useToast } from '../../hooks/useToast';interface FormField {\n  id: string;\n  name: string;\n  type: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'file' | 'date' | 'number';\n  label: string;\n  placeholder?: string;\n  required: boolean;\n  options?: string[];\n}interface FormTemplateData {\n  name: string;\n  description: string;\n  type: 'CONTACT' | 'COURSE_EVALUATION' | 'REGISTRATION' | 'FEEDBACK' | 'CUSTOM';\n  isPublic: boolean;\n  allowAnonymous: boolean;\n  fields: FormField[];\n  successMessage?: string;\n  redirectUrl?: string;\n}\n\nconst initialFormData: FormTemplateData = {\n  name: '',\n  description: '',\n  type: 'CONTACT',\n  isPublic: false,\n  allowAnonymous: false,\n  fields: [],\n  successMessage: 'Grazie per aver inviato il modulo!',\n  redirectUrl: ''\n};\n\nconst fieldTypes = [\n  { value: 'text', label: 'Testo' },\n  { value: 'email', label: 'Email' },\n  { value: 'tel', label: 'Telefono' },\n  { value: 'textarea', label: 'Area di testo' },\n  { value: 'select', label: 'Selezione' },\n  { value: 'checkbox', label: 'Checkbox' },\n  { value: 'radio', label: 'Radio button' }\n];\n\nconst templateTypes = [\n  { value: 'CONTACT', label: 'Contatto' },\n  { value: 'COURSE_EVALUATION', label: 'Valutazione Corso' },\n  { value: 'REGISTRATION', label: 'Registrazione' },\n  { value: 'FEEDBACK', label: 'Feedback' },\n  { value: 'CUSTOM', label: 'Personalizzato' }\n];\n\nconst FormTemplateCreate: React.FC = () => {\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n  const [formData, setFormData] = useState<FormTemplateData>(initialFormData);\n  const [loading, setLoading] = useState(false);\n\n  const handleInputChange = (field: keyof FormTemplateData, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const addField = () => {\n    const newField: FormField = {\n      id: `field_${Date.now()}`,\n      name: `field_${Date.now()}`,\n      type: 'text',\n      label: '',\n      placeholder: '',\n      required: false\n    };\n    setFormData(prev => ({\n      ...prev,\n      fields: [...prev.fields, newField]\n    }));\n  };\n\n  const updateField = (index: number, field: Partial<FormField>) => {\n    setFormData(prev => ({\n      ...prev,\n      fields: prev.fields.map((f, i) => {\n        if (i === index) {\n          const updatedField = { ...f, ...field };\n          // Se il label cambia, aggiorna anche il name\n          if (field.label && field.label !== f.label) {\n            updatedField.name = field.label.toLowerCase().replace(/\\s+/g, '_').replace(/[^a-z0-9_]/g, '');\n          }\n          return updatedField;\n        }\n        return f;\n      })\n    }));\n  };\n\n  const removeField = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      fields: prev.fields.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      showToast({ message: 'Il nome del template è obbligatorio', type: 'error' });\n      return;\n    }\n\n    if (formData.fields.length === 0) {\n      showToast({ message: 'Aggiungi almeno un campo al form', type: 'error' });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await formTemplatesService.createFormTemplate({\n        ...formData\n      });\n      \n      showToast({ message: 'Template creato con successo', type: 'success' });\n      navigate('/forms');\n    } catch (error) {\n      console.error('Errore nella creazione del template:', error);\n      showToast({ message: 'Errore nella creazione del template', type: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => navigate('/forms')}\n          className=\"flex items-center gap-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Torna ai Forms\n        </Button>\n        <h1 className=\"text-3xl font-bold text-gray-900\">\n          Nuovo Form Template\n        </h1>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Informazioni Base */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n            Informazioni Base\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Nome Template *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Es. Form di Contatto\"\n                required\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tipo Template\n              </label>\n              <select\n                value={formData.type}\n                onChange={(e) => handleInputChange('type', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                {templateTypes.map(type => (\n                  <option key={type.value} value={type.value}>\n                    {type.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"mt-4\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Descrizione\n            </label>\n            <textarea\n              value={formData.description}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              rows={3}\n              placeholder=\"Descrizione del template...\"\n            />\n          </div>\n\n          <div className=\"mt-4 flex gap-4\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={formData.isPublic}\n                onChange={(e) => handleInputChange('isPublic', e.target.checked)}\n                className=\"mr-2\"\n              />\n              <span className=\"text-sm text-gray-700\">Form pubblico</span>\n            </label>\n            \n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={formData.allowAnonymous}\n                onChange={(e) => handleInputChange('allowAnonymous', e.target.checked)}\n                className=\"mr-2\"\n              />\n              <span className=\"text-sm text-gray-700\">Consenti invii anonimi</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Campi del Form */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">\n              Campi del Form\n            </h2>\n            <Button\n              type=\"button\"\n              onClick={addField}\n              className=\"flex items-center gap-2\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              Aggiungi Campo\n            </Button>\n          </div>\n\n          {formData.fields.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              Nessun campo aggiunto. Clicca \"Aggiungi Campo\" per iniziare.\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {formData.fields.map((field, index) => (\n                <div key={field.id} className=\"border border-gray-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h3 className=\"font-medium text-gray-900\">Campo {index + 1}</h3>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeField(index)}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Tipo Campo\n                      </label>\n                      <select\n                        value={field.type}\n                        onChange={(e) => updateField(index, { type: e.target.value as any })}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        {fieldTypes.map(type => (\n                          <option key={type.value} value={type.value}>\n                            {type.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Etichetta *\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={field.label}\n                        onChange={(e) => updateField(index, { label: e.target.value })}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"Es. Nome\"\n                        required\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Placeholder\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={field.placeholder || ''}\n                        onChange={(e) => updateField(index, { placeholder: e.target.value })}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"Testo di aiuto...\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-3\">\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={field.required}\n                        onChange={(e) => updateField(index, { required: e.target.checked })}\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm text-gray-700\">Campo obbligatorio</span>\n                    </label>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Configurazioni Avanzate */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n            Configurazioni Avanzate\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Messaggio di Successo\n              </label>\n              <input\n                type=\"text\"\n                value={formData.successMessage || ''}\n                onChange={(e) => handleInputChange('successMessage', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Messaggio mostrato dopo l'invio\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                URL di Redirect\n              </label>\n              <input\n                type=\"url\"\n                value={formData.redirectUrl || ''}\n                onChange={(e) => handleInputChange('redirectUrl', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"https://...\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Azioni */}\n        <div className=\"flex justify-end gap-3\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => navigate('/forms')}\n          >\n            Annulla\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={loading}\n            className=\"flex items-center gap-2\"\n          >\n            <Save className=\"h-4 w-4\" />\n            {loading ? 'Creazione...' : 'Crea Template'}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default FormTemplateCreate;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormTemplateEdit.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormTemplateEdit.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadFormTemplate'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [id, loadFormTemplate]","fix":{"range":[1387,1391],"text":"[id, loadFormTemplate]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6094,6097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6094,6097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":279,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10012,10015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10012,10015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Button } from '../../design-system/atoms/Button';\nimport { formTemplatesService } from '../../services/formTemplates';\nimport { useToast } from '../../hooks/useToast';\n\ninterface FormField {\n  id: string;\n  name: string;\n  type: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'file' | 'date' | 'number';\n  label: string;\n  placeholder?: string;\n  required: boolean;\n  options?: string[];\n}\n\ninterface FormTemplateData {\n  name: string;\n  description: string;\n  type: 'CONTACT' | 'COURSE_EVALUATION' | 'REGISTRATION' | 'FEEDBACK' | 'CUSTOM';\n  isPublic: boolean;\n  allowAnonymous: boolean;\n  fields: FormField[];\n  successMessage?: string;\n  redirectUrl?: string;\n}\n\nconst FormTemplateEdit: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n  const [formData, setFormData] = useState<FormTemplateData>({\n    name: '',\n    description: '',\n    type: 'CUSTOM',\n    isPublic: false,\n    allowAnonymous: false,\n    fields: [],\n    successMessage: '',\n    redirectUrl: ''\n  });\n\n  useEffect(() => {\n    if (id) {\n      loadFormTemplate();\n    }\n  }, [id]);\n\n  const loadFormTemplate = async () => {\n    if (!id) return;\n    \n    try {\n      setInitialLoading(true);\n      const template = await formTemplatesService.getFormTemplate(id);\n      setFormData({\n        name: template.name,\n        description: template.description || '',\n        type: 'CUSTOM', // Assumiamo CUSTOM per ora\n        isPublic: template.isPublic,\n        allowAnonymous: template.allowAnonymous,\n        fields: template.fields,\n        successMessage: template.successMessage || '',\n        redirectUrl: template.redirectUrl || ''\n      });\n    } catch (error) {\n      console.error('Errore nel caricamento del template:', error);\n      showToast({ message: 'Errore nel caricamento del template', type: 'error' });\n      navigate('/forms');\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n\n  const addField = () => {\n    const newField: FormField = {\n      id: `field_${Date.now()}`,\n      name: `field_${Date.now()}`,\n      type: 'text',\n      label: '',\n      placeholder: '',\n      required: false\n    };\n    setFormData(prev => ({\n      ...prev,\n      fields: [...prev.fields, newField]\n    }));\n  };\n\n  const updateField = (index: number, field: Partial<FormField>) => {\n    setFormData(prev => ({\n      ...prev,\n      fields: prev.fields.map((f, i) => {\n        if (i === index) {\n          const updatedField = { ...f, ...field };\n          // Se il label cambia, aggiorna anche il name\n          if (field.label && field.label !== f.label) {\n            updatedField.name = field.label.toLowerCase().replace(/\\s+/g, '_').replace(/[^a-z0-9_]/g, '');\n          }\n          return updatedField;\n        }\n        return f;\n      })\n    }));\n  };\n\n  const removeField = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      fields: prev.fields.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      showToast({ message: 'Il nome del template è obbligatorio', type: 'error' });\n      return;\n    }\n\n    if (formData.fields.length === 0) {\n      showToast({ message: 'Aggiungi almeno un campo al form', type: 'error' });\n      return;\n    }\n\n    if (!id) return;\n\n    setLoading(true);\n    try {\n      await formTemplatesService.updateFormTemplate(id, {\n        ...formData\n      });\n      \n      showToast({ message: 'Template aggiornato con successo', type: 'success' });\n      navigate('/forms');\n    } catch (error) {\n      console.error('Errore nell\\'aggiornamento del template:', error);\n      showToast({ message: 'Errore nell\\'aggiornamento del template', type: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (initialLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Caricamento template...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Modifica Template Form</h1>\n              <Button\n                variant=\"secondary\"\n                onClick={() => navigate('/forms')}\n              >\n                Annulla\n              </Button>\n            </div>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n            {/* Informazioni base */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Nome Template *\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Tipo\n                </label>\n                <select\n                  value={formData.type}\n                  onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value as any }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"CUSTOM\">Personalizzato</option>\n                  <option value=\"CONTACT\">Contatto</option>\n                  <option value=\"COURSE_EVALUATION\">Valutazione Corso</option>\n                  <option value=\"REGISTRATION\">Registrazione</option>\n                  <option value=\"FEEDBACK\">Feedback</option>\n                </select>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Descrizione\n              </label>\n              <textarea\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                rows={3}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n\n            {/* Opzioni */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"isPublic\"\n                  checked={formData.isPublic}\n                  onChange={(e) => setFormData(prev => ({ ...prev, isPublic: e.target.checked }))}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"isPublic\" className=\"ml-2 block text-sm text-gray-900\">\n                  Form pubblico\n                </label>\n              </div>\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"allowAnonymous\"\n                  checked={formData.allowAnonymous}\n                  onChange={(e) => setFormData(prev => ({ ...prev, allowAnonymous: e.target.checked }))}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"allowAnonymous\" className=\"ml-2 block text-sm text-gray-900\">\n                  Consenti invii anonimi\n                </label>\n              </div>\n            </div>\n\n            {/* Campi del form */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Campi del Form</h3>\n                <Button type=\"button\" onClick={addField} variant=\"secondary\">\n                  Aggiungi Campo\n                </Button>\n              </div>\n\n              <div className=\"space-y-4\">\n                {formData.fields.map((field, index) => (\n                  <div key={field.id} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                          Etichetta\n                        </label>\n                        <input\n                          type=\"text\"\n                          value={field.label}\n                          onChange={(e) => updateField(index, { label: e.target.value })}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                          Tipo\n                        </label>\n                        <select\n                          value={field.type}\n                          onChange={(e) => updateField(index, { type: e.target.value as any })}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        >\n                          <option value=\"text\">Testo</option>\n                          <option value=\"email\">Email</option>\n                          <option value=\"tel\">Telefono</option>\n                          <option value=\"textarea\">Area di testo</option>\n                          <option value=\"select\">Selezione</option>\n                          <option value=\"checkbox\">Checkbox</option>\n                          <option value=\"radio\">Radio</option>\n                          <option value=\"file\">File</option>\n                          <option value=\"date\">Data</option>\n                          <option value=\"number\">Numero</option>\n                        </select>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                          Placeholder\n                        </label>\n                        <input\n                          type=\"text\"\n                          value={field.placeholder || ''}\n                          onChange={(e) => updateField(index, { placeholder: e.target.value })}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4 flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <input\n                          type=\"checkbox\"\n                          id={`required-${field.id}`}\n                          checked={field.required}\n                          onChange={(e) => updateField(index, { required: e.target.checked })}\n                          className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                        />\n                        <label htmlFor={`required-${field.id}`} className=\"ml-2 block text-sm text-gray-900\">\n                          Campo obbligatorio\n                        </label>\n                      </div>\n\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        onClick={() => removeField(index)}\n                      >\n                        Rimuovi\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Messaggi e redirect */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Messaggio di successo\n                </label>\n                <textarea\n                  value={formData.successMessage || ''}\n                  onChange={(e) => setFormData(prev => ({ ...prev, successMessage: e.target.value }))}\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Grazie per aver inviato il form!\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  URL di redirect\n                </label>\n                <input\n                  type=\"url\"\n                  value={formData.redirectUrl || ''}\n                  onChange={(e) => setFormData(prev => ({ ...prev, redirectUrl: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"https://example.com/grazie\"\n                />\n              </div>\n            </div>\n\n            {/* Pulsanti */}\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => navigate('/forms')}\n              >\n                Annulla\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={loading}\n              >\n                {loading ? 'Aggiornamento...' : 'Aggiorna Template'}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormTemplateEdit;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormTemplateView.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormTemplateView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadFormTemplate'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [id, loadFormTemplate]","fix":{"range":[1211,1215],"text":"[id, loadFormTemplate]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Button } from '../../design-system/atoms/Button';\nimport { formTemplatesService } from '../../services/formTemplates';\nimport { useToast } from '../../hooks/useToast';\nimport { Eye, Edit, Copy, Trash2 } from 'lucide-react';\n\ninterface FormTemplate {\n  id: string;\n  name: string;\n  description?: string;\n  fields: FormField[];\n  isActive: boolean;\n  isPublic: boolean;\n  allowAnonymous: boolean;\n  successMessage?: string;\n  redirectUrl?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface FormField {\n  id: string;\n  name: string;\n  type: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'file' | 'date' | 'number';\n  label: string;\n  placeholder?: string;\n  required: boolean;\n  options?: string[];\n}\n\nconst FormTemplateView: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [template, setTemplate] = useState<FormTemplate | null>(null);\n\n  useEffect(() => {\n    if (id) {\n      loadFormTemplate();\n    }\n  }, [id]);\n\n  const loadFormTemplate = async () => {\n    if (!id) return;\n    \n    try {\n      setLoading(true);\n      const templateData = await formTemplatesService.getFormTemplate(id);\n      setTemplate(templateData);\n    } catch (error) {\n      console.error('Errore nel caricamento del template:', error);\n      showToast({ message: 'Errore nel caricamento del template', type: 'error' });\n      navigate('/forms');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDuplicate = async () => {\n    if (!template) return;\n    \n    const newName = prompt('Inserisci il nome per il nuovo template:', `${template.name} - Copia`);\n    if (!newName) return;\n\n    try {\n      await formTemplatesService.duplicateFormTemplate(template.id, newName);\n      showToast({ message: 'Template duplicato con successo', type: 'success' });\n      navigate('/forms');\n    } catch (error) {\n      console.error('Errore nella duplicazione del template:', error);\n      showToast({ message: 'Errore nella duplicazione del template', type: 'error' });\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!template) return;\n    \n    if (!confirm(`Sei sicuro di voler eliminare il template \"${template.name}\"?`)) {\n      return;\n    }\n\n    try {\n      await formTemplatesService.deleteFormTemplate(template.id);\n      showToast({ message: 'Template eliminato con successo', type: 'success' });\n      navigate('/forms');\n    } catch (error) {\n      console.error('Errore nell\\'eliminazione del template:', error);\n      showToast({ message: 'Errore nell\\'eliminazione del template', type: 'error' });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Caricamento template...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!template) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600\">Template non trovato</p>\n          <Button onClick={() => navigate('/forms')} className=\"mt-4\">\n            Torna ai Form\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">{template.name}</h1>\n                <div className=\"flex items-center space-x-4 mt-2\">\n                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                    template.isActive \n                      ? 'bg-green-100 text-green-800' \n                      : 'bg-red-100 text-red-800'\n                  }`}>\n                    {template.isActive ? 'Attivo' : 'Inattivo'}\n                  </span>\n                  {template.isPublic && (\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                      Pubblico\n                    </span>\n                  )}\n                  {template.allowAnonymous && (\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n                      Anonimo\n                    </span>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => navigate('/forms')}\n                >\n                  Torna ai Form\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => navigate(`/forms/templates/${template.id}/edit`)}\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Modifica\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleDuplicate}\n                >\n                  <Copy className=\"w-4 h-4 mr-2\" />\n                  Duplica\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleDelete}\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Elimina\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6 space-y-6\">\n            {/* Informazioni generali */}\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Informazioni Generali</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Nome</label>\n                  <p className=\"mt-1 text-sm text-gray-900\">{template.name}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Stato</label>\n                  <p className=\"mt-1 text-sm text-gray-900\">\n                    {template.isActive ? 'Attivo' : 'Inattivo'}\n                  </p>\n                </div>\n                {template.description && (\n                  <div className=\"md:col-span-2\">\n                    <label className=\"block text-sm font-medium text-gray-700\">Descrizione</label>\n                    <p className=\"mt-1 text-sm text-gray-900\">{template.description}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Configurazioni */}\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Configurazioni</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Visibilità</label>\n                  <p className=\"mt-1 text-sm text-gray-900\">\n                    {template.isPublic ? 'Pubblico' : 'Privato'}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Invii Anonimi</label>\n                  <p className=\"mt-1 text-sm text-gray-900\">\n                    {template.allowAnonymous ? 'Consentiti' : 'Non consentiti'}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Numero Campi</label>\n                  <p className=\"mt-1 text-sm text-gray-900\">{template.fields.length}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Campi del form */}\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Campi del Form</h3>\n              <div className=\"space-y-4\">\n                {template.fields.map((field, index) => (\n                  <div key={field.id} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-4\">\n                          <h4 className=\"text-sm font-medium text-gray-900\">{field.label}</h4>\n                          <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800\">\n                            {field.type}\n                          </span>\n                          {field.required && (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-red-100 text-red-800\">\n                              Obbligatorio\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"mt-2 grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n                          <div>\n                            <span className=\"font-medium\">Nome campo:</span> {field.name}\n                          </div>\n                          {field.placeholder && (\n                            <div>\n                              <span className=\"font-medium\">Placeholder:</span> {field.placeholder}\n                            </div>\n                          )}\n                        </div>\n                        {field.options && field.options.length > 0 && (\n                          <div className=\"mt-2\">\n                            <span className=\"text-sm font-medium text-gray-700\">Opzioni:</span>\n                            <div className=\"mt-1 flex flex-wrap gap-2\">\n                              {field.options.map((option, optionIndex) => (\n                                <span\n                                  key={optionIndex}\n                                  className=\"inline-flex items-center px-2 py-1 rounded text-xs bg-blue-100 text-blue-800\"\n                                >\n                                  {option}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        #{index + 1}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Messaggi e redirect */}\n            {(template.successMessage || template.redirectUrl) && (\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Configurazioni Post-Invio</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {template.successMessage && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700\">Messaggio di Successo</label>\n                      <p className=\"mt-1 text-sm text-gray-900 bg-gray-50 p-3 rounded-md\">\n                        {template.successMessage}\n                      </p>\n                    </div>\n                  )}\n                  {template.redirectUrl && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700\">URL di Redirect</label>\n                      <p className=\"mt-1 text-sm text-gray-900\">\n                        <a \n                          href={template.redirectUrl} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-blue-600 hover:text-blue-800 underline\"\n                        >\n                          {template.redirectUrl}\n                        </a>\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Metadati */}\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Metadati</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-gray-600\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Creato il</label>\n                  <p className=\"mt-1\">{new Date(template.createdAt).toLocaleString('it-IT')}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Ultimo aggiornamento</label>\n                  <p className=\"mt-1\">{new Date(template.updatedAt).toLocaleString('it-IT')}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormTemplateView;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormTemplatesPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/FormTemplatesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  AlertCircle,\n  Copy,\n  Edit,\n  Eye,\n  Globe,\n  Lock,\n  Plus,\n  Trash2\n} from 'lucide-react';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Card } from '../../design-system/molecules/Card';\nimport { Badge } from '../../design-system/atoms/Badge';\nimport { Modal } from '../../design-system/molecules/Modal';\nimport { Input } from '../../design-system/atoms/Input';\nimport { cn } from '../../design-system/utils';\nimport { formTemplatesService, FormTemplate } from '../../services/formTemplates';\nimport { useAuth } from '../../context/AuthContext';\n\nexport default function FormTemplatesPage() {\n  const navigate = useNavigate();\n  const [formTemplates, setFormTemplates] = useState<FormTemplate[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [duplicateDialogOpen, setDuplicateDialogOpen] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<FormTemplate | null>(null);\n  const [duplicateName, setDuplicateName] = useState('');\n  \n  const { hasPermission, isLoading: authLoading } = useAuth();\n  const canView = hasPermission('form_templates', 'read');\n  const canEdit = hasPermission('form_templates', 'update');\n  const canDeleteTemplates = hasPermission('form_templates', 'delete');\n  const canCreateTemplates = hasPermission('form_templates', 'create');\n\n  useEffect(() => {\n    loadFormTemplates();\n  }, []);\n\n  const loadFormTemplates = async () => {\n    try {\n      setLoading(true);\n      const templates = await formTemplatesService.getFormTemplates();\n      setFormTemplates(templates);\n    } catch (err) {\n      setError('Errore nel caricamento dei form templates');\n      console.error('Error loading form templates:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!selectedTemplate) return;\n    \n    try {\n      await formTemplatesService.deleteFormTemplate(selectedTemplate.id);\n      setFormTemplates(prev => prev.filter(t => t.id !== selectedTemplate.id));\n      setDeleteDialogOpen(false);\n      setSelectedTemplate(null);\n    } catch (err) {\n      setError('Errore nell\\'eliminazione del form template');\n      console.error('Error deleting form template:', err);\n    }\n  };\n\n  const handleDuplicate = async () => {\n    if (!selectedTemplate || !duplicateName.trim()) return;\n    \n    try {\n      const newTemplate = await formTemplatesService.duplicateFormTemplate(\n        selectedTemplate.id, \n        duplicateName.trim()\n      );\n      setFormTemplates(prev => [...prev, newTemplate]);\n      setDuplicateDialogOpen(false);\n      setSelectedTemplate(null);\n      setDuplicateName('');\n    } catch (err) {\n      setError('Errore nella duplicazione del form template');\n      console.error('Error duplicating form template:', err);\n    }\n  };\n\n  const openDeleteDialog = (template: FormTemplate) => {\n    setSelectedTemplate(template);\n    setDeleteDialogOpen(true);\n  };\n\n  const openDuplicateDialog = (template: FormTemplate) => {\n    setSelectedTemplate(template);\n    setDuplicateName(`${template.name} - Copia`);\n    setDuplicateDialogOpen(true);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('it-IT', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Mostra loading se l'AuthContext sta ancora caricando\n  if (authLoading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-[400px]\">\n        <p className=\"text-gray-600\">Caricamento permessi...</p>\n      </div>\n    );\n  }\n\n  if (!canView) {\n    return (\n      <div className=\"flex justify-center items-center min-h-[400px]\">\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 flex items-center gap-2 text-red-700\">\n          <AlertCircle className=\"h-5 w-5\" />\n          <span>Non hai i permessi per visualizzare questa pagina.</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-[400px]\">\n        <p className=\"text-gray-600\">Caricamento...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with action button */}\n      <div className=\"flex justify-end items-center\">\n        {canCreateTemplates && (\n          <Button\n            variant=\"primary\"\n            leftIcon={<Plus className=\"h-4 w-4\" />}\n            onClick={() => navigate('/forms/templates/create')}\n          >\n            Nuovo Form Template\n          </Button>\n        )}\n      </div>\n\n      {/* Error Alert */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 flex items-center gap-2 text-red-700\">\n          <AlertCircle className=\"h-5 w-5\" />\n          <span>{error}</span>\n          <button \n            onClick={() => setError(null)}\n            className=\"ml-auto text-red-500 hover:text-red-700\"\n          >\n            ×\n          </button>\n        </div>\n      )}\n\n      {/* Main Content */}\n       <Card variant=\"default\" size=\"lg\">\n         <div className=\"overflow-x-auto\">\n           <table className=\"w-full\">\n             <thead className=\"bg-gray-50 border-b border-gray-200\">\n               <tr>\n                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Nome</th>\n                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Descrizione</th>\n                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Tipo</th>\n                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Stato</th>\n                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Campi</th>\n                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Creato</th>\n                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Aggiornato</th>\n                 <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">Azioni</th>\n               </tr>\n             </thead>\n             <tbody className=\"bg-white divide-y divide-gray-200\">\n               {formTemplates.map((template) => (\n                 <tr key={template.id} className=\"hover:bg-gray-50\">\n                   <td className=\"px-6 py-4 whitespace-nowrap\">\n                     <div className=\"flex items-center gap-2\">\n                       <span className=\"text-sm font-medium text-gray-900\">\n                         {template.name}\n                       </span>\n                       {template.isPublic ? (\n                         <div className=\"group relative\">\n                           <Globe className=\"h-4 w-4 text-blue-500\" />\n                           <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                             Form pubblico\n                           </div>\n                         </div>\n                       ) : (\n                         <div className=\"group relative\">\n                           <Lock className=\"h-4 w-4 text-gray-400\" />\n                           <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                             Form privato\n                           </div>\n                         </div>\n                       )}\n                     </div>\n                   </td>\n                   <td className=\"px-6 py-4 whitespace-nowrap\">\n                     <span className=\"text-sm text-gray-600\">\n                       {template.description || '-'}\n                     </span>\n                   </td>\n                   <td className=\"px-6 py-4 whitespace-nowrap\">\n                     <Badge \n                       variant={template.isPublic ? 'default' : 'secondary'}\n                       size=\"sm\"\n                     >\n                       {template.isPublic ? 'Pubblico' : 'Privato'}\n                     </Badge>\n                   </td>\n                   <td className=\"px-6 py-4 whitespace-nowrap\">\n                     <Badge \n                       variant={template.isActive ? 'default' : 'secondary'}\n                       size=\"sm\"\n                     >\n                       {template.isActive ? 'Attivo' : 'Inattivo'}\n                     </Badge>\n                   </td>\n                   <td className=\"px-6 py-4 whitespace-nowrap\">\n                     <span className=\"text-sm text-gray-900\">\n                       {template.fields.length} campi\n                     </span>\n                   </td>\n                   <td className=\"px-6 py-4 whitespace-nowrap\">\n                     <span className=\"text-sm text-gray-600\">\n                       {formatDate(template.createdAt)}\n                     </span>\n                   </td>\n                   <td className=\"px-6 py-4 whitespace-nowrap\">\n                     <span className=\"text-sm text-gray-600\">\n                       {formatDate(template.updatedAt)}\n                     </span>\n                   </td>\n                   <td className=\"px-6 py-4 whitespace-nowrap text-center\">\n                     <div className=\"flex justify-center gap-1\">\n                       <button \n                         className=\"p-1 text-gray-400 hover:text-blue-600 transition-colors group relative\"\n                         onClick={() => navigate(`/forms/templates/${template.id}`)}\n                       >\n                         <Eye className=\"h-4 w-4\" />\n                         <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                           Visualizza\n                         </div>\n                       </button>\n                       {canEdit && (\n                         <button \n                           className=\"p-1 text-gray-400 hover:text-blue-600 transition-colors group relative\"\n                           onClick={() => navigate(`/forms/templates/${template.id}/edit`)}\n                         >\n                           <Edit className=\"h-4 w-4\" />\n                           <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                             Modifica\n                           </div>\n                         </button>\n                       )}\n                       <button \n                         className=\"p-1 text-gray-400 hover:text-blue-600 transition-colors group relative\"\n                         onClick={() => openDuplicateDialog(template)}\n                       >\n                         <Copy className=\"h-4 w-4\" />\n                         <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                           Duplica\n                         </div>\n                       </button>\n                       {canDeleteTemplates && (\n                         <button \n                           className=\"p-1 text-gray-400 hover:text-red-600 transition-colors group relative\"\n                           onClick={() => openDeleteDialog(template)}\n                         >\n                           <Trash2 className=\"h-4 w-4\" />\n                           <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                             Elimina\n                           </div>\n                         </button>\n                       )}\n                     </div>\n                   </td>\n                 </tr>\n               ))}\n               {formTemplates.length === 0 && (\n                 <tr>\n                   <td colSpan={8} className=\"px-6 py-8 text-center\">\n                     <span className=\"text-sm text-gray-500\">\n                       Nessun form template trovato\n                     </span>\n                   </td>\n                 </tr>\n               )}\n             </tbody>\n           </table>\n         </div>\n       </Card>\n\n      {/* Delete Modal */}\n       <Modal\n         isOpen={deleteDialogOpen}\n         onClose={() => setDeleteDialogOpen(false)}\n         title=\"Conferma eliminazione\"\n       >\n         <div className=\"space-y-4\">\n           <p className=\"text-gray-700\">\n             Sei sicuro di voler eliminare il form template \"{selectedTemplate?.name}\"?\n             Questa azione non può essere annullata.\n           </p>\n           <div className=\"flex justify-end gap-3\">\n             <Button \n               variant=\"outline\" \n               onClick={() => setDeleteDialogOpen(false)}\n             >\n               Annulla\n             </Button>\n             <Button \n               variant=\"destructive\" \n               onClick={handleDelete}\n             >\n               Elimina\n             </Button>\n           </div>\n         </div>\n       </Modal>\n\n       {/* Duplicate Modal */}\n       <Modal\n         isOpen={duplicateDialogOpen}\n         onClose={() => setDuplicateDialogOpen(false)}\n         title=\"Duplica Form Template\"\n       >\n         <div className=\"space-y-4\">\n           <div>\n             <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n               Nome del nuovo form template\n             </label>\n             <Input\n               value={duplicateName}\n               onChange={(e) => setDuplicateName(e.target.value)}\n               placeholder=\"Inserisci il nome del nuovo template\"\n               className=\"w-full\"\n             />\n           </div>\n           <div className=\"flex justify-end gap-3\">\n             <Button \n               variant=\"outline\" \n               onClick={() => setDuplicateDialogOpen(false)}\n             >\n               Annulla\n             </Button>\n             <Button \n               variant=\"primary\" \n               onClick={handleDuplicate}\n               disabled={!duplicateName.trim()}\n             >\n               Duplica\n             </Button>\n           </div>\n         </div>\n       </Modal>\n     </div>\n   );\n }","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/UnifiedFormsPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/forms/UnifiedFormsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/persons/PersonsPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/persons/PersonsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'usePersonFilters' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PersonPermissionChecker' is defined but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filter' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6590,6593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6590,6593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":401,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12118,12121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12118,12121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":419,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12684,12687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12684,12687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":435,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13151,13154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13151,13154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":484,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14930,14933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14930,14933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":484,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14960,14963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14960,14963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GDPREntityTemplate } from '../../templates/gdpr-entity-page/GDPREntityTemplate';\nimport { DataTableColumn } from '../../components/shared/tables/DataTable';\nimport { Badge } from '../../design-system';\nimport { \n  Building2,\n  Calendar,\n  Mail,\n  Phone,\n  Plus,\n  Shield,\n  User\n} from 'lucide-react';\nimport { \n  Person, \n  FilterConfig, \n  getRoleDisplayName, \n  getActiveRoles,\n  getHighestRole \n} from '../../services/roleHierarchyService';\nimport { usePersonFilters, useAllPersons, useAllPersonsForImport } from '../../hooks/usePersonFilters';\nimport { useCompanies } from '../../hooks/useCompanies';\nimport { PersonGDPRConfigFactory } from '../../config/personGDPRConfig';\nimport { PersonPermissionChecker } from '../../config/personPermissions';\nimport { PersonImportRefactored as PersonImport } from '../../components/persons/person-import';\nimport { useToast } from '../../hooks/useToast';\nimport { apiPost } from '../../services/api';\n\nexport interface PersonsPageProps {\n  filter?: FilterConfig;\n  filterType?: 'all' | 'employees' | 'trainers' | 'custom';\n  title?: string;\n  subtitle?: string;\n}\n\n/**\n * Pagina unificata per la gestione delle persone\n * Utilizza il template GDPR e supporta filtri gerarchici per employees/trainers\n */\nexport const PersonsPage: React.FC<PersonsPageProps> = ({\n  filter,\n  filterType = 'all',\n  title,\n  subtitle\n}) => {\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n  \n  // Stati per il modal di importazione\n  const [showImportModal, setShowImportModal] = useState(false);\n  \n  // Hook per recuperare dati esistenti per l'importazione (inclusi soft-deleted)\n  const { filteredPersons: existingPersonsForImport, refetch: refetchPersonsForImport } = useAllPersonsForImport();\n  const { filteredPersons: existingPersons, refetch: refetchPersons } = useAllPersons();\n  const { companies: existingCompanies, refresh: refreshCompanies } = useCompanies();\n\n  // Debug logging per capire cosa restituisce useAllPersonsForImport\n  console.log('🔍 PersonsPage - existingPersonsForImport:', existingPersonsForImport?.length || 0, 'elementi');\n  console.log('🔍 PersonsPage - existingPersons:', existingPersons?.length || 0, 'elementi');\n  console.log('🔍 PersonsPage - existingCompanies:', existingCompanies?.length || 0, 'elementi');\n\n  // Determina il titolo e sottotitolo in base al tipo di filtro\n  const pageTitle = title || (() => {\n    switch (filterType) {\n      case 'employees': return 'Dipendenti';\n      case 'trainers': return 'Formatori';\n      default: return 'Persone';\n    }\n  })();\n\n  const pageSubtitle = subtitle || (() => {\n    switch (filterType) {\n      case 'employees': return 'Gestione dipendenti aziendali';\n      case 'trainers': return 'Gestione formatori e coordinatori';\n      default: return 'Gestione persone del sistema';\n    }\n  })();\n\n  // Configurazione colonne per la tabella\n  const getPersonsColumns = (): DataTableColumn<Person>[] => [\n    {\n      key: 'fullName',\n      label: 'Nome Completo',\n      sortable: true,\n      renderCell: (person) => (\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-shrink-0\">\n            <div className=\"h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center\">\n              <User className=\"h-4 w-4 text-gray-500\" />\n            </div>\n          </div>\n          <div>\n            <div className=\"text-sm font-medium text-gray-900\">\n              {`${person.firstName} ${person.lastName}`}\n            </div>\n            <div className=\"text-sm text-gray-500\">{person.email}</div>\n          </div>\n        </div>\n      )\n    },\n    {\n      key: 'email',\n      label: 'Email',\n      sortable: true,\n      renderCell: (person) => (\n        <a \n          href={`mailto:${person.email}`} \n          className=\"text-blue-600 hover:text-blue-800 flex items-center space-x-1\"\n        >\n          <Mail className=\"h-4 w-4\" />\n          <span>{person.email}</span>\n        </a>\n      )\n    },\n    {\n      key: 'phone',\n      label: 'Telefono',\n      sortable: true,\n      renderCell: (person) => person.phone ? (\n        <div className=\"flex items-center space-x-1\">\n          <Phone className=\"h-4 w-4 text-gray-400\" />\n          <span>{person.phone}</span>\n        </div>\n      ) : (\n        <span className=\"text-gray-400\">N/A</span>\n      )\n    },\n    {\n      key: 'title',\n      label: 'Profilo Professionale',\n      sortable: true,\n      renderCell: (person) => (\n        <span className=\"text-gray-900\">\n          {person.title || 'N/A'}\n        </span>\n      )\n    },\n    {\n      key: 'roles',\n      label: 'Ruoli',\n      sortable: false,\n      renderCell: (person) => {\n        const activeRoles = getActiveRoles(person);\n        const highestRole = getHighestRole(person);\n        \n        return (\n          <div className=\"flex flex-wrap gap-1\">\n            {activeRoles.length > 0 ? (\n              activeRoles.map(role => (\n                <Badge \n                  key={role.id} \n                  variant={role.id === highestRole?.id ? \"default\" : \"outline\"}\n                  className=\"text-xs\"\n                >\n                  {getRoleDisplayName(role.roleType)}\n                </Badge>\n              ))\n            ) : (\n              <span className=\"text-gray-400 text-sm\">Nessun ruolo</span>\n            )}\n          </div>\n        );\n      }\n    },\n    {\n      key: 'company',\n      label: 'Azienda',\n      sortable: true,\n      renderCell: (person) => person.company ? (\n        <div className=\"flex items-center space-x-1\">\n          <Building2 className=\"h-4 w-4 text-gray-400\" />\n          <span>{person.company.ragioneSociale}</span>\n        </div>\n      ) : (\n        <span className=\"text-gray-400\">N/A</span>\n      )\n    },\n    {\n      key: 'status',\n      label: 'Stato',\n      sortable: true,\n      renderCell: (person) => {\n        const getStatusVariant = (status: string) => {\n          switch (status) {\n            case 'Active': return 'default';\n            case 'Inactive': return 'secondary';\n            case 'Pending': return 'outline';\n            default: return 'secondary';\n          }\n        };\n\n        const getStatusLabel = (status: string) => {\n          switch (status) {\n            case 'Active': return 'Attivo';\n            case 'Inactive': return 'Inattivo';\n            case 'Pending': return 'In attesa';\n            default: return status;\n          }\n        };\n\n        return (\n          <Badge variant={getStatusVariant(person.status) as any}>\n            {getStatusLabel(person.status)}\n          </Badge>\n        );\n      }\n    },\n    {\n      key: 'createdAt',\n      label: 'Creato il',\n      sortable: true,\n      renderCell: (person) => (\n        <div className=\"flex items-center space-x-1\">\n          <Calendar className=\"h-4 w-4 text-gray-400\" />\n          <span>{new Date(person.createdAt).toLocaleDateString('it-IT')}</span>\n        </div>\n      )\n    }\n  ];\n\n  // Configurazione filtri\n  const filterOptions = useMemo(() => {\n    const options = [\n      {\n        key: 'status',\n        label: 'Stato',\n        options: [\n          { label: 'Attivo', value: 'Active' },\n          { label: 'Inattivo', value: 'Inactive' },\n          { label: 'In attesa', value: 'Pending' }\n        ]\n      }\n    ];\n\n    // Aggiungi filtri specifici per tipo\n    if (filterType === 'employees') {\n      options.push({\n        key: 'roleType',\n        label: 'Ruolo Dipendente',\n        options: [\n          { label: 'Responsabile Aziendale', value: 'COMPANY_ADMIN' },\n          { label: 'Manager HR', value: 'HR_MANAGER' },\n          { label: 'Manager', value: 'MANAGER' },\n          { label: 'Dipendente', value: 'EMPLOYEE' }\n        ]\n      });\n    } else if (filterType === 'trainers') {\n      options.push({\n        key: 'roleType',\n        label: 'Ruolo Formatore',\n        options: [\n          { label: 'Coordinatore Formatori', value: 'TRAINER_COORDINATOR' },\n          { label: 'Formatore Senior', value: 'SENIOR_TRAINER' },\n          { label: 'Formatore', value: 'TRAINER' },\n          { label: 'Formatore Esterno', value: 'EXTERNAL_TRAINER' }\n        ]\n      });\n    }\n\n    return options;\n  }, [filterType]);\n\n  // Configurazione card per vista griglia\n  const cardConfig = {\n    titleField: 'firstName' as keyof Person,\n    subtitleField: 'email' as keyof Person,\n    title: (person: Person) => `${person.firstName} ${person.lastName}`,\n    subtitle: (person: Person) => person.email,\n    badge: (person: Person) => {\n      const highestRole = getHighestRole(person);\n      return {\n        text: highestRole ? getRoleDisplayName(highestRole.roleType) : 'Nessun ruolo',\n        variant: 'outline' as const\n      };\n    },\n    icon: () => <User className=\"h-5 w-5\" />,\n    fields: [\n      {\n        label: 'Telefono',\n        value: (person: Person) => person.phone || 'N/A',\n        icon: <Phone className=\"h-4 w-4\" />\n      },\n      {\n        label: 'Azienda',\n        value: (person: Person) => person.company?.ragioneSociale || 'N/A',\n        icon: <Building2 className=\"h-4 w-4\" />\n      },\n      {\n        label: 'Stato',\n        value: (person: Person) => {\n          switch (person.status) {\n            case 'Active': return 'Attivo';\n            case 'Inactive': return 'Inattivo';\n            case 'Pending': return 'In attesa';\n            default: return person.status;\n          }\n        },\n        icon: <Shield className=\"h-4 w-4\" />\n      }\n    ]\n  };\n\n  // Headers CSV senza caratteri accentati per evitare errori di importazione\n  const csvHeaders = {\n    firstName: 'Nome',\n    lastName: 'Cognome',\n    email: 'Email',\n    phone: 'Telefono',\n    taxCode: 'Codice Fiscale',\n    birthDate: 'Data Nascita',\n    address: 'Indirizzo',\n    city: 'Citta',\n    province: 'Provincia',\n    postalCode: 'CAP',\n    roleType: 'Ruolo',\n    companyName: 'Azienda',\n    username: 'Username',\n    notes: 'Note',\n    status: 'Stato',\n    createdAt: 'Data Creazione',\n    // Campi aggiuntivi per compatibilita con PersonImport\n    title: 'Profilo Professionale',\n    hiredDate: 'Data Assunzione'\n  };\n\n  // Template CSV con dati di esempio - COMPLETO CON TUTTI I CAMPI\n  const csvTemplateData = [\n    {\n      firstName: 'Mario',\n      lastName: 'Rossi',\n      email: 'mario.rossi@esempio.com',\n      phone: '+39 123 456 7890',\n      taxCode: 'RSSMRA85M01H501Z',\n      birthDate: '1985-08-01',\n      address: 'Via Roma 123',\n      city: 'Milano',\n      province: 'MI',\n      postalCode: '20100',\n      roleType: 'EMPLOYEE',\n      companyName: 'Esempio Azienda S.r.l.',\n      username: 'mario.rossi',\n      notes: 'Dipendente esempio',\n      status: 'ACTIVE',\n      createdAt: '2024-01-01',\n      title: 'Sviluppatore Software',\n      hiredDate: '2024-01-15'\n    },\n    {\n      firstName: 'Anna',\n      lastName: 'Bianchi',\n      email: 'anna.bianchi@esempio.com',\n      phone: '+39 321 654 9870',\n      taxCode: 'BNCNNA90F41H501W',\n      birthDate: '1990-06-01',\n      address: 'Via Milano 456',\n      city: 'Roma',\n      province: 'RM',\n      postalCode: '00100',\n      roleType: 'TRAINER',\n      companyName: 'Formazione Plus S.r.l.',\n      username: 'anna.bianchi',\n      notes: 'Formatrice esperta',\n      status: 'ACTIVE',\n      createdAt: '2024-01-02',\n      title: 'Senior Trainer',\n      hiredDate: '2024-02-01'\n    }\n  ];\n\n  // Handlers\n  const handleCreatePerson = () => {\n    switch (filterType) {\n      case 'employees':\n        navigate('/employees/create');\n        break;\n      case 'trainers':\n        navigate('/trainers/create');\n        break;\n      default:\n        navigate('/persons/create');\n        break;\n    }\n  };\n\n  const handleEditPerson = (person: Person) => {\n    switch (filterType) {\n      case 'employees':\n        navigate(`/employees/${person.id}/edit`);\n        break;\n      case 'trainers':\n        navigate(`/trainers/${person.id}/edit`);\n        break;\n      default:\n        navigate(`/persons/${person.id}/edit`);\n        break;\n    }\n  };\n\n  // Gestione importazione persone\n  const handleImportEntities = async (data: any[]) => {\n    // Se viene chiamata dal template con dati, processa direttamente\n    if (data && data.length > 0) {\n      return handleImportPersons(data);\n    }\n    \n    // Prima di aprire il modal, aggiorna i dati esistenti (inclusi soft-deleted per importazione)\n    try {\n      await refetchPersonsForImport();\n      await refetchPersons();\n    } catch (error) {\n      console.error('Errore durante l\\'aggiornamento dei dati:', error);\n    }\n    \n    // Altrimenti apri il modal\n    setShowImportModal(true);\n  };\n\n  const handleImportPersons = async (persons: any[], overwriteIds?: string[]) => {\n    try {\n      const response = await apiPost('/api/v1/persons/import', {\n        persons,\n        overwriteIds\n      });\n\n      showToast({\n        type: 'success',\n        message: `Importazione completata: ${response.imported} persone importate con successo`\n      });\n\n      setShowImportModal(false);\n      \n      // Aggiorna i dati delle persone senza ricaricare la pagina\n      await refetchPersons();\n    } catch (error: any) {\n      console.error('Errore durante l\\'importazione:', error);\n      showToast({\n        type: 'error',\n        message: error.message || 'Errore durante l\\'importazione delle persone'\n      });\n    }\n  };\n\n  // Configurazione GDPR dinamica\n  const gdprConfig = useMemo(() => {\n    // Gestisce il caso 'custom' mappandolo a 'all'\n    const mappedFilterType = filterType === 'custom' ? 'all' : filterType;\n    return PersonGDPRConfigFactory.getConfigByFilterType(mappedFilterType);\n  }, [filterType]);\n\n  // Permessi dinamici basati sul tipo di filtro\n  const permissions = useMemo(() => {\n    const mappedFilterType = filterType === 'custom' ? 'all' : filterType;\n    const config = PersonGDPRConfigFactory.getConfigByFilterType(mappedFilterType);\n    return config.permissions;\n  }, [filterType]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header personalizzato */}\n      <div className=\"border-b border-gray-200 pb-4\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">{pageTitle}</h1>\n        <p className=\"text-gray-600 mt-1\">{pageSubtitle}</p>\n        \n        {/* Indicatore livello GDPR */}\n        <div className=\"mt-2\">\n          <Badge \n            variant={gdprConfig.gdprLevel === 'comprehensive' ? 'default' : 'outline'}\n            className=\"text-xs\"\n          >\n            GDPR: {gdprConfig.gdprLevel === 'comprehensive' ? 'Completo' : 'Standard'}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Template GDPR */}\n      <GDPREntityTemplate<Person>\n        entityName={gdprConfig.entityType}\n        entityNamePlural=\"persons\"\n        entityDisplayName={gdprConfig.displayName}\n        entityDisplayNamePlural={gdprConfig.displayName}\n        \n        readPermission={permissions.read}\n        writePermission={(permissions as any).write || (permissions as any).create}\n        deletePermission={permissions.delete}\n        exportPermission={permissions.export}\n        \n        apiEndpoint=\"/api/v1/persons\"\n        \n        columns={getPersonsColumns()}\n        searchFields={['firstName', 'lastName', 'email']}\n        filterOptions={filterOptions}\n        \n        csvHeaders={csvHeaders}\n        csvTemplateData={csvTemplateData}\n        \n        onCreateEntity={handleCreatePerson}\n        onEditEntity={handleEditPerson}\n        onImportEntities={handleImportEntities}\n        \n        cardConfig={cardConfig}\n        \n        enableBatchOperations={gdprConfig.gdprLevel === 'comprehensive'}\n        enableImportExport={true}\n        enableColumnSelector={true}\n        enableAdvancedFilters={true}\n        defaultViewMode=\"table\"\n      />\n\n      {/* Modal di importazione */}\n      {showImportModal && (\n        <PersonImport\n          onImport={handleImportPersons}\n          onClose={() => setShowImportModal(false)}\n          existingPersons={existingPersonsForImport || []}\n          existingCompanies={existingCompanies || []}\n          onRefreshData={async () => {\n            await refetchPersonsForImport();\n            await refetchPersons();\n            await refreshCompanies();\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PersonsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/CareersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/ContactsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/CookiePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/CourseDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'slug' is assigned a value but never used.","line":28,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { PublicLayout } from '../../components/public/PublicLayout';\nimport { PublicButton } from '../../components/public/PublicButton';\n\ninterface Course {\n  id: string;\n  title: string;\n  shortDescription: string;\n  fullDescription: string;\n  category: string;\n  subcategory?: string;\n  riskLevel: 'ALTO' | 'MEDIO' | 'BASSO' | 'A' | 'B' | 'C';\n  courseType: 'PRIMO_CORSO' | 'AGGIORNAMENTO';\n  duration: number;\n  maxParticipants: number;\n  image1Url?: string;\n  image2Url?: string;\n  slug: string;\n  price?: number;\n  certification: string;\n  program: string[];\n  requirements: string[];\n  objectives: string[];\n}\n\nconst CourseDetailPage: React.FC = () => {\n  const { slug } = useParams<{ slug: string }>();\n  const [requestForm, setRequestForm] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    message: '',\n    requestType: 'info'\n  });\n\n  // Mock data - in produzione verrebbe caricato dal backend\n  const course: Course = {\n    id: '1',\n    title: 'Sicurezza Generale per Lavoratori - Rischio Basso',\n    shortDescription: 'Corso base sulla sicurezza sul lavoro per tutti i settori',\n    fullDescription: 'Corso completo di formazione generale e specifica per lavoratori operanti in settori a rischio basso secondo il D.Lgs. 81/08. Il corso fornisce le competenze necessarie per identificare, valutare e gestire i rischi presenti negli ambienti di lavoro, promuovendo una cultura della sicurezza e della prevenzione.',\n    category: 'Sicurezza Generale',\n    subcategory: 'Formazione Base',\n    riskLevel: 'BASSO',\n    courseType: 'PRIMO_CORSO',\n    duration: 8,\n    maxParticipants: 20,\n    slug: 'sicurezza-generale-lavoratori-basso',\n    price: 120,\n    certification: 'Attestato di frequenza riconosciuto secondo D.Lgs. 81/08',\n    program: [\n      'Concetti di rischio, danno, prevenzione, protezione',\n      'Organizzazione della prevenzione aziendale',\n      'Diritti, doveri e sanzioni per i vari soggetti aziendali',\n      'Organi di vigilanza, controllo e assistenza',\n      'Rischi infortuni, meccanici generali, elettrici generali',\n      'Macchine e attrezzature, cadute dall\\'alto',\n      'Rischi da esplosione, rischi chimici, nebbie, oli, fumi, vapori, polveri',\n      'Etichettatura, rischi cancerogeni, biologici, fisici',\n      'Rumore, vibrazione, radiazioni, microclima e illuminazione',\n      'Videoterminali, DPI, organizzazione del lavoro',\n      'Ambienti di lavoro, stress lavoro-correlato',\n      'Movimentazione manuale carichi, movimentazione merci',\n      'Segnaletica, emergenze, procedure di sicurezza',\n      'Procedure organizzative per il primo soccorso',\n      'Incidenti e infortuni mancati'\n    ],\n    requirements: [\n      'Nessun requisito specifico',\n      'Conoscenza base della lingua italiana',\n      'Maggiore età'\n    ],\n    objectives: [\n      'Acquisire conoscenze sui concetti di base della sicurezza sul lavoro',\n      'Identificare i principali rischi presenti negli ambienti di lavoro',\n      'Comprendere i diritti e doveri dei lavoratori in materia di sicurezza',\n      'Apprendere le procedure di emergenza e primo soccorso',\n      'Sviluppare una cultura della prevenzione e della sicurezza'\n    ]\n  };\n\n  const getRiskLevelLabel = (riskLevel: string) => {\n    const levels = {\n      'ALTO': 'Rischio Alto',\n      'MEDIO': 'Rischio Medio', \n      'BASSO': 'Rischio Basso',\n      'A': 'Rischio A',\n      'B': 'Rischio B',\n      'C': 'Rischio C'\n    };\n    return levels[riskLevel as keyof typeof levels] || riskLevel;\n  };\n\n  const getCourseTypeLabel = (courseType: string) => {\n    return courseType === 'PRIMO_CORSO' ? 'Primo Corso' : 'Aggiornamento';\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setRequestForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implementare invio richiesta\n    console.log('Request data:', requestForm);\n    alert('Richiesta inviata con successo! Ti contatteremo presto.');\n  };\n\n  return (\n    <PublicLayout>\n      {/* Breadcrumb */}\n      <section className=\"bg-gray-50 py-4\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <nav className=\"flex\" aria-label=\"Breadcrumb\">\n            <ol className=\"flex items-center space-x-4\">\n              <li>\n                <Link to=\"/\" className=\"text-gray-500 hover:text-gray-700\">\n                  Home\n                </Link>\n              </li>\n              <li>\n                <svg className=\"flex-shrink-0 h-5 w-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n              </li>\n              <li>\n                <Link to=\"/corsi\" className=\"text-gray-500 hover:text-gray-700\">\n                  Corsi\n                </Link>\n              </li>\n              <li>\n                <svg className=\"flex-shrink-0 h-5 w-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n              </li>\n              <li className=\"text-gray-900 font-medium\">\n                {course.title}\n              </li>\n            </ol>\n          </nav>\n        </div>\n      </section>\n\n      {/* Course Header */}\n      <section className=\"py-12 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Course Image */}\n            <div>\n              <div className=\"aspect-w-16 aspect-h-9 rounded-2xl overflow-hidden bg-gray-200\">\n                {course.image1Url ? (\n                  <img\n                    src={course.image1Url}\n                    alt={course.title}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"flex items-center justify-center h-96\">\n                    <svg className=\"w-24 h-24 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253\" />\n                    </svg>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Course Info */}\n            <div>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-600 text-white\">\n                  {course.category}\n                </span>\n                <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-600 text-white\">\n                  {getRiskLevelLabel(course.riskLevel)}\n                </span>\n                <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-600 text-white\">\n                  {getCourseTypeLabel(course.courseType)}\n                </span>\n              </div>\n\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n                {course.title}\n              </h1>\n\n              <p className=\"text-xl text-gray-600 mb-6\">\n                {course.shortDescription}\n              </p>\n\n              <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"flex items-center\">\n                    <svg className=\"w-5 h-5 text-primary-600 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    <span className=\"text-sm text-gray-600\">Durata</span>\n                  </div>\n                  <p className=\"text-lg font-semibold text-gray-900\">{course.duration} ore</p>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"flex items-center\">\n                    <svg className=\"w-5 h-5 text-primary-600 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                    </svg>\n                    <span className=\"text-sm text-gray-600\">Max Partecipanti</span>\n                  </div>\n                  <p className=\"text-lg font-semibold text-gray-900\">{course.maxParticipants}</p>\n                </div>\n              </div>\n\n              {course.price && (\n                <div className=\"bg-primary-50 rounded-lg p-4 mb-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-medium text-gray-900\">Prezzo per partecipante</span>\n                    <span className=\"text-2xl font-bold text-primary-600\">€{course.price}</span>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mt-1\">IVA esclusa</p>\n                </div>\n              )}\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <PublicButton size=\"lg\" className=\"flex-1\">\n                  Richiedi Informazioni\n                </PublicButton>\n                <PublicButton variant=\"outline\" size=\"lg\" className=\"flex-1\">\n                  Scarica Programma\n                </PublicButton>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Course Details */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            \n            {/* Main Content */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              \n              {/* Description */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Descrizione del Corso</h2>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  {course.fullDescription}\n                </p>\n              </div>\n\n              {/* Objectives */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Obiettivi Formativi</h2>\n                <ul className=\"space-y-3\">\n                  {course.objectives.map((objective, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <svg className=\"w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                      <span className=\"text-gray-600\">{objective}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              {/* Program */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Programma del Corso</h2>\n                <div className=\"space-y-3\">\n                  {course.program.map((item, index) => (\n                    <div key={index} className=\"flex items-start\">\n                      <span className=\"inline-flex items-center justify-center w-6 h-6 bg-primary-600 text-white text-sm font-medium rounded-full mr-3 mt-0.5 flex-shrink-0\">\n                        {index + 1}\n                      </span>\n                      <span className=\"text-gray-600\">{item}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Requirements */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Requisiti di Accesso</h2>\n                <ul className=\"space-y-3\">\n                  {course.requirements.map((requirement, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <svg className=\"w-5 h-5 text-primary-500 mr-3 mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                      <span className=\"text-gray-600\">{requirement}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              {/* Certification */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Certificazione</h2>\n                <div className=\"flex items-start\">\n                  <svg className=\"w-8 h-8 text-yellow-500 mr-4 mt-1 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Attestato di Frequenza</h3>\n                    <p className=\"text-gray-600\">{course.certification}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              \n              {/* Request Form */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Richiedi Informazioni</h3>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"requestType\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Tipo di Richiesta\n                    </label>\n                    <select\n                      id=\"requestType\"\n                      name=\"requestType\"\n                      value={requestForm.requestType}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                    >\n                      <option value=\"info\">Informazioni generali</option>\n                      <option value=\"quote\">Richiesta preventivo</option>\n                      <option value=\"schedule\">Date disponibili</option>\n                      <option value=\"custom\">Corso personalizzato</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Nome e Cognome *\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      required\n                      value={requestForm.name}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"Il tuo nome\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Email *\n                    </label>\n                    <input\n                      type=\"email\"\n                      id=\"email\"\n                      name=\"email\"\n                      required\n                      value={requestForm.email}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"la-tua-email@esempio.com\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Telefono\n                    </label>\n                    <input\n                      type=\"tel\"\n                      id=\"phone\"\n                      name=\"phone\"\n                      value={requestForm.phone}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"+39 123 456 7890\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"company\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Azienda\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"company\"\n                      name=\"company\"\n                      value={requestForm.company}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"Nome azienda\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Messaggio\n                    </label>\n                    <textarea\n                      id=\"message\"\n                      name=\"message\"\n                      rows={3}\n                      value={requestForm.message}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"Descrivi la tua richiesta...\"\n                    />\n                  </div>\n\n                  <PublicButton type=\"submit\" size=\"sm\" className=\"w-full\">\n                    Invia Richiesta\n                  </PublicButton>\n                </form>\n              </div>\n\n              {/* Contact Info */}\n              <div className=\"bg-primary-50 rounded-2xl p-6\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Hai bisogno di aiuto?</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center\">\n                    <svg className=\"w-5 h-5 text-primary-600 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n                    </svg>\n                    <span className=\"text-sm text-gray-700\">+39 02 1234 5678</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <svg className=\"w-5 h-5 text-primary-600 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                    </svg>\n                    <span className=\"text-sm text-gray-700\">corsi@elementformazione.it</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </PublicLayout>\n  );\n};\n\nexport default CourseDetailPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/CoursesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ToggleLeft' is defined but never used.","line":2,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ToggleRight' is defined but never used.","line":2,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":62}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Search, Filter, ChevronDown, ToggleLeft, ToggleRight } from 'lucide-react';\nimport { PublicLayout } from '../../components/public/PublicLayout';\nimport { PublicButton } from '../../components/public/PublicButton';\nimport { CourseCard } from '../../components/public/CourseCard';\nimport { GroupedCourseCard } from '../../components/public/GroupedCourseCard';\nimport { GroupedCoursesService } from '../../services/groupedCourses';\n\ninterface Course {\n  id: string;\n  title: string;\n  shortDescription: string;\n  category: string;\n  subcategory?: string;\n  riskLevel: 'ALTO' | 'MEDIO' | 'BASSO' | 'A' | 'B' | 'C';\n  courseType: 'PRIMO_CORSO' | 'AGGIORNAMENTO';\n  duration: number;\n  maxParticipants: number;\n  image1Url?: string;\n  slug: string;\n}\n\ninterface GroupedCourse {\n  title: string;\n  category: string;\n  variants: Course[];\n  mainCourse: Course;\n}\n\n/**\n * Pagina pubblica dei corsi di formazione\n * Con filtri per categoria, tipo di rischio e ricerca\n */\nexport const CoursesPage: React.FC = () => {\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [groupedCourses, setGroupedCourses] = useState<GroupedCourse[]>([]);\n  const [filteredCourses, setFilteredCourses] = useState<Course[]>([]);\n  const [filteredGroupedCourses, setFilteredGroupedCourses] = useState<GroupedCourse[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedRiskLevel, setSelectedRiskLevel] = useState('');\n  const [selectedCourseType, setSelectedCourseType] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [isGroupedView, setIsGroupedView] = useState(true); // Default: vista raggruppata\n\n  const categories = [\n    'Sicurezza Generale',\n    'Antincendio',\n    'Primo Soccorso',\n    'Lavori in Quota',\n    'Spazi Confinati',\n    'Movimentazione Manuale',\n    'Videoterminali'\n  ];\n\n  const riskLevels = [\n    { value: 'ALTO', label: 'Rischio Alto' },\n    { value: 'MEDIO', label: 'Rischio Medio' },\n    { value: 'BASSO', label: 'Rischio Basso' },\n    { value: 'A', label: 'Categoria A' },\n    { value: 'B', label: 'Categoria B' },\n    { value: 'C', label: 'Categoria C' }\n  ];\n\n  const courseTypes = [\n    { value: 'PRIMO_CORSO', label: 'Primo Corso' },\n    { value: 'AGGIORNAMENTO', label: 'Aggiornamento' }\n  ];\n\n  // Carica i corsi al mount del componente\n  useEffect(() => {\n    const loadCourses = async () => {\n      try {\n        setLoading(true);\n        \n        // Carica i corsi raggruppati\n        const grouped = await GroupedCoursesService.getGroupedCourses();\n        setGroupedCourses(grouped);\n        setFilteredGroupedCourses(grouped);\n        \n        // Estrae tutti i corsi individuali per la vista non raggruppata\n        const allCourses = grouped.flatMap(group => group.variants);\n        setCourses(allCourses);\n        setFilteredCourses(allCourses);\n        \n      } catch (error) {\n        console.error('Error loading courses:', error);\n        \n        // Fallback con dati mock in caso di errore\n        const mockCourses: Course[] = [\n          {\n            id: '1',\n            title: 'Sicurezza Generale Lavoratori',\n            shortDescription: 'Corso base sulla sicurezza sul lavoro per tutti i settori',\n            category: 'Sicurezza Generale',\n            riskLevel: 'BASSO',\n            courseType: 'PRIMO_CORSO',\n            duration: 4,\n            maxParticipants: 20,\n            slug: 'sicurezza-generale-lavoratori-basso'\n          },\n          {\n            id: '2',\n            title: 'Sicurezza Generale Lavoratori',\n            shortDescription: 'Corso sulla sicurezza sul lavoro per settori a rischio medio',\n            category: 'Sicurezza Generale',\n            riskLevel: 'MEDIO',\n            courseType: 'PRIMO_CORSO',\n            duration: 8,\n            maxParticipants: 20,\n            slug: 'sicurezza-generale-lavoratori-medio'\n          },\n          {\n            id: '3',\n            title: 'Primo Soccorso',\n            shortDescription: 'Corso di primo soccorso aziendale',\n            category: 'Primo Soccorso',\n            riskLevel: 'BASSO',\n            courseType: 'PRIMO_CORSO',\n            duration: 12,\n            maxParticipants: 15,\n            slug: 'primo-soccorso-basso'\n          }\n        ];\n        \n        setCourses(mockCourses);\n        setFilteredCourses(mockCourses);\n        \n        // Raggruppa i dati mock\n        const mockGrouped = GroupedCoursesService.groupCoursesByTitle(mockCourses);\n        setGroupedCourses(mockGrouped);\n        setFilteredGroupedCourses(mockGrouped);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadCourses();\n  }, []);\n\n  // Filtro dei corsi\n  useEffect(() => {\n    if (isGroupedView) {\n      // Filtro per vista raggruppata\n      const filtered = GroupedCoursesService.filterGroupedCourses(groupedCourses, {\n        searchTerm,\n        category: selectedCategory,\n        riskLevel: selectedRiskLevel,\n        courseType: selectedCourseType\n      });\n      setFilteredGroupedCourses(filtered);\n    } else {\n      // Filtro per vista individuale\n      let filtered = courses;\n\n      // Filtro per termine di ricerca\n      if (searchTerm) {\n        filtered = filtered.filter(course =>\n          course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          course.shortDescription.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          course.category.toLowerCase().includes(searchTerm.toLowerCase())\n        );\n      }\n\n      // Filtro per categoria\n      if (selectedCategory) {\n        filtered = filtered.filter(course => course.category === selectedCategory);\n      }\n\n      // Filtro per livello di rischio\n      if (selectedRiskLevel) {\n        filtered = filtered.filter(course => course.riskLevel === selectedRiskLevel);\n      }\n\n      // Filtro per tipo di corso\n      if (selectedCourseType) {\n        filtered = filtered.filter(course => course.courseType === selectedCourseType);\n      }\n\n      setFilteredCourses(filtered);\n    }\n  }, [courses, groupedCourses, searchTerm, selectedCategory, selectedRiskLevel, selectedCourseType, isGroupedView]);\n\n  const clearFilters = () => {\n    setSearchTerm('');\n    setSelectedCategory('');\n    setSelectedRiskLevel('');\n    setSelectedCourseType('');\n  };\n\n  const getRiskLevelLabel = (riskLevel: string) => {\n    const level = riskLevels.find(r => r.value === riskLevel);\n    return level ? level.label : riskLevel;\n  };\n\n  const getCourseTypeLabel = (courseType: string) => {\n    const type = courseTypes.find(t => t.value === courseType);\n    return type ? type.label : courseType;\n  };\n\n  return (\n    <PublicLayout>\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-blue-600 to-blue-800 text-white py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n              Catalogo Corsi di Formazione\n            </h1>\n            <p className=\"text-xl text-white/90 max-w-3xl mx-auto\">\n              Scopri la nostra offerta completa di corsi sulla sicurezza sul lavoro, \n              certificati e riconosciuti a norma di legge\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Search and Filters */}\n      <section className=\"bg-white py-8 border-b border-gray-200\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center justify-between\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n              <input\n                type=\"text\"\n                placeholder=\"Cerca corsi...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Filter Toggle */}\n            <div className=\"flex items-center gap-4\">\n              <PublicButton\n                variant=\"outline\"\n                size=\"md\"\n                onClick={() => setShowFilters(!showFilters)}\n                className=\"flex items-center\"\n              >\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filtri\n                <ChevronDown className={`w-4 h-4 ml-2 transition-transform ${showFilters ? 'rotate-180' : ''}`} />\n              </PublicButton>\n              \n              {(selectedCategory || selectedRiskLevel || selectedCourseType) && (\n                <PublicButton\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={clearFilters}\n                >\n                  Cancella Filtri\n                </PublicButton>\n              )}\n            </div>\n          </div>\n\n          {/* Filters Panel */}\n          {showFilters && (\n            <div className=\"mt-6 p-6 bg-gray-50 rounded-lg\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {/* Category Filter */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Categoria\n                  </label>\n                  <select\n                    value={selectedCategory}\n                    onChange={(e) => setSelectedCategory(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n                  >\n                    <option value=\"\">Tutte le categorie</option>\n                    {categories.map(category => (\n                      <option key={category} value={category}>\n                        {category}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Risk Level Filter */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Livello di Rischio\n                  </label>\n                  <select\n                    value={selectedRiskLevel}\n                    onChange={(e) => setSelectedRiskLevel(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"\">Tutti i livelli</option>\n                    {riskLevels.map(level => (\n                      <option key={level.value} value={level.value}>\n                        {level.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Course Type Filter */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Tipo di Corso\n                  </label>\n                  <select\n                    value={selectedCourseType}\n                    onChange={(e) => setSelectedCourseType(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"\">Tutti i tipi</option>\n                    {courseTypes.map(type => (\n                      <option key={type.value} value={type.value}>\n                        {type.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Results */}\n      <section className=\"py-12\">\n        <div className=\"container mx-auto px-4\">\n          {loading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto\"></div>\n              <p className=\"mt-4 text-gray-600\">Caricamento corsi...</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex justify-between items-center mb-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900\">\n                  {isGroupedView ? filteredGroupedCourses.length : filteredCourses.length} {(isGroupedView ? filteredGroupedCourses.length : filteredCourses.length) === 1 ? 'corso trovato' : 'corsi trovati'}\n                </h2>\n                \n                {/* Toggle vista */}\n                <div className=\"flex bg-gray-100 rounded-full p-1\">\n                  <button\n                    onClick={() => setIsGroupedView(true)}\n                    className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n                      isGroupedView\n                        ? 'bg-primary-600 text-white'\n                        : 'text-gray-600 hover:text-gray-800'\n                    }`}\n                  >\n                    Vista Raggruppata\n                  </button>\n                  <button\n                    onClick={() => setIsGroupedView(false)}\n                    className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n                      !isGroupedView\n                        ? 'bg-primary-600 text-white'\n                  : 'text-gray-600 hover:text-gray-800'\n                    }`}\n                  >\n                    Vista Dettagliata\n                  </button>\n                </div>\n              </div>\n\n              {((isGroupedView && filteredGroupedCourses.length === 0) || (!isGroupedView && filteredCourses.length === 0)) ? (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-gray-600 text-lg\">\n                    Nessun corso trovato con i filtri selezionati.\n                  </p>\n                  <PublicButton\n                    variant=\"outline\"\n                    size=\"md\"\n                    onClick={clearFilters}\n                    className=\"mt-4\"\n                  >\n                    Cancella Filtri\n                  </PublicButton>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                  {isGroupedView ? (\n                    filteredGroupedCourses.map(groupedCourse => (\n                       <GroupedCourseCard\n                         key={groupedCourse.title}\n                         groupedCourse={groupedCourse}\n                         getRiskLevelLabel={getRiskLevelLabel}\n                         getCourseTypeLabel={getCourseTypeLabel}\n                       />\n                     ))\n                  ) : (\n                    filteredCourses.map(course => (\n                      <CourseCard\n                        key={course.id}\n                        course={course}\n                        getRiskLevelLabel={getRiskLevelLabel}\n                        getCourseTypeLabel={getCourseTypeLabel}\n                      />\n                    ))\n                  )}\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Non Trovi il Corso che Cerchi?\n          </h2>\n          <p className=\"text-lg text-gray-600 mb-8 max-w-2xl mx-auto\">\n            Contattaci per corsi personalizzati o per maggiori informazioni sui nostri programmi formativi\n          </p>\n          <PublicButton\n            variant=\"primary\"\n            size=\"lg\"\n            onClick={() => window.location.href = '/contatti'}\n          >\n            Contattaci\n          </PublicButton>\n        </div>\n      </section>\n    </PublicLayout>\n  );\n};\n\nexport default CoursesPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/HomePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowRight' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  ArrowRight,\n  Award,\n  CheckCircle,\n  Shield,\n  Star,\n  Users\n} from 'lucide-react';\nimport { PublicLayout } from '../../components/public/PublicLayout';\nimport { HeroSection } from '../../components/public/HeroSection';\nimport { PublicButton } from '../../components/public/PublicButton';\n\n/**\n * Homepage pubblica di Element Formazione\n * Presenta l'azienda e i servizi offerti\n */\nexport const HomePage: React.FC = () => {\n  const services = [\n    {\n      icon: Shield,\n      title: 'Corsi di Formazione',\n      description: 'Corsi sulla sicurezza sul lavoro per tutti i settori e livelli di rischio',\n      features: ['Rischio Alto, Medio, Basso', 'Aggiornamenti periodici', 'Certificazioni riconosciute']\n    },\n    {\n      icon: Users,\n      title: 'Nomina RSPP',\n      description: 'Servizio di Responsabile del Servizio di Prevenzione e Protezione',\n      features: ['Consulenza specializzata', 'Supporto continuo', 'Conformità normativa']\n    },\n    {\n      icon: Award,\n      title: 'Medico del Lavoro',\n      description: 'Sorveglianza sanitaria e visite mediche per i lavoratori',\n      features: ['Visite periodiche', 'Protocolli sanitari', 'Certificazioni mediche']\n    }\n  ];\n\n  const stats = [\n    { number: '500+', label: 'Aziende Clienti' },\n    { number: '10.000+', label: 'Lavoratori Formati' },\n    { number: '15+', label: 'Anni di Esperienza' },\n    { number: '98%', label: 'Soddisfazione Cliente' }\n  ];\n\n  const testimonials = [\n    {\n      name: 'Marco Rossi',\n      company: 'Industrie Meccaniche SRL',\n      text: 'Servizio eccellente e professionale. La formazione è stata chiara e completa.',\n      rating: 5\n    },\n    {\n      name: 'Laura Bianchi',\n      company: 'Costruzioni Edili SpA',\n      text: 'Supporto costante e competenza tecnica di alto livello. Consigliato!',\n      rating: 5\n    }\n  ];\n\n  return (\n    <PublicLayout>\n      <HeroSection\n        title=\"Sicurezza sul Lavoro\"\n        subtitle=\"Senza Compromessi\"\n        description=\"Leader nella formazione sulla sicurezza e consulenza aziendale. Offriamo soluzioni complete per la conformità normativa e la protezione dei lavoratori.\"\n        primaryButton={{\n          text: \"Scopri i Corsi\",\n          href: \"/corsi\"\n        }}\n        secondaryButton={{\n          text: \"Richiedi Preventivo\",\n          href: \"/contatti\"\n        }}\n        stats={stats}\n        showContactForm={true}\n      />\n\n      {/* Services Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              I Nostri Servizi\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Soluzioni complete per la sicurezza sul lavoro e la conformità normativa\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {services.map((service, index) => {\n              const IconComponent = service.icon;\n              return (\n                <div key={index} className=\"bg-gray-50 rounded-2xl p-8 hover:shadow-lg transition-shadow\">\n                  <div className=\"w-16 h-16 bg-primary-600 rounded-full flex items-center justify-center mb-6\">\n                    <IconComponent className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">\n                    {service.title}\n                  </h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    {service.description}\n                  </p>\n                  <ul className=\"space-y-2 mb-6\">\n                    {service.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center text-sm text-gray-700\">\n                        <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                  <PublicButton variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    Scopri di più\n                  </PublicButton>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Us Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-6\">\n                Perché Scegliere Element Formazione\n              </h2>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">Esperienza Consolidata</h3>\n                    <p className=\"text-gray-600\">Oltre 15 anni nel settore della sicurezza sul lavoro</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">Certificazioni Riconosciute</h3>\n                    <p className=\"text-gray-600\">Tutti i nostri corsi rilasciano attestati validi a norma di legge</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">Supporto Continuo</h3>\n                    <p className=\"text-gray-600\">Assistenza e consulenza anche dopo la formazione</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-2xl p-8 shadow-lg\">\n              <h3 className=\"text-2xl font-semibold text-gray-900 mb-6\">Cosa Dicono i Nostri Clienti</h3>\n              <div className=\"space-y-6\">\n                {testimonials.map((testimonial, index) => (\n                  <div key={index} className=\"border-l-4 border-primary-600 pl-4\">\n                    <div className=\"flex items-center mb-2\">\n                      {[...Array(testimonial.rating)].map((_, i) => (\n                        <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                      ))}\n                    </div>\n                    <p className=\"text-gray-700 mb-2\">\"{testimonial.text}\"</p>\n                    <div className=\"text-sm text-gray-600\">\n                      <strong>{testimonial.name}</strong> - {testimonial.company}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-primary-600 text-white\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold mb-6\">\n            Pronto a Migliorare la Sicurezza della Tua Azienda?\n          </h2>\n          <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\n            Contattaci oggi per una consulenza gratuita e scopri come possiamo aiutarti\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <PublicButton \n              variant=\"secondary\" \n              size=\"lg\"\n              onClick={() => window.location.href = '/contatti'}\n            >\n              Contattaci Ora\n            </PublicButton>\n            <PublicButton \n              variant=\"outline\" \n              size=\"lg\"\n              onClick={() => window.location.href = '/corsi'}\n            >\n              Vedi i Corsi\n            </PublicButton>\n          </div>\n        </div>\n      </section>\n    </PublicLayout>\n  );\n};\n\nexport default HomePage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/PrivacyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/PublicFormPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[670,673],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[670,673],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadForm'. Either include it or remove the dependency array.","line":23,"column":6,"nodeType":"ArrayExpression","endLine":23,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [id, loadForm]","fix":{"range":[1048,1052],"text":"[id, loadForm]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1468,1471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1468,1471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1965,1968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1965,1968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":82,"column":46,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":82,"endColumn":47,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2963,2964],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2963,2963],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":82,"column":58,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":82,"endColumn":59,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2975,2976],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2975,2975],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":82,"column":60,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":82,"endColumn":61,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2977,2978],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2977,2977],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3552,3555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3552,3555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { PublicLayout } from '../../components/public/PublicLayout';\nimport { PublicButton } from '../../components/public/PublicButton';\nimport { formTemplatesService, FormTemplate, FormField } from '../../services/formTemplates';\nimport { CheckCircle, AlertCircle, ArrowLeft } from 'lucide-react';\n\nconst PublicFormPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const [formTemplate, setFormTemplate] = useState<FormTemplate | null>(null);\n  const [formData, setFormData] = useState<Record<string, any>>({});\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (id) {\n      loadForm();\n    }\n  }, [id]);\n\n  const loadForm = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const form = await formTemplatesService.getPublicForm(id!);\n      \n      if (!form.isActive || !form.isPublic) {\n        setError('Questo form non è disponibile pubblicamente.');\n        return;\n      }\n\n      setFormTemplate(form);\n      \n      // Inizializza i dati del form\n      const initialData: Record<string, any> = {};\n      form.fields.forEach(field => {\n        if (field.type === 'checkbox') {\n          initialData[field.name] = false;\n        } else {\n          initialData[field.name] = '';\n        }\n      });\n      setFormData(initialData);\n    } catch (err) {\n      console.error('Errore nel caricamento del form:', err);\n      setError('Errore nel caricamento del form. Riprova più tardi.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const validateField = (field: FormField, value: any): string | null => {\n    if (field.required && (!value || (typeof value === 'string' && value.trim() === ''))) {\n      return `${field.label} è obbligatorio`;\n    }\n\n    if (field.validation) {\n      const { min, max, pattern, message } = field.validation;\n      \n      if (min && typeof value === 'string' && value.length < min) {\n        return message || `${field.label} deve essere di almeno ${min} caratteri`;\n      }\n      \n      if (max && typeof value === 'string' && value.length > max) {\n        return message || `${field.label} non può superare ${max} caratteri`;\n      }\n      \n      if (pattern && typeof value === 'string' && !new RegExp(pattern).test(value)) {\n        return message || `${field.label} non è nel formato corretto`;\n      }\n    }\n\n    // Validazioni specifiche per tipo\n    if (field.type === 'email' && value && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n      return 'Inserisci un indirizzo email valido';\n    }\n\n    if (field.type === 'tel' && value && !/^[\\+]?[0-9\\s\\-\\(\\)]+$/.test(value)) {\n      return 'Inserisci un numero di telefono valido';\n    }\n\n    return null;\n  };\n\n  const validateForm = (): boolean => {\n    if (!formTemplate) return false;\n\n    const errors: Record<string, string> = {};\n    let isValid = true;\n\n    formTemplate.fields.forEach(field => {\n      const error = validateField(field, formData[field.name]);\n      if (error) {\n        errors[field.name] = error;\n        isValid = false;\n      }\n    });\n\n    setValidationErrors(errors);\n    return isValid;\n  };\n\n  const handleInputChange = (fieldName: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [fieldName]: value\n    }));\n\n    // Rimuovi l'errore di validazione se presente\n    if (validationErrors[fieldName]) {\n      setValidationErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[fieldName];\n        return newErrors;\n      });\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formTemplate || !validateForm()) {\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      setError(null);\n\n      const result = await formTemplatesService.submitPublicForm(formTemplate.id, { formData });\n      \n      if (result.success) {\n        setSubmitted(true);\n        \n        // Redirect se specificato\n        if (formTemplate.redirectUrl) {\n          setTimeout(() => {\n            window.location.href = formTemplate.redirectUrl!;\n          }, 3000);\n        }\n      } else {\n        setError('Errore nell\\'invio del form. Riprova più tardi.');\n      }\n    } catch (err) {\n      console.error('Errore nell\\'invio del form:', err);\n      setError('Errore nell\\'invio del form. Riprova più tardi.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const renderField = (field: FormField) => {\n    const hasError = validationErrors[field.name];\n    const baseClasses = `w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 transition-colors ${\n      hasError ? 'border-red-500' : 'border-gray-300 focus:border-primary-500'\n    }`;\n\n    switch (field.type) {\n      case 'textarea':\n        return (\n          <textarea\n            id={field.name}\n            name={field.name}\n            value={formData[field.name] || ''}\n            onChange={(e) => handleInputChange(field.name, e.target.value)}\n            placeholder={field.placeholder}\n            required={field.required}\n            className={`${baseClasses} min-h-[120px] resize-vertical`}\n            rows={4}\n          />\n        );\n\n      case 'select':\n        return (\n          <select\n            id={field.name}\n            name={field.name}\n            value={formData[field.name] || ''}\n            onChange={(e) => handleInputChange(field.name, e.target.value)}\n            required={field.required}\n            className={baseClasses}\n          >\n            <option value=\"\">Seleziona...</option>\n            {field.options?.map(option => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        );\n\n      case 'checkbox':\n        return (\n          <label className=\"flex items-center space-x-3 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              id={field.name}\n              name={field.name}\n              checked={formData[field.name] || false}\n              onChange={(e) => handleInputChange(field.name, e.target.checked)}\n              required={field.required}\n              className=\"w-5 h-5 text-primary-600 border-gray-300 rounded focus:ring-primary-500\"\n            />\n            <span className=\"text-gray-700\">{field.label}</span>\n          </label>\n        );\n\n      case 'radio':\n        return (\n          <div className=\"space-y-2\">\n            {field.options?.map(option => (\n              <label key={option} className=\"flex items-center space-x-3 cursor-pointer\">\n                <input\n                  type=\"radio\"\n                  name={field.name}\n                  value={option}\n                  checked={formData[field.name] === option}\n                  onChange={(e) => handleInputChange(field.name, e.target.value)}\n                  required={field.required}\n                  className=\"w-5 h-5 text-primary-600 border-gray-300 focus:ring-primary-500\"\n                />\n                <span className=\"text-gray-700\">{option}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      default:\n        return (\n          <input\n            type={field.type}\n            id={field.name}\n            name={field.name}\n            value={formData[field.name] || ''}\n            onChange={(e) => handleInputChange(field.name, e.target.value)}\n            placeholder={field.placeholder}\n            required={field.required}\n            className={baseClasses}\n          />\n        );\n    }\n  };\n\n  if (loading) {\n    return (\n      <PublicLayout>\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Caricamento form...</p>\n          </div>\n        </div>\n      </PublicLayout>\n    );\n  }\n\n  if (error && !formTemplate) {\n    return (\n      <PublicLayout>\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center max-w-md mx-auto\">\n            <AlertCircle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Form non disponibile</h1>\n            <p className=\"text-gray-600 mb-6\">{error}</p>\n            <PublicButton\n              variant=\"primary\"\n              onClick={() => navigate('/')}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Torna alla Home\n            </PublicButton>\n          </div>\n        </div>\n      </PublicLayout>\n    );\n  }\n\n  if (submitted) {\n    return (\n      <PublicLayout>\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center max-w-md mx-auto\">\n            <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Form inviato con successo!</h1>\n            <p className=\"text-gray-600 mb-6\">\n              {formTemplate?.successMessage || 'Grazie per aver compilato il form. Ti contatteremo presto.'}\n            </p>\n            {formTemplate?.redirectUrl && (\n              <p className=\"text-sm text-gray-500 mb-6\">\n                Verrai reindirizzato automaticamente tra pochi secondi...\n              </p>\n            )}\n            <PublicButton\n              variant=\"primary\"\n              onClick={() => navigate('/')}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Torna alla Home\n            </PublicButton>\n          </div>\n        </div>\n      </PublicLayout>\n    );\n  }\n\n  return (\n    <PublicLayout>\n      <div className=\"min-h-screen bg-gray-50 py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-2xl mx-auto\">\n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n                {formTemplate?.name}\n              </h1>\n              {formTemplate?.description && (\n                <p className=\"text-lg text-gray-600\">\n                  {formTemplate.description}\n                </p>\n              )}\n            </div>\n\n            {/* Form */}\n            <div className=\"bg-white rounded-lg shadow-lg p-8\">\n              {error && (\n                <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <AlertCircle className=\"w-5 h-5 text-red-500 mr-2\" />\n                    <p className=\"text-red-700\">{error}</p>\n                  </div>\n                </div>\n              )}\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {formTemplate?.fields.map(field => (\n                  <div key={field.name}>\n                    {field.type !== 'checkbox' && (\n                      <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        {field.label}\n                        {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n                      </label>\n                    )}\n                    \n                    {renderField(field)}\n                    \n                    {validationErrors[field.name] && (\n                      <p className=\"mt-1 text-sm text-red-600\">\n                        {validationErrors[field.name]}\n                      </p>\n                    )}\n                  </div>\n                ))}\n\n                <div className=\"flex gap-4 pt-6\">\n                  <PublicButton\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => navigate('/')}\n                    className=\"flex-1\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    Annulla\n                  </PublicButton>\n                  \n                  <PublicButton\n                    type=\"submit\"\n                    variant=\"primary\"\n                    disabled={submitting}\n                    className=\"flex-1\"\n                  >\n                    {submitting ? 'Invio in corso...' : 'Invia Form'}\n                  </PublicButton>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </PublicLayout>\n  );\n};\n\nexport default PublicFormPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/ServicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/TerminiPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/UnifiedCourseDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":189,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { \n  AlertCircle,\n  ArrowRight,\n  Award,\n  CheckCircle,\n  Clock,\n  Users\n} from 'lucide-react';\nimport { PublicButton } from '../../components/public/PublicButton';\nimport { PublicHeader } from '../../components/public/PublicHeader';\nimport { PublicFooter } from '../../components/public/PublicFooter';\n\ninterface CourseVariant {\n  id: string;\n  title: string;\n  shortDescription: string;\n  fullDescription: string;\n  category: string;\n  subcategory?: string;\n  riskLevel: 'ALTO' | 'MEDIO' | 'BASSO' | 'A' | 'B' | 'C';\n  courseType: 'PRIMO_CORSO' | 'AGGIORNAMENTO';\n  duration: number;\n  maxParticipants: number;\n  price?: number;\n  image1Url?: string;\n  slug: string;\n  objectives: string[];\n  program: string[];\n  requirements: string[];\n  certification: string;\n}\n\ninterface UnifiedCourse {\n  baseTitle: string;\n  category: string;\n  subcategory?: string;\n  variants: CourseVariant[];\n  commonObjectives: string[];\n  commonProgram: string[];\n  commonRequirements: string[];\n  commonCertification: string;\n  image1Url?: string;\n}\n\n/**\n * Pagina unificata per corsi con lo stesso titolo ma diverso rischio/tipo\n * Mostra le informazioni comuni e le varianti specifiche\n */\nexport const UnifiedCourseDetailPage: React.FC = () => {\n  const { title } = useParams<{ title: string }>();\n  const navigate = useNavigate();\n  const [unifiedCourse, setUnifiedCourse] = useState<UnifiedCourse | null>(null);\n  const [selectedVariant, setSelectedVariant] = useState<CourseVariant | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const [requestForm, setRequestForm] = useState({\n    requestType: 'info',\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    message: '',\n    selectedVariant: ''\n  });\n\n  useEffect(() => {\n    if (title) {\n      fetchUnifiedCourse(title);\n    }\n  }, [title]);\n\n  const fetchUnifiedCourse = async (title: string) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/public/courses/unified/${encodeURIComponent(title)}`);\n      \n      if (!response.ok) {\n        throw new Error('Corso non trovato');\n      }\n\n      const data = await response.json();\n      setUnifiedCourse(data);\n      \n      // Seleziona la prima variante di default\n      if (data.variants && data.variants.length > 0) {\n        setSelectedVariant(data.variants[0]);\n        setRequestForm(prev => ({ ...prev, selectedVariant: data.variants[0].id }));\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Errore nel caricamento del corso');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRiskLevelLabel = (riskLevel: string) => {\n    const labels = {\n      'ALTO': 'Rischio Alto',\n      'MEDIO': 'Rischio Medio', \n      'BASSO': 'Rischio Basso',\n      'A': 'Categoria A',\n      'B': 'Categoria B',\n      'C': 'Categoria C'\n    };\n    return labels[riskLevel as keyof typeof labels] || riskLevel;\n  };\n\n  const getCourseTypeLabel = (courseType: string) => {\n    const labels = {\n      'PRIMO_CORSO': 'Primo Corso',\n      'AGGIORNAMENTO': 'Aggiornamento'\n    };\n    return labels[courseType as keyof typeof labels] || courseType;\n  };\n\n  const getRiskLevelColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'ALTO':\n      case 'A':\n        return 'bg-red-600 text-white';\n      case 'MEDIO':\n      case 'B':\n        return 'bg-yellow-600 text-white';\n      case 'BASSO':\n      case 'C':\n        return 'bg-green-600 text-white';\n      default:\n        return 'bg-gray-600 text-white';\n    }\n  };\n\n  const getCourseTypeColor = (courseType: string) => {\n    switch (courseType) {\n      case 'PRIMO_CORSO':\n        return 'bg-blue-600 text-white';\n      case 'AGGIORNAMENTO':\n        return 'bg-purple-600 text-white';\n      default:\n        return 'bg-gray-600 text-white';\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setRequestForm(prev => ({ ...prev, [name]: value }));\n    \n    // Se cambia la variante selezionata, aggiorna anche il componente\n    if (name === 'selectedVariant') {\n      const variant = unifiedCourse?.variants.find(v => v.id === value);\n      if (variant) {\n        setSelectedVariant(variant);\n      }\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const response = await fetch('/api/public/contact-submissions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...requestForm,\n          courseTitle: unifiedCourse?.baseTitle,\n          courseVariant: selectedVariant?.slug\n        }),\n      });\n\n      if (response.ok) {\n        alert('Richiesta inviata con successo!');\n        setRequestForm({\n          requestType: 'info',\n          name: '',\n          email: '',\n          phone: '',\n          company: '',\n          message: '',\n          selectedVariant: selectedVariant?.id || ''\n        });\n      } else {\n        throw new Error('Errore nell\\'invio della richiesta');\n      }\n    } catch (error) {\n      alert('Errore nell\\'invio della richiesta. Riprova più tardi.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <PublicHeader />\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Caricamento corso...</p>\n          </div>\n        </div>\n        <PublicFooter />\n      </div>\n    );\n  }\n\n  if (error || !unifiedCourse) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <PublicHeader />\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Corso non trovato</h1>\n            <p className=\"text-gray-600 mb-6\">{error || 'Il corso richiesto non esiste.'}</p>\n            <PublicButton onClick={() => navigate('/corsi')}>\n              Torna ai Corsi\n            </PublicButton>\n          </div>\n        </div>\n        <PublicFooter />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <PublicHeader />\n\n      {/* Course Header */}\n      <section className=\"py-12 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Course Image */}\n            <div>\n              <div className=\"aspect-w-16 aspect-h-9 rounded-2xl overflow-hidden bg-gray-200\">\n                {unifiedCourse.image1Url ? (\n                  <img\n                    src={unifiedCourse.image1Url}\n                    alt={unifiedCourse.baseTitle}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-500 to-blue-600\">\n                    <Award className=\"w-24 h-24 text-white/80\" />\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Course Info */}\n            <div>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-600 text-white\">\n                  {unifiedCourse.category}\n                </span>\n                {unifiedCourse.subcategory && (\n                  <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-600 text-white\">\n                    {unifiedCourse.subcategory}\n                  </span>\n                )}\n              </div>\n\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n                {unifiedCourse.baseTitle}\n              </h1>\n\n              <p className=\"text-xl text-gray-600 mb-6\">\n                {selectedVariant?.shortDescription}\n              </p>\n\n              {/* Variant Selector */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Seleziona Variante:</h3>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                  {unifiedCourse.variants.map((variant) => (\n                    <button\n                      key={variant.id}\n                      onClick={() => {\n                        setSelectedVariant(variant);\n                        setRequestForm(prev => ({ ...prev, selectedVariant: variant.id }));\n                      }}\n                      className={`p-4 rounded-lg border-2 transition-all text-left ${\n                        selectedVariant?.id === variant.id\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      <div className=\"flex flex-wrap gap-2 mb-2\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRiskLevelColor(variant.riskLevel)}`}>\n                          {getRiskLevelLabel(variant.riskLevel)}\n                        </span>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCourseTypeColor(variant.courseType)}`}>\n                          {getCourseTypeLabel(variant.courseType)}\n                        </span>\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        <div className=\"flex items-center gap-4\">\n                          <span className=\"flex items-center\">\n                            <Clock className=\"w-4 h-4 mr-1\" />\n                            {variant.duration}h\n                          </span>\n                          <span className=\"flex items-center\">\n                            <Users className=\"w-4 h-4 mr-1\" />\n                            Max {variant.maxParticipants}\n                          </span>\n                        </div>\n                        {variant.price && (\n                          <div className=\"mt-2 font-semibold text-blue-600\">\n                            €{variant.price}\n                          </div>\n                        )}\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <PublicButton size=\"lg\" className=\"flex-1\">\n                  Richiedi Informazioni\n                </PublicButton>\n                <PublicButton variant=\"outline\" size=\"lg\" className=\"flex-1\">\n                  Scarica Programma\n                </PublicButton>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Course Details */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            \n            {/* Main Content */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              \n              {/* Description */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Descrizione del Corso</h2>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  {selectedVariant?.fullDescription}\n                </p>\n              </div>\n\n              {/* Objectives */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Obiettivi Formativi</h2>\n                <ul className=\"space-y-3\">\n                  {(selectedVariant?.objectives || unifiedCourse.commonObjectives).map((objective, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-600\">{objective}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              {/* Program */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Programma del Corso</h2>\n                <div className=\"space-y-3\">\n                  {(selectedVariant?.program || unifiedCourse.commonProgram).map((item, index) => (\n                    <div key={index} className=\"flex items-start\">\n                      <span className=\"inline-flex items-center justify-center w-6 h-6 bg-primary-600 text-white text-sm font-medium rounded-full mr-3 mt-0.5 flex-shrink-0\">\n                        {index + 1}\n                      </span>\n                      <span className=\"text-gray-600\">{item}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Requirements */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Requisiti di Accesso</h2>\n                <ul className=\"space-y-3\">\n                  {(selectedVariant?.requirements || unifiedCourse.commonRequirements).map((requirement, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <CheckCircle className=\"w-5 h-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-600\">{requirement}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              {/* Certification */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Certificazione</h2>\n                <div className=\"flex items-start\">\n                  <Award className=\"w-8 h-8 text-yellow-500 mr-4 mt-1 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Attestato di Frequenza</h3>\n                    <p className=\"text-gray-600\">{selectedVariant?.certification || unifiedCourse.commonCertification}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              \n              {/* Request Form */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Richiedi Informazioni</h3>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"selectedVariant\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Variante del Corso\n                    </label>\n                    <select\n                      id=\"selectedVariant\"\n                      name=\"selectedVariant\"\n                      value={requestForm.selectedVariant}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                    >\n                      {unifiedCourse.variants.map((variant) => (\n                        <option key={variant.id} value={variant.id}>\n                          {getRiskLevelLabel(variant.riskLevel)} - {getCourseTypeLabel(variant.courseType)}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"requestType\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Tipo di Richiesta\n                    </label>\n                    <select\n                      id=\"requestType\"\n                      name=\"requestType\"\n                      value={requestForm.requestType}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                    >\n                      <option value=\"info\">Informazioni generali</option>\n                      <option value=\"quote\">Richiesta preventivo</option>\n                      <option value=\"schedule\">Date disponibili</option>\n                      <option value=\"custom\">Corso personalizzato</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Nome e Cognome *\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      required\n                      value={requestForm.name}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"Il tuo nome\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Email *\n                    </label>\n                    <input\n                      type=\"email\"\n                      id=\"email\"\n                      name=\"email\"\n                      required\n                      value={requestForm.email}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"la-tua-email@esempio.com\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Telefono\n                    </label>\n                    <input\n                      type=\"tel\"\n                      id=\"phone\"\n                      name=\"phone\"\n                      value={requestForm.phone}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"+39 123 456 7890\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"company\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Azienda\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"company\"\n                      name=\"company\"\n                      value={requestForm.company}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"Nome azienda\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Messaggio\n                    </label>\n                    <textarea\n                      id=\"message\"\n                      name=\"message\"\n                      rows={4}\n                      value={requestForm.message}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                      placeholder=\"Descrivi la tua richiesta...\"\n                    />\n                  </div>\n\n                  <PublicButton type=\"submit\" className=\"w-full\">\n                    Invia Richiesta\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </PublicButton>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <PublicFooter />\n    </div>\n  );\n};\n\nexport default UnifiedCourseDetailPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/public/WorkWithUsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/schedules/ScheduleDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[905,908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[905,908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[960,963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[960,963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1017,1020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1017,1020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1127,1130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1127,1130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2643,2646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2643,2646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2823,2826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2823,2826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4366,4369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4366,4369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4843,4846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4843,4846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4928,4931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4928,4931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9763,9766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9763,9766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10266,10269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10266,10269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12259,12262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12259,12262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ScheduleEventModalLazy from '../../components/schedules/ScheduleEventModal.lazy';\nimport { \n  Award,\n  ClipboardList,\n  Edit,\n  FileText,\n  Folder\n} from 'lucide-react';\nimport { apiGet } from '../../services/api';\n\nconst sidebarButtons = [\n  { label: 'Lettere di Incarico', icon: <Folder className=\"w-5 h-5 text-blue-500\" /> },\n  { label: 'Registri Presenze', icon: <ClipboardList className=\"w-5 h-5 text-yellow-500\" /> },\n  { label: 'Attestati', icon: <Award className=\"w-5 h-5 text-green-500\" /> },\n  { label: 'Preventivi', icon: <FileText className=\"w-5 h-5 text-violet-500\" /> },\n  { label: 'Fatture', icon: <FileText className=\"w-5 h-5 text-red-500\" /> },\n];\n\nconst ScheduleDetailPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [schedule, setSchedule] = useState<any>(null);\n  const [trainers, setTrainers] = useState<any[]>([]);\n  const [companies, setCompanies] = useState<any[]>([]);\n  const [employees, setEmployees] = useState<any[]>([]);\n  const [courses, setCourses] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showEdit, setShowEdit] = useState(false);\n\n  useEffect(() => {\n    async function fetchAll() {\n      setLoading(true);\n      try {\n        const [schedData, trData, compData, empData, crsData] = await Promise.all([\n          apiGet(`/schedules/${id}`),\n          apiGet('/trainers'),\n          apiGet('/companies'),\n          apiGet('/persons'),\n          apiGet('/courses'),\n        ]);\n        setSchedule(schedData);\n        setTrainers(trData);\n        setCompanies(compData);\n        setEmployees(empData);\n        setCourses(crsData);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchAll();\n  }, [id]);\n\n  const handleSidebarAction = (label: string) => {\n    // Qui in futuro genererai i documenti usando le info di scheduled courses\n    alert(`Azione: ${label}`);\n  };\n\n  if (loading) return <div className=\"text-center p-6\">Loading...</div>;\n  if (!schedule) return <div className=\"text-center p-6\">Programma non trovato.</div>;\n\n  // Mappa per la traduzione della modalità di erogazione\n  const modalitaMap: Record<string, string> = {\n    'in-person': 'In presenza',\n    'online': 'Online',\n    'hybrid': 'Ibrido',\n  };\n  const modalitaErogazione = modalitaMap[schedule.deliveryMode] || schedule.deliveryMode;\n\n  // Raggruppa partecipanti per azienda senza duplicati\n  const aziendePartecipanti: Record<string, { nome: string, partecipanti: { id: string, nome: string }[] }> = {};\n  schedule.enrollments?.forEach((enr: any) => {\n    const aziendaId = enr.employee.companyId;\n    if (!aziendaId) return;\n    if (!aziendePartecipanti[aziendaId]) {\n      const companyObj = schedule.companies.find((c: any) => c.company.id === aziendaId)?.company;\n      aziendePartecipanti[aziendaId] = {\n        nome: companyObj?.ragioneSociale || companyObj?.name || 'Azienda sconosciuta',\n        partecipanti: []\n      };\n    }\n    aziendePartecipanti[aziendaId].partecipanti.push({\n      id: enr.employee.id,\n      nome: `${enr.employee.firstName} ${enr.employee.lastName}`\n    });\n  });\n\n  return (\n    <div className=\"flex\">\n      {/* Contenuto principale */}\n      <div className=\"flex-1 mr-8\">\n        <div\n          className={`max-w-5xl mx-auto p-8 rounded-lg shadow-lg relative\n            ${schedule.status === 'Preventivo' ? 'bg-yellow-50' :\n              schedule.status === 'Confermato' ? 'bg-orange-50' :\n              schedule.status === 'Fatturato' ? 'bg-blue-50' :\n              schedule.status === 'Pagato' ? 'bg-green-50' :\n              'bg-gray-50'}\n          `}\n        >\n      {/* Edit Modal */}\n      {showEdit && (\n        <ScheduleEventModalLazy\n          trainings={courses.map(c => ({ id: c.id, title: c.title || c.name, duration: c.duration, certifications: c.certifications }))}\n          trainers={trainers}\n          companies={companies.map(c => ({ id: c.id, ragioneSociale: c.ragioneSociale, name: c.name }))}\n          employees={employees}\n          existingEvent={{\n            ...schedule,\n            trainingId: schedule.course.id,\n            trainerId: schedule.sessions?.[0]?.trainer?.id || '',\n            coTrainerId: schedule.sessions?.[0]?.co_trainer?.id || '',\n            dates: schedule.sessions?.map((sess: any) => ({\n              date: sess.date.split('T')[0],\n              start: sess.start,\n              end: sess.end,\n              trainerId: sess.trainer?.id || '',\n              coTrainerId: sess.co_trainer?.id || '',\n            })) || [],\n            location: schedule.location,\n            maxParticipants: schedule.maxParticipants,\n            notes: schedule.notes,\n            deliveryMode: schedule.deliveryMode,\n            companyIds: schedule.companies?.map((sc: any) => sc.company.id) || [],\n            employeeIds: schedule.enrollments?.map((e: any) => e.employee.id) || [],\n          }}\n          initialDate={schedule.sessions?.[0]?.date.split('T')[0]}\n          initialTime={{ start: schedule.sessions?.[0]?.start, end: schedule.sessions?.[0]?.end }}\n          onClose={() => setShowEdit(false)}\n          onSuccess={async () => {\n            setShowEdit(false);\n            const schedData = await apiGet(`/schedules/${id}`);\n            setSchedule(schedData);\n          }}\n        />\n      )}\n      {/* Detail Card */}\n          <h1\n            className={`text-3xl font-bold mb-6 \n              ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                schedule.status === 'Confermato' ? 'text-orange-700' :\n                schedule.status === 'Fatturato' ? 'text-blue-700' :\n                schedule.status === 'Pagato' ? 'text-green-700' :\n                'text-gray-700'}\n            `}\n          >\n            Dettaglio Programma Corso\n          </h1>\n      <div className=\"space-y-6\">\n        {/* Corso */}\n            <div className=\"bg-white p-4 rounded-lg shadow flex items-center justify-between\">\n              <div>\n                <h2 className={`text-xl font-semibold \n                  ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                    schedule.status === 'Confermato' ? 'text-orange-700' :\n                    schedule.status === 'Fatturato' ? 'text-blue-700' :\n                    schedule.status === 'Pagato' ? 'text-green-700' :\n                    'text-gray-700'}\n                `}>Corso</h2>\n          <p className=\"mt-2 text-gray-800\">{schedule.course?.title || schedule.course?.name}</p>\n              </div>\n              {schedule.status && (\n                <span className={`ml-4 px-4 py-2 rounded-full text-sm font-semibold shadow-sm border \n                  ${schedule.status === 'Preventivo' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' :\n                    schedule.status === 'Confermato' ? 'bg-orange-100 text-orange-800 border-orange-300' :\n                    schedule.status === 'Fatturato' ? 'bg-blue-100 text-blue-800 border-blue-300' :\n                    schedule.status === 'Pagato' ? 'bg-green-100 text-green-800 border-green-300' :\n                    'bg-gray-100 text-gray-800 border-gray-300'}\n                `}>\n                  {schedule.status}\n                </span>\n              )}\n        </div>\n        {/* Partecipanti per Azienda */}\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n              <h2 className={`text-xl font-semibold \n                ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                  schedule.status === 'Confermato' ? 'text-orange-700' :\n                  schedule.status === 'Fatturato' ? 'text-blue-700' :\n                  schedule.status === 'Pagato' ? 'text-green-700' :\n                  'text-gray-700'}\n              `}>Partecipanti per Azienda</h2>\n          {Object.keys(aziendePartecipanti).length ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-4\">\n              {Object.entries(aziendePartecipanti).map(([aziendaId, azienda]) => (\n                <div key={aziendaId} className=\"border rounded p-3\">\n                  <h3 className={`font-semibold mb-2 \n                    ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                      schedule.status === 'Confermato' ? 'text-orange-700' :\n                      schedule.status === 'Fatturato' ? 'text-blue-700' :\n                      schedule.status === 'Pagato' ? 'text-green-700' :\n                      'text-gray-700'}\n                  `}>{azienda.nome}</h3>\n                  {azienda.partecipanti.length ? (\n                    <ul className=\"list-disc pl-5 space-y-1 text-gray-800\">\n                      {azienda.partecipanti.map(p => (\n                        <li key={p.id}>{p.nome}</li>\n                      ))}\n                    </ul>\n                  ) : (\n                    <p className=\"text-gray-500 italic\">Nessun dipendente</p>\n                  )}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-gray-500\">-</p>\n          )}\n        </div>\n        {/* Sessioni */}\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n              <h2 className={`text-xl font-semibold \n                ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                  schedule.status === 'Confermato' ? 'text-orange-700' :\n                  schedule.status === 'Fatturato' ? 'text-blue-700' :\n                  schedule.status === 'Pagato' ? 'text-green-700' :\n                  'text-gray-700'}\n              `}>Sessioni</h2>\n          {schedule.sessions?.length ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-4\">\n                  {schedule.sessions.map((sess: any, idx: number) => {\n                    // Get present employee IDs for this session\n                    const presentIds = schedule.attendance && schedule.attendance[idx] && Array.isArray(schedule.attendance[idx].employeeIds)\n                      ? schedule.attendance[idx].employeeIds\n                      : [];\n                    // Get employee objects for present IDs\n                    const presentEmployees = schedule.enrollments\n                      ? schedule.enrollments.filter((enr: any) => presentIds.includes(enr.employee.id))\n                      : [];\n                    return (\n                      <div key={sess.id} className=\"border rounded p-3 flex flex-col gap-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <h3 className={`font-semibold mb-1 \n                            ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                              schedule.status === 'Confermato' ? 'text-orange-700' :\n                              schedule.status === 'Fatturato' ? 'text-blue-700' :\n                              schedule.status === 'Pagato' ? 'text-green-700' :\n                              'text-gray-700'}\n                          `}>{new Date(sess.date).toLocaleDateString('it-IT')}</h3>\n                          {schedule.attendance && schedule.attendance[idx] && (\n                            <span className=\"ml-2 px-2 py-0.5 rounded-full bg-green-100 text-green-800 text-xs font-semibold align-middle\">\n                              Presenti: {presentIds.length}\n                            </span>\n                          )}\n                        </div>\n                  <p><span className=\"font-semibold\">Orario:</span> {sess.start} - {sess.end}</p>\n                  <p><span className=\"font-semibold\">Docente:</span> {sess.trainer ? `${sess.trainer.firstName} ${sess.trainer.lastName}` : '-'}</p>\n                  {sess.co_trainer && <p><span className=\"font-semibold\">Co-Docente:</span> {sess.co_trainer.firstName} {sess.co_trainer.lastName}</p>}\n                        {/* List of present employees for this session */}\n                        {presentEmployees.length > 0 && (\n                          <div className=\"mt-2\">\n                            <span className=\"font-semibold text-xs text-gray-500\">Presenti:</span>\n                            <ul className=\"list-disc pl-5 text-sm text-gray-800\">\n                              {presentEmployees.map((enr: any) => (\n                                <li key={enr.employee.id}>{enr.employee.firstName} {enr.employee.lastName}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                </div>\n                    );\n                  })}\n            </div>\n          ) : (\n            <p className=\"text-gray-500 italic mt-2\">Nessuna sessione</p>\n          )}\n        </div>\n            {/* Luogo, Modalità & Note */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n                <h2 className={`text-lg font-semibold \n                  ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                    schedule.status === 'Confermato' ? 'text-orange-700' :\n                    schedule.status === 'Fatturato' ? 'text-blue-700' :\n                    schedule.status === 'Pagato' ? 'text-green-700' :\n                    'text-gray-700'}\n                `}>Luogo</h2>\n            <p className=\"mt-1 text-gray-800\">{schedule.location || '-'}</p>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n                <h2 className={`text-lg font-semibold \n                  ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                    schedule.status === 'Confermato' ? 'text-orange-700' :\n                    schedule.status === 'Fatturato' ? 'text-blue-700' :\n                    schedule.status === 'Pagato' ? 'text-green-700' :\n                    'text-gray-700'}\n                `}>Modalità di erogazione</h2>\n                <p className=\"mt-1 text-gray-800\">{modalitaErogazione || '-'}</p>\n              </div>\n              <div className=\"bg-white p-4 rounded-lg shadow col-span-2\">\n                <h2 className={`text-lg font-semibold \n                  ${schedule.status === 'Preventivo' ? 'text-yellow-700' :\n                    schedule.status === 'Confermato' ? 'text-orange-700' :\n                    schedule.status === 'Fatturato' ? 'text-blue-700' :\n                    schedule.status === 'Pagato' ? 'text-green-700' :\n                    'text-gray-700'}\n                `}>Note</h2>\n            <p className=\"mt-1 text-gray-800\">{schedule.notes || '-'}</p>\n          </div>\n        </div>\n      </div>\n      <button\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-full absolute top-4 right-4 hover:bg-blue-700 transition\"\n        onClick={() => setShowEdit(true)}\n      >\n        Modifica\n      </button>\n        </div>\n      </div>\n      {/* Sidebar pulsanti a destra */}\n      <div className=\"flex flex-col gap-4 pt-8 pl-2 min-w-[210px]\">\n        {sidebarButtons.map(btn => (\n          <button\n            key={btn.label}\n            className=\"flex items-center justify-between gap-3 px-5 py-3 rounded-full bg-white shadow border border-gray-200 text-gray-700 font-medium text-base hover:bg-blue-50 hover:text-blue-700 transition\"\n            type=\"button\"\n            onClick={() => handleSidebarAction(btn.label)}\n          >\n            {btn.label}\n            {btn.icon}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ScheduleDetailPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/schedules/SchedulesPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/schedules/SchedulesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'apiPost' is defined but never used.","line":19,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'apiPut' is defined but never used.","line":19,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":33}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":405,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13763,13766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13763,13766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":480,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":480,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15282,15285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15282,15285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":633,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":633,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20105,20108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20105,20108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":653,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":653,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21085,21088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21085,21088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":654,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":654,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21174,21177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21174,21177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from 'react';\nimport { \n  Calendar,\n  Download,\n  Pencil,\n  Table,\n  Trash2\n} from 'lucide-react';\nimport ScheduleCalendar, { ScheduleEvent } from '../../components/dashboard/ScheduleCalendar';\nimport ScheduleEventModalLazy from '../../components/schedules/ScheduleEventModal.lazy';\nimport EntityListLayout from '../../components/layouts/EntityListLayout';\nimport ResizableTable from '../../components/shared/ResizableTable';\nimport { HeaderPanel } from '../../design-system/organisms/HeaderPanel';\nimport { SearchBarControls } from '../../design-system/molecules/SearchBarControls';\nimport { FilterPanel } from '../../design-system/organisms/FilterPanel';\nimport { SearchBar } from '../../design-system/molecules/SearchBar';\nimport { exportToCsv } from '../../utils/csvExport';\nimport { apiGet, apiPost, apiPut, apiDelete } from '../../services/api';\nimport { Company } from '../../types';\n\ninterface Schedule {\n  id: string;\n  course: { id: string; name: string; title?: string };\n  startDate: string;\n  endDate: string;\n  location?: string;\n  maxParticipants?: number;\n  notes?: string;\n  deliveryMode?: string;\n  sessions?: Array<{\n    id: string;\n    date: string;\n    start: string;\n    end: string;\n    trainer?: { id: string; firstName: string; lastName: string };\n    co_trainer?: { id: string; firstName: string; lastName: string };\n  }>;\n  companies?: Array<{\n    company: { id: string; ragioneSociale?: string; name?: string };\n  }>;\n  enrollments?: Array<{\n    employee: { id: string; firstName: string; lastName: string };\n  }>;\n}\n\ninterface Course {\n  id: string;\n  name: string;\n}\n\ninterface Trainer {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface Employee {\n  id: string;\n  firstName: string;\n  lastName: string;\n  companyId: string;\n  email?: string;\n  position?: string;\n}\n\n// Funzione helper per combinare data e ora in modo robusto\nfunction combineDateAndTime(dateStr: string, timeStr: string) {\n  const [year, month, day] = dateStr.split('T')[0].split('-');\n  const [hour, minute] = timeStr.split(':');\n  return new Date(\n    Number(year),\n    Number(month) - 1,\n    Number(day),\n    Number(hour),\n    Number(minute)\n  );\n}\n\nconst SchedulesPage: React.FC = () => {\n  \n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [trainers, setTrainers] = useState<Trainer[]>([]);\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [view, setView] = useState<'table' | 'calendar'>(() => {\n    return (localStorage.getItem('schedulesViewMode') as 'table' | 'calendar') || 'table';\n  });\n  const [loading, setLoading] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [editingSchedule, setEditingSchedule] = useState<Schedule | null>(null);\n  const [selectedSlot, setSelectedSlot] = useState<{ start: Date; end: Date } | null>(null);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [selectionMode, setSelectionMode] = useState(false);\n  const [selectAll, setSelectAll] = useState(false);\n  const [alert, setAlert] = useState<{ type: 'success' | 'error'; message: string } | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [activeFilters, setActiveFilters] = useState<Record<string, string>>({});\n  const [activeSort, setActiveSort] = useState<{ field: string, direction: 'asc' | 'desc' } | undefined>(undefined);\n\n  useEffect(() => {\n    fetchData();\n    localStorage.setItem('schedulesViewMode', view);\n  }, [view]);\n\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const [schedulesData, coursesData, trainersData, companiesData, employeesData] = await Promise.all([\n        apiGet('/schedules'),\n        apiGet('/courses'),\n        apiGet('/trainers'),\n        apiGet('/companies'),\n        apiGet('/persons')\n      ]);\n\n      setSchedules(schedulesData as Schedule[]);\n      setCourses(coursesData as Course[]);\n      setTrainers(trainersData as Trainer[]);\n      setCompanies(companiesData as Company[]);\n      setEmployees(employeesData as Employee[]);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Sei sicuro di voler eliminare questo programma?')) return;\n    try {\n      await apiDelete(`/schedules/${id}`);\n      setAlert({ type: 'success', message: 'Corso eliminato con successo.' });\n      await fetchData();\n    } catch (error) {\n      setAlert({ type: 'error', message: 'Errore durante l\\'eliminazione.' });\n      console.error('Error deleting schedule:', error);\n    }\n  };\n\n  const handleDeleteSelected = async () => {\n    if (!selectedIds.length) return;\n    if (!confirm('Sei sicuro di voler eliminare i corsi selezionati?')) return;\n    setLoading(true);\n    try {\n      await Promise.all(selectedIds.map(id => apiDelete(`/schedules/${id}`)));\n      setSelectedIds([]);\n      setSelectionMode(false);\n      setAlert({ type: 'success', message: 'Corsi eliminati con successo.' });\n      await fetchData();\n    } catch (error) {\n      setAlert({ type: 'error', message: 'Errore durante l\\'eliminazione multipla.' });\n      console.error('Error deleting selected schedules:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelect = (id: string) => {\n    setSelectedIds(prev => prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]);\n  };\n\n  const handleSelectAll = () => {\n    setSelectAll(!selectAll);\n    setSelectedIds(selectAll ? [] : schedules.map(s => s.id));\n  };\n\n  // Prepara i dati per la tabella\n  const data = schedules.map(schedule => {\n    // Estrai i nomi delle aziende\n    const companyNames = schedule.companies\n      ?.map(c => c.company.ragioneSociale || c.company.name)\n      .filter(Boolean)\n      .join(', ');\n\n    // Estrai il formatore della prima sessione\n    const trainer = schedule.sessions?.[0]?.trainer\n      ? `${schedule.sessions[0].trainer.firstName} ${schedule.sessions[0].trainer.lastName}`\n      : 'N/A';\n\n    // Estrai il co-formatore della prima sessione\n    const coTrainer = schedule.sessions?.[0]?.co_trainer\n      ? `${schedule.sessions[0].co_trainer.firstName} ${schedule.sessions[0].co_trainer.lastName}`\n      : '-';\n\n    // Conta i partecipanti\n    const participantsCount = schedule.enrollments?.length || 0;\n\n    // Estrai le date delle sessioni\n    const sessionDates = schedule.sessions\n      ?.map(s => {\n        const date = new Date(s.date);\n        return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;\n      })\n      .join(', ');\n\n    // Determina la modalità di erogazione in italiano\n    let deliveryModeItalian = 'N/D';\n    if (schedule.deliveryMode === 'IN_PERSON') deliveryModeItalian = 'In presenza';\n    if (schedule.deliveryMode === 'ONLINE') deliveryModeItalian = 'Online';\n    if (schedule.deliveryMode === 'HYBRID') deliveryModeItalian = 'Ibrida';\n\n    return {\n      id: schedule.id,\n      corso: schedule.course.title || schedule.course.name,\n      aziende: companyNames || 'N/D',\n      formatore: trainer,\n      coFormatore: coTrainer,\n      partecipanti: participantsCount,\n      dataInizio: new Date(schedule.startDate).toLocaleDateString('it-IT'),\n      dataFine: new Date(schedule.endDate).toLocaleDateString('it-IT'),\n      sessioni: sessionDates || 'N/D',\n      modalità: deliveryModeItalian,\n      location: schedule.location || 'N/D',\n      selected: selectedIds.includes(schedule.id),\n      _original: schedule\n    };\n  });\n\n  // Prepara gli eventi per il calendario\n  const events: ScheduleEvent[] = [];\n  schedules.forEach(schedule => {\n    const courseName = schedule.course.title || schedule.course.name;\n    const companyNames = schedule.companies\n      ?.map(c => c.company.ragioneSociale || c.company.name)\n      .filter(Boolean)\n      .join(', ');\n\n    // Se ci sono sessioni, crea un evento per ogni sessione\n    if (schedule.sessions && schedule.sessions.length > 0) {\n      schedule.sessions.forEach(session => {\n        try {\n          const sessionDate = session.date.split('T')[0];\n          const startTime = session.start;\n          const endTime = session.end;\n          \n          // Combina data e ora per ottenere gli oggetti Date completi\n          const startDateTime = combineDateAndTime(sessionDate, startTime);\n          const endDateTime = combineDateAndTime(sessionDate, endTime);\n          \n          // Estrai i nomi dei formatori\n          const trainerName = session.trainer\n            ? `${session.trainer.firstName} ${session.trainer.lastName}`\n            : '';\n          \n          const coTrainerName = session.co_trainer\n            ? `${session.co_trainer.firstName} ${session.co_trainer.lastName}`\n            : '';\n          \n          // Formatta il titolo dell'evento\n          let title = courseName;\n          if (companyNames) title += ` - ${companyNames}`;\n          \n          // Aggiungi formatori al titolo se disponibili\n          let description = '';\n          if (trainerName) description += `Formatore: ${trainerName}`;\n          if (coTrainerName) description += description ? `, Co-formatore: ${coTrainerName}` : `Co-formatore: ${coTrainerName}`;\n          \n          events.push({\n            id: session.id,\n            scheduleId: schedule.id,\n            title,\n            description,\n            start: startDateTime,\n            end: endDateTime,\n            resource: schedule\n          });\n        } catch (error) {\n          console.error('Error parsing session dates:', error);\n        }\n      });\n    } else {\n      // Se non ci sono sessioni, crea un evento basato sulle date di inizio e fine\n      try {\n        const startDate = new Date(schedule.startDate);\n        const endDate = new Date(schedule.endDate);\n        \n        // Se le date sono valide, aggiungi l'evento\n        if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {\n          let title = courseName;\n          if (companyNames) title += ` - ${companyNames}`;\n          \n          events.push({\n            id: schedule.id,\n            title,\n        start: startDate,\n        end: endDate,\n            resource: schedule\n    });\n        }\n      } catch (error) {\n        console.error('Error parsing schedule dates:', error);\n      }\n    }\n  });\n\n  // Funzione rimossa - non utilizzata\n\n  const handleDownloadTemplate = () => {\n    const template = [\n      {\n        corso_id: 'ID del corso',\n        data_inizio: 'YYYY-MM-DD',\n        data_fine: 'YYYY-MM-DD',\n        location: 'Sede del corso',\n        partecipanti_max: 'Numero massimo',\n        note: 'Note opzionali',\n        modalita: 'IN_PERSON/ONLINE/HYBRID',\n        formatore_id: 'ID del formatore',\n        co_formatore_id: 'ID del co-formatore (opzionale)',\n        sessioni: 'YYYY-MM-DD:HH:MM-HH:MM,YYYY-MM-DD:HH:MM-HH:MM',\n        aziende_ids: 'ID1,ID2,ID3',\n        dipendenti_ids: 'ID1,ID2,ID3'\n      }\n    ];\n    exportToCsv(template, 'template_pianificazioni.csv');\n  };\n    \n  // Applica ricerca e filtri\n  const filteredSchedules = data\n    .filter(item => {\n      // Ricerca testuale\n      if (searchTerm) {\n        const searchRegex = new RegExp(searchTerm, 'i');\n        return (\n          searchRegex.test(item.corso) ||\n          searchRegex.test(item.aziende) ||\n          searchRegex.test(item.formatore) ||\n          searchRegex.test(item.location)\n        );\n      }\n      return true;\n    })\n    .filter(item => {\n      // Filtri attivi\n      return Object.entries(activeFilters).every(([field, value]) => {\n        if (!value) return true;\n        switch (field) {\n          case 'modalità':\n            return item.modalità === value;\n          case 'formatore':\n            return item.formatore.toLowerCase().includes(value.toLowerCase());\n          case 'aziende':\n            return item.aziende.toLowerCase().includes(value.toLowerCase());\n          default:\n            return true;\n        }\n      });\n    })\n    .sort((a, b) => {\n      // Ordinamento\n      if (!activeSort) return 0;\n      \n      const { field, direction } = activeSort;\n      const multiplier = direction === 'asc' ? 1 : -1;\n      \n      switch (field) {\n        case 'corso':\n          return multiplier * a.corso.localeCompare(b.corso);\n        case 'dataInizio':\n          return multiplier * (new Date(a.dataInizio).getTime() - new Date(b.dataInizio).getTime());\n        case 'dataFine':\n          return multiplier * (new Date(a.dataFine).getTime() - new Date(b.dataFine).getTime());\n        case 'formatore':\n          return multiplier * a.formatore.localeCompare(b.formatore);\n        case 'aziende':\n          return multiplier * a.aziende.localeCompare(b.aziende);\n        default:\n          return 0;\n      }\n    });\n\n  const handleDownloadCsv = () => {\n    const csvData = filteredSchedules.map(item => ({\n      ID: item.id,\n      Corso: item.corso,\n      Aziende: item.aziende,\n      Formatore: item.formatore,\n      'Co-Formatore': item.coFormatore,\n      Partecipanti: item.partecipanti,\n      'Data Inizio': item.dataInizio,\n      'Data Fine': item.dataFine,\n      Sessioni: item.sessioni,\n      Modalità: item.modalità,\n      Location: item.location\n    }));\n    \n    exportToCsv(csvData, 'pianificazioni.csv');\n  };\n\n  const columns = [\n    {\n      id: 'select',\n      header: selectionMode ? (\n            <input\n              type=\"checkbox\"\n              checked={selectAll}\n              onChange={handleSelectAll}\n          className=\"w-4 h-4\"\n            />\n      ) : null,\n      cell: (info: any) => selectionMode ? (\n            <input\n              type=\"checkbox\"\n          checked={selectedIds.includes(info.row.original.id)}\n          onChange={() => handleSelect(info.row.original.id)}\n          className=\"w-4 h-4\"\n            />\n      ) : null,\n      width: 35,\n      minWidth: 35,\n      maxWidth: 35,\n    },\n    {\n      id: 'corso',\n      header: 'Corso',\n      accessorKey: 'corso',\n      width: 150,\n    },\n    { \n      id: 'aziende',\n      header: 'Aziende',\n      accessorKey: 'aziende',\n      width: 150,\n    },\n    {\n      id: 'formatore',\n      header: 'Formatore',\n      accessorKey: 'formatore',\n      width: 120,\n    },\n    {\n      id: 'coFormatore',\n      header: 'Co-Formatore',\n      accessorKey: 'coFormatore',\n      width: 120,\n    },\n    {\n      id: 'partecipanti',\n      header: 'Partecipanti',\n      accessorKey: 'partecipanti',\n      width: 100,\n    },\n    { \n      id: 'dataInizio',\n      header: 'Data Inizio',\n      accessorKey: 'dataInizio',\n      width: 100,\n    },\n    {\n      id: 'dataFine',\n      header: 'Data Fine',\n      accessorKey: 'dataFine',\n      width: 100,\n    },\n    {\n      id: 'sessioni',\n      header: 'Sessioni',\n      accessorKey: 'sessioni',\n      width: 150,\n    },\n    {\n      id: 'modalità',\n      header: 'Modalità',\n      accessorKey: 'modalità',\n      width: 100,\n    },\n    {\n      id: 'location',\n      header: 'Location',\n      accessorKey: 'location',\n      width: 120,\n    },\n    { \n      id: 'actions',\n      header: 'Azioni',\n      cell: (info: any) => (\n        <div className=\"flex space-x-1\">\n          <button\n            onClick={() => {\n              const schedule = info.row.original._original;\n              setEditingSchedule(schedule);\n              setShowForm(true);\n            }}\n            className=\"p-1 text-blue-600 hover:text-blue-800\"\n            title=\"Modifica\"\n          >\n            <Pencil size={16} />\n          </button>\n          <button\n            onClick={() => handleDelete(info.row.original.id)}\n            className=\"p-1 text-red-600 hover:text-red-800\"\n            title=\"Elimina\"\n          >\n            <Trash2 size={16} />\n          </button>\n        </div>\n      ),\n      width: 80,\n    },\n  ];\n\n  // Component for the search and filter bar\n  const SearchFilterBar = () => (\n    <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center space-y-2 md:space-y-0 md:space-x-4 mb-4\">\n      <SearchBarControls>\n        <SearchBar\n          value={searchTerm}\n          onChange={setSearchTerm}\n          placeholder=\"Cerca pianificazioni...\"\n        />\n        <FilterPanel\n          filterOptions={[\n            {\n              field: 'modalità',\n              label: 'Modalità',\n              options: [\n                { value: 'In presenza', label: 'In presenza' },\n                { value: 'Online', label: 'Online' },\n                { value: 'Ibrida', label: 'Ibrida' },\n              ]\n            },\n            {\n              field: 'formatore',\n              label: 'Formatore',\n              options: Array.from(new Set(data.map(d => d.formatore)))\n                .filter(f => f !== 'N/A')\n                .map(f => ({ value: f, label: f }))\n            },\n            {\n              field: 'aziende',\n              label: 'Aziende',\n              options: Array.from(new Set(\n                data.flatMap(d => d.aziende.split(', ').filter(a => a !== 'N/D'))\n              )).map(a => ({ value: a, label: a }))\n            }\n          ]}\n          activeFilters={activeFilters}\n          onFilterChange={(field, value) => {\n            setActiveFilters(prev => ({\n              ...prev,\n              [field]: value\n            }));\n          }}\n          sortOptions={[\n            { field: 'corso', label: 'Corso' },\n            { field: 'dataInizio', label: 'Data inizio' },\n            { field: 'dataFine', label: 'Data fine' },\n            { field: 'formatore', label: 'Formatore' },\n            { field: 'aziende', label: 'Aziende' }\n          ]}\n          activeSort={activeSort}\n          onSortChange={setActiveSort}\n        />\n      </SearchBarControls>\n      \n      <HeaderPanel\n        entityType=\"programmazione\"\n        entityGender=\"female\"\n        onAdd={() => {\n          setEditingSchedule(null);\n          setShowForm(true);\n        }}\n        onImport={() => {/* TODO: Implementare import */}}\n        onDownload={handleDownloadTemplate}\n        viewMode={view}\n        onViewModeChange={(newView) => setView(newView as 'table' | 'calendar')}\n        viewModeOptions={[\n          { value: 'table', icon: <Table size={18} /> },\n          { value: 'calendar', icon: <Calendar size={18} /> }\n        ]}\n        additionalActions={view === 'table' ? [\n          {\n            icon: <Download size={16} />,\n            onClick: handleDownloadCsv,\n            tooltip: \"Esporta CSV\"\n          }\n        ] : []}\n      />\n      </div>\n    );\n\n  return (\n    <EntityListLayout\n      title=\"Pianificazioni\"\n      subtitle=\"Gestisci tutti i corsi pianificati\"\n      searchFilterBar={<SearchFilterBar />}\n      loading={loading}\n      error={null}\n      alert={alert}\n      onAlertClose={() => setAlert(null)}\n      selectionMode={selectionMode}\n      onToggleSelection={() => {\n        setSelectionMode(!selectionMode);\n        if (selectionMode) {\n          setSelectedIds([]);\n          setSelectAll(false);\n        }\n      }}\n      selectedCount={selectedIds.length}\n      onDeleteSelected={handleDeleteSelected}\n          >\n      {view === 'table' ? (\n        <ResizableTable\n          columns={columns}\n          data={filteredSchedules}\n        />\n      ) : (\n        <ScheduleCalendar\n          events={events}\n          onSelectEvent={(event) => {\n            const schedule = schedules.find(s => s.id === (event.scheduleId || event.id));\n            if (schedule) {\n              setEditingSchedule(schedule);\n              setShowForm(true);\n              setSelectedSlot(null);\n            }\n          }}\n          onSelectSlot={(slotInfo) => {\n            setEditingSchedule(null);\n            setSelectedSlot({ start: slotInfo.start, end: slotInfo.end });\n            setShowForm(true);\n          }}\n        />\n      )}\n\n      {showForm && (\n        <ScheduleEventModalLazy\n          key={editingSchedule?.id || 'new-schedule'}\n          trainings={courses.map((c: any) => ({ ...c, title: c.title || c.name }))}\n          trainers={trainers}\n          companies={companies}\n          employees={employees}\n          existingEvent={editingSchedule ? {\n            ...editingSchedule,\n            trainingId: editingSchedule.course.id,\n            trainerId: editingSchedule.sessions?.[0]?.trainer?.id || '',\n            coTrainerId: editingSchedule.sessions?.[0]?.co_trainer?.id || '',\n            dates: editingSchedule.sessions?.map(sess => ({\n              date: sess.date.split('T')[0],\n              start: sess.start,\n              end: sess.end,\n              trainerId: sess.trainer?.id || '',\n              coTrainerId: sess.co_trainer?.id || '',\n            })) || [],\n            location: editingSchedule.location,\n            maxParticipants: editingSchedule.maxParticipants,\n            notes: editingSchedule.notes,\n            deliveryMode: editingSchedule.deliveryMode,\n            companyIds: editingSchedule.companies?.map((c: any) => c.company.id) || [],\n            personIds: editingSchedule.enrollments?.map((e: any) => e.employee.id) || [],\n          } : undefined}\n          initialDate={\n            selectedSlot\n              ? selectedSlot.start.getFullYear() +\n                '-' +\n                String(selectedSlot.start.getMonth() + 1).padStart(2, '0') +\n                '-' +\n                String(selectedSlot.start.getDate()).padStart(2, '0')\n              : undefined\n          }\n          initialTime={selectedSlot ? {\n            start: selectedSlot.start.toTimeString().slice(0, 5),\n            end: selectedSlot.end.toTimeString().slice(0, 5),\n          } : undefined}\n          onClose={() => {\n            setShowForm(false);\n            setEditingSchedule(null);\n            setSelectedSlot(null);\n          }}\n          onSuccess={async () => {\n            await fetchData();\n            setShowForm(false);\n            setEditingSchedule(null);\n            setSelectedSlot(null);\n          }}\n        />\n      )}\n    </EntityListLayout>\n  );\n};\n\nexport default SchedulesPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/ActivityLogsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/HierarchyTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/PermissionsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Save' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  AlertCircle,\n  Building2,\n  Check,\n  Save,\n  Shield,\n  Users,\n  X\n} from 'lucide-react';\nimport { apiGet, apiPut } from '../../services/api';\nimport { useAuth } from '../../context/AuthContext';\nimport { toast } from 'react-hot-toast';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  roles: string[];\n  permissions: string[];\n  isActive: boolean;\n}\n\ninterface Permission {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n}\n\ninterface Role {\n  id: string;\n  name: string;\n  displayName: string;\n  permissions: string[];\n}\n\nconst PermissionsTab: React.FC = () => {\n  const { hasPermission } = useAuth();\n  const [users, setUsers] = useState<User[]>([]);\n  const [permissions, setPermissions] = useState<Permission[]>([]);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState<'users' | 'roles'>('users');\n\n  // Carica dati iniziali\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [usersData, permissionsData, rolesData] = await Promise.all([\n        apiGet('/api/v1/users'),\n        apiGet('/api/v1/permissions'),\n        apiGet('/api/v1/roles')\n      ]);\n      \n      setUsers(usersData.data || usersData);\n      setPermissions(permissionsData.data || permissionsData);\n      setRoles(rolesData.data || rolesData);\n    } catch (error) {\n      console.error('Errore nel caricamento dati:', error);\n      toast.error('Errore nel caricamento dei dati');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateUserPermissions = async (personId: string, newPermissions: string[]) => {\n    try {\n      setSaving(true);\n      await apiPut(`/api/v1/users/${personId}/permissions`, {\n        permissions: newPermissions\n      });\n      \n      // Aggiorna lo stato locale\n      setUsers(prev => prev.map(user => \n        user.id === personId \n          ? { ...user, permissions: newPermissions }\n          : user\n      ));\n      \n      if (selectedUser?.id === personId) {\n        setSelectedUser(prev => prev ? { ...prev, permissions: newPermissions } : null);\n      }\n      \n      toast.success('Permessi aggiornati con successo');\n    } catch (error) {\n      console.error('Errore nell\\'aggiornamento permessi:', error);\n      toast.error('Errore nell\\'aggiornamento dei permessi');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const updateRolePermissions = async (roleId: string, newPermissions: string[]) => {\n    try {\n      setSaving(true);\n      await apiPut(`/api/v1/roles/${roleId}`, {\n        permissions: newPermissions\n      });\n      \n      // Aggiorna lo stato locale\n      setRoles(prev => prev.map(role => \n        role.id === roleId \n          ? { ...role, permissions: newPermissions }\n          : role\n      ));\n      \n      toast.success('Permessi del ruolo aggiornati con successo');\n    } catch (error) {\n      console.error('Errore nell\\'aggiornamento permessi ruolo:', error);\n      toast.error('Errore nell\\'aggiornamento dei permessi del ruolo');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const toggleUserPermission = (permission: string) => {\n    if (!selectedUser) return;\n    \n    const currentPermissions = selectedUser.permissions || [];\n    const newPermissions = currentPermissions.includes(permission)\n      ? currentPermissions.filter(p => p !== permission)\n      : [...currentPermissions, permission];\n    \n    updateUserPermissions(selectedUser.id, newPermissions);\n  };\n\n  const toggleRolePermission = (roleId: string, permission: string) => {\n    const role = roles.find(r => r.id === roleId);\n    if (!role) return;\n    \n    const currentPermissions = role.permissions || [];\n    const newPermissions = currentPermissions.includes(permission)\n      ? currentPermissions.filter(p => p !== permission)\n      : [...currentPermissions, permission];\n    \n    updateRolePermissions(roleId, newPermissions);\n  };\n\n  // Raggruppa i permessi per categoria\n  const groupedPermissions = permissions.reduce((acc, permission) => {\n    const category = permission.category || 'General';\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(permission);\n    return acc;\n  }, {} as Record<string, Permission[]>);\n\n  // Definisci le categorie di permessi con icone\n  const permissionCategories = {\n    'Companies': { icon: Building2, color: 'text-blue-600', bgColor: 'bg-blue-50' },\n    'Users': { icon: Users, color: 'text-green-600', bgColor: 'bg-green-50' },\n    'System': { icon: Shield, color: 'text-purple-600', bgColor: 'bg-purple-50' },\n    'General': { icon: AlertCircle, color: 'text-gray-600', bgColor: 'bg-gray-50' }\n  };\n\n  if (!hasPermission('system', 'admin')) {\n    return (\n      <div className=\"text-center py-8\">\n        <Shield className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Accesso Negato</h3>\n        <p className=\"text-gray-600\">Non hai i permessi necessari per gestire i permessi utente.</p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-gray-600\">Caricamento...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-900\">Gestione Permessi</h2>\n          <p className=\"text-gray-600 mt-1\">Gestisci i permessi granulari per utenti e ruoli</p>\n        </div>\n        \n        {/* Tab Navigation */}\n        <div className=\"flex bg-gray-100 rounded-lg p-1\">\n          <button\n            onClick={() => setActiveTab('users')}\n            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n              activeTab === 'users'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            <Users className=\"w-4 h-4 inline mr-2\" />\n            Utenti\n          </button>\n          <button\n            onClick={() => setActiveTab('roles')}\n            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n              activeTab === 'roles'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            <Shield className=\"w-4 h-4 inline mr-2\" />\n            Ruoli\n          </button>\n        </div>\n      </div>\n\n      {/* Content */}\n      {activeTab === 'users' ? (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Lista Utenti */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white border border-gray-200 rounded-lg\">\n              <div className=\"p-4 border-b border-gray-200\">\n                <h3 className=\"font-medium text-gray-900\">Utenti</h3>\n              </div>\n              <div className=\"max-h-96 overflow-y-auto\">\n                {users.map((user) => (\n                  <button\n                    key={user.id}\n                    onClick={() => setSelectedUser(user)}\n                    className={`w-full text-left p-4 border-b border-gray-100 hover:bg-gray-50 transition-colors ${\n                      selectedUser?.id === user.id ? 'bg-blue-50 border-blue-200' : ''\n                    }`}\n                  >\n                    <div className=\"flex items-center\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        user.isActive ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'\n                      }`}>\n                        <User className=\"w-4 h-4\" />\n                      </div>\n                      <div className=\"ml-3 flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {user.firstName} {user.lastName}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">{user.email}</p>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {user.roles.map((role) => (\n                            <span\n                              key={role}\n                              className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\"\n                            >\n                              {role}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Permessi Utente */}\n          <div className=\"lg:col-span-2\">\n            {selectedUser ? (\n              <div className=\"bg-white border border-gray-200 rounded-lg\">\n                <div className=\"p-4 border-b border-gray-200\">\n                  <h3 className=\"font-medium text-gray-900\">\n                    Permessi per {selectedUser.firstName} {selectedUser.lastName}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 mt-1\">{selectedUser.email}</p>\n                </div>\n                <div className=\"p-4 space-y-6\">\n                  {Object.entries(groupedPermissions).map(([category, categoryPermissions]) => {\n                    const categoryConfig = permissionCategories[category as keyof typeof permissionCategories] || permissionCategories.General;\n                    const IconComponent = categoryConfig.icon;\n                    \n                    return (\n                      <div key={category} className=\"space-y-3\">\n                        <div className=\"flex items-center\">\n                          <div className={`p-2 rounded-lg ${categoryConfig.bgColor}`}>\n                            <IconComponent className={`w-4 h-4 ${categoryConfig.color}`} />\n                          </div>\n                          <h4 className=\"ml-3 font-medium text-gray-900\">{category}</h4>\n                        </div>\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 ml-10\">\n                          {categoryPermissions.map((permission) => {\n                            const hasPermission = selectedUser.permissions?.includes(permission.name) || false;\n                            return (\n                              <label\n                                key={permission.id}\n                                className=\"flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\"\n                              >\n                                <input\n                                  type=\"checkbox\"\n                                  checked={hasPermission}\n                                  onChange={() => toggleUserPermission(permission.name)}\n                                  disabled={saving}\n                                  className=\"sr-only\"\n                                />\n                                <div className={`w-5 h-5 rounded border-2 flex items-center justify-center ${\n                                  hasPermission\n                                    ? 'bg-blue-600 border-blue-600 text-white'\n                                    : 'border-gray-300'\n                                }`}>\n                                  {hasPermission && <Check className=\"w-3 h-3\" />}\n                                </div>\n                                <div className=\"ml-3 flex-1\">\n                                  <p className=\"text-sm font-medium text-gray-900\">{permission.name}</p>\n                                  {permission.description && (\n                                    <p className=\"text-xs text-gray-500\">{permission.description}</p>\n                                  )}\n                                </div>\n                              </label>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            ) : (\n              <div className=\"bg-white border border-gray-200 rounded-lg p-8 text-center\">\n                <User className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Seleziona un Utente</h3>\n                <p className=\"text-gray-600\">Scegli un utente dalla lista per gestire i suoi permessi.</p>\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        /* Gestione Ruoli */\n        <div className=\"space-y-6\">\n          {roles.map((role) => (\n            <div key={role.id} className=\"bg-white border border-gray-200 rounded-lg\">\n              <div className=\"p-4 border-b border-gray-200\">\n                <h3 className=\"font-medium text-gray-900\">{role.displayName || role.name}</h3>\n                <p className=\"text-sm text-gray-600 mt-1\">Gestisci i permessi per il ruolo {role.name}</p>\n              </div>\n              <div className=\"p-4 space-y-6\">\n                {Object.entries(groupedPermissions).map(([category, categoryPermissions]) => {\n                  const categoryConfig = permissionCategories[category as keyof typeof permissionCategories] || permissionCategories.General;\n                  const IconComponent = categoryConfig.icon;\n                  \n                  return (\n                    <div key={category} className=\"space-y-3\">\n                      <div className=\"flex items-center\">\n                        <div className={`p-2 rounded-lg ${categoryConfig.bgColor}`}>\n                          <IconComponent className={`w-4 h-4 ${categoryConfig.color}`} />\n                        </div>\n                        <h4 className=\"ml-3 font-medium text-gray-900\">{category}</h4>\n                      </div>\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 ml-10\">\n                        {categoryPermissions.map((permission) => {\n                          const hasPermission = role.permissions?.includes(permission.name) || false;\n                          return (\n                            <label\n                              key={permission.id}\n                              className=\"flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\"\n                            >\n                              <input\n                                type=\"checkbox\"\n                                checked={hasPermission}\n                                onChange={() => toggleRolePermission(role.id, permission.name)}\n                                disabled={saving}\n                                className=\"sr-only\"\n                              />\n                              <div className={`w-5 h-5 rounded border-2 flex items-center justify-center ${\n                                hasPermission\n                                  ? 'bg-blue-600 border-blue-600 text-white'\n                                  : 'border-gray-300'\n                              }`}>\n                                {hasPermission && <Check className=\"w-3 h-3\" />}\n                              </div>\n                              <div className=\"ml-3 flex-1\">\n                                <p className=\"text-sm font-medium text-gray-900\">{permission.name}</p>\n                                {permission.description && (\n                                  <p className=\"text-xs text-gray-500\">{permission.description}</p>\n                                )}\n                              </div>\n                            </label>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Loading overlay */}\n      {saving && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 flex items-center\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mr-3\"></div>\n            <span className=\"text-gray-900\">Salvando...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PermissionsTab;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/PublicCMSPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6195,6198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6195,6198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":220,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":220,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7295,7298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7295,7298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { usePermissions } from '../../hooks/auth/usePermissions';\nimport { Button } from '../../design-system/atoms/Button/Button';\nimport { FormField } from '../../design-system/molecules/FormField/FormField';\nimport { Card } from '../../design-system/molecules/Card/Card';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '../../design-system/molecules/Tabs/Tabs';\nimport { LoadingFallback } from '../../components/ui/LoadingFallback';\nimport { Alert, AlertDescription } from '../../components/ui/alert';\nimport { ImageUpload } from '../../components/ui/image-upload';\nimport { \n  Briefcase,\n  Building,\n  Globe,\n  Phone,\n  Settings\n} from 'lucide-react';\n\ninterface CMSData {\n  homepage: {\n    heroTitle: string;\n    heroSubtitle: string;\n    heroDescription: string;\n    heroImage: string;\n    servicesTitle: string;\n    servicesDescription: string;\n    aboutTitle: string;\n    aboutDescription: string;\n    aboutImage: string;\n  };\n  services: {\n    heroTitle: string;\n    heroSubtitle: string;\n    description: string;\n    whyChooseTitle: string;\n    whyChooseDescription: string;\n  };\n  contacts: {\n    heroTitle: string;\n    heroSubtitle: string;\n    description: string;\n    address: string;\n    phone: string;\n    email: string;\n    hours: string;\n  };\n  careers: {\n    heroTitle: string;\n    heroSubtitle: string;\n    description: string;\n    benefitsTitle: string;\n    benefitsDescription: string;\n  };\n  company: {\n    heroTitle: string;\n    heroSubtitle: string;\n    description: string;\n    missionTitle: string;\n    missionDescription: string;\n    visionTitle: string;\n    visionDescription: string;\n    valuesTitle: string;\n    valuesDescription: string;\n  };\n}\n\nconst initialData: CMSData = {\n  homepage: {\n    heroTitle: 'Benvenuti in Element Formazione',\n    heroSubtitle: 'La tua crescita professionale inizia qui',\n    heroDescription: 'Offriamo corsi di formazione di alta qualità per sviluppare le tue competenze e accelerare la tua carriera.',\n    heroImage: '',\n    servicesTitle: 'I Nostri Servizi',\n    servicesDescription: 'Scopri la nostra gamma completa di servizi formativi.',\n    aboutTitle: 'Chi Siamo',\n    aboutDescription: 'Element Formazione è un centro di eccellenza per la formazione professionale.',\n    aboutImage: ''\n  },\n  services: {\n    heroTitle: 'I Nostri Servizi',\n    heroSubtitle: 'Formazione di qualità per ogni esigenza',\n    description: 'Offriamo una vasta gamma di servizi formativi personalizzati.',\n    whyChooseTitle: 'Perché Scegliere Element Formazione',\n    whyChooseDescription: 'La nostra esperienza e professionalità al tuo servizio.'\n  },\n  contacts: {\n    heroTitle: 'Contattaci',\n    heroSubtitle: 'Siamo qui per aiutarti',\n    description: 'Mettiti in contatto con noi per qualsiasi informazione.',\n    address: 'Via Roma 123, 00100 Roma',\n    phone: '+39 06 1234567',\n    email: 'info@elementformazione.it',\n    hours: 'Lun-Ven: 9:00-18:00'\n  },\n  careers: {\n    heroTitle: 'Lavora con Noi',\n    heroSubtitle: 'Unisciti al nostro team',\n    description: 'Cerchiamo persone motivate e competenti.',\n    benefitsTitle: 'I Nostri Benefit',\n    benefitsDescription: 'Offriamo un ambiente di lavoro stimolante e benefit competitivi.'\n  },\n  company: {\n    heroTitle: 'La Nostra Azienda',\n    heroSubtitle: 'Eccellenza nella formazione dal 2010',\n    description: 'Element Formazione è leader nel settore della formazione professionale.',\n    missionTitle: 'La Nostra Missione',\n    missionDescription: 'Fornire formazione di qualità per lo sviluppo professionale.',\n    visionTitle: 'La Nostra Visione',\n    visionDescription: 'Essere il punto di riferimento per la formazione in Italia.',\n    valuesTitle: 'I Nostri Valori',\n    valuesDescription: 'Qualità, innovazione e attenzione al cliente.'\n  }\n};\n\n// Componente per sezione form riutilizzabile\ninterface FormSectionProps {\n  title: string;\n  subtitle: string;\n  icon?: React.ReactNode;\n  children: React.ReactNode;\n}\n\nconst FormSection: React.FC<FormSectionProps> = ({ title, subtitle, icon, children }) => (\n  <Card \n    title={title} \n    subtitle={subtitle}\n    className=\"space-y-4\"\n  >\n    {icon && (\n      <div className=\"flex items-center gap-2 mb-4\">\n        {icon}\n        <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n      </div>\n    )}\n    <div className=\"space-y-4\">\n      {children}\n    </div>\n  </Card>\n);\n\n// Componente per gruppo di campi riutilizzabile\ninterface FieldGroupProps {\n  fields: Array<{\n    name: string;\n    label: string;\n    type: 'text' | 'textarea' | 'email';\n    value: string;\n    onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\n    disabled?: boolean;\n    error?: string;\n    rows?: number;\n    required?: boolean;\n  }>;\n}\n\nconst FieldGroup: React.FC<FieldGroupProps> = ({ fields }) => (\n  <>\n    {fields.map((field) => (\n      <FormField\n        key={field.name}\n        name={field.name}\n        label={field.label}\n        type={field.type}\n        value={field.value}\n        onChange={field.onChange}\n        disabled={field.disabled}\n        error={field.error}\n        rows={field.rows}\n        required={field.required}\n      />\n    ))}\n  </>\n);\n\n// Hook per validazione form ottimizzato\nconst useFormValidation = (data: CMSData) => {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validateField = (path: string, value: string) => {\n    const newErrors = { ...errors };\n    \n    if (!value.trim()) {\n      newErrors[path] = 'Questo campo è obbligatorio';\n    } else {\n      delete newErrors[path];\n    }\n    \n    setErrors(newErrors);\n    return !newErrors[path];\n  };\n\n  const validateAll = () => {\n    const newErrors: Record<string, string> = {};\n    \n    // Validazione campi obbligatori\n    const requiredFields = [\n      'homepage.heroTitle',\n      'homepage.heroSubtitle',\n      'services.heroTitle',\n      'contacts.heroTitle',\n      'careers.heroTitle',\n      'company.heroTitle'\n    ];\n\n    requiredFields.forEach(field => {\n      const value = field.split('.').reduce((obj, key) => obj[key], data as any);\n      if (!value?.trim()) {\n        newErrors[field] = 'Questo campo è obbligatorio';\n      }\n    });\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  return { errors, validateField, validateAll, setErrors };\n};\n\nconst PublicCMSPage: React.FC = () => {\n  const { user } = useAuth();\n  const { hasPermission } = usePermissions();\n  const [formData, setFormData] = useState<CMSData>(initialData);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [isDirty, setIsDirty] = useState(false);\n  const [activeTab, setActiveTab] = useState('homepage');\n  const { errors, validateField, validateAll } = useFormValidation(formData);\n\n  // Permessi\n  const canView = hasPermission('cms', 'read');\n  const canEdit = hasPermission('cms', 'edit') || hasPermission('cms', 'update');\n\n  // Helper per aggiornare campi nested\n  const handleFieldChange = (fieldPath: string, value: string) => {\n    const keys = fieldPath.split('.');\n    setFormData(prev => {\n      const newData = { ...prev };\n      let current = newData as any;\n      \n      for (let i = 0; i < keys.length - 1; i++) {\n        current[keys[i]] = { ...current[keys[i]] };\n        current = current[keys[i]];\n      }\n      \n      current[keys[keys.length - 1]] = value;\n      return newData;\n    });\n    setIsDirty(true);\n    validateField(fieldPath, value);\n  };\n\n  // Helper generico per tutti i tipi di input\n  const handleGenericChange = (fieldPath: string) => (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    handleFieldChange(fieldPath, e.target.value);\n  };\n\n  // Caricamento dati\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        // Simula caricamento dati dal server\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setLoading(false);\n      } catch (error) {\n        console.error('Errore nel caricamento dei dati CMS:', error);\n        setLoading(false);\n      }\n    };\n\n    if (canView) {\n      loadData();\n    }\n  }, [canView]);\n\n  // Salvataggio\n  const onSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateAll()) {\n      console.error('Errori di validazione nel form');\n      return;\n    }\n\n    setSaving(true);\n    try {\n      // Simula salvataggio\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      setIsDirty(false);\n      console.log('Dati CMS salvati:', formData);\n    } catch (error) {\n      console.error('Errore nel salvataggio:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Anteprima\n  const handlePreview = () => {\n    window.open('/', '_blank');\n  };\n\n  if (!canView) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-gray-500\">Non hai i permessi per visualizzare questa pagina.</p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return <LoadingFallback />;\n  }\n\n  // Configurazione tab con icone\n  const tabsConfig = [\n    { id: 'homepage', label: 'Homepage', icon: <Globe className=\"w-4 h-4\" /> },\n    { id: 'services', label: 'Servizi', icon: <Settings className=\"w-4 h-4\" /> },\n    { id: 'contacts', label: 'Contatti', icon: <Phone className=\"w-4 h-4\" /> },\n    { id: 'careers', label: 'Carriere', icon: <Briefcase className=\"w-4 h-4\" /> },\n    { id: 'company', label: 'Azienda', icon: <Building className=\"w-4 h-4\" /> }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header ottimizzato */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Gestione Frontend Pubblico</h1>\n          <p className=\"text-gray-600\">Modifica i contenuti del sito web pubblico</p>\n        </div>\n        <div className=\"flex gap-3\">\n          <Button\n            variant=\"outline\"\n            onClick={handlePreview}\n          >\n            Anteprima Sito\n          </Button>\n          <Button\n            onClick={onSubmit}\n            disabled={!canEdit || !isDirty || saving}\n          >\n            {saving ? 'Salvataggio...' : 'Salva Modifiche'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Alert per modifiche non salvate */}\n      {isDirty && (\n        <Alert>\n          <AlertDescription>\n            Hai delle modifiche non salvate. Ricordati di salvare prima di uscire dalla pagina.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Contenuto principale con componenti riutilizzabili */}\n      <form onSubmit={onSubmit}>\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList>\n            {tabsConfig.map(tab => (\n              <TabsTrigger key={tab.id} value={tab.id} className=\"flex items-center gap-2\">\n                {tab.icon}\n                {tab.label}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {/* Homepage Tab */}\n          <TabsContent value=\"homepage\" className=\"space-y-6\">\n            <FormSection title=\"Sezione Hero\" subtitle=\"Contenuto principale della homepage\" icon={<Globe className=\"w-5 h-5 text-blue-600\" />}>\n              <FieldGroup fields={[\n                {\n                  name: 'homepage.heroTitle',\n                  label: 'Titolo Principale',\n                  type: 'text',\n                  value: formData.homepage.heroTitle,\n                  onChange: handleGenericChange('homepage.heroTitle'),\n                  disabled: !canEdit,\n                  error: errors['homepage.heroTitle'],\n                  required: true\n                },\n                {\n                  name: 'homepage.heroSubtitle',\n                  label: 'Sottotitolo',\n                  type: 'text',\n                  value: formData.homepage.heroSubtitle,\n                  onChange: handleGenericChange('homepage.heroSubtitle'),\n                  disabled: !canEdit,\n                  error: errors['homepage.heroSubtitle'],\n                  required: true\n                },\n                {\n                  name: 'homepage.heroDescription',\n                  label: 'Descrizione',\n                  type: 'textarea',\n                  value: formData.homepage.heroDescription,\n                  onChange: handleGenericChange('homepage.heroDescription'),\n                  disabled: !canEdit,\n                  error: errors['homepage.heroDescription'],\n                  rows: 3\n                }\n              ]} />\n\n              {canEdit && (\n                <ImageUpload\n                  label=\"Immagine Hero\"\n                  value={formData.homepage.heroImage}\n                  onChange={(url) => handleFieldChange('homepage.heroImage', url)}\n                />\n              )}\n            </FormSection>\n\n            <FormSection title=\"Sezione Servizi\" subtitle=\"Presentazione dei servizi\">\n              <FieldGroup fields={[\n                {\n                  name: 'homepage.servicesTitle',\n                  label: 'Titolo Servizi',\n                  type: 'text',\n                  value: formData.homepage.servicesTitle,\n                  onChange: handleGenericChange('homepage.servicesTitle'),\n                  disabled: !canEdit,\n                  error: errors['homepage.servicesTitle']\n                },\n                {\n                  name: 'homepage.servicesDescription',\n                  label: 'Descrizione Servizi',\n                  type: 'textarea',\n                  value: formData.homepage.servicesDescription,\n                  onChange: handleGenericChange('homepage.servicesDescription'),\n                  disabled: !canEdit,\n                  error: errors['homepage.servicesDescription'],\n                  rows: 2\n                }\n              ]} />\n            </FormSection>\n\n            <FormSection title=\"Sezione Chi Siamo\" subtitle=\"Presentazione dell'azienda\">\n              <FieldGroup fields={[\n                {\n                  name: 'homepage.aboutTitle',\n                  label: 'Titolo Chi Siamo',\n                  type: 'text',\n                  value: formData.homepage.aboutTitle,\n                  onChange: handleGenericChange('homepage.aboutTitle'),\n                  disabled: !canEdit,\n                  error: errors['homepage.aboutTitle']\n                },\n                {\n                  name: 'homepage.aboutDescription',\n                  label: 'Descrizione Chi Siamo',\n                  type: 'textarea',\n                  value: formData.homepage.aboutDescription,\n                  onChange: handleGenericChange('homepage.aboutDescription'),\n                  disabled: !canEdit,\n                  error: errors['homepage.aboutDescription'],\n                  rows: 3\n                }\n              ]} />\n\n              {canEdit && (\n                <ImageUpload\n                  label=\"Immagine Chi Siamo\"\n                  value={formData.homepage.aboutImage}\n                  onChange={(url) => handleFieldChange('homepage.aboutImage', url)}\n                />\n              )}\n            </FormSection>\n          </TabsContent>\n\n          {/* Services Tab */}\n          <TabsContent value=\"services\" className=\"space-y-6\">\n            <FormSection title=\"Pagina Servizi\" subtitle=\"Contenuti della pagina servizi\" icon={<Settings className=\"w-5 h-5 text-green-600\" />}>\n              <FieldGroup fields={[\n                {\n                  name: 'services.heroTitle',\n                  label: 'Titolo Principale',\n                  type: 'text',\n                  value: formData.services.heroTitle,\n                  onChange: handleGenericChange('services.heroTitle'),\n                  disabled: !canEdit,\n                  error: errors['services.heroTitle'],\n                  required: true\n                },\n                {\n                  name: 'services.heroSubtitle',\n                  label: 'Sottotitolo',\n                  type: 'text',\n                  value: formData.services.heroSubtitle,\n                  onChange: handleGenericChange('services.heroSubtitle'),\n                  disabled: !canEdit,\n                  error: errors['services.heroSubtitle']\n                },\n                {\n                  name: 'services.description',\n                  label: 'Descrizione',\n                  type: 'textarea',\n                  value: formData.services.description,\n                  onChange: handleGenericChange('services.description'),\n                  disabled: !canEdit,\n                  error: errors['services.description'],\n                  rows: 3\n                },\n                {\n                  name: 'services.whyChooseTitle',\n                  label: 'Titolo Perché Sceglierci',\n                  type: 'text',\n                  value: formData.services.whyChooseTitle,\n                  onChange: handleGenericChange('services.whyChooseTitle'),\n                  disabled: !canEdit,\n                  error: errors['services.whyChooseTitle']\n                },\n                {\n                  name: 'services.whyChooseDescription',\n                  label: 'Descrizione Perché Sceglierci',\n                  type: 'textarea',\n                  value: formData.services.whyChooseDescription,\n                  onChange: handleGenericChange('services.whyChooseDescription'),\n                  disabled: !canEdit,\n                  error: errors['services.whyChooseDescription'],\n                  rows: 3\n                }\n              ]} />\n            </FormSection>\n          </TabsContent>\n\n          {/* Contacts Tab */}\n          <TabsContent value=\"contacts\" className=\"space-y-6\">\n            <FormSection title=\"Pagina Contatti\" subtitle=\"Informazioni di contatto\" icon={<Phone className=\"w-5 h-5 text-purple-600\" />}>\n              <FieldGroup fields={[\n                {\n                  name: 'contacts.heroTitle',\n                  label: 'Titolo Principale',\n                  type: 'text',\n                  value: formData.contacts.heroTitle,\n                  onChange: handleGenericChange('contacts.heroTitle'),\n                  disabled: !canEdit,\n                  error: errors['contacts.heroTitle'],\n                  required: true\n                },\n                {\n                  name: 'contacts.heroSubtitle',\n                  label: 'Sottotitolo',\n                  type: 'text',\n                  value: formData.contacts.heroSubtitle,\n                  onChange: handleGenericChange('contacts.heroSubtitle'),\n                  disabled: !canEdit,\n                  error: errors['contacts.heroSubtitle']\n                },\n                {\n                  name: 'contacts.description',\n                  label: 'Descrizione',\n                  type: 'textarea',\n                  value: formData.contacts.description,\n                  onChange: handleGenericChange('contacts.description'),\n                  disabled: !canEdit,\n                  error: errors['contacts.description'],\n                  rows: 3\n                },\n                {\n                  name: 'contacts.address',\n                  label: 'Indirizzo',\n                  type: 'text',\n                  value: formData.contacts.address,\n                  onChange: handleGenericChange('contacts.address'),\n                  disabled: !canEdit,\n                  error: errors['contacts.address']\n                },\n                {\n                  name: 'contacts.phone',\n                  label: 'Telefono',\n                  type: 'text',\n                  value: formData.contacts.phone,\n                  onChange: handleGenericChange('contacts.phone'),\n                  disabled: !canEdit,\n                  error: errors['contacts.phone']\n                },\n                {\n                  name: 'contacts.email',\n                  label: 'Email',\n                  type: 'email',\n                  value: formData.contacts.email,\n                  onChange: handleGenericChange('contacts.email'),\n                  disabled: !canEdit,\n                  error: errors['contacts.email']\n                },\n                {\n                  name: 'contacts.hours',\n                  label: 'Orari',\n                  type: 'text',\n                  value: formData.contacts.hours,\n                  onChange: handleGenericChange('contacts.hours'),\n                  disabled: !canEdit,\n                  error: errors['contacts.hours']\n                }\n              ]} />\n            </FormSection>\n          </TabsContent>\n\n          {/* Careers Tab */}\n          <TabsContent value=\"careers\" className=\"space-y-6\">\n            <FormSection title=\"Pagina Carriere\" subtitle=\"Contenuti per le opportunità di lavoro\" icon={<Briefcase className=\"w-5 h-5 text-orange-600\" />}>\n              <FieldGroup fields={[\n                {\n                  name: 'careers.heroTitle',\n                  label: 'Titolo Principale',\n                  type: 'text',\n                  value: formData.careers.heroTitle,\n                  onChange: handleGenericChange('careers.heroTitle'),\n                  disabled: !canEdit,\n                  error: errors['careers.heroTitle'],\n                  required: true\n                },\n                {\n                  name: 'careers.heroSubtitle',\n                  label: 'Sottotitolo',\n                  type: 'text',\n                  value: formData.careers.heroSubtitle,\n                  onChange: handleGenericChange('careers.heroSubtitle'),\n                  disabled: !canEdit,\n                  error: errors['careers.heroSubtitle']\n                },\n                {\n                  name: 'careers.description',\n                  label: 'Descrizione',\n                  type: 'textarea',\n                  value: formData.careers.description,\n                  onChange: handleGenericChange('careers.description'),\n                  disabled: !canEdit,\n                  error: errors['careers.description'],\n                  rows: 3\n                },\n                {\n                  name: 'careers.benefitsTitle',\n                  label: 'Titolo Benefit',\n                  type: 'text',\n                  value: formData.careers.benefitsTitle,\n                  onChange: handleGenericChange('careers.benefitsTitle'),\n                  disabled: !canEdit,\n                  error: errors['careers.benefitsTitle']\n                },\n                {\n                  name: 'careers.benefitsDescription',\n                  label: 'Descrizione Benefit',\n                  type: 'textarea',\n                  value: formData.careers.benefitsDescription,\n                  onChange: handleGenericChange('careers.benefitsDescription'),\n                  disabled: !canEdit,\n                  error: errors['careers.benefitsDescription'],\n                  rows: 3\n                }\n              ]} />\n            </FormSection>\n          </TabsContent>\n\n          {/* Company Tab */}\n          <TabsContent value=\"company\" className=\"space-y-6\">\n            <FormSection title=\"Pagina Azienda\" subtitle=\"Informazioni sull'azienda\" icon={<Building className=\"w-5 h-5 text-indigo-600\" />}>\n              <FieldGroup fields={[\n                {\n                  name: 'company.heroTitle',\n                  label: 'Titolo Principale',\n                  type: 'text',\n                  value: formData.company.heroTitle,\n                  onChange: handleGenericChange('company.heroTitle'),\n                  disabled: !canEdit,\n                  error: errors['company.heroTitle'],\n                  required: true\n                },\n                {\n                  name: 'company.heroSubtitle',\n                  label: 'Sottotitolo',\n                  type: 'text',\n                  value: formData.company.heroSubtitle,\n                  onChange: handleGenericChange('company.heroSubtitle'),\n                  disabled: !canEdit,\n                  error: errors['company.heroSubtitle']\n                },\n                {\n                  name: 'company.description',\n                  label: 'Descrizione',\n                  type: 'textarea',\n                  value: formData.company.description,\n                  onChange: handleGenericChange('company.description'),\n                  disabled: !canEdit,\n                  error: errors['company.description'],\n                  rows: 3\n                },\n                {\n                  name: 'company.missionTitle',\n                  label: 'Titolo Missione',\n                  type: 'text',\n                  value: formData.company.missionTitle,\n                  onChange: handleGenericChange('company.missionTitle'),\n                  disabled: !canEdit,\n                  error: errors['company.missionTitle']\n                },\n                {\n                  name: 'company.missionDescription',\n                  label: 'Descrizione Missione',\n                  type: 'textarea',\n                  value: formData.company.missionDescription,\n                  onChange: handleGenericChange('company.missionDescription'),\n                  disabled: !canEdit,\n                  error: errors['company.missionDescription'],\n                  rows: 3\n                },\n                {\n                  name: 'company.visionTitle',\n                  label: 'Titolo Visione',\n                  type: 'text',\n                  value: formData.company.visionTitle,\n                  onChange: handleGenericChange('company.visionTitle'),\n                  disabled: !canEdit,\n                  error: errors['company.visionTitle']\n                },\n                {\n                  name: 'company.visionDescription',\n                  label: 'Descrizione Visione',\n                  type: 'textarea',\n                  value: formData.company.visionDescription,\n                  onChange: handleGenericChange('company.visionDescription'),\n                  disabled: !canEdit,\n                  error: errors['company.visionDescription'],\n                  rows: 3\n                },\n                {\n                  name: 'company.valuesTitle',\n                  label: 'Titolo Valori',\n                  type: 'text',\n                  value: formData.company.valuesTitle,\n                  onChange: handleGenericChange('company.valuesTitle'),\n                  disabled: !canEdit,\n                  error: errors['company.valuesTitle']\n                },\n                {\n                  name: 'company.valuesDescription',\n                  label: 'Descrizione Valori',\n                  type: 'textarea',\n                  value: formData.company.valuesDescription,\n                  onChange: handleGenericChange('company.valuesDescription'),\n                  disabled: !canEdit,\n                  error: errors['company.valuesDescription'],\n                  rows: 3\n                }\n              ]} />\n            </FormSection>\n          </TabsContent>\n        </Tabs>\n      </form>\n    </div>\n  );\n};\n\nexport default PublicCMSPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/RolesTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deleteRole' is assigned a value but never used.","line":10,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":88},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadRoles' and 'loadTenants'. Either include them or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadRoles, loadTenants]","fix":{"range":[1197,1199],"text":"[loadRoles, loadTenants]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRoles'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadRoles, roles.length]","fix":{"range":[1958,1972],"text":"[loadRoles, roles.length]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":74,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Shield, CheckCircle, AlertCircle, AlertTriangle, Save } from 'lucide-react';\nimport { useAuth } from '../../context/AuthContext';\nimport { useRoles, type Role } from '../../hooks/useRoles';\nimport { useTenants } from '../../hooks/useTenants';\nimport OptimizedPermissionManager from '../../components/roles/OptimizedPermissionManager';\n\nconst RolesTab: React.FC = () => {\n  const { hasPermission } = useAuth();\n  const { roles, selectedRole, loading: rolesLoading, loadRoles, selectRole, deleteRole, setSelectedRole } = useRoles();\n  const { tenants, loadTenants } = useTenants();\n  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [isChangingRole, setIsChangingRole] = useState(false);\n  const [pendingRoleChange, setPendingRoleChange] = useState<Role | null>(null);\n  const [showUnsavedChangesModal, setShowUnsavedChangesModal] = useState(false);\n  // Carica ruoli e tenants all'avvio (solo una volta)\n  useEffect(() => {\n    console.log('🔄 RolesTab: Initial load');\n    loadRoles();\n    loadTenants();\n  }, []); // Rimuovo le dipendenze per evitare loop\n\n  // Ricarica i ruoli quando la tab diventa visibile (con debouncing)\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n    \n    const handleVisibilityChange = () => {\n      if (!document.hidden && roles.length > 0) {\n        // Debounce per evitare troppe richieste\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          console.log('🔄 RolesTab: Tab became visible, refreshing data');\n          loadRoles(true); // Force refresh\n        }, 500);\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      clearTimeout(timeoutId);\n    };\n  }, [roles.length]); // Solo roles.length come dipendenza\n\n  // Mostra messaggio temporaneo\n  const showMessage = (type: 'success' | 'error', text: string) => {\n    setMessage({ type, text });\n    setTimeout(() => setMessage(null), 5000);\n  };\n\n\n\n  // Gestione cambio ruolo con controllo modifiche non salvate\n  const handleRoleChange = async (role: Role) => {\n    if (hasUnsavedChanges && selectedRole) {\n      setPendingRoleChange(role);\n      setShowUnsavedChangesModal(true);\n      return;\n    }\n    \n    await performRoleChange(role);\n  };\n\n  // Esegue il cambio ruolo\n  const performRoleChange = async (role: Role | null) => {\n    if (!role) return;\n    \n    setIsChangingRole(true);\n    try {\n      await selectRole(role);\n      setHasUnsavedChanges(false);\n      // Rimosso il messaggio di successo per la selezione del ruolo\n    } catch (error) {\n      showMessage('error', 'Errore nel cambio ruolo');\n    } finally {\n      setIsChangingRole(false);\n    }\n  };\n\n  // Salva e cambia ruolo\n  const saveAndChangeRole = async () => {\n    // Per ora procediamo direttamente al cambio ruolo\n    // In futuro si potrà implementare il salvataggio automatico\n    if (pendingRoleChange) {\n      await performRoleChange(pendingRoleChange);\n      setPendingRoleChange(null);\n    }\n    setShowUnsavedChangesModal(false);\n  };\n\n  // Cambia ruolo senza salvare\n  const changeRoleWithoutSaving = async () => {\n    if (pendingRoleChange) {\n      await performRoleChange(pendingRoleChange);\n      setPendingRoleChange(null);\n    }\n    setShowUnsavedChangesModal(false);\n  };\n\n  // Annulla cambio ruolo\n  const cancelRoleChange = () => {\n    setPendingRoleChange(null);\n    setShowUnsavedChangesModal(false);\n  };\n\n  // Torna alla selezione dei ruoli\n  const handleBackToRoleSelection = () => {\n    setSelectedRole(null);\n    setHasUnsavedChanges(false);\n  };\n\n  // Converte il ruolo da useRoles al formato richiesto da OptimizedPermissionManager\n  const convertRole = (role: Role | null) => {\n    if (!role) return null;\n    return {\n      ...role,\n      description: role.description || '',\n      userCount: role.userCount || 0,\n      isActive: true\n    };\n  };\n\n  // Verifica permessi di lettura ruoli\n  if (!hasPermission('roles', 'read')) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center p-8\">\n          <Shield className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Accesso negato</h3>\n          <p className=\"text-gray-600\">Non hai i permessi necessari per visualizzare i ruoli.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4 shadow-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl shadow-lg\">\n              <Shield className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <div className=\"flex items-center space-x-3\">\n                <h1 className=\"text-2xl font-bold text-gray-900\">Gestione Ruoli e Permessi</h1>\n                {hasUnsavedChanges && (\n                  <div className=\"flex items-center space-x-1 px-2 py-1 bg-amber-100 border border-amber-300 rounded-lg\">\n                    <AlertTriangle className=\"w-4 h-4 text-amber-600\" />\n                    <span className=\"text-xs font-medium text-amber-700\">Modifiche non salvate</span>\n                  </div>\n                )}\n                {isChangingRole && (\n                  <div className=\"flex items-center space-x-1 px-2 py-1 bg-blue-100 border border-blue-300 rounded-lg\">\n                    <div className=\"w-3 h-3 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n                    <span className=\"text-xs font-medium text-blue-700\">Cambio ruolo...</span>\n                  </div>\n                )}\n              </div>\n              <p className=\"text-sm text-gray-600\">Configura ruoli, permessi CRUD, scope tenant e campi specifici</p>\n            </div>\n          </div>\n          \n          {/* Statistiche rapide */}\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{roles.length}</div>\n              <div className=\"text-xs text-gray-500\">Ruoli</div>\n            </div>\n            {selectedRole && (\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{selectedRole.userCount || 0}</div>\n                <div className=\"text-xs text-gray-500\">Utenti</div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Messaggi di stato */}\n      {message && (\n        <div className={`mx-6 mt-4 p-4 rounded-lg border shadow-sm ${\n          message.type === 'success' \n            ? 'bg-green-50 border-green-200 text-green-800' \n            : 'bg-red-50 border-red-200 text-red-800'\n        }`}>\n          <div className=\"flex items-center\">\n            {message.type === 'success' ? (\n              <CheckCircle className=\"w-5 h-5 mr-2\" />\n            ) : (\n              <AlertCircle className=\"w-5 h-5 mr-2\" />\n            )}\n            <span>{message.text}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Selezione ruolo se nessuno è selezionato */}\n      {!selectedRole && !rolesLoading && (\n        <div className=\"mx-6 mt-4 p-6 bg-blue-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center space-x-3\">\n            <Shield className=\"w-6 h-6 text-blue-600\" />\n            <div>\n              <h3 className=\"font-semibold text-blue-900\">Seleziona un ruolo</h3>\n              <p className=\"text-sm text-blue-700\">\n                Scegli un ruolo dalla lista per configurare i permessi CRUD, scope tenant e campi specifici\n              </p>\n            </div>\n          </div>\n          \n          {/* Lista ruoli rapida */}\n          <div className=\"mt-4 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n            {roles.map((role, index) => (\n              <button\n                key={role?.type || `role-${index}`}\n                onClick={() => role && handleRoleChange(role)}\n                disabled={isChangingRole || !role}\n                className={`p-3 bg-white border border-blue-200 rounded-lg hover:bg-blue-50 transition-colors text-left relative ${\n                  isChangingRole || !role ? 'opacity-50 cursor-not-allowed' : ''\n                } ${\n                  selectedRole?.type === role?.type ? 'ring-2 ring-blue-500 bg-blue-50' : ''\n                }`}\n              >\n                <div className=\"font-medium text-blue-900 text-sm\">{role?.name || 'Ruolo sconosciuto'}</div>\n                <div className=\"text-xs text-blue-600 mt-1\">{role?.userCount || 0} utenti</div>\n                {selectedRole?.type === role?.type && (\n                  <div className=\"absolute top-2 right-2\">\n                    <CheckCircle className=\"w-4 h-4 text-blue-600\" />\n                  </div>\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Gestore permessi unificato */}\n      {selectedRole && (\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Header sezione permessi */}\n          <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"w-5 h-5 text-blue-600\" />\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Gestione Permessi - {selectedRole.name}\n              </h3>\n            </div>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Configura i permessi per tutte le entità del sistema, incluse quelle virtuali (Dipendenti e Formatori)\n            </p>\n          </div>\n\n          {/* Contenuto principale */}\n          <div className=\"flex-1 overflow-hidden\">\n            <div className=\"h-full p-6 overflow-hidden\">\n              <OptimizedPermissionManager\n                role={convertRole(selectedRole)!}\n                tenants={tenants}\n                onBack={handleBackToRoleSelection}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Loading state */}\n      {rolesLoading && (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Caricamento ruoli...</p>\n          </div>\n        </div>\n      )}\n\n      {/* Modale conferma cambio ruolo */}\n      {showUnsavedChangesModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"p-2 bg-amber-100 rounded-full\">\n                  <AlertTriangle className=\"w-6 h-6 text-amber-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Modifiche non salvate</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    Hai modifiche non salvate per il ruolo \"{selectedRole?.name}\"\n                  </p>\n                </div>\n              </div>\n              \n              <p className=\"text-gray-700 mb-6\">\n                Vuoi salvare le modifiche prima di cambiare ruolo o procedere senza salvare?\n              </p>\n              \n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={saveAndChangeRole}\n                  className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n                >\n                  <Save className=\"w-4 h-4\" />\n                  <span>Salva e cambia</span>\n                </button>\n                <button\n                  onClick={changeRoleWithoutSaving}\n                  className=\"flex-1 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors\"\n                >\n                  Non salvare\n                </button>\n                <button\n                  onClick={cancelRoleChange}\n                  className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  Annulla\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RolesTab;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/Settings.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AdminSettings' is defined but never used.","line":9,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'canViewAdminSettings' is assigned a value but never used.","line":40,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'canViewPermissions' is assigned a value but never used.","line":41,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'canViewPublicCMS' is assigned a value but never used.","line":42,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport TemplatesSettingsPage from './Templates';\nimport UsersTab from './UsersTab';\nimport RolesTab from './RolesTab';\nimport HierarchyTab from './HierarchyTab';\nimport ActivityLogsTab from './ActivityLogsTab';\nimport UserPreferences from './UserPreferences';\nimport AdminSettings from '../../components/settings/AdminSettings';\nimport PermissionsTab from './PermissionsTab';\nimport PublicCMSPage from './PublicCMSPage';\nimport { useAuth } from '../../context/AuthContext';\nimport { Settings as SettingsIcon } from 'lucide-react';\nimport { TabNavigation } from '../../components/shared';\n\nconst Settings: React.FC = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { hasPermission } = useAuth();\n  \n  // Determina quale tab è attivo dalla URL o usa il default\n  const getActiveTab = () => {\n    if (location.pathname.endsWith('/users')) return 'users';\n    if (location.pathname.endsWith('/roles')) return 'roles';\n    if (location.pathname.endsWith('/hierarchy')) return 'hierarchy';\n    if (location.pathname.endsWith('/logs')) return 'logs';\n    if (location.pathname.endsWith('/templates')) return 'templates';\n    if (location.pathname.endsWith('/permissions')) return 'permissions';\n    if (location.pathname.endsWith('/cms')) return 'cms';\n    return 'general';\n  };\n\n  const [activeTab, setActiveTab] = useState(getActiveTab());\n\n  const changeTab = (tabId: string) => {\n    setActiveTab(tabId);\n    navigate(`/settings${tabId !== 'general' ? `/${tabId}` : ''}`);\n  };\n\n  const canViewAdminSettings = hasPermission('admin_settings', 'read');\n  const canViewPermissions = hasPermission('permissions', 'read');\n  const canViewPublicCMS = hasPermission('public_cms', 'read');\n\n  // Crea array di tab basato sui permessi\n  const tabs = [\n    { id: 'general', label: 'Generali' },\n    { id: 'templates', label: 'Templates' },\n  ];\n  \n  // Aggiungi i tab solo se l'utente ha i permessi\n  if (hasPermission('users', 'read')) {\n    tabs.push({ id: 'users', label: 'Utenti' });\n  }\n  \n  if (hasPermission('roles', 'read') || hasPermission('ROLE_MANAGEMENT', 'read')) {\n    tabs.push({ id: 'roles', label: 'Ruoli' });\n  }\n  \n  // Aggiungi tab Gerarchia se l'utente può gestire i ruoli\n  if (hasPermission('roles', 'read') || hasPermission('ROLE_MANAGEMENT', 'read')) {\n    tabs.push({ id: 'hierarchy', label: 'Gerarchia' });\n  }\n  \n  if (hasPermission('system', 'admin')) {\n    tabs.push({ id: 'permissions', label: 'Permessi' });\n  }\n  \n  // Aggiungi tab CMS se l'utente può gestire il contenuto pubblico\n  if (hasPermission('PUBLIC_CMS', 'read') || hasPermission('PUBLIC_CMS', 'update')) {\n    tabs.push({ id: 'cms', label: 'Frontend Pubblico' });\n  }\n  \n  if (hasPermission('logs', 'read')) {\n    tabs.push({ id: 'logs', label: 'Log Attività' });\n  }\n\n  return (\n    <div className=\"container px-4 mx-auto py-6\">\n      <h1 className=\"text-2xl font-bold mb-6 flex items-center\">\n        <SettingsIcon className=\"mr-2 h-6 w-6\" /> \n        Impostazioni\n      </h1>\n\n      <div className=\"bg-white rounded-2xl shadow-sm\">\n        {/* Tabs - usando TabNavigation */}\n        <div className=\"border-b border-gray-200 p-4\">\n          <TabNavigation \n            tabs={tabs}\n            activeTabId={activeTab}\n            onTabChange={changeTab}\n          />\n        </div>\n\n        {/* Tab content */}\n        <div className=\"p-6\">\n          {activeTab === 'general' && <UserPreferences />}\n\n          {activeTab === 'templates' && <TemplatesSettingsPage />}\n          \n          {activeTab === 'users' && hasPermission('users', 'read') && <UsersTab />}\n          \n          {activeTab === 'roles' && (hasPermission('roles', 'read') || hasPermission('ROLE_MANAGEMENT', 'read')) && <RolesTab />}\n          \n          {activeTab === 'hierarchy' && (hasPermission('roles', 'read') || hasPermission('ROLE_MANAGEMENT', 'read')) && <HierarchyTab />}\n          \n          {activeTab === 'permissions' && hasPermission('system', 'admin') && <PermissionsTab />}\n          \n          {activeTab === 'cms' && (hasPermission('PUBLIC_CMS', 'read') || hasPermission('PUBLIC_CMS', 'update')) && <PublicCMSPage />}\n          \n          {activeTab === 'logs' && hasPermission('logs', 'read') && <ActivityLogsTab />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n           \n          ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/TemplateEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":4,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Layout' is defined but never used.","line":4,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used.","line":4,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":4,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileEdit' is defined but never used.","line":4,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TEMPLATE_PLACEHOLDERS' is assigned a value but never used.","line":26,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showHeaderFooter' is assigned a value but never used.","line":53,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowHeaderFooter' is assigned a value but never used.","line":53,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'expandLogoPanel' is assigned a value but never used.","line":57,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setExpandLogoPanel' is assigned a value but never used.","line":57,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showPreview' is assigned a value but never used.","line":58,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowPreview' is assigned a value but never used.","line":58,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'previewContent' is assigned a value but never used.","line":59,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPreviewContent' is assigned a value but never used.","line":59,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'editingName' is assigned a value but never used.","line":60,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setEditingName' is assigned a value but never used.","line":60,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8660,8663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8660,8663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport { apiGet, apiPost, apiPut } from '../../services/api';\nimport { ChevronLeft, Save, Download, Layout, Image, Eye, FileEdit } from 'lucide-react';\nimport { Button } from '../../design-system/atoms/Button';\nimport { PlaceholderDemo, GoogleTemplateProvider, GoogleDocsPreview } from '../../components/shared/template';\nimport PageHeader from '../../components/layouts/PageHeader';\n\n// Template interface\ninterface Template {\n  id: string;\n  name: string;\n  url: string;\n  type: string;\n  content?: string;\n  header?: string;\n  footer?: string;\n  isDefault?: boolean;\n  fileFormat?: string;\n  logoImage?: string;\n  logoPosition?: string;\n  googleDocsUrl?: string;\n}\n\n// Common placeholders for templates\nconst TEMPLATE_PLACEHOLDERS = [\n  { name: 'NOME_FORMATORE', description: 'Nome del formatore' },\n  { name: 'COGNOME_FORMATORE', description: 'Cognome del formatore' },\n  { name: 'DATA_GENERAZIONE', description: 'Data di generazione documento' },\n  { name: 'NUMERO_PROGRESSIVO', description: 'Numero progressivo documento' },\n  { name: 'CORSO_TITOLO', description: 'Titolo del corso' },\n  { name: 'AZIENDA_RAGIONE_SOCIALE', description: 'Ragione sociale azienda' },\n  { name: 'PRIMA_DATA', description: 'Data prima sessione' },\n  { name: 'ULTIMA_DATA', description: 'Data ultima sessione' },\n  { name: 'ORE_TOTALI', description: 'Ore totali corso' },\n  { name: 'TARIFFA_ORARIA', description: 'Tariffa oraria' },\n  { name: 'COMPENSO_TOTALE', description: 'Compenso totale' },\n];\n\nconst TemplateEditor: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [template, setTemplate] = useState<Template | null>(null);\n  const [templateName, setTemplateName] = useState<string>('');\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [content, setContent] = useState<string>('');\n  const [header, setHeader] = useState<string>('');\n  const [footer, setFooter] = useState<string>('');\n  const [googleDocsUrl, setGoogleDocsUrl] = useState<string>('');\n  const [showHeaderFooter, setShowHeaderFooter] = useState(false);\n  const [logoImage, setLogoImage] = useState<string | null>(null);\n  const [logoPosition, setLogoPosition] = useState<string>('top-center');\n  const [isDefault, setIsDefault] = useState<boolean>(false);\n  const [expandLogoPanel, setExpandLogoPanel] = useState<boolean>(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [previewContent, setPreviewContent] = useState<string>('');\n  const [editingName, setEditingName] = useState(false);\n  const [templateType, setTemplateType] = useState<string>('');\n  const templateFormat = new URLSearchParams(location.search).get('format') || 'text';\n  \n  // Template types available for selection\n  const templateTypes = [\n    { value: 'lettera_incarico', label: 'Lettera di Incarico' },\n    { value: 'attestati', label: 'Attestati' },\n    { value: 'fattura', label: 'Fattura' },\n    { value: 'programma_corso', label: 'Programma Corso' },\n    { value: 'registro_presenze', label: 'Registro Presenze' },\n  ];\n\n  // Load template based on ID from URL params\n  useEffect(() => {\n    const fetchTemplate = async () => {\n      const initialType = new URLSearchParams(location.search).get('type') || 'lettera_incarico';\n      setTemplateType(initialType);\n      \n      if (id) {\n        try {\n          console.log('Fetching template with ID:', id);\n          const templateData = await apiGet<Template>(`/template-links/${id}`);\n          \n          if (!templateData) {\n            throw new Error(`Template with ID ${id} not found`);\n          }\n          \n          console.log('Template loaded:', templateData);\n          setTemplate(templateData);\n          setTemplateName(templateData.name);\n          setIsDefault(templateData.isDefault || false);\n          setTemplateType(templateData.type);\n          \n          // Set header, footer, and logo if available\n          if (templateData.header) setHeader(templateData.header);\n          if (templateData.footer) setFooter(templateData.footer);\n          if (templateData.logoImage) setLogoImage(templateData.logoImage);\n          if (templateData.logoPosition) setLogoPosition(templateData.logoPosition);\n          if (templateData.googleDocsUrl) setGoogleDocsUrl(templateData.googleDocsUrl);\n          \n          // Load content\n          if (templateData.content) {\n            setContent(templateData.content);\n          } else if (templateData.url && !templateData.url.includes('placeholder')) {\n            try {\n              const contentData = await apiGet<string>(`${templateData.url}`);\n              if (contentData) {\n                setContent(typeof contentData === 'string' \n                  ? contentData \n                  : JSON.stringify(contentData));\n              }\n            } catch (err) {\n              console.error('Could not load template content:', err);\n              setContent('<p>Inserisci il tuo contenuto qui...</p>');\n              setError('Non è stato possibile caricare il contenuto del template');\n            }\n          } else {\n            setContent('<p>Inserisci il tuo contenuto qui...</p>');\n          }\n          \n          // Update URL to reflect the template format\n          if (templateData.fileFormat) {\n            const url = new URL(window.location.href);\n            url.searchParams.set('format', templateData.fileFormat);\n            window.history.replaceState({}, '', url.toString());\n          }\n        } catch (err) {\n          console.error('Failed to load template:', err);\n          setError('Impossibile caricare il template');\n          setContent('<p>Inserisci il tuo contenuto qui...</p>');\n        }\n      } else {\n        // Set default content for new template\n        setTemplateName(`Nuovo Template ${initialType}`);\n        setContent('<p>Inserisci il tuo contenuto qui...</p>');\n        setIsDefault(false);\n      }\n      setLoading(false);\n    };\n\n    fetchTemplate();\n  }, [id, location.search]);\n\n  // Handle save action\n  const handleSave = async () => {\n    if (!templateName || templateName.trim() === '') {\n      setError('Impossibile salvare: inserisci un nome per il template.');\n      return;\n    }\n\n    // If using Google Docs, ensure URL is provided \n    if (googleDocsUrl && !googleDocsUrl.trim().startsWith('https://docs.google.com/')) {\n      setError('Il link a Google Docs/Slides non è valido. Deve iniziare con \"https://docs.google.com/\"');\n      return;\n    }\n\n    setSaving(true);\n    setError(null);\n    \n    try {\n      // Generate unique filename for the template\n      const timestamp = Date.now();\n      const filename = `template_${templateType}_${timestamp}.html`;\n      const templateUrl = `/uploads/templates/${filename}`;\n      \n      // Prepare template data\n      const templateData = {\n        name: templateName.trim(),\n        url: googleDocsUrl ? '' : templateUrl,\n        type: templateType,\n        content: googleDocsUrl ? '' : content,\n        header: header,\n        footer: footer,\n        logoPosition: logoPosition,\n        logoImage: logoImage,\n        isDefault: isDefault,\n        fileFormat: templateFormat,\n        googleDocsUrl: googleDocsUrl.trim() || null\n      };\n\n      console.log('Saving template data:', templateData);\n      \n      // Save template (create or update)\n      if (id) {\n        await apiPut(`/template-links/${id}`, templateData);\n        console.log(`Template with ID ${id} updated`);\n      } else {\n        const newTemplate = await apiPost<Template>('/template-links', templateData);\n        console.log('New template created:', newTemplate);\n        \n        // If this template is set as default, update other templates of the same type\n        if (isDefault) {\n          const allTemplates = await apiGet<Template[]>('/template-links');\n          const templatesOfSameType = allTemplates.filter(\n            (t: Template) => t.type === templateType && t.id !== (newTemplate.id || id)\n          );\n          \n          // Update other templates to not be default\n          for (const template of templatesOfSameType) {\n            if (template.isDefault) {\n              await apiPut(`/template-links/${template.id}`, {\n                ...template,\n                isDefault: false\n              });\n            }\n          }\n        }\n      }\n      \n      // Navigate back to templates list\n      navigate('/settings/templates');\n    } catch (err: any) {\n      console.error('Error saving template:', err);\n      let errorMessage = 'Errore durante il salvataggio del template';\n      if (err.response?.data?.error) {\n        errorMessage += `: ${err.response.data.error}`;\n      }\n      setError(errorMessage);\n    } finally {\n      setSaving(false);\n    }\n  };\n  \n  // Show loading state\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-screen bg-slate-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600 font-medium\">Caricamento editor...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Render template editor\n  return (\n    <div className=\"container mx-auto py-8\">\n      <PageHeader \n        title=\"Editor Template\" \n        subtitle=\"Crea e modifica template\"\n        viewMode=\"table\" \n        onViewModeChange={() => {}}\n        selectionMode={false}\n        onToggleSelectionMode={() => {}}\n        searchValue=\"\"\n        onSearchChange={() => {}}\n        description=\"Crea e modifica template per documenti con supporto per placeholder\"\n      />\n      \n      {/* Template type selector */}\n      <div className=\"mt-6\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tipo di Template</label>\n        <select\n          value={templateType}\n          onChange={(e) => setTemplateType(e.target.value)}\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n        >\n          {templateTypes.map((type) => (\n            <option key={type.value} value={type.value}>{type.label}</option>\n          ))}\n        </select>\n      </div>\n      \n      {/* Template name */}\n      <div className=\"mt-6\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nome Template</label>\n        <input\n          type=\"text\"\n          value={templateName}\n          onChange={(e) => setTemplateName(e.target.value)}\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n        />\n      </div>\n      \n      {/* Google Docs integration */}\n      <div className=\"mt-8\">\n        <h2 className=\"text-lg font-semibold mb-4\">Integrazione Google Docs/Slides</h2>\n        <GoogleTemplateProvider \n          documentType={templateType} \n          onTemplateSelected={(url, id) => {\n            setGoogleDocsUrl(url);\n            console.log(`Template selezionato: ${id}`);\n          }}\n        />\n      </div>\n      \n      {/* Google Docs preview */}\n      {googleDocsUrl && (\n        <div className=\"mt-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Anteprima documento Google</h2>\n          <GoogleDocsPreview\n            documentUrl={googleDocsUrl}\n            documentType={templateType}\n            placeholderData={{\n              NOME_FORMATORE: \"Mario\",\n              COGNOME_FORMATORE: \"Rossi\",\n              CORSO_TITOLO: \"Sicurezza sul Lavoro\",\n              DATA_GENERAZIONE: new Date().toLocaleDateString('it-IT'),\n              NUMERO_PROGRESSIVO: \"123/2025\",\n              AZIENDA_RAGIONE_SOCIALE: \"Acme SRL\"\n            }}\n          />\n        </div>\n      )}\n      \n      {/* Placeholder demo */}\n      <div className=\"mt-8\">\n        <h2 className=\"text-lg font-semibold mb-4\">Anteprima Placeholder</h2>\n        <PlaceholderDemo \n          documentType={templateType}\n          initialContent={template?.content || ''}\n          previewData={{\n            NOME: \"Mario\",\n            COGNOME: \"Rossi\",\n            NOME_COMPLETO: \"Mario Rossi\",\n          }}\n        />\n      </div>\n      \n      {/* Default template toggle */}\n      <div className=\"mt-6\">\n        <div className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            id=\"isDefault\"\n            checked={isDefault}\n            onChange={(e) => setIsDefault(e.target.checked)}\n            className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n          />\n          <label htmlFor=\"isDefault\" className=\"ml-2 block text-sm text-gray-700\">\n            Imposta come template predefinito per {templateType.replace('_', ' ')}\n          </label>\n        </div>\n        <p className=\"mt-1 text-xs text-gray-500\">\n          Se selezionato, questo template verrà utilizzato come predefinito per questo tipo di documento\n        </p>\n      </div>\n      \n      {/* Save/Cancel buttons */}\n      <div className=\"mt-8 flex gap-4 justify-end\">\n        <Button \n          variant=\"outline\" \n          onClick={() => navigate('/settings/templates')}\n        >\n          <ChevronLeft className=\"mr-1 h-4 w-4\" /> Annulla\n        </Button>\n        <Button \n          onClick={handleSave} \n          disabled={saving}\n        >\n          {saving ? (\n            <span className=\"flex items-center\">\n              <span className=\"animate-spin h-4 w-4 border-2 border-b-0 border-r-0 rounded-full mr-2\" />\n              Salvataggio...\n            </span>\n          ) : (\n            <>\n              <Save className=\"mr-1 h-4 w-4\" /> Salva Template\n            </>\n          )}\n        </Button>\n      </div>\n      \n      {/* Error message */}\n      {error && (\n        <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm\">\n          {error}\n        </div>\n      )}\n      \n      {/* Implementation note */}\n      <div className=\"mt-12 p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n        <h3 className=\"text-sm font-semibold text-yellow-800 mb-2\">Nota sull'integrazione Google</h3>\n        <p className=\"text-sm text-yellow-700\">\n          Questo editor supporta l'integrazione con Google Docs e Google Slides. \n          Per utilizzare questa funzionalità, condividi un documento Google e inserisci l'URL nel campo apposito.\n          Il sistema sostituirà automaticamente i placeholder nel formato {'{{NOME_PLACEHOLDER}}'} con i valori effettivi.\n          Per funzionare correttamente, assicurati che le credenziali Google API siano configurate nel backend.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default TemplateEditor;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/Templates.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleNavigateToSettingsTab' is assigned a value but never used.","line":298,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":298,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { apiGet, apiPost, apiPut, apiDelete } from '../../services/api';\n\ninterface Template {\n  id: string;\n  name: string;\n  url: string;\n  type: string;\n  content?: string;\n  header?: string;\n  footer?: string;\n  isDefault?: boolean;\n  fileFormat?: string;\n  logoImage?: string;\n  logoPosition?: string;\n  googleDocsUrl?: string;\n  source?: 'server' | 'local';\n  createdAt?: string;\n  updatedAt?: string;\n}\nimport {\n  TEMPLATE_TYPES,\n  FILE_FORMATS,\n  ENTITY_FIELDS,\n  ENTITY_LABELS,\n  ATTESTATO_PLACEHOLDERS,\n  LETTERA_PLACEHOLDERS\n} from '../../components/shared/template/constants';\nimport {\n  TemplateTypeCard,\n  PlaceholdersLegend,\n  TemplateFormModal,\n  NotificationBanner,\n  useToast,\n  getTemplatesByType\n} from '../../components/shared/template';\n\ninterface ModalData {\n  name: string;\n  type: string;\n  fileFormat: string;\n  url: string;\n  googleDocsUrl: string;\n  id: string;\n  isEditing: boolean;\n}\n\nconst TemplatesSettingsPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [modalData, setModalData] = useState<ModalData>({\n    name: '',\n    type: 'attestato',\n    fileFormat: 'text',\n    url: '',\n    googleDocsUrl: '',\n    id: '',\n    isEditing: false\n  });\n  \n  // State for dropdown management\n  const [openDropdownId, setOpenDropdownId] = useState<string | null>(null);\n  \n  // Refs for dropdowns\n  const dropdownRefs = useRef<{[key: string]: React.RefObject<HTMLButtonElement>}>({});\n  \n  const { toast, ToastContainer } = useToast();\n\n  useEffect(() => {\n    // Initialize refs for template type dropdowns\n    TEMPLATE_TYPES.forEach(type => {\n      const dropdownId = `dropdown-${type.value}`;\n      dropdownRefs.current[dropdownId] = React.createRef<HTMLButtonElement>();\n    });\n    \n    // Load templates on initial mount\n    fetchTemplates();\n  }, []);\n\n  useEffect(() => {\n    // Ensure each template has a ref\n    templates.forEach(template => {\n      if (!dropdownRefs.current[template.id]) {\n        dropdownRefs.current[template.id] = React.createRef<HTMLButtonElement>();\n      }\n    });\n  }, [templates]);\n\n  const fetchTemplates = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      const templates = await apiGet<Template[]>('template-links');\n      setTemplates(templates || []);\n    } catch (err) {\n      setError('Errore nel recupero dei template');\n      console.error('Error fetching templates:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmitTemplate = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n    \n    try {\n      setLoading(true);\n      const { id, name, type, fileFormat, url, googleDocsUrl, isEditing } = modalData;\n      \n      const data = {\n        name: name.trim(), \n        url: url.trim() || googleDocsUrl.trim(),\n        type,\n        fileFormat,\n        googleDocsUrl: googleDocsUrl.trim() || null\n      };\n      \n      console.log('Submitting template data:', data);\n      \n      if (isEditing) {\n        await apiPut(`template-links/${id}`, data);\n        setSuccess('Template aggiornato con successo');\n        toast({\n          title: 'Successo',\n          description: 'Template aggiornato con successo',\n          status: 'success'\n        });\n      } else {\n        await apiPost('template-links', data);\n        setSuccess('Nuovo template creato con successo');\n        toast({\n          title: 'Successo',\n          description: 'Nuovo template creato con successo',\n          status: 'success'\n        });\n      }\n      \n      // Reset form and close modal\n      setModalData({\n        name: '',\n        type: 'attestato',\n        fileFormat: 'text',\n        url: '',\n        googleDocsUrl: '',\n        id: '',\n        isEditing: false\n      });\n      setShowAddModal(false);\n      \n      // Refresh templates\n      await fetchTemplates();\n    } catch (err) {\n       const errorMessage = modalData.isEditing ? 'Errore nell\\'aggiornamento del template' : 'Errore nella creazione del template';\n       setError(errorMessage);\n       toast({\n         title: 'Errore',\n         description: errorMessage,\n         status: 'error'\n       });\n       console.error('Error submitting template:', err);\n     } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEditTemplate = (template: Template): void => {\n    setModalData({\n      name: template.name,\n      type: template.type,\n      fileFormat: template.fileFormat || 'text',\n      url: template.url,\n      googleDocsUrl: template.googleDocsUrl || '',\n      id: template.id,\n      isEditing: true\n    });\n    setShowAddModal(true);\n  };\n\n  const handleSetAsDefault = async (templateId: string): Promise<void> => {\n    try {\n      await apiPut(`template-links/${templateId}/set-default`, {});\n      setSuccess('Template impostato come predefinito');\n      toast({\n        title: 'Successo',\n        description: 'Template impostato come predefinito',\n        status: 'success'\n      });\n      await fetchTemplates();\n    } catch (err) {\n      setError('Errore nell\\'impostazione del template predefinito');\n      toast({\n        title: 'Errore',\n        description: 'Errore nell\\'impostazione del template predefinito',\n        status: 'error'\n      });\n      console.error('Error setting default template:', err);\n    }\n  };\n\n  const handleRemoveTemplate = async (templateId: string): Promise<void> => {\n    if (!confirm('Sei sicuro di voler eliminare questo template?')) {\n      return;\n    }\n\n    try {\n      await apiDelete(`template-links/${templateId}`);\n      setSuccess('Template eliminato con successo');\n      toast({\n        title: 'Successo',\n        description: 'Template eliminato con successo',\n        status: 'success'\n      });\n      await fetchTemplates();\n    } catch (err) {\n      setError('Errore nell\\'eliminazione del template');\n      toast({\n        title: 'Errore',\n        description: 'Errore nell\\'eliminazione del template',\n        status: 'error'\n      });\n      console.error('Error removing template:', err);\n    }\n  };\n\n  const handleCreateNewTemplate = (templateType: string): void => {\n    setModalData({\n      name: '',\n      type: templateType,\n      fileFormat: 'text',\n      url: '',\n      googleDocsUrl: '',\n      id: '',\n      isEditing: false\n    });\n    setShowAddModal(true);\n  };\n\n  const handleDocxImport = (templateType: string): void => {\n    // Implementation for DOCX import\n    console.log('DOCX import for type:', templateType);\n    toast({\n      title: 'Funzionalità in sviluppo',\n      description: 'L\\'importazione DOCX sarà disponibile presto',\n      status: 'info'\n    });\n  };\n\n  const handleAddGoogleDocs = (templateType: string): void => {\n    const url = prompt('Inserisci l\\'URL del documento Google Docs:');\n    if (!url) return;\n    \n    const newName = prompt('Inserisci il nome del template:');\n    if (!newName) return;\n    \n    setModalData({\n      name: newName,\n      type: templateType,\n      fileFormat: 'text',\n      url: '',\n      googleDocsUrl: url,\n      id: '',\n      isEditing: false\n    });\n    setShowAddModal(true);\n  };\n\n  const handleAddGoogleSlides = (templateType: string): void => {\n    const url = prompt('Inserisci l\\'URL della presentazione Google Slides:');\n    if (!url) return;\n    \n    const newName = prompt('Inserisci il nome del template:');\n    if (!newName) return;\n    \n    setModalData({\n      name: newName,\n      type: templateType,\n      fileFormat: 'pptx',\n      url: '',\n      googleDocsUrl: url,\n      id: '',\n      isEditing: false\n    });\n    setShowAddModal(true);\n  };\n\n  const toggleDropdown = (id: string): void => {\n    if (openDropdownId === id) {\n      setOpenDropdownId(null);\n    } else {\n      setOpenDropdownId(id);\n    }\n  };\n\n  const handleNavigateToSettingsTab = (tabId: string): void => {\n    switch (tabId) {\n      case 'generali':\n        navigate('/settings/general');\n        break;\n      case 'templates':\n        // Already on this page, do nothing\n        break;\n      case 'utenti':\n        navigate('/settings/users');\n        break;\n      case 'ruoli':\n        navigate('/settings/roles');\n        break;\n      case 'log-attivita':\n        navigate('/settings/activity-logs');\n        break;\n      default:\n        break;\n    }\n  };\n\n  const dismissNotifications = (): void => {\n    setError(null);\n    setSuccess(null);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header section */}\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Gestione Template</h1>\n      </div>\n      \n      {/* Notifications */}\n      <NotificationBanner \n        error={error}\n        success={success}\n        onDismiss={dismissNotifications}\n      />\n      \n      {/* Template Cards Grid - one for each template type */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {TEMPLATE_TYPES.map((templateType) => {\n          const templatesOfType = getTemplatesByType(templates, templateType.value);\n          \n          return (\n            <TemplateTypeCard\n              key={templateType.value}\n              templateType={templateType}\n              templates={templatesOfType}\n              openDropdownId={openDropdownId}\n              dropdownRefs={dropdownRefs}\n              onToggleDropdown={toggleDropdown}\n              onCreateNew={handleCreateNewTemplate}\n              onDocxImport={handleDocxImport}\n              onAddGoogleDocs={handleAddGoogleDocs}\n              onAddGoogleSlides={handleAddGoogleSlides}\n              onEditTemplate={handleEditTemplate}\n              onSetAsDefault={handleSetAsDefault}\n              onRemoveTemplate={handleRemoveTemplate}\n              fetchTemplates={fetchTemplates}\n            />\n          );\n        })}\n      </div>\n\n      {/* Placeholders Legend */}\n      <PlaceholdersLegend \n        entityFields={ENTITY_FIELDS}\n        entityLabels={ENTITY_LABELS}\n        attestatoPlaceholders={ATTESTATO_PLACEHOLDERS}\n        letteraPlaceholders={LETTERA_PLACEHOLDERS}\n      />\n      \n      {/* Template Form Modal */}\n      <TemplateFormModal\n        isOpen={showAddModal}\n        onClose={() => setShowAddModal(false)}\n        onSubmit={handleSubmitTemplate}\n        modalData={modalData}\n        setModalData={setModalData}\n        templateTypes={TEMPLATE_TYPES}\n        fileFormats={FILE_FORMATS}\n        loading={loading}\n      />\n      \n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default TemplatesSettingsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/UserPreferences.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toast' is defined but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3307,3310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3307,3310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3631,3634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3631,3634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3911,3914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3911,3914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Preferences Page\n * Week 14 Implementation - User Preferences Management\n */\n\nimport React, { useState } from 'react';\nimport { \n  Bell,\n  Download,\n  Layout,\n  Palette,\n  RotateCcw,\n  Settings,\n  Shield,\n  Upload,\n  User\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../design-system/molecules/Card';\nimport { Button } from '../../design-system/atoms/Button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../design-system/molecules/Tabs';\nimport { Badge } from '../../design-system/atoms/Badge';\nimport { Label } from '../../design-system/atoms/Label';\nimport { Alert, AlertDescription } from '../../components/ui/alert';\nimport { Switch } from '../../components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\nimport { Separator } from '../../components/ui/separator';\nimport { toast } from 'react-hot-toast';\nimport { useUserPreferences } from '../../hooks/useUserPreferences';\nimport { ThemeSelector } from '../../components/settings/ThemeSelector';\nimport { useTheme } from '../../hooks/useTheme';\nimport { LanguageCode } from '../../types/preferences';\n\nconst LANGUAGE_OPTIONS = [\n  { code: 'it' as LanguageCode, name: 'Italiano', flag: '🇮🇹' },\n  { code: 'en' as LanguageCode, name: 'English', flag: '🇺🇸' },\n  { code: 'fr' as LanguageCode, name: 'Français', flag: '🇫🇷' },\n  { code: 'de' as LanguageCode, name: 'Deutsch', flag: '🇩🇪' },\n  { code: 'es' as LanguageCode, name: 'Español', flag: '🇪🇸' }\n];\n\nconst TIMEZONE_OPTIONS = [\n  { value: 'Europe/Rome', label: 'Roma (UTC+1)' },\n  { value: 'Europe/London', label: 'Londra (UTC+0)' },\n  { value: 'Europe/Paris', label: 'Parigi (UTC+1)' },\n  { value: 'Europe/Berlin', label: 'Berlino (UTC+1)' },\n  { value: 'America/New_York', label: 'New York (UTC-5)' },\n  { value: 'America/Los_Angeles', label: 'Los Angeles (UTC-8)' },\n  { value: 'Asia/Tokyo', label: 'Tokyo (UTC+9)' }\n];\n\nconst UserPreferences: React.FC = () => {\n  const {\n    preferences,\n    loading,\n    error,\n    updatePreferences,\n    resetPreferences,\n    exportPreferences,\n    importPreferences\n  } = useUserPreferences();\n  \n  const { isDark } = useTheme();\n  const [activeTab, setActiveTab] = useState('general');\n\n  const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      importPreferences(file);\n      // Reset input\n      event.target.value = '';\n    }\n  };\n\n  const handleLanguageChange = async (language: LanguageCode) => {\n    await updatePreferences({ language });\n  };\n\n  const handleTimezoneChange = async (timezone: string) => {\n    await updatePreferences({ timezone });\n  };\n\n  const handleDateFormatChange = async (dateFormat: 'DD/MM/YYYY' | 'MM/DD/YYYY' | 'YYYY-MM-DD') => {\n    await updatePreferences({ dateFormat });\n  };\n\n  const handleTimeFormatChange = async (timeFormat: '12h' | '24h') => {\n    await updatePreferences({ timeFormat });\n  };\n\n  const handleNotificationChange = async (path: string, value: boolean) => {\n    if (!preferences) return;\n    \n    const pathParts = path.split('.');\n    const updatedNotifications = { ...preferences.notifications };\n    \n    // Navigate to the nested property and update it\n    let current: any = updatedNotifications;\n    for (let i = 0; i < pathParts.length - 1; i++) {\n      current = current[pathParts[i]];\n    }\n    current[pathParts[pathParts.length - 1]] = value;\n    \n    await updatePreferences({ notifications: updatedNotifications });\n  };\n\n  const handleAccessibilityChange = async (key: string, value: any) => {\n    if (!preferences) return;\n    \n    const updatedAccessibility = {\n      ...preferences.accessibility,\n      [key]: value\n    };\n    \n    await updatePreferences({ accessibility: updatedAccessibility });\n  };\n\n  const handlePrivacyChange = async (key: string, value: any) => {\n    if (!preferences) return;\n    \n    const updatedPrivacy = {\n      ...preferences.privacy,\n      [key]: value\n    };\n    \n    await updatePreferences({ privacy: updatedPrivacy });\n  };\n\n  if (loading && !preferences) {\n    return (\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600 dark:text-gray-400\">Caricamento preferenze...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && !preferences) {\n    return (\n      <div className=\"container mx-auto px-4 py-6\">\n        <Alert variant=\"destructive\">\n          <AlertDescription>\n            Errore nel caricamento delle preferenze: {error}\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold mb-2 flex items-center gap-2\">\n          <User className=\"w-6 h-6\" />\n          Preferenze Utente\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Personalizza la tua esperienza e configura le impostazioni dell'applicazione.\n        </p>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"mb-6 flex flex-wrap gap-2\">\n        <Button\n          onClick={exportPreferences}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"flex items-center gap-2\"\n        >\n          <Download className=\"w-4 h-4\" />\n          Esporta Preferenze\n        </Button>\n        \n        <div className=\"relative\">\n          <input\n            type=\"file\"\n            accept=\".json\"\n            onChange={handleFileImport}\n            className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n          />\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center gap-2\"\n          >\n            <Upload className=\"w-4 h-4\" />\n            Importa Preferenze\n          </Button>\n        </div>\n        \n        <Button\n          onClick={resetPreferences}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"flex items-center gap-2 text-red-600 hover:text-red-700\"\n        >\n          <RotateCcw className=\"w-4 h-4\" />\n          Ripristina Default\n        </Button>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-5\">\n          <TabsTrigger value=\"general\" className=\"flex items-center gap-2\">\n            <User className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Generali</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"theme\" className=\"flex items-center gap-2\">\n            <Palette className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Tema</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n            <Bell className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Notifiche</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"accessibility\" className=\"flex items-center gap-2\">\n            <Layout className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Accessibilità</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"privacy\" className=\"flex items-center gap-2\">\n            <Shield className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Privacy</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* General Settings */}\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Impostazioni Generali</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Language */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"language\">Lingua</Label>\n                <Select\n                  value={preferences?.language || 'it'}\n                  onValueChange={handleLanguageChange}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {LANGUAGE_OPTIONS.map((lang) => (\n                      <SelectItem key={lang.code} value={lang.code}>\n                        <span className=\"flex items-center gap-2\">\n                          <span>{lang.flag}</span>\n                          <span>{lang.name}</span>\n                        </span>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Separator />\n\n              {/* Timezone */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"timezone\">Fuso Orario</Label>\n                <Select\n                  value={preferences?.timezone || 'Europe/Rome'}\n                  onValueChange={handleTimezoneChange}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {TIMEZONE_OPTIONS.map((tz) => (\n                      <SelectItem key={tz.value} value={tz.value}>\n                        {tz.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Separator />\n\n              {/* Date Format */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateFormat\">Formato Data</Label>\n                <Select\n                  value={preferences?.dateFormat || 'DD/MM/YYYY'}\n                  onValueChange={handleDateFormatChange}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY (31/12/2024)</SelectItem>\n                    <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY (12/31/2024)</SelectItem>\n                    <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD (2024-12-31)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Time Format */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"timeFormat\">Formato Ora</Label>\n                <Select\n                  value={preferences?.timeFormat || '24h'}\n                  onValueChange={handleTimeFormatChange}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"24h\">24 ore (14:30)</SelectItem>\n                    <SelectItem value=\"12h\">12 ore (2:30 PM)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Theme Settings */}\n        <TabsContent value=\"theme\">\n          <ThemeSelector />\n        </TabsContent>\n\n        {/* Notification Settings */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Notifiche Email</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Abilita notifiche email</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Ricevi notifiche via email\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences?.notifications.email.enabled || false}\n                  onCheckedChange={(checked) => handleNotificationChange('email.enabled', checked)}\n                />\n              </div>\n              \n              {preferences?.notifications.email.enabled && (\n                <div className=\"space-y-4 pl-4 border-l-2 border-gray-200 dark:border-gray-700\">\n                  <div className=\"space-y-2\">\n                    <Label>Frequenza</Label>\n                    <Select\n                      value={preferences.notifications.email.frequency}\n                      onValueChange={(value) => handleNotificationChange('email.frequency', value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"immediate\">Immediata</SelectItem>\n                        <SelectItem value=\"daily\">Giornaliera</SelectItem>\n                        <SelectItem value=\"weekly\">Settimanale</SelectItem>\n                        <SelectItem value=\"never\">Mai</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <Label>Tipi di notifica</Label>\n                    {Object.entries(preferences.notifications.email.types).map(([key, value]) => (\n                      <div key={key} className=\"flex items-center justify-between\">\n                        <Label className=\"capitalize\">\n                          {key === 'system' && 'Sistema'}\n                          {key === 'security' && 'Sicurezza'}\n                          {key === 'updates' && 'Aggiornamenti'}\n                          {key === 'marketing' && 'Marketing'}\n                          {key === 'reminders' && 'Promemoria'}\n                        </Label>\n                        <Switch\n                          checked={value}\n                          onCheckedChange={(checked) => handleNotificationChange(`email.types.${key}`, checked)}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Notifiche Push</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Abilita notifiche push</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Ricevi notifiche push sul dispositivo\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences?.notifications.push.enabled || false}\n                  onCheckedChange={(checked) => handleNotificationChange('push.enabled', checked)}\n                />\n              </div>\n              \n              {preferences?.notifications.push.enabled && (\n                <div className=\"space-y-3 pl-4 border-l-2 border-gray-200 dark:border-gray-700\">\n                  <Label>Tipi di notifica</Label>\n                  {Object.entries(preferences.notifications.push.types).map(([key, value]) => (\n                    <div key={key} className=\"flex items-center justify-between\">\n                      <Label className=\"capitalize\">\n                        {key === 'system' && 'Sistema'}\n                        {key === 'security' && 'Sicurezza'}\n                        {key === 'updates' && 'Aggiornamenti'}\n                        {key === 'reminders' && 'Promemoria'}\n                      </Label>\n                      <Switch\n                        checked={value}\n                        onCheckedChange={(checked) => handleNotificationChange(`push.types.${key}`, checked)}\n                      />\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Accessibility Settings */}\n        <TabsContent value=\"accessibility\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Accessibilità</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Alto contrasto</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Aumenta il contrasto per una migliore leggibilità\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences?.accessibility.highContrast || false}\n                  onCheckedChange={(checked) => handleAccessibilityChange('highContrast', checked)}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Riduzione animazioni</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Riduce le animazioni per utenti sensibili al movimento\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences?.accessibility.reducedMotion || false}\n                  onCheckedChange={(checked) => handleAccessibilityChange('reducedMotion', checked)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Dimensione font</Label>\n                <Select\n                  value={preferences?.accessibility.fontSize || 'medium'}\n                  onValueChange={(value) => handleAccessibilityChange('fontSize', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"small\">Piccolo</SelectItem>\n                    <SelectItem value=\"medium\">Medio</SelectItem>\n                    <SelectItem value=\"large\">Grande</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Privacy Settings */}\n        <TabsContent value=\"privacy\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Impostazioni Privacy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Visibilità profilo</Label>\n                <Select\n                  value={preferences?.privacy.profileVisibility || 'contacts'}\n                  onValueChange={(value) => handlePrivacyChange('profileVisibility', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"public\">Pubblico</SelectItem>\n                    <SelectItem value=\"contacts\">Solo contatti</SelectItem>\n                    <SelectItem value=\"private\">Privato</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Tracciamento attività</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Consenti il tracciamento delle tue attività per migliorare l'esperienza\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences?.privacy.activityTracking || false}\n                  onCheckedChange={(checked) => handlePrivacyChange('activityTracking', checked)}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Raccolta dati</Label>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Consenti la raccolta di dati anonimi per analisi e miglioramenti\n                  </p>\n                </div>\n                <Switch\n                  checked={preferences?.privacy.dataCollection || false}\n                  onCheckedChange={(checked) => handlePrivacyChange('dataCollection', checked)}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Status Info */}\n      {preferences && (\n        <Card className=\"mt-6\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\n              <span>Ultimo aggiornamento: {new Date(preferences.updatedAt).toLocaleString('it-IT')}</span>\n              <Badge variant={isDark ? 'secondary' : 'default'}>\n                Tema: {isDark ? 'Scuro' : 'Chiaro'}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default UserPreferences;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/settings/UsersTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Key' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'users' is assigned a value but never used.","line":268,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":268,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setUsers' is assigned a value but never used.","line":268,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":268,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":271,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":271,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8716,8719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8716,8719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleImportUsers' is assigned a value but never used.","line":278,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8994,8997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8994,8997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { GDPREntityTemplate } from '../../templates/gdpr-entity-page/GDPREntityTemplate';\nimport { DataTableColumn } from '../../components/shared/tables/DataTable';\nimport { Badge } from '../../design-system';\nimport { \n  Building,\n  Clock,\n  Edit,\n  Eye,\n  Key,\n  Mail,\n  Phone,\n  Shield,\n  Trash2,\n  Users,\n  Wifi,\n  WifiOff\n} from 'lucide-react';\nimport { Person } from '../../services/persons';\nimport { apiPost } from '../../services/api';\n// Configurazione colonne per la tabella riutilizzabile (con colonna azioni esplicita)\nconst getUsersColumns = (): DataTableColumn<Person>[] => [\n    {\n      key: 'actions',\n      label: 'Azioni',\n      sortable: false,\n      width: 120,\n      renderCell: (user) => (\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => console.log('Visualizza utente:', user.id)}\n            className=\"p-1 text-blue-600 hover:text-blue-800 rounded\"\n            title=\"Visualizza\"\n          >\n            <Eye className=\"h-4 w-4\" />\n          </button>\n          <button\n            onClick={() => console.log('Modifica utente:', user.id)}\n            className=\"p-1 text-green-600 hover:text-green-800 rounded\"\n            title=\"Modifica\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </button>\n          <button\n            onClick={() => console.log('Elimina utente:', user.id)}\n            className=\"p-1 text-red-600 hover:text-red-800 rounded\"\n            title=\"Elimina\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )\n    },\n    {\n      key: 'name',\n      label: 'Nome',\n      sortable: true,\n      renderCell: (user) => (\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n            <Users className=\"h-4 w-4 text-blue-600\" />\n          </div>\n          <div>\n            <div className=\"font-medium text-gray-900\">{user.firstName} {user.lastName}</div>\n            <div className=\"text-sm text-gray-500\">{user.username || 'N/A'}</div>\n          </div>\n        </div>\n      )\n    },\n    {\n      key: 'email',\n      label: 'Email',\n      sortable: true,\n      renderCell: (user) => (\n        <div className=\"flex items-center gap-2\">\n          <Mail className=\"h-4 w-4 text-gray-400\" />\n          <a href={`mailto:${user.email}`} className=\"text-blue-600 hover:text-blue-800\">\n            {user.email}\n          </a>\n        </div>\n      )\n    },\n    {\n      key: 'phone',\n      label: 'Telefono',\n      sortable: true,\n      renderCell: (user) => user.phone ? (\n        <div className=\"flex items-center gap-2\">\n          <Phone className=\"h-4 w-4 text-gray-400\" />\n          <a href={`tel:${user.phone}`} className=\"text-gray-900\">\n            {user.phone}\n          </a>\n        </div>\n      ) : (\n        <span className=\"text-gray-400\">N/A</span>\n      )\n    },\n    {\n      key: 'company',\n      label: 'Azienda',\n      sortable: true,\n      renderCell: (user) => (\n        <div className=\"flex items-center gap-2\">\n          <Building className=\"h-4 w-4 text-gray-400\" />\n          <span className=\"text-gray-900\">{user.companyId || 'N/A'}</span>\n        </div>\n      )\n    },\n    {\n      key: 'roleType',\n      label: 'Ruolo',\n      sortable: true,\n      renderCell: (user) => {\n        const roleConfig = {\n          ADMIN: { label: 'Admin', color: 'destructive' as const },\n          SUPER_ADMIN: { label: 'Super Admin', color: 'destructive' as const },\n          MANAGER: { label: 'Manager', color: 'outline' as const },\n          TRAINER: { label: 'Formatore', color: 'default' as const },\n          EMPLOYEE: { label: 'Dipendente', color: 'default' as const }\n        };\n        const config = roleConfig[user.roleType as keyof typeof roleConfig] || { label: user.roleType || 'N/A', color: 'secondary' as const };\n        return <Badge variant={config.color}>{config.label}</Badge>;\n      }\n    },\n    {\n      key: 'onlineStatus',\n      label: 'Stato Online',\n      sortable: true,\n      renderCell: (user) => {\n        // Determina se l'utente è online basandosi su lastActivityAt e sessioni attive\n        const isOnline = user.isOnline || false; // Questo campo verrà popolato dal backend\n        const lastSeen = user.lastActivityAt || user.lastLogin;\n        \n        if (isOnline) {\n          return (\n            <div className=\"flex items-center gap-2\">\n              <Wifi className=\"h-4 w-4 text-green-500\" />\n              <Badge variant=\"default\">Online</Badge>\n            </div>\n          );\n        } else {\n          const lastSeenText = lastSeen \n            ? `Visto ${new Date(lastSeen).toLocaleDateString('it-IT')} alle ${new Date(lastSeen).toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}`\n            : 'Mai visto';\n          \n          return (\n            <div className=\"flex items-center gap-2\">\n              <WifiOff className=\"h-4 w-4 text-gray-400\" />\n              <div className=\"flex flex-col\">\n                <Badge variant=\"secondary\">Offline</Badge>\n                <span className=\"text-xs text-gray-500 mt-1\">{lastSeenText}</span>\n              </div>\n            </div>\n          );\n        }\n      }\n    },\n    {\n      key: 'lastLogin',\n      label: 'Ultimo accesso',\n      sortable: true,\n      renderCell: (user) => (\n        <div className=\"flex items-center gap-2\">\n          <Clock className=\"h-4 w-4 text-gray-400\" />\n          <span className=\"text-gray-900\">{user.lastLogin ? new Date(user.lastLogin).toLocaleDateString('it-IT') : 'Mai'}</span>\n        </div>\n      )\n    },\n    {\n      key: 'isActive',\n      label: 'Stato Account',\n      sortable: true,\n      renderCell: (user) => {\n        const isActive = user.isActive !== false; // Default true se undefined\n        return (\n          <Badge variant={isActive ? 'default' : 'destructive'}>\n            {isActive ? 'Attivo' : 'Inattivo'}\n          </Badge>\n        );\n      }\n    }\n  ];\n\n// Configurazione card per la vista griglia\nconst getUserCardConfig = () => ({\n  titleField: 'firstName' as keyof Person,\n  subtitleField: 'email' as keyof Person,\n  badgeField: 'isActive' as keyof Person,\n  // Configurazione dinamica per compatibilità\n  title: (user: Person) => `${user.firstName} ${user.lastName}`,\n  subtitle: (user: Person) => user.email,\n  badge: (user: Person) => {\n    const isActive = user.isActive !== false;\n    return { text: isActive ? 'Attivo' : 'Inattivo', variant: isActive ? 'default' as const : 'destructive' as const };\n  },\n  icon: () => <Users className=\"h-5 w-5\" />,\n  fields: [\n    {\n      label: 'Email',\n      value: (user: Person) => user.email,\n      icon: <Mail className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Telefono',\n      value: (user: Person) => user.phone || 'N/A',\n      icon: <Phone className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Ruolo',\n      value: (user: Person) => {\n        const roleConfig = {\n          ADMIN: 'Admin',\n          SUPER_ADMIN: 'Super Admin',\n          MANAGER: 'Manager',\n          TRAINER: 'Formatore',\n          EMPLOYEE: 'Dipendente'\n        };\n        return roleConfig[user.roleType as keyof typeof roleConfig] || user.roleType || 'N/A';\n      },\n      icon: <Shield className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Stato Online',\n      value: (user: Person) => {\n        const isOnline = user.isOnline || false;\n        return isOnline ? 'Online' : 'Offline';\n      },\n      icon: <Wifi className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Ultimo accesso',\n      value: (user: Person) => user.lastLogin ? new Date(user.lastLogin).toLocaleDateString('it-IT') : 'Mai',\n      icon: <Clock className=\"h-4 w-4\" />\n    }\n  ]\n});\n\n// Template CSV per l'import\nconst csvTemplateData: Partial<Person>[] = [\n  {\n    firstName: 'Mario',\n    lastName: 'Rossi',\n    email: 'mario.rossi@esempio.com',\n    phone: '+39 123 456 7890',\n    residenceAddress: 'Via Roma 123',\n    position: 'Manager',\n    department: 'IT',\n    roleType: 'MANAGER',\n    isActive: true\n  }\n];\n\n// Headers CSV\nconst csvHeaders = [\n  { key: 'firstName', label: 'Nome' },\n  { key: 'lastName', label: 'Cognome' },\n  { key: 'email', label: 'Email' },\n  { key: 'phone', label: 'Telefono' },\n  { key: 'residenceAddress', label: 'Indirizzo' },\n  { key: 'position', label: 'Posizione' },\n  { key: 'department', label: 'Dipartimento' },\n  { key: 'roleType', label: 'Ruolo' },\n  { key: 'isActive', label: 'Attivo' }\n];\n\nexport const UsersTab: React.FC = () => {\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [users, setUsers] = useState<Person[]>([]);\n\n  // Funzione per gestire l'import degli utenti\n  const handleImportEntities = async (data: any[]) => {\n    // Questa funzione viene chiamata dal template quando c'è onImportEntities\n    // Ma noi vogliamo aprire il modal invece, quindi apriamo il modal\n    setShowImportModal(true);\n    return Promise.resolve();\n  };\n\n  const handleImportUsers = async (importedUsers: any[], overwriteIds?: string[]) => {\n    try {\n      // Invia i dati al backend\n      const response = await apiPost('/api/v1/persons/import', {\n        users: importedUsers,\n        overwriteIds: overwriteIds || []\n      });\n      \n      // Aggiorna la lista locale (il template si ricaricherà automaticamente)\n      console.log('Import completato:', response);\n      \n      // Chiudi il modal\n      setShowImportModal(false);\n    } catch (error) {\n      console.error('Errore durante l\\'import:', error);\n      throw error; // Rilancia l'errore per permettere al modal di gestirlo\n    }\n  };\n\n  return (\n    <>\n      <GDPREntityTemplate<Person>\n        entityName=\"user\"\n        entityNamePlural=\"users\"\n        entityDisplayName=\"Utente\"\n        entityDisplayNamePlural=\"Utenti\"\n        readPermission=\"VIEW_USERS\"\n        writePermission=\"EDIT_USERS\"\n        deletePermission=\"DELETE_USERS\"\n        exportPermission=\"VIEW_USERS\"\n        apiEndpoint=\"/api/v1/persons\"\n        columns={getUsersColumns()}\n        searchFields={['firstName', 'lastName', 'email', 'username', 'phone']}\n        filterOptions={[\n          {\n            key: 'roleType',\n            label: 'Ruolo',\n            options: [\n              { value: 'ADMIN', label: 'Admin' },\n              { value: 'SUPER_ADMIN', label: 'Super Admin' },\n              { value: 'MANAGER', label: 'Manager' },\n              { value: 'TRAINER', label: 'Formatore' },\n              { value: 'EMPLOYEE', label: 'Dipendente' }\n            ]\n          },\n          {\n            key: 'isActive',\n            label: 'Stato Account',\n            options: [\n              { value: 'true', label: 'Attivo' },\n              { value: 'false', label: 'Inattivo' }\n            ]\n          },\n          {\n            key: 'isOnline',\n            label: 'Stato Online',\n            options: [\n              { value: 'true', label: 'Online' },\n              { value: 'false', label: 'Offline' }\n            ]\n          }\n        ]}\n        sortOptions={[\n          { key: 'firstName', label: 'Nome' },\n          { key: 'lastName', label: 'Cognome' },\n          { key: 'email', label: 'Email' },\n          { key: 'roleType', label: 'Ruolo' },\n          { key: 'lastLogin', label: 'Ultimo accesso' },\n          { key: 'lastActivityAt', label: 'Ultima attività' },\n          { key: 'createdAt', label: 'Data creazione' }\n        ]}\n        csvHeaders={csvHeaders}\n        csvTemplateData={csvTemplateData}\n        cardConfig={getUserCardConfig()}\n        enableBatchOperations={true}\n        enableImportExport={true}\n        enableColumnSelector={true}\n        enableAdvancedFilters={true}\n        defaultViewMode=\"table\"\n        onImportEntities={handleImportEntities}\n      />\n      \n      {showImportModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">Import Utenti</h3>\n            <p className=\"text-gray-600 mb-4\">\n              La funzionalità di import per gli utenti sarà disponibile a breve.\n            </p>\n            <div className=\"flex justify-end gap-2\">\n              <button\n                onClick={() => setShowImportModal(false)}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\n              >\n                Chiudi\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\n// Export default per compatibilità\nexport default UsersTab;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/tenants/TenantModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":101,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":125,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5226,5229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5226,5229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { X, AlertCircle } from 'lucide-react';\nimport { Company } from '../../types';\nimport { TenantCreateDTO, TenantUpdateDTO, validateTenantDomain, validateTenantSlug } from '../../services/tenants';\n\ninterface TenantModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (data: TenantCreateDTO | TenantUpdateDTO) => Promise<void>;\n  tenant?: Company | null;\n  isEditing: boolean;\n}\n\nconst TenantModal: React.FC<TenantModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n  tenant,\n  isEditing\n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    slug: '',\n    domain: '',\n    subscription_plan: 'FREE',\n    is_active: true,\n    settings: {}\n  });\n  \n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [validationStatus, setValidationStatus] = useState<{\n    slug: 'idle' | 'checking' | 'valid' | 'invalid';\n    domain: 'idle' | 'checking' | 'valid' | 'invalid';\n  }>({ slug: 'idle', domain: 'idle' });\n\n  useEffect(() => {\n    if (isEditing && tenant) {\n      setFormData({\n        name: tenant.name,\n        slug: tenant.slug,\n        domain: tenant.domain || '',\n        subscription_plan: tenant.subscription_plan || 'FREE',\n        is_active: tenant.is_active,\n        settings: tenant.settings || {}\n      });\n    } else {\n      setFormData({\n        name: '',\n        slug: '',\n        domain: '',\n        subscription_plan: 'FREE',\n        is_active: true,\n        settings: {}\n      });\n    }\n    setErrors({});\n    setValidationStatus({ slug: 'idle', domain: 'idle' });\n  }, [isEditing, tenant, isOpen]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    const checked = (e.target as HTMLInputElement).checked;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n\n    // Auto-generate slug from name\n    if (name === 'name' && !isEditing) {\n      const slug = value.toLowerCase()\n        .replace(/[^a-z0-9\\s-]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim();\n      setFormData(prev => ({ ...prev, slug }));\n    }\n  };\n\n  const validateSlug = async (slug: string) => {\n    if (!slug || isEditing) return;\n    \n    setValidationStatus(prev => ({ ...prev, slug: 'checking' }));\n    \n    try {\n      const result = await validateTenantSlug(slug);\n      setValidationStatus(prev => ({ \n        ...prev, \n        slug: result.isValid ? 'valid' : 'invalid' \n      }));\n      \n      if (!result.isValid) {\n        setErrors(prev => ({ ...prev, slug: result.message || 'Slug non disponibile' }));\n      }\n    } catch (error) {\n      setValidationStatus(prev => ({ ...prev, slug: 'invalid' }));\n      setErrors(prev => ({ ...prev, slug: 'Errore nella validazione dello slug' }));\n    }\n  };\n\n  const validateDomain = async (domain: string) => {\n    if (!domain) {\n      setValidationStatus(prev => ({ ...prev, domain: 'idle' }));\n      return;\n    }\n    \n    setValidationStatus(prev => ({ ...prev, domain: 'checking' }));\n    \n    try {\n      const result = await validateTenantDomain(domain);\n      setValidationStatus(prev => ({ \n        ...prev, \n        domain: result.isValid ? 'valid' : 'invalid' \n      }));\n      \n      if (!result.isValid) {\n        setErrors(prev => ({ ...prev, domain: result.message || 'Dominio non disponibile' }));\n      }\n    } catch (error) {\n      setValidationStatus(prev => ({ ...prev, domain: 'invalid' }));\n      setErrors(prev => ({ ...prev, domain: 'Errore nella validazione del dominio' }));\n    }\n  };\n\n  const handleSlugBlur = () => {\n    if (formData.slug) {\n      validateSlug(formData.slug);\n    }\n  };\n\n  const handleDomainBlur = () => {\n    if (formData.domain) {\n      validateDomain(formData.domain);\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Il nome è obbligatorio';\n    }\n\n    if (!formData.slug.trim()) {\n      newErrors.slug = 'Lo slug è obbligatorio';\n    } else if (!/^[a-z0-9-]+$/.test(formData.slug)) {\n      newErrors.slug = 'Lo slug può contenere solo lettere minuscole, numeri e trattini';\n    }\n\n    if (formData.domain && !/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/.test(formData.domain)) {\n      newErrors.domain = 'Formato dominio non valido';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    // Check validation status\n    if (validationStatus.slug === 'invalid' || validationStatus.domain === 'invalid') {\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const submitData = { ...formData };\n      \n      // Remove empty domain\n      if (!submitData.domain) {\n        delete submitData.domain;\n      }\n      \n      await onSave(submitData);\n      onClose();\n    } catch (error: any) {\n      setErrors({ submit: error.message || 'Errore nel salvataggio' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getValidationIcon = (status: 'idle' | 'checking' | 'valid' | 'invalid') => {\n    switch (status) {\n      case 'checking':\n        return <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>;\n      case 'valid':\n        return <div className=\"h-4 w-4 bg-green-500 rounded-full flex items-center justify-center text-white text-xs\">✓</div>;\n      case 'invalid':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-md mx-4\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">\n            {isEditing ? 'Modifica Tenant' : 'Nuovo Tenant'}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\n          {/* Name */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Nome *\n            </label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleInputChange}\n              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                errors.name ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Nome del tenant\"\n            />\n            {errors.name && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.name}</p>\n            )}\n          </div>\n\n          {/* Slug */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Slug *\n            </label>\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                name=\"slug\"\n                value={formData.slug}\n                onChange={handleInputChange}\n                onBlur={handleSlugBlur}\n                disabled={isEditing}\n                className={`w-full px-3 py-2 pr-10 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.slug ? 'border-red-500' : 'border-gray-300'\n                } ${isEditing ? 'bg-gray-100' : ''}`}\n                placeholder=\"slug-tenant\"\n              />\n              <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n                {getValidationIcon(validationStatus.slug)}\n              </div>\n            </div>\n            {errors.slug && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.slug}</p>\n            )}\n            <p className=\"text-gray-500 text-xs mt-1\">\n              Utilizzato per l'URL: {formData.slug}.tuodominio.com\n            </p>\n          </div>\n\n          {/* Domain */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Dominio Personalizzato\n            </label>\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                name=\"domain\"\n                value={formData.domain}\n                onChange={handleInputChange}\n                onBlur={handleDomainBlur}\n                className={`w-full px-3 py-2 pr-10 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.domain ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"esempio.com\"\n              />\n              <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n                {getValidationIcon(validationStatus.domain)}\n              </div>\n            </div>\n            {errors.domain && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.domain}</p>\n            )}\n          </div>\n\n          {/* Subscription Plan */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Piano di Sottoscrizione\n            </label>\n            <select\n              name=\"subscription_plan\"\n              value={formData.subscription_plan}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"FREE\">Free</option>\n              <option value=\"BASIC\">Basic</option>\n              <option value=\"PREMIUM\">Premium</option>\n              <option value=\"ENTERPRISE\">Enterprise</option>\n            </select>\n          </div>\n\n          {/* Active Status */}\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              name=\"is_active\"\n              checked={formData.is_active}\n              onChange={handleInputChange}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <label className=\"ml-2 block text-sm text-gray-700\">\n              Tenant attivo\n            </label>\n          </div>\n\n          {/* Submit Error */}\n          {errors.submit && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n              {errors.submit}\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50\"\n            >\n              Annulla\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isLoading || validationStatus.slug === 'checking' || validationStatus.domain === 'checking'}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? 'Salvataggio...' : (isEditing ? 'Aggiorna' : 'Crea')}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TenantModal;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/tenants/TenantUsageModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Xs' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":5},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsage'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUsage, isOpen, tenantId]","fix":{"range":[678,696],"text":"[fetchUsage, isOpen, tenantId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[884,887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[884,887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getUsageColor' is assigned a value but never used.","line":63,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Activity,\n  Building,\n  HardDrive,\n  TrendingUp,\n  Users,\n  Xs\n} from 'lucide-react';\nimport { getTenantUsage, TenantUsage } from '../../services/tenants';\n\ninterface TenantUsageModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  tenantId: string;\n}\n\nconst TenantUsageModal: React.FC<TenantUsageModalProps> = ({\n  isOpen,\n  onClose,\n  tenantId\n}) => {\n  const [usage, setUsage] = useState<TenantUsage | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (isOpen && tenantId) {\n      fetchUsage();\n    }\n  }, [isOpen, tenantId]);\n\n  const fetchUsage = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const data = await getTenantUsage(tenantId);\n      setUsage(data);\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatNumber = (num: number) => {\n    return new Intl.NumberFormat('it-IT').format(num);\n  };\n\n  const getUsagePercentage = (current: number, max: number) => {\n    if (max === 0) return 0;\n    return Math.min((current / max) * 100, 100);\n  };\n\n  const getUsageColor = (percentage: number) => {\n    if (percentage >= 90) return 'bg-red-500';\n    if (percentage >= 75) return 'bg-yellow-500';\n    return 'bg-green-500';\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">\n            Utilizzo Tenant\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {isLoading && (\n            <div className=\"flex justify-center items-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n              {error}\n            </div>\n          )}\n\n          {usage && (\n            <div className=\"space-y-6\">\n              {/* Usage Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Users */}\n                <div className=\"bg-blue-50 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"h-5 w-5 text-blue-600\" />\n                      <span className=\"font-medium text-blue-900\">Utenti</span>\n                    </div>\n                    <span className=\"text-2xl font-bold text-blue-900\">\n                      {formatNumber(usage.userCount)}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-blue-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${getUsagePercentage(usage.userCount, 1000)}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-sm text-blue-700 mt-1\">\n                    {getUsagePercentage(usage.userCount, 1000).toFixed(1)}% del limite (1,000)\n                  </p>\n                </div>\n\n                {/* Companies */}\n                <div className=\"bg-green-50 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Building className=\"h-5 w-5 text-green-600\" />\n                      <span className=\"font-medium text-green-900\">Aziende</span>\n                    </div>\n                    <span className=\"text-2xl font-bold text-green-900\">\n                      {formatNumber(usage.companyCount)}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-green-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-green-600 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${getUsagePercentage(usage.companyCount, 100)}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-sm text-green-700 mt-1\">\n                    {getUsagePercentage(usage.companyCount, 100).toFixed(1)}% del limite (100)\n                  </p>\n                </div>\n\n                {/* Storage */}\n                <div className=\"bg-purple-50 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <HardDrive className=\"h-5 w-5 text-purple-600\" />\n                      <span className=\"font-medium text-purple-900\">Storage</span>\n                    </div>\n                    <span className=\"text-2xl font-bold text-purple-900\">\n                      {formatBytes(usage.storageUsed)}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-purple-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-purple-600 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${getUsagePercentage(usage.storageUsed, 10 * 1024 * 1024 * 1024)}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-sm text-purple-700 mt-1\">\n                    {getUsagePercentage(usage.storageUsed, 10 * 1024 * 1024 * 1024).toFixed(1)}% del limite (10 GB)\n                  </p>\n                </div>\n\n                {/* API Calls */}\n                <div className=\"bg-orange-50 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Activity className=\"h-5 w-5 text-orange-600\" />\n                      <span className=\"font-medium text-orange-900\">Chiamate API</span>\n                    </div>\n                    <span className=\"text-2xl font-bold text-orange-900\">\n                      {formatNumber(usage.apiCallsCount)}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-orange-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-orange-600 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${getUsagePercentage(usage.apiCallsCount, 100000)}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-sm text-orange-700 mt-1\">\n                    {getUsagePercentage(usage.apiCallsCount, 100000).toFixed(1)}% del limite (100,000/mese)\n                  </p>\n                </div>\n              </div>\n\n              {/* Usage Summary */}\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h3 className=\"font-medium text-gray-900 mb-3 flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Riepilogo Utilizzo\n                </h3>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Utenti attivi:</span>\n                    <span className=\"ml-2 font-medium\">{formatNumber(usage.userCount)}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Aziende registrate:</span>\n                    <span className=\"ml-2 font-medium\">{formatNumber(usage.companyCount)}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Spazio utilizzato:</span>\n                    <span className=\"ml-2 font-medium\">{formatBytes(usage.storageUsed)}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">API calls questo mese:</span>\n                    <span className=\"ml-2 font-medium\">{formatNumber(usage.apiCallsCount)}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Alerts */}\n              {(getUsagePercentage(usage.userCount, 1000) >= 80 || \n                getUsagePercentage(usage.companyCount, 100) >= 80 || \n                getUsagePercentage(usage.storageUsed, 10 * 1024 * 1024 * 1024) >= 80 || \n                getUsagePercentage(usage.apiCallsCount, 100000) >= 80) && (\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-yellow-800 mb-2\">⚠️ Avvisi di Utilizzo</h4>\n                  <ul className=\"text-sm text-yellow-700 space-y-1\">\n                    {getUsagePercentage(usage.userCount, 1000) >= 80 && (\n                      <li>• Limite utenti quasi raggiunto ({getUsagePercentage(usage.userCount, 1000).toFixed(1)}%)</li>\n                    )}\n                    {getUsagePercentage(usage.companyCount, 100) >= 80 && (\n                      <li>• Limite aziende quasi raggiunto ({getUsagePercentage(usage.companyCount, 100).toFixed(1)}%)</li>\n                    )}\n                    {getUsagePercentage(usage.storageUsed, 10 * 1024 * 1024 * 1024) >= 80 && (\n                      <li>• Limite storage quasi raggiunto ({getUsagePercentage(usage.storageUsed, 10 * 1024 * 1024 * 1024).toFixed(1)}%)</li>\n                    )}\n                    {getUsagePercentage(usage.apiCallsCount, 100000) >= 80 && (\n                      <li>• Limite API calls quasi raggiunto ({getUsagePercentage(usage.apiCallsCount, 100000).toFixed(1)}%)</li>\n                    )}\n                  </ul>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-end p-6 border-t\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\n          >\n            Chiudi\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TenantUsageModal;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/tenants/TenantsPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/tenants/TenantsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getTenantUsage' is defined but never used.","line":12,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useTenant' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1637,1640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1637,1640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2246,2249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2246,2249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2665,2668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2665,2668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Activity,\n  Building,\n  Edit,\n  Plus,\n  Trash,\n  Users\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { Company } from '../../types';\nimport { getAllTenants, createTenant, updateTenant, deleteTenant, getTenantUsage, TenantCreateDTO, TenantUpdateDTO } from '../../services/tenants';\nimport { useAuth } from '../../context/AuthContext';\nimport { useTenant } from '../../context/TenantContext';\nimport TenantModal from './TenantModal';\nimport TenantUsageModal from './TenantUsageModal';\n\nconst TenantsPage: React.FC = () => {\n  const [tenants, setTenants] = useState<Company[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isUsageModalOpen, setIsUsageModalOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTenant, setCurrentTenant] = useState<Company | null>(null);\n  const [selectedTenantId, setSelectedTenantId] = useState<string | null>(null);\n  \n  const { user } = useAuth();\n\n  // Verifica se l'utente è un SUPER_ADMIN\n  const isSuperAdmin = user?.role === 'SUPER_ADMIN';\n\n  useEffect(() => {\n    if (!isSuperAdmin) {\n      setError('Accesso negato. Solo i Super Admin possono gestire i tenant.');\n      setIsLoading(false);\n      return;\n    }\n    \n    fetchTenants();\n  }, [isSuperAdmin]);\n\n  const fetchTenants = async () => {\n    try {\n      setIsLoading(true);\n      const data = await getAllTenants();\n      setTenants(data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCreate = () => {\n    setCurrentTenant(null);\n    setIsEditing(false);\n    setIsModalOpen(true);\n  };\n\n  const handleEdit = (tenant: Company) => {\n    setCurrentTenant(tenant);\n    setIsEditing(true);\n    setIsModalOpen(true);\n  };\n\n  const handleDelete = async (tenantId: string) => {\n    if (!window.confirm('Sei sicuro di voler eliminare questo tenant? Questa azione è irreversibile.')) {\n      return;\n    }\n\n    try {\n      await deleteTenant(tenantId);\n      await fetchTenants();\n    } catch (err: any) {\n      setError(err.message);\n    }\n  };\n\n  const handleSave = async (tenantData: TenantCreateDTO | TenantUpdateDTO) => {\n    try {\n      if (isEditing && currentTenant) {\n        await updateTenant(currentTenant.id, tenantData as TenantUpdateDTO);\n      } else {\n        await createTenant(tenantData as TenantCreateDTO);\n      }\n      \n      setIsModalOpen(false);\n      await fetchTenants();\n    } catch (err: any) {\n      setError(err.message);\n    }\n  };\n\n  const handleViewUsage = (tenantId: string) => {\n    setSelectedTenantId(tenantId);\n    setIsUsageModalOpen(true);\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return (\n      <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n        isActive \n          ? 'bg-green-100 text-green-800' \n          : 'bg-red-100 text-red-800'\n      }`}>\n        {isActive ? 'Attivo' : 'Inattivo'}\n      </span>\n    );\n  };\n\n  const getPlanBadge = (plan: string) => {\n    const planColors = {\n      'FREE': 'bg-gray-100 text-gray-800',\n      'BASIC': 'bg-blue-100 text-blue-800',\n      'PREMIUM': 'bg-purple-100 text-purple-800',\n      'ENTERPRISE': 'bg-yellow-100 text-yellow-800'\n    };\n    \n    return (\n      <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n        planColors[plan as keyof typeof planColors] || 'bg-gray-100 text-gray-800'\n      }`}>\n        {plan}\n      </span>\n    );\n  };\n\n  if (!isSuperAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-6xl mb-4\">🚫</div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Accesso Negato</h1>\n          <p className=\"text-gray-600\">Solo i Super Admin possono accedere a questa sezione.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Gestione Tenant</h1>\n          <p className=\"text-gray-600\">Gestisci tutti i tenant del sistema</p>\n        </div>\n        <button\n          onClick={handleCreate}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          Nuovo Tenant\n        </button>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n          {error}\n        </div>\n      )}\n\n      {/* Tenants Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {tenants.map((tenant) => (\n          <div key={tenant.id} className=\"bg-white rounded-lg shadow border hover:shadow-md transition-shadow\">\n            <div className=\"p-6\">\n              {/* Header */}\n              <div className=\"flex justify-between items-start mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-blue-100 rounded-lg\">\n                    <Building className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">{tenant.name}</h3>\n                    <p className=\"text-sm text-gray-500\">{tenant.slug}</p>\n                  </div>\n                </div>\n                {getStatusBadge(tenant.isActive)}\n              </div>\n\n              {/* Info */}\n              <div className=\"space-y-2 mb-4\">\n                {tenant.domain && (\n                  <div className=\"text-sm\">\n                    <span className=\"text-gray-500\">Dominio:</span>\n                    <span className=\"ml-2 text-gray-900\">{tenant.domain}</span>\n                  </div>\n                )}\n                <div className=\"text-sm\">\n                  <span className=\"text-gray-500\">Piano:</span>\n                  <span className=\"ml-2\">{getPlanBadge('FREE')}</span>\n                </div>\n                <div className=\"text-sm\">\n                  <span className=\"text-gray-500\">Creato:</span>\n                  <span className=\"ml-2 text-gray-900\">\n                    {tenant.createdAt ? format(new Date(tenant.createdAt), 'dd/MM/yyyy') : 'N/A'}\n                  </span>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex justify-between items-center pt-4 border-t\">\n                <div className=\"flex gap-2\">\n                  <button\n                    onClick={() => handleEdit(tenant)}\n                    className=\"p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded\"\n                    title=\"Modifica\"\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </button>\n                  <button\n                    onClick={() => handleViewUsage(tenant.id)}\n                    className=\"p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded\"\n                    title=\"Visualizza utilizzo\"\n                  >\n                    <Activity className=\"h-4 w-4\" />\n                  </button>\n                  <button\n                    onClick={() => handleDelete(tenant.id)}\n                    className=\"p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded\"\n                    title=\"Elimina\"\n                  >\n                    <Trash className=\"h-4 w-4\" />\n                  </button>\n                </div>\n                <div className=\"flex items-center gap-1 text-sm text-gray-500\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>0</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {tenants.length === 0 && !isLoading && (\n        <div className=\"text-center py-12\">\n          <Building className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nessun tenant trovato</h3>\n          <p className=\"text-gray-500 mb-4\">Inizia creando il primo tenant del sistema.</p>\n          <button\n            onClick={handleCreate}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n          >\n            Crea Primo Tenant\n          </button>\n        </div>\n      )}\n\n      {/* Modals */}\n      {isModalOpen && (\n        <TenantModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          onSave={handleSave}\n          tenant={currentTenant}\n          isEditing={isEditing}\n        />\n      )}\n\n      {isUsageModalOpen && selectedTenantId && (\n        <TenantUsageModal\n          isOpen={isUsageModalOpen}\n          onClose={() => setIsUsageModalOpen(false)}\n          tenantId={selectedTenantId}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TenantsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/trainers/TrainerDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":30,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { \n  Award,\n  Building,\n  Calendar,\n  ChevronRight,\n  CreditCard,\n  Edit,\n  FileText,\n  Mail,\n  MapPin,\n  Phone\n} from 'lucide-react';\nimport { apiGet } from '../../services/api';\n\nconst TAX_CODE_REGEX = /^[a-zA-Z]{6}[0-9]{2}[abcdehlmprstABCDEHLMPRST]{1}[0-9]{2}([a-zA-Z]{1}[0-9]{3})[a-zA-Z]{1}$/;\n\nconst TrainerDetails: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [trainer, setTrainer] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      try {\n        const trainerData = await apiGet(`/trainers/${id}`);\n        setTrainer(trainerData);\n      } catch (err) {\n        setTrainer(null);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [id]);\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-80\">Loading...</div>;\n  }\n\n  if (!trainer) {\n    return (\n      <div className=\"flex items-center justify-center h-80\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-800\">Trainer not found</h2>\n          <p className=\"text-gray-600 mt-2\">The trainer you're looking for doesn't exist or has been removed.</p>\n          <Link to=\"/trainers\" className=\"mt-4 inline-block text-blue-600 hover:text-blue-800\">\n            Back to Trainers\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back link */}\n      <div>\n        <Link \n          to=\"/trainers\" \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <span className=\"transform rotate-180\">\n            <ChevronRight className=\"h-4 w-4 mr-1\" />\n          </span>\n          Back to Trainers\n        </Link>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"h-16 w-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-xl font-bold text-white\">\n                {trainer.firstName.charAt(0)}{trainer.lastName.charAt(0)}\n              </span>\n            </div>\n            <div className=\"ml-4\">\n              <h1 className=\"text-2xl font-bold text-gray-800\">{trainer.firstName} {trainer.lastName}</h1>\n              <div className=\"flex items-center mt-1 gap-2 flex-wrap\">\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                  trainer.status === 'ACTIVE' \n                    ? 'bg-green-100 text-green-800' \n                    : 'bg-gray-100 text-gray-800'\n                }`}>\n                  {trainer.status}\n                </span>\n                {/* Tax Code validation badge */}\n                {trainer.tax_code && (\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    TAX_CODE_REGEX.test(trainer.tax_code) ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                  }`}>\n                    {TAX_CODE_REGEX.test(trainer.tax_code) ? 'Valid Tax Code' : 'Invalid Tax Code'}\n                  </span>\n                )}\n                {trainer.specialties && trainer.specialties.length > 0 && (\n                  <>\n                    <span className=\"mx-2 text-gray-400\">•</span>\n                    <span className=\"text-sm text-gray-600\">{trainer.specialties.join(', ')}</span>\n                  </>\n                )}\n              </div>\n              {/* Show ID */}\n              <div className=\"text-xs text-gray-500 mt-1\">ID: {trainer.id}</div>\n            </div>\n          </div>\n          <div className=\"mt-4 md:mt-0\">\n            <Link to={`/trainers/${trainer.id}/edit`} className=\"btn-primary flex items-center\">\n              <Edit className=\"h-4 w-4 mr-1\" />\n              Edit Trainer\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"mt-6 border-t border-gray-200 pt-6 grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Informazioni di Contatto</h2>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-start\">\n                <Phone className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Telefono</span>\n                  <span className=\"block text-sm text-gray-600\">{trainer.phone}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Mail className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Email</span>\n                  <span className=\"block text-sm text-gray-600\">{trainer.email}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <MapPin className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Indirizzo</span>\n                  <span className=\"block text-sm text-gray-600\">\n                    {trainer.residenceAddress}, {trainer.residenceCity} ({trainer.province}) {trainer.postalCode}\n                  </span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <CreditCard className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Dati Fiscali</span>\n                  <span className=\"block text-sm text-gray-600\">\n                    Codice Fiscale: {trainer.tax_code || 'N/A'}<br/>\n                    P.IVA: {trainer.vat_number || 'N/A'}<br/>\n                    Tariffa Oraria: {trainer.tariffa_oraria ? `€ ${trainer.tariffa_oraria}` : 'N/A'}\n                  </span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Building className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Dati Professionali</span>\n                  <span className=\"block text-sm text-gray-600\">\n                    Codice Albo: {trainer.register_code || 'N/A'}<br/>\n                    IBAN: {trainer.iban || 'N/A'}\n                  </span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Calendar className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Data di Nascita</span>\n                  <span className=\"block text-sm text-gray-600\">{trainer.birthDate ? new Date(trainer.birthDate).toLocaleDateString() : 'N/A'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <FileText className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Note</span>\n                  <span className=\"block text-sm text-gray-600\">{trainer.notes || 'N/A'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <Award className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Creato il</span>\n                  <span className=\"block text-sm text-gray-600\">{trainer.createdAt ? new Date(trainer.createdAt).toLocaleString() : 'N/A'}</span>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <GraduationCap className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                <div className=\"ml-3\">\n                  <span className=\"block text-sm font-medium text-gray-800\">Aggiornato il</span>\n                  <span className=\"block text-sm text-gray-600\">{trainer.updatedAt ? new Date(trainer.updatedAt).toLocaleString() : 'N/A'}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Qualifiche</h2>\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 p-4 rounded-full\">\n                <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Specialità</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {trainer.specialties && trainer.specialties.length > 0 ? (\n                    trainer.specialties.map((specialty: string) => (\n                      <span key={specialty} className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium\">\n                        {specialty}\n                      </span>\n                    ))\n                  ) : (\n                    <span className=\"text-xs text-gray-500\">None</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-4 rounded-full\">\n                <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Certificazioni</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {trainer.certifications && trainer.certifications.length > 0 ? (\n                    trainer.certifications.map((cert: string) => (\n                      <span key={cert} className=\"px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium\">\n                        {cert}\n                      </span>\n                    ))\n                  ) : (\n                    <span className=\"text-xs text-gray-500\">None</span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Link to=\"#\" className=\"bg-white p-4 rounded-full shadow flex items-center transition-all duration-200 hover:shadow-md hover:translate-y-[-2px]\">\n          <div className=\"p-3 bg-blue-100 rounded-lg\">\n            <Calendar className=\"h-6 w-6 text-blue-600\" />\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-gray-800\">Schedule</h3>\n            <p className=\"text-xs text-gray-500\">View upcoming sessions</p>\n          </div>\n          <ChevronRight className=\"h-5 w-5 text-gray-400 ml-auto\" />\n        </Link>\n        <Link to=\"#\" className=\"bg-white p-4 rounded-full shadow flex items-center transition-all duration-200 hover:shadow-md hover:translate-y-[-2px]\">\n          <div className=\"p-3 bg-green-100 rounded-lg\">\n            <Award className=\"h-6 w-6 text-green-600\" />\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-gray-800\">Certifications</h3>\n            <p className=\"text-xs text-gray-500\">Manage certifications</p>\n          </div>\n          <ChevronRight className=\"h-5 w-5 text-gray-400 ml-auto\" />\n        </Link>\n        <Link to=\"#\" className=\"bg-white p-4 rounded-full shadow flex items-center transition-all duration-200 hover:shadow-md hover:translate-y-[-2px]\">\n          <div className=\"p-3 bg-amber-100 rounded-lg\">\n            <FileText className=\"h-6 w-6 text-amber-600\" />\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-gray-800\">Documents</h3>\n            <p className=\"text-xs text-gray-500\">View documents</p>\n          </div>\n          <ChevronRight className=\"h-5 w-5 text-gray-400 ml-auto\" />\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default TrainerDetails;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/trainers/TrainerEdit.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[451,454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[451,454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[850,853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[850,853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { ChevronRight } from 'lucide-react';\nimport TrainerForm from '../../components/trainers/TrainerForm';\nimport { apiGet, apiPost, apiPut } from '../../services/api';\n\nexport default function TrainerEdit() {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const [trainer, setTrainer] = useState<any>(null);\n  const [loading, setLoading] = useState(!!id);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      apiGet(`/trainers/${id}`)\n        .then(data => setTrainer(data))\n        .catch(err => setError(err.message || 'Trainer not found'))\n        .finally(() => setLoading(false));\n    }\n  }, [id]);\n\n  const handleSubmit = async (data: any) => {\n    try {\n      if (id) {\n        await apiPut(`/trainers/${id}`, data);\n        navigate(`/trainers/${id}`);\n      } else {\n        const created = await apiPost('/trainers', data);\n        navigate(`/trainers/${created.id}`);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to save trainer');\n    }\n  };\n\n  const handleCancel = () => {\n    navigate(id ? `/trainers/${id}` : '/trainers');\n  };\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-80\">Loading...</div>;\n  }\n\n  if (error) {\n    return <div className=\"flex items-center justify-center h-80 text-red-600\">{error}</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back link */}\n      <div>\n        <Link \n          to={id ? `/trainers/${id}` : '/trainers'} \n          className=\"inline-flex items-center text-sm text-blue-600 hover:text-blue-800\"\n        >\n          <span className=\"transform rotate-180\">\n            <ChevronRight className=\"h-4 w-4 mr-1\" />\n          </span>\n          Back to {id ? 'Trainer Details' : 'Trainers'}\n        </Link>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        <div className=\"p-6\">\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">\n            {id ? 'Edit Trainer' : 'Add New Trainer'}\n          </h1>\n          <TrainerForm\n            trainer={trainer}\n            onSubmit={handleSubmit}\n            onCancel={handleCancel}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/trainers/TrainersPage.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/trainers/TrainersPageNew.lazy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/pages/trainers/TrainersPageNew.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/providers/QueryProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ReactQueryDevtools' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[602,605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[602,605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1379,1382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1379,1382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1899,1902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1899,1902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":60,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":60,"endColumn":34},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":88,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":88,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2931,2934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2931,2934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":133,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":133,"endColumn":21}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { sanitizeErrorMessage } from '../utils/errorUtils';\nimport { toast } from 'react-hot-toast';\n\n// Configurazione del QueryClient ottimizzata\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // Cache per 5 minuti\n      staleTime: 5 * 60 * 1000,\n      // Mantieni in cache per 10 minuti\n      gcTime: 10 * 60 * 1000,\n      // Retry automatico per errori di rete\n      retry: (failureCount, error: any) => {\n        // Non fare retry per errori 4xx (client errors)\n        if (error?.response?.status >= 400 && error?.response?.status < 500) {\n          return false;\n        }\n        // Retry massimo 3 volte per altri errori\n        return failureCount < 3;\n      },\n      // Delay progressivo per i retry\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n      // Refetch automatico quando la finestra torna in focus\n      refetchOnWindowFocus: true,\n      // Refetch quando si riconnette\n      refetchOnReconnect: true,\n      // Non refetch automaticamente al mount se i dati sono fresh\n      refetchOnMount: 'always',\n    },\n    mutations: {\n      // Retry per le mutazioni solo in caso di errori di rete\n      retry: (failureCount, error: any) => {\n        // Non fare retry per errori 4xx\n        if (error?.response?.status >= 400 && error?.response?.status < 500) {\n          return false;\n        }\n        // Retry massimo 2 volte per errori di rete\n        return failureCount < 2;\n      },\n      // Delay per i retry delle mutazioni\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 10000),\n    },\n  },\n});\n\n// Error handler globale per le query\nqueryClient.setMutationDefaults(['create', 'update', 'delete'], {\n  onError: (error: any) => {\n    console.error('Mutation error:', error);\n    // Mostra un toast con errore sanitizzato per le mutazioni fallite\n    const userMessage = sanitizeErrorMessage(error, 'Operazione fallita');\n    toast.error(userMessage);\n  },\n});\n\n// Query invalidation patterns\nexport const invalidationPatterns = {\n  // Invalida tutte le query di una risorsa\n  invalidateResource: (resource: string) => {\n    queryClient.invalidateQueries({ queryKey: [resource] });\n  },\n  \n  // Invalida query specifiche\n  invalidateSpecific: (queryKey: string[]) => {\n    queryClient.invalidateQueries({ queryKey });\n  },\n  \n  // Invalida tutto\n  invalidateAll: () => {\n    queryClient.invalidateQueries();\n  },\n  \n  // Remove query dalla cache\n  removeQuery: (queryKey: string[]) => {\n    queryClient.removeQueries({ queryKey });\n  },\n  \n  // Reset query client\n  reset: () => {\n    queryClient.clear();\n  },\n};\n\n// Prefetch utilities\nexport const prefetchUtils = {\n  // Prefetch lista di una risorsa\n  prefetchList: async (resource: string, params?: any) => {\n    await queryClient.prefetchQuery({\n      queryKey: [resource, 'list', params],\n      queryFn: () => {\n        // Qui dovresti implementare la logica di fetch\n        // Per ora ritorna una promise vuota\n        return Promise.resolve([]);\n      },\n    });\n  },\n  \n  // Prefetch dettaglio di una risorsa\n  prefetchDetail: async (resource: string, id: string) => {\n    await queryClient.prefetchQuery({\n      queryKey: [resource, 'detail', id],\n      queryFn: () => {\n        // Qui dovresti implementare la logica di fetch\n        return Promise.resolve(null);\n      },\n    });\n  },\n};\n\ninterface QueryProviderProps {\n  children: React.ReactNode;\n}\n\nexport const QueryProvider: React.FC<QueryProviderProps> = ({ children }) => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      {/* DevTools disabilitati per evitare riferimenti a \"TanStack\" nell'UI */}\n      {/* {import.meta.env.DEV && (\n        <ReactQueryDevtools \n          initialIsOpen={false}\n          position=\"bottom-right\"\n        />\n      )} */}\n    </QueryClientProvider>\n  );\n};\n\n// Export del client per uso diretto\nexport { queryClient };\nexport default QueryProvider;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/providers/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/router/LazyRoute.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[971,974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[971,974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1137,1140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1137,1140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":58,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":58,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1447,1450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1447,1450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense, ComponentType } from 'react';\nimport { ErrorBoundary } from '../components/ui/ErrorBoundary';\nimport { LoadingFallback } from '../components/ui/LoadingFallback';\n\n/**\n * Lazy Route wrapper component\n * Week 11 Implementation - Lazy Loading Optimization\n */\n\ninterface LazyRouteProps {\n  component: ComponentType<any>;\n  loadingMessage?: string;\n  errorFallback?: React.ReactNode;\n  className?: string;\n}\n\nexport const LazyRoute: React.FC<LazyRouteProps> = ({\n  component: Component,\n  loadingMessage = 'Loading page...',\n  errorFallback,\n  className,\n  ...props\n}) => {\n  return (\n    <ErrorBoundary fallback={errorFallback} className={className}>\n      <Suspense fallback={<LoadingFallback message={loadingMessage} />}>\n        <Component {...props} />\n      </Suspense>\n    </ErrorBoundary>\n  );\n};\n\n/**\n * Higher-order component for creating lazy routes\n */\nexport const createLazyRoute = (\n  importFn: () => Promise<{ default: ComponentType<any> }>,\n  options?: {\n    loadingMessage?: string;\n    errorFallback?: React.ReactNode;\n  }\n) => {\n  const LazyComponent = React.lazy(importFn);\n  \n  return (props: any) => (\n    <LazyRoute\n      component={LazyComponent}\n      loadingMessage={options?.loadingMessage}\n      errorFallback={options?.errorFallback}\n      {...props}\n    />\n  );\n};\n\n/**\n * Utility for preloading lazy components\n */\nexport const preloadRoute = (importFn: () => Promise<{ default: ComponentType<any> }>) => {\n  // Preload the component\n  importFn();\n};\n\nexport default LazyRoute;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/advanced-permissions/AdvancedPermissionsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3361,3364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3361,3364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8245,8248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8245,8248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8480,8483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8480,8483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9401,9404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9401,9404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":285,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9965,9968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9965,9968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet} from '../api';\nimport { EntityPermission, EntityDefinition, PermissionsSummary } from './types';\nimport { ALL_ENTITY_DEFINITIONS, CRITICAL_ENTITIES } from './entityDefinitions';\nimport { convertFromBackendFormat, convertToBackendFormat } from './conversionUtils';\nimport { getPermissionsSummary, validatePermission, groupPermissionsByEntity } from './permissionUtils';\nimport { virtualEntityService } from './virtualEntityService';\nimport { getRoleTypeFromDisplayName } from '../roleHierarchyService';\n\n/**\n * Servizio principale per la gestione dei permessi avanzati\n * Refactorizzato per essere più modulare e manutenibile\n */\nexport class AdvancedPermissionsService {\n  private baseUrl = '/api/advanced-permissions';\n\n  /**\n   * Ottiene le definizioni delle entità del sistema\n   * Include sia le entità standard che quelle virtuali (employees, trainers)\n   */\n  async getEntityDefinitions(): Promise<EntityDefinition[]> {\n    try {\n      console.log('[AdvancedPermissions] Caricamento entità dal backend...');\n      const response = await apiGet<{ success: boolean; entities: EntityDefinition[] }>(`${this.baseUrl}/entities`);\n      \n      if (response.success && response.entities) {\n        console.log('[AdvancedPermissions] Entità caricate dal backend:', response.entities.length);\n        console.log('[AdvancedPermissions] Entità dal backend:', response.entities.map(e => e.name));\n        \n        // Verifica se le entità critiche sono presenti\n        const missingEntities = CRITICAL_ENTITIES.filter(entity => \n          !response.entities.some(e => e.name === entity)\n        );\n        \n        if (missingEntities.length > 0) {\n          console.warn('[AdvancedPermissions] Entità mancanti dal backend:', missingEntities);\n          console.log('[AdvancedPermissions] Uso fallback statico per avere tutte le entità');\n          return this.getStaticEntityDefinitionsWithVirtual();\n        }\n        \n        // Aggiungi le entità virtuali alla lista delle entità dal backend\n        return this.mergeWithVirtualEntities(response.entities);\n      } else {\n        console.warn('[AdvancedPermissions] Risposta backend non valida, uso fallback');\n        return this.getStaticEntityDefinitionsWithVirtual();\n      }\n    } catch (error) {\n      console.error('[AdvancedPermissions] Errore nel caricamento entità dal backend:', error);\n      console.log('[AdvancedPermissions] Uso definizioni statiche come fallback');\n      \n      const staticEntities = this.getStaticEntityDefinitionsWithVirtual();\n      console.log('[AdvancedPermissions] Entità statiche caricate:', staticEntities.length);\n      console.log('[AdvancedPermissions] Entità statiche:', staticEntities.map(e => e.name));\n      return staticEntities;\n    }\n  }\n\n  /**\n   * Ottiene i permessi di un ruolo specifico\n   */\n  async getRolePermissions(roleIdentifier: string): Promise<EntityPermission[]> {\n    try {\n      // Converte il nome visualizzato in roleType se necessario\n      const roleType = getRoleTypeFromDisplayName(roleIdentifier);\n      \n      console.log(`🔍 [AdvancedPermissions] Getting permissions for role: ${roleIdentifier} -> ${roleType}`);\n      \n      // Usa l'endpoint corretto per ottenere i permessi del ruolo\n      const response = await apiGet<{\n        success: boolean;\n        data: {\n          roleType: string;\n          permissions: any[];\n          isCustomRole: boolean;\n          tenantId: string;\n        };\n      }>(`/api/roles/${roleType}/permissions`);\n      \n      // Usa la struttura corretta della risposta\n      const allPermissions = response.data?.permissions || [];\n      \n      // Converte i permessi dal formato backend al formato frontend\n      return convertFromBackendFormat(allPermissions);\n    } catch (error) {\n      console.error('Error fetching role permissions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Aggiorna i permessi di un ruolo\n   */\n  async updateRolePermissions(roleIdentifier: string, permissions: EntityPermission[]): Promise<boolean> {\n    try {\n      // Converte il nome visualizzato in roleType se necessario\n      const roleType = getRoleTypeFromDisplayName(roleIdentifier);\n      \n      console.log(`🔄 [AdvancedPermissions] Updating permissions for role: ${roleIdentifier} -> ${roleType}`);\n      \n      // Converte i permessi dal formato frontend al formato backend\n      const backendPermissions = convertToBackendFormat(permissions);\n      \n      const response = await apiPut<{\n        success: boolean;\n        message: string;\n      }>(`/api/roles/${roleType}/permissions`, {\n        permissions: backendPermissions\n      });\n      \n      return response.success;\n    } catch (error) {\n      console.error('Error updating role permissions:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Verifica se un ruolo ha un permesso specifico\n   */\n  async checkPermission(\n    roleType: string, \n    entity: string, \n    action: string, \n    scope?: string, \n    field?: string\n  ): Promise<boolean> {\n    try {\n      const response = await apiPost<{ hasPermission: boolean }>(`${this.baseUrl}/check`, {\n        roleType,\n        entity,\n        action,\n        scope,\n        field\n      });\n      return response.hasPermission;\n    } catch (error) {\n      console.error('Error checking permission:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Ottiene tutti i permessi disponibili per un'entità\n   */\n  async getAvailablePermissions(entity: string): Promise<string[]> {\n    try {\n      const response = await apiGet<{ permissions: string[] }>(`${this.baseUrl}/entities/${entity}/permissions`);\n      return response.permissions;\n    } catch (error) {\n      console.error('Error fetching available permissions:', error);\n      return ['create', 'read', 'update', 'delete'];\n    }\n  }\n\n  /**\n   * Ottiene le definizioni statiche delle entità (fallback)\n   */\n  private getStaticEntityDefinitions(): EntityDefinition[] {\n    return ALL_ENTITY_DEFINITIONS;\n  }\n\n  /**\n   * Ottiene le definizioni statiche delle entità includendo quelle virtuali\n   */\n  private getStaticEntityDefinitionsWithVirtual(): EntityDefinition[] {\n    const allEntities = [...ALL_ENTITY_DEFINITIONS];\n    \n    // Assicurati che le entità virtuali siano incluse\n    const hasEmployees = allEntities.some(e => e.name === 'employees');\n    const hasTrainers = allEntities.some(e => e.name === 'trainers');\n    \n    if (!hasEmployees || !hasTrainers) {\n      console.log('[AdvancedPermissions] Aggiunta entità virtuali mancanti');\n    }\n    \n    return allEntities;\n  }\n\n  /**\n   * Unisce le entità dal backend con quelle virtuali\n   */\n  private mergeWithVirtualEntities(backendEntities: EntityDefinition[]): EntityDefinition[] {\n    const allEntities = [...backendEntities];\n    \n    // Trova le entità virtuali dalle definizioni statiche\n    const virtualEntities = ALL_ENTITY_DEFINITIONS.filter(entity => \n      ['employees', 'trainers'].includes(entity.name)\n    );\n    \n    // Aggiungi le entità virtuali se non sono già presenti\n    virtualEntities.forEach(virtualEntity => {\n      const exists = allEntities.some(e => e.name === virtualEntity.name);\n      if (!exists) {\n        console.log(`[AdvancedPermissions] Aggiunta entità virtuale: ${virtualEntity.name}`);\n        allEntities.push(virtualEntity);\n      }\n    });\n    \n    console.log('[AdvancedPermissions] Entità totali (con virtuali):', allEntities.length);\n    console.log('[AdvancedPermissions] Entità finali:', allEntities.map((e: EntityDefinition) => e.name));\n    \n    return allEntities;\n  }\n\n  // Metodi di utility delegati ai moduli specifici\n  \n  /**\n   * Valida un permesso\n   */\n  validatePermission(permission: EntityPermission): boolean {\n    return validatePermission(permission);\n  }\n\n  /**\n   * Raggruppa i permessi per entità\n   */\n  groupPermissionsByEntity(permissions: EntityPermission[]): Record<string, EntityPermission[]> {\n    return groupPermissionsByEntity(permissions);\n  }\n\n  /**\n   * Ottiene un riassunto dei permessi per un ruolo\n   */\n  getPermissionsSummary(permissions: EntityPermission[]): PermissionsSummary {\n    return getPermissionsSummary(permissions);\n  }\n\n  /**\n   * Converte i permessi dal formato backend al formato frontend\n   */\n  convertFromBackendFormat(backendPermissions: any[]): EntityPermission[] {\n    return convertFromBackendFormat(backendPermissions);\n  }\n\n  /**\n   * Converte i permessi dal formato frontend al formato backend\n   */\n  convertToBackendFormat(frontendPermissions: EntityPermission[]): any[] {\n    return convertToBackendFormat(frontendPermissions);\n  }\n\n  // Metodi per entità virtuali delegati al VirtualEntityService\n\n  /**\n   * Assegna permessi entità virtuali a un ruolo\n   */\n  async assignVirtualEntityPermissions(\n    roleId: string, \n    virtualEntityName: 'EMPLOYEES' | 'TRAINERS', \n    permissions: string[]\n  ): Promise<void> {\n    return virtualEntityService.assignVirtualEntityPermissions(roleId, virtualEntityName, permissions);\n  }\n\n  /**\n   * Rimuove permessi entità virtuali da un ruolo\n   */\n  async revokeVirtualEntityPermissions(\n    roleId: string, \n    virtualEntityName: 'EMPLOYEES' | 'TRAINERS', \n    permissions: string[]\n  ): Promise<void> {\n    return virtualEntityService.revokeVirtualEntityPermissions(roleId, virtualEntityName, permissions);\n  }\n\n  /**\n   * Ottiene i permessi entità virtuali di un ruolo\n   */\n  async getRoleVirtualEntityPermissions(roleId: string): Promise<any[]> {\n    return virtualEntityService.getRoleVirtualEntityPermissions(roleId);\n  }\n\n  /**\n   * Verifica se l'utente corrente ha un permesso specifico su un'entità virtuale\n   */\n  async checkVirtualEntityPermission(\n    virtualEntityName: 'EMPLOYEES' | 'TRAINERS', \n    action: 'VIEW' | 'CREATE' | 'EDIT' | 'DELETE'\n  ): Promise<boolean> {\n    return virtualEntityService.checkVirtualEntityPermission(virtualEntityName, action);\n  }\n\n  /**\n   * Ottiene i permessi delle entità virtuali per l'utente corrente\n   */\n  async getVirtualEntityPermissions(): Promise<any> {\n    return virtualEntityService.getVirtualEntityPermissions();\n  }\n\n  /**\n   * Verifica se un'entità è virtuale (basata su Person)\n   */\n  isVirtualEntity(entityName: string): boolean {\n    return virtualEntityService.isVirtualEntity(entityName);\n  }\n\n  /**\n   * Ottiene il nome dell'entità virtuale nel formato backend\n   */\n  getVirtualEntityBackendName(entityName: string): 'EMPLOYEES' | 'TRAINERS' | null {\n    return virtualEntityService.getVirtualEntityBackendName(entityName);\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/advanced-permissions/conversionUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ENTITY_MAP_FROM_BACKEND' is assigned a value but never used.","line":63,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1929,1932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1929,1932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5950,5953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5950,5953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EntityPermission } from './types';\n\n/**\n * Mappature per la conversione tra formato backend e frontend\n */\nconst ACTION_MAP_TO_BACKEND: Record<string, string> = {\n  'create': 'CREATE_',\n  'read': 'VIEW_',\n  'update': 'EDIT_',\n  'delete': 'DELETE_'\n};\n\nconst ACTION_MAP_FROM_BACKEND: Record<string, 'create' | 'read' | 'update' | 'delete'> = {\n  'VIEW_': 'read',\n  'READ_': 'read',\n  'CREATE_': 'create',\n  'ADD_': 'create',\n  'EDIT_': 'update',\n  'UPDATE_': 'update',\n  'DELETE_': 'delete',\n  'REMOVE_': 'delete'\n};\n\nconst ENTITY_MAP_TO_BACKEND: Record<string, string> = {\n  'persons': 'PERSONS',\n  'companies': 'COMPANIES',\n  'courses': 'COURSES',\n  'roles': 'ROLES',\n  'sites': 'SITES',\n  'reparti': 'REPARTI',\n  'dvr': 'DVR',\n  'sopralluoghi': 'SOPRALLUOGHI',\n  'gdpr': 'GDPR',\n  'hierarchy': 'HIERARCHY',\n  'documents': 'DOCUMENTS',\n  'certificates': 'CERTIFICATES',\n  'equipment': 'EQUIPMENT',\n  'incidents': 'INCIDENTS',\n  'audits': 'AUDITS',\n  'policies': 'POLICIES',\n  'procedures': 'PROCEDURES',\n  'employees': 'EMPLOYEES',\n  'trainers': 'TRAINERS',\n  'dipendenti': 'EMPLOYEES', // Entità virtuale - filtro di persone\n  'formatori': 'TRAINERS',   // Entità virtuale - filtro di persone\n  'risks': 'RISKS',\n  'controls': 'CONTROLS',\n  'assessments': 'ASSESSMENTS',\n  'notifications': 'NOTIFICATIONS',\n  'reports': 'REPORTS',\n  'analytics': 'ANALYTICS',\n  'settings': 'SETTINGS',\n  'logs': 'LOGS',\n  'backups': 'BACKUPS',\n  'integrations': 'INTEGRATIONS',\n  'workflows': 'WORKFLOWS',\n  'form_templates': 'FORM_TEMPLATES',\n  'form_submissions': 'FORM_SUBMISSIONS',\n  'public_cms': 'PUBLIC_CMS',\n  'templates': 'TEMPLATES'\n};\n\nconst ENTITY_MAP_FROM_BACKEND: Record<string, string> = Object.fromEntries(\n  Object.entries(ENTITY_MAP_TO_BACKEND).map(([key, value]) => [value, key])\n);\n\n/**\n * Converte i permessi dal formato backend al formato frontend\n */\nexport function convertFromBackendFormat(backendPermissions: any[]): EntityPermission[] {\n  return backendPermissions\n    .map(permission => {\n      // Estrae l'entità e l'azione dal nome del permesso\n      const actionName = permission.permissionId || permission.action || permission.name;\n      let entity = 'unknown';\n      let action: 'create' | 'read' | 'update' | 'delete' = 'read';\n      \n      // Mappa le azioni del backend alle azioni del frontend\n      for (const [backendAction, frontendAction] of Object.entries(ACTION_MAP_FROM_BACKEND)) {\n        if (actionName.includes(backendAction)) {\n          action = frontendAction;\n          break;\n        }\n      }\n      \n      // Estrae l'entità dal nome dell'azione\n      for (const [frontendEntity, backendEntity] of Object.entries(ENTITY_MAP_TO_BACKEND)) {\n        if (actionName.includes(backendEntity)) {\n          entity = frontendEntity;\n          break;\n        }\n      }\n      \n      return {\n        entity: permission.entity || entity,\n        action: action,\n        scope: permission.scope || 'all',\n        fields: permission.fieldRestrictions || permission.fields || [],\n        granted: permission.granted || false // Include lo stato del permesso\n      };\n    });\n}\n\n// Lista dei permessi validi dal backend (sincronizzata con VALID_PERSON_PERMISSIONS)\nconst VALID_BACKEND_PERMISSIONS = [\n  // Permessi CRUD per entità principali\n  'VIEW_COMPANIES', 'CREATE_COMPANIES', 'EDIT_COMPANIES', 'DELETE_COMPANIES',\n  'VIEW_EMPLOYEES', 'CREATE_EMPLOYEES', 'EDIT_EMPLOYEES', 'DELETE_EMPLOYEES',\n  'VIEW_TRAINERS', 'CREATE_TRAINERS', 'EDIT_TRAINERS', 'DELETE_TRAINERS',\n  'VIEW_USERS', 'CREATE_USERS', 'EDIT_USERS', 'DELETE_USERS',\n  'VIEW_COURSES', 'CREATE_COURSES', 'EDIT_COURSES', 'DELETE_COURSES',\n  'VIEW_DOCUMENTS', 'CREATE_DOCUMENTS', 'EDIT_DOCUMENTS', 'DELETE_DOCUMENTS',\n  'VIEW_PERSONS', 'CREATE_PERSONS', 'EDIT_PERSONS', 'DELETE_PERSONS',\n  'VIEW_SCHEDULES', 'CREATE_SCHEDULES', 'EDIT_SCHEDULES', 'DELETE_SCHEDULES',\n  'VIEW_QUOTES', 'CREATE_QUOTES', 'EDIT_QUOTES', 'DELETE_QUOTES',\n  'VIEW_INVOICES', 'CREATE_INVOICES', 'EDIT_INVOICES', 'DELETE_INVOICES',\n  'VIEW_ROLES', 'CREATE_ROLES', 'EDIT_ROLES', 'DELETE_ROLES',\n  'VIEW_TENANTS', 'CREATE_TENANTS', 'EDIT_TENANTS', 'DELETE_TENANTS',\n  'VIEW_ADMINISTRATION', 'CREATE_ADMINISTRATION', 'EDIT_ADMINISTRATION', 'DELETE_ADMINISTRATION',\n  'VIEW_GDPR', 'CREATE_GDPR', 'EDIT_GDPR', 'DELETE_GDPR',\n  'VIEW_REPORTS', 'CREATE_REPORTS', 'EDIT_REPORTS', 'DELETE_REPORTS',\n  'VIEW_HIERARCHY', 'CREATE_HIERARCHY', 'EDIT_HIERARCHY', 'DELETE_HIERARCHY',\n  'VIEW_CMS', 'CREATE_CMS', 'EDIT_CMS', 'DELETE_CMS',\n  'VIEW_FORM_TEMPLATES', 'CREATE_FORM_TEMPLATES', 'EDIT_FORM_TEMPLATES', 'DELETE_FORM_TEMPLATES',\n  'VIEW_FORM_SUBMISSIONS', 'CREATE_FORM_SUBMISSIONS', 'EDIT_FORM_SUBMISSIONS', 'DELETE_FORM_SUBMISSIONS',\n  'VIEW_PUBLIC_CMS', 'CREATE_PUBLIC_CMS', 'EDIT_PUBLIC_CMS', 'DELETE_PUBLIC_CMS',\n  'VIEW_TEMPLATES', 'CREATE_TEMPLATES', 'EDIT_TEMPLATES', 'DELETE_TEMPLATES',\n  'VIEW_NOTIFICATIONS', 'CREATE_NOTIFICATIONS', 'EDIT_NOTIFICATIONS', 'DELETE_NOTIFICATIONS',\n  'VIEW_AUDIT_LOGS', 'CREATE_AUDIT_LOGS', 'EDIT_AUDIT_LOGS', 'DELETE_AUDIT_LOGS',\n  'VIEW_API_KEYS', 'CREATE_API_KEYS', 'EDIT_API_KEYS', 'DELETE_API_KEYS',\n  // Permessi speciali\n  'ADMIN_PANEL', 'SYSTEM_SETTINGS', 'USER_MANAGEMENT', 'ROLE_MANAGEMENT',\n  'MANAGE_ENROLLMENTS', 'DOWNLOAD_DOCUMENTS', 'MANAGE_USERS', 'ASSIGN_ROLES',\n  'REVOKE_ROLES', 'TENANT_MANAGEMENT', 'EXPORT_GDPR_DATA', 'DELETE_GDPR_DATA',\n  'MANAGE_CONSENTS', 'EXPORT_REPORTS', 'MANAGE_HIERARCHY', 'HIERARCHY_MANAGEMENT',\n  'MANAGE_PUBLIC_CONTENT', 'READ_PUBLIC_CONTENT', 'MANAGE_FORM_TEMPLATES',\n  'MANAGE_SUBMISSIONS', 'EXPORT_SUBMISSIONS', 'MANAGE_FORM_SUBMISSIONS',\n  'EXPORT_FORM_SUBMISSIONS', 'MANAGE_PUBLIC_CMS', 'MANAGE_TEMPLATES',\n  'MANAGE_NOTIFICATIONS', 'SEND_NOTIFICATIONS', 'MANAGE_AUDIT_LOGS',\n  'EXPORT_AUDIT_LOGS', 'MANAGE_API_KEYS', 'REGENERATE_API_KEYS'\n];\n\n/**\n * Converte i permessi dal formato frontend al formato backend\n */\nexport function convertToBackendFormat(frontendPermissions: EntityPermission[]): any[] {\n  return frontendPermissions\n    .map(permission => {\n      // Genera il permissionId nel formato atteso dal backend\n      const actionPrefix = ACTION_MAP_TO_BACKEND[permission.action] || 'VIEW_';\n      const entityName = ENTITY_MAP_TO_BACKEND[permission.entity] || permission.entity.toUpperCase();\n      const permissionId = `${actionPrefix}${entityName}`;\n      \n      // Verifica se il permesso è valido\n      if (!VALID_BACKEND_PERMISSIONS.includes(permissionId)) {\n        console.warn(`Permission ${permissionId} is not in VALID_BACKEND_PERMISSIONS, skipping...`);\n        return null;\n      }\n      \n      return {\n        permissionId: permissionId,\n        granted: permission.granted !== false, // Usa il valore dal frontend, default true se non specificato\n        scope: permission.scope || 'all',\n        fieldRestrictions: permission.fields || []\n      };\n    })\n    .filter(permission => permission !== null); // Rimuovi i permessi non validi\n}\n\n/**\n * Estrae l'entità dal nome di un permesso backend\n */\nexport function extractEntityFromPermissionName(permissionName: string): string {\n  for (const [frontendEntity, backendEntity] of Object.entries(ENTITY_MAP_TO_BACKEND)) {\n    if (permissionName.includes(backendEntity)) {\n      return frontendEntity;\n    }\n  }\n  return 'unknown';\n}\n\n/**\n * Estrae l'azione dal nome di un permesso backend\n */\nexport function extractActionFromPermissionName(permissionName: string): 'create' | 'read' | 'update' | 'delete' {\n  for (const [backendAction, frontendAction] of Object.entries(ACTION_MAP_FROM_BACKEND)) {\n    if (permissionName.includes(backendAction)) {\n      return frontendAction;\n    }\n  }\n  return 'read';\n}\n\n/**\n * Genera il nome del permesso nel formato backend\n */\nexport function generateBackendPermissionName(entity: string, action: string): string {\n  const actionPrefix = ACTION_MAP_TO_BACKEND[action] || 'VIEW_';\n  const entityName = ENTITY_MAP_TO_BACKEND[entity] || entity.toUpperCase();\n  return `${actionPrefix}${entityName}`;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/advanced-permissions/entityDefinitions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/advanced-permissions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/advanced-permissions/permissionUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/advanced-permissions/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[516,519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[516,519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport interface EntityPermission {\n  entity: string;\n  action: 'create' | 'read' | 'update' | 'delete';\n  scope: 'all' | 'tenant' | 'own';\n  fields?: string[];\n  tenantIds?: number[];\n  granted?: boolean; // Indica se il permesso è concesso o meno\n}\n\nexport interface RolePermissions {\n  roleType: string;\n  permissions: EntityPermission[];\n}\n\nexport interface EntityDefinition {\n  id: string;\n  name: string;\n  displayName: string;\n  fields: EntityField[];\n  icon?: React.ComponentType<any>;\n}\n\nexport interface EntityField {\n  id: string;\n  name: string;\n  displayName: string;\n  type: 'string' | 'number' | 'boolean' | 'date' | 'email' | 'phone';\n  sensitive?: boolean;\n}\n\nexport interface PermissionsSummary {\n  totalPermissions: number;\n  entitiesWithPermissions: number;\n  sensitiveFieldsAccess: number;\n}\n\nexport type VirtualEntityName = 'EMPLOYEES' | 'TRAINERS';\nexport type PermissionAction = 'VIEW' | 'CREATE' | 'EDIT' | 'DELETE';","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/advanced-permissions/virtualEntityService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2117,2120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2117,2120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3671,3674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3671,3674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { VirtualEntityName, PermissionAction } from './types';\n\n/**\n * Servizio per la gestione delle entità virtuali (EMPLOYEES, TRAINERS)\n * Queste entità sono basate su Person ma con filtri specifici\n */\nexport class VirtualEntityService {\n  private getAuthHeaders(): HeadersInit {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('token')}`\n    };\n  }\n\n  /**\n   * Assegna permessi entità virtuali a un ruolo\n   */\n  async assignVirtualEntityPermissions(\n    roleId: string, \n    virtualEntityName: VirtualEntityName, \n    permissions: string[]\n  ): Promise<void> {\n    try {\n      const response = await fetch('/api/virtual-entities/permissions/assign', {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          roleId,\n          virtualEntityName,\n          permissions\n        })\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Errore nell\\'assegnazione dei permessi');\n      }\n    } catch (error) {\n      console.error('Errore nell\\'assegnazione permessi entità virtuali:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Rimuove permessi entità virtuali da un ruolo\n   */\n  async revokeVirtualEntityPermissions(\n    roleId: string, \n    virtualEntityName: VirtualEntityName, \n    permissions: string[]\n  ): Promise<void> {\n    try {\n      const response = await fetch('/api/virtual-entities/permissions/revoke', {\n        method: 'DELETE',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          roleId,\n          virtualEntityName,\n          permissions\n        })\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Errore nella rimozione dei permessi');\n      }\n    } catch (error) {\n      console.error('Errore nella rimozione permessi entità virtuali:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Ottiene i permessi entità virtuali di un ruolo\n   */\n  async getRoleVirtualEntityPermissions(roleId: string): Promise<any[]> {\n    try {\n      const response = await fetch(`/api/virtual-entities/permissions/role/${roleId}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Errore nel recupero dei permessi del ruolo');\n      }\n\n      const result = await response.json();\n      return result.data || [];\n    } catch (error) {\n      console.error('Errore nel recupero permessi ruolo entità virtuali:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verifica se l'utente corrente ha un permesso specifico su un'entità virtuale\n   */\n  async checkVirtualEntityPermission(\n    virtualEntityName: VirtualEntityName, \n    action: PermissionAction\n  ): Promise<boolean> {\n    try {\n      const response = await fetch('/api/virtual-entities/permissions/check', {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          virtualEntityName,\n          action\n        })\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Errore nella verifica del permesso');\n      }\n\n      const result = await response.json();\n      return result.data?.hasPermission || false;\n    } catch (error) {\n      console.error('Errore nella verifica permesso entità virtuale:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Ottiene i permessi delle entità virtuali per l'utente corrente\n   */\n  async getVirtualEntityPermissions(): Promise<any> {\n    try {\n      const response = await fetch('/api/virtual-entities/permissions', {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Errore nel recupero dei permessi delle entità virtuali');\n      }\n\n      const result = await response.json();\n      return result.data || {};\n    } catch (error) {\n      console.error('Errore nel recupero permessi entità virtuali:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Verifica se un'entità è virtuale (basata su Person)\n   */\n  isVirtualEntity(entityName: string): boolean {\n    return ['employees', 'trainers'].includes(entityName.toLowerCase());\n  }\n\n  /**\n   * Ottiene il nome dell'entità virtuale nel formato backend\n   */\n  getVirtualEntityBackendName(entityName: string): VirtualEntityName | null {\n    const mapping: Record<string, VirtualEntityName> = {\n      'employees': 'EMPLOYEES',\n      'trainers': 'TRAINERS'\n    };\n    return mapping[entityName.toLowerCase()] || null;\n  }\n\n  /**\n   * Ottiene tutte le entità virtuali disponibili\n   */\n  getAvailableVirtualEntities(): Array<{ name: string; displayName: string; backendName: VirtualEntityName }> {\n    return [\n      {\n        name: 'employees',\n        displayName: 'Dipendenti',\n        backendName: 'EMPLOYEES'\n      },\n      {\n        name: 'trainers',\n        displayName: 'Formatori',\n        backendName: 'TRAINERS'\n      }\n    ];\n  }\n\n  /**\n   * Ottiene le azioni disponibili per le entità virtuali\n   */\n  getAvailableActions(): Array<{ action: PermissionAction; displayName: string }> {\n    return [\n      { action: 'VIEW', displayName: 'Visualizzare' },\n      { action: 'CREATE', displayName: 'Creare' },\n      { action: 'EDIT', displayName: 'Modificare' },\n      { action: 'DELETE', displayName: 'Eliminare' }\n    ];\n  }\n}\n\nexport const virtualEntityService = new VirtualEntityService();","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/advancedPermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConsentRequiredError' is defined but never used.","line":4,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MAX_RETRIES' is assigned a value but never used.","line":40,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RETRY_DELAY' is assigned a value but never used.","line":41,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":64,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2925,2928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2925,2928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8915,8918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8915,8918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9303,9306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9303,9306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":372,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":372,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":625,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":625,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22324,22327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22324,22327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'preserveNumericTypes' is assigned a value but never used.","line":648,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":648,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":764,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":764,"endColumn":21},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":770,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":814,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":833,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":841,"endColumn":4},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":845,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":885,"endColumn":4},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":902,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":916,"endColumn":4}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { getToken, removeToken } from './auth';\nimport { API_BASE_URL } from '../config/api';\nimport { checkConsent, logGdprAction, ConsentRequiredError } from '../utils/gdpr';\nimport { recordApiCall, startTimer } from '../utils/metrics';\nimport { throttledApiCall } from './requestThrottler';\n\n// Interfaccia per la configurazione estesa\ninterface ExtendedAxiosConfig {\n  _requestUrl?: string;\n  _skipGdprCheck?: boolean;\n  _skipDeduplication?: boolean;\n  _cacheKey?: string;\n  _isApiGetCall?: boolean;\n  method?: string;\n  url?: string;\n  headers?: Record<string, string>;\n  baseURL?: string;\n  data?: unknown;\n  withCredentials?: boolean;\n  params?: Record<string, unknown>;\n  timeout?: number;\n}\n\n// Cache per le risposte API\ninterface CacheEntry {\n  data: unknown;\n  timestamp: number;\n  ttl: number;\n}\n\nconst responseCache = new Map<string, CacheEntry>();\nconst CACHE_TTL = {\n  default: 5 * 60 * 1000, // 5 minuti\n  auth: 15 * 60 * 1000,   // 15 minuti per auth\n  static: 30 * 60 * 1000, // 30 minuti per dati statici\n};\n\n// Configurazione per il retry delle richieste - disabilitato completamente\nconst MAX_RETRIES = 0; // Disabilitati i retry automatici\nconst RETRY_DELAY = 2000;\n\n// Oggetto per tracciare le richieste in sospeso e deduplication\nconst pendingRequests = {\n  count: 0,\n  urls: new Set<string>()\n};\nconst activeRequests = new Map<string, Promise<unknown>>();\n\n// Utility per generare chiavi di cache\nconst getCacheKey = (method: string, url: string, data?: unknown): string => {\n  // PROTEZIONE ULTRA-ROBUSTA per i metodi HTTP undefined/null/vuoti\n  const safeMethod = (method && typeof method === 'string' && method.trim().length > 0 && /^[A-Za-z]+$/.test(method.trim())) ? method.trim().toUpperCase() : 'GET';\n  \n  const dataHash = data ? JSON.stringify(data) : '';\n  return `${safeMethod}:${url}:${dataHash}`;\n};\n\n// Utility per validare JSON\nconst validateJsonResponse = (data: unknown, url: string): unknown => {\n  if (typeof data === 'string') {\n    try {\n      return JSON.parse(data);\n    } catch (error) {\n      console.error(`❌ Invalid JSON response from ${url}:`, data);\n      throw new Error(`Invalid JSON response from ${url}`);\n    }\n  }\n  return data;\n};\n\n// Utility per determinare TTL cache\nconst getCacheTtl = (url: string): number => {\n  if (url.includes('/auth/') || url.includes('/login')) return CACHE_TTL.auth;\n  if (url.includes('/static/') || url.includes('/config/')) return CACHE_TTL.static;\n  return CACHE_TTL.default;\n};\n\n// Create base API client with default configuration\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  // Abilita withCredentials per supportare CORS con credenziali\n  withCredentials: true,\n  // Rimuovo timeout globale per permettere timeout specifici per operazione\n});\n\n// Request interceptor for API calls\napiClient.interceptors.request.use(\n  (config: any) => {\n    // SOLUZIONE ULTRA-SEMPLIFICATA: Per chiamate apiGet, fai il minimo indispensabile\n    if (config._isApiGetCall) {\n      // Per apiGet, fai solo le operazioni essenziali senza toccare nulla di Axios\n      \n      // Solo token e headers essenziali\n      const token = getToken();\n      \n      if (token) {\n        if (!config.headers) config.headers = {};\n        config.headers['Authorization'] = `Bearer ${token}`;\n      } else {\n        // Per endpoint di autenticazione, questo è critico\n        if (config.url?.includes('/auth/verify')) {\n          console.error('🚨 [CRITICAL] No token found for /auth/verify endpoint!');\n        }\n      }\n      \n      // Tenant ID per localhost\n      if (config.baseURL?.includes('localhost') || window.location.hostname === 'localhost') {\n        const tenantId = localStorage.getItem('tenantId') || 'default-company';\n        if (!config.headers) config.headers = {};\n        config.headers['X-Tenant-ID'] = tenantId;\n      }\n      \n      return config; // RITORNA SUBITO senza altre elaborazioni\n    }\n    \n    // Per tutte le altre chiamate (non apiGet), gestisci normalmente\n    let safeMethodForLogging = 'GET';\n    \n    try {\n      const method = config.method;\n      \n      // SOLUZIONE DEFINITIVA: Controllo più rigoroso per valori null, undefined, vuoti o non stringa\n      if (method === null || \n          method === undefined || \n          method === '' || \n          typeof method !== 'string' ||\n          (typeof method === 'object' && method !== null)) {\n        \n        // CORREZIONE CRITICA: SEMPRE impostare un metodo valido per evitare errori toUpperCase\n        config.method = 'GET';\n        safeMethodForLogging = 'GET';\n        console.log('🔧 [API INTERCEPTOR] Method was null/undefined/empty/non-string, forcing to GET. Original method:', typeof method, method);\n      } else {\n        // Assicurati che sia una stringa valida prima di chiamare toUpperCase\n        const methodStr = String(method).trim();\n        if (methodStr.length > 0 && /^[A-Za-z]+$/.test(methodStr)) {\n          config.method = methodStr.toUpperCase();\n          safeMethodForLogging = methodStr.toUpperCase();\n        } else {\n          console.log('🔧 [API INTERCEPTOR] Method was invalid string format, forcing to GET. Original method:', methodStr);\n          // CORREZIONE CRITICA: SEMPRE impostare un metodo valido\n          config.method = 'GET';\n          safeMethodForLogging = 'GET';\n        }\n      }\n    } catch (error) {\n      console.warn('🚨 [API INTERCEPTOR] Error processing HTTP method, forcing to GET:', error);\n      // CORREZIONE CRITICA: SEMPRE impostare un metodo valido in caso di errore\n      config.method = 'GET';\n      safeMethodForLogging = 'GET';\n    }\n    \n    // PROTEZIONE ULTRA-ROBUSTA: Assicurati che headers sia sempre un oggetto valido\n    if (!config.headers || typeof config.headers !== 'object' || config.headers === null) {\n      config.headers = {};\n    }\n    \n    // PROTEZIONE AGGIUNTIVA: Assicurati che Content-Type sia sempre definito per evitare undefined\n    if (!config.headers['Content-Type'] && !config.headers['content-type']) {\n      config.headers['Content-Type'] = 'application/json';\n    }\n    \n    const timer = startTimer();\n    // Usa il metodo sicuro per getCacheKey\n    const requestKey = getCacheKey(safeMethodForLogging, config.url || '', config.data);\n    \n    // Debug: Log della configurazione axios\n    console.log('🔍 [AXIOS DEBUG] Request config:', {\n      url: config.url,\n      baseURL: config.baseURL,\n      fullURL: (config.baseURL || '') + (config.url || ''),\n      method: config.method,\n      isApiGetCall: config._isApiGetCall,\n      contentType: config.headers['Content-Type']\n    });\n    \n    // Add auth token if available\n    const token = getToken();\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    // Add tenant ID header for localhost development\n    // For localhost, we use the tenant ID from localStorage (saved during login)\n    if (config.baseURL?.includes('localhost') || window.location.hostname === 'localhost') {\n      const tenantId = localStorage.getItem('tenantId');\n      if (tenantId) {\n        config.headers['X-Tenant-ID'] = tenantId;\n      } else {\n        // Fallback per compatibilità durante lo sviluppo\n        config.headers['X-Tenant-ID'] = 'default-company';\n      }\n    }\n    \n    // Traccia l'URL della richiesta per il logging\n    config._requestUrl = config.url;\n    config._cacheKey = requestKey;\n\n    // GDPR Compliance Check (skip per auth endpoints) - non-blocking\n    if (!config._skipGdprCheck && !config.url?.includes('/auth/') && !config.url?.includes('/login')) {\n      // Esegui il controllo GDPR in modo non-blocking\n      checkConsent('api_access', 'system').then(hasConsent => {\n        if (!hasConsent) {\n          logGdprAction(\n            'system',\n            'API_ACCESS_DENIED',\n            'api',\n            config.url || 'unknown',\n            {\n              url: config.url,\n              method: safeMethodForLogging,\n              reason: 'Missing consent for API access'\n            }\n          );\n        }\n      }).catch(error => {\n        // Log errore ma continua (fallback graceful)\n        console.warn('GDPR consent check failed, continuing:', error);\n      });\n    }\n\n    // Check cache per richieste GET\n    if (safeMethodForLogging.toLowerCase() === 'get' && !config._skipDeduplication) {\n      const cached = responseCache.get(requestKey);\n      if (cached && (Date.now() - cached.timestamp) < cached.ttl) {\n        console.log(`📦 Cache hit for ${config.url}`);\n        \n        // Log GDPR action per cache hit (non-blocking)\n        logGdprAction(\n           'system',\n           'API_CACHE_HIT',\n           'api',\n           config.url || 'unknown',\n           {\n             url: config.url,\n             cacheAge: Date.now() - cached.timestamp\n           }\n         );\n        \n        // Simula risposta cached\n        const response: any = {\n          data: cached.data,\n          status: 200,\n          statusText: 'OK (Cached)',\n          headers: {},\n          config: config,\n          request: {}\n        };\n        \n        recordApiCall(config.url || '', safeMethodForLogging, timer(), 200, { \n          cached: true, \n          deduplicated: false \n        });\n        \n        return Promise.resolve(response) as any;\n      }\n    }\n\n    // Deduplication per richieste identiche in corso\n    if (!config._skipDeduplication && activeRequests.has(requestKey)) {\n      console.log(`🔄 Deduplicating request: ${safeMethodForLogging} ${config.url}`);\n      \n      // Log GDPR action per deduplication (non-blocking)\n      logGdprAction(\n         'system',\n         'API_REQUEST_DEDUPLICATED',\n         'api',\n         config.url || 'unknown',\n         {\n           url: config.url,\n           method: safeMethodForLogging\n         }\n       );\n      \n      recordApiCall(config.url || '', safeMethodForLogging, timer(), 200, { \n        cached: false, \n        deduplicated: true \n      });\n      \n      return activeRequests.get(requestKey);\n    }\n    \n    // Intercettore per limitare richieste parallele eccessive allo stesso endpoint\n    const url = config.url || '';\n    \n    // Se abbiamo troppe richieste pendenti o abbiamo già una richiesta per questo URL, possiamo rifiutare\n    if (pendingRequests.count > 5) {\n      throw new Error('Troppe richieste simultanee');\n    }\n    \n    if (pendingRequests.urls.has(url)) {\n      console.warn(`Richiesta duplicata per ${url} - ottimizzando`);\n    } else {\n      pendingRequests.count++;\n      pendingRequests.urls.add(url);\n      \n      // Aggiungiamo una proprietà al config per tracciare l'URL per il cleanup\n      config._requestUrl = url;\n    }\n    \n    // Interceptor per convertire i campi numerici prima dell'invio\n    if (config.data && config.url && (\n      config.url.includes('/courses') || \n      config.url.includes('/bulk-import')\n    )) {\n      // Tratta i dati come un record generico\n      const originalData = config.data as Record<string, unknown> | Array<Record<string, unknown>>;\n      \n      // Funzione di conversione per un singolo oggetto corso - ottimizzata\n      const convertCourseFields = (course: Record<string, unknown>): Record<string, unknown> => {\n        const result = { ...course };\n        \n        // Ottimizzazione: converti tutti i campi numerici in un'unica iterazione\n        const numericFields = {\n          validityYears: true, // true = intero\n          maxPeople: true,\n          price: false, // false = float\n          pricePerPerson: false\n        };\n        \n        // Converti tutti i campi numerici in un loop\n        Object.entries(numericFields).forEach(([field, isInteger]) => {\n          if (result[field] !== undefined && result[field] !== null) {\n            // Se è una stringa, pulisci e converti\n            if (typeof result[field] === 'string') {\n              const cleanValue = (result[field] as string).replace(/[^\\d.]/g, '');\n              if (cleanValue) {\n                const numValue = Number(cleanValue);\n                if (!isNaN(numValue)) {\n                  result[field] = isInteger ? Math.floor(numValue) : Number(numValue.toFixed(2));\n                } else {\n                  result[field] = null;\n                }\n              } else {\n                result[field] = null;\n              }\n            } \n            // Se non è già un numero, imposta null\n            else if (typeof result[field] !== 'number') {\n              result[field] = null;\n            }\n            // Se è già un numero, assicurati che sia del tipo corretto\n            else if (isInteger && result[field] % 1 !== 0) {\n              result[field] = Math.floor(result[field] as number);\n            }\n          }\n        });\n        \n        // Assicurati che duration rimanga una stringa\n        if (result.duration !== undefined && result.duration !== null) {\n          result.duration = String(result.duration);\n        }\n        \n        return result;\n      };\n      \n      try {\n        // Gestisci sia oggetti singoli che array\n        if (Array.isArray(originalData)) {\n          // È un array di oggetti (ad es. bulk import)\n          const convertedData = originalData.map(convertCourseFields);\n          config.data = convertedData;\n        } else {\n          // È un singolo oggetto\n          const convertedData = convertCourseFields(originalData);\n          config.data = convertedData;\n        }\n      } catch (error) {\n        // Ignora errori e continua con i dati originali\n      }\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for API calls\napiClient.interceptors.response.use(\n  (response) => {\n    const config = response.config as ExtendedAxiosConfig;\n    const timer = startTimer();\n    \n    // Cleanup del conteggio richieste\n    if (config && config._requestUrl) {\n      pendingRequests.count = Math.max(0, pendingRequests.count - 1);\n      pendingRequests.urls.delete(config._requestUrl);\n    }\n\n    // Cleanup active requests\n    if (config._cacheKey) {\n      activeRequests.delete(config._cacheKey);\n    }\n\n    // Validazione JSON response - Skip per status code che non dovrebbero avere body\n    const statusCodesWithoutBody = [204, 205, 304]; // No Content, Reset Content, Not Modified\n    \n    if (!statusCodesWithoutBody.includes(response.status)) {\n      try {\n        response.data = validateJsonResponse(response.data, config._requestUrl || 'unknown');\n      } catch (jsonError) {\n        console.error('JSON validation failed:', jsonError);\n        \n        // Log GDPR action per errore JSON (non-blocking)\n        logGdprAction(\n           'system',\n           'API_JSON_VALIDATION_ERROR',\n           'api',\n           config._requestUrl || 'unknown',\n           {\n             url: config._requestUrl,\n             status: response.status\n           },\n           false,\n           jsonError instanceof Error ? jsonError.message : 'JSON validation failed'\n         );\n        \n        recordApiCall(config._requestUrl || '', config.method || 'GET', timer(), response.status, {\n          cached: false,\n          deduplicated: false,\n          error: 'JSON validation failed'\n        });\n        \n        throw jsonError;\n      }\n    } else {\n      // Per status code senza body, assicurati che response.data sia null o undefined\n      console.log(`✅ Skipping JSON validation for status ${response.status} (No Content expected)`);\n      response.data = null;\n    }\n\n    // Cache delle risposte GET successful\n    if (config.method?.toLowerCase() === 'get' && response.status === 200 && config._cacheKey) {\n      const ttl = getCacheTtl(config._requestUrl || '');\n      responseCache.set(config._cacheKey, {\n        data: response.data,\n        timestamp: Date.now(),\n        ttl\n      });\n      \n      // Cleanup cache periodico (mantieni solo ultimi 100 entries)\n      if (responseCache.size > 100) {\n        const entries = Array.from(responseCache.entries());\n        entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\n        entries.slice(0, 50).forEach(([key]) => responseCache.delete(key));\n      }\n    }\n\n    // Log GDPR action per successful response (non-blocking)\n    logGdprAction(\n       'system',\n       'API_RESPONSE_SUCCESS',\n       'api',\n       config._requestUrl || 'unknown',\n       {\n         url: config._requestUrl,\n         method: config.method,\n         status: response.status,\n         cached: response.statusText?.includes('Cached') || false\n       }\n     );\n\n    // Record metrics\n    recordApiCall(config._requestUrl || '', config.method || 'GET', timer(), response.status, {\n      cached: response.statusText?.includes('Cached') || false,\n      deduplicated: false\n    });\n    \n    return response;\n  },\n  (error) => {\n    const config = error?.config as ExtendedAxiosConfig;\n    const timer = startTimer();\n    \n    // Cleanup del conteggio richieste anche in caso di errore\n    if (config && config._requestUrl) {\n      pendingRequests.count = Math.max(0, pendingRequests.count - 1);\n      pendingRequests.urls.delete(config._requestUrl);\n    }\n\n    // Cleanup active requests\n    if (config?._cacheKey) {\n      activeRequests.delete(config._cacheKey);\n    }\n\n    const errorMessage = error.message || 'Unknown API error';\n    const status = error.response?.status || 0;\n\n    // Log GDPR action per errore (non-blocking)\n    logGdprAction(\n       'system',\n       'API_RESPONSE_ERROR',\n       'api',\n       config?._requestUrl || 'unknown',\n       {\n         url: config?._requestUrl,\n         method: config?.method,\n         status,\n         errorType: error.constructor.name\n       },\n       false,\n       errorMessage\n     );\n\n    // Record metrics per errore\n    recordApiCall(config?._requestUrl || '', config?.method || 'GET', timer(), status, {\n      cached: false,\n      deduplicated: false,\n      error: errorMessage\n    });\n    \n    // Nessun retry automatico, riduciamo il debug\n    if (process.env.NODE_ENV !== 'production' && error?.config?.url) {\n      console.debug(`API Error [${error.config?.url}]: ${error.code || error.name || 'Unknown error'}`);\n    }\n    \n    // Handle auth errors - be more selective to avoid unnecessary logouts\n    if (error.response?.status === 401 || error.response?.status === 403) {\n      const url = config?._requestUrl || error.config?.url || '';\n      \n      // CORREZIONE CRITICA: Non gestire errori 401 durante il login\n      // Un 401 durante il login significa credenziali errate, non token scaduto\n      const isLoginEndpoint = url.includes('/login');\n      const isAuthVerifyEndpoint = url.includes('/auth/verify');\n      const isPermissionEndpoint = url.includes('/advanced-permissions') || url.includes('/permissions');\n      const isCriticalAuthError = error.response?.data?.code === 'AUTH_TOKEN_EXPIRED' || \n                                  error.response?.data?.code === 'AUTH_TOKEN_INVALID' ||\n                                  error.response?.data?.code === 'AUTH_TOKEN_MISSING' ||\n                                  error.response?.data?.code === 'AUTH_SESSION_INVALID';\n      \n      // Don't logout for login endpoint - 401 means wrong credentials, not expired token\n      if (isLoginEndpoint) {\n        console.warn('Login failed with 401 - wrong credentials, not logging out:', {\n          url,\n          status: error.response?.status,\n          code: error.response?.data?.code,\n          message: error.response?.data?.message\n        });\n      }\n      // Don't logout for permission-related endpoints - these might fail due to insufficient permissions\n      // but the user is still authenticated\n      else if (isPermissionEndpoint && !isCriticalAuthError) {\n        console.warn('Permission-related error, not logging out:', {\n          url,\n          status: error.response?.status,\n          code: error.response?.data?.code,\n          message: error.response?.data?.message\n        });\n      } \n      // Only logout for token verification endpoints or critical auth errors\n      else if (isAuthVerifyEndpoint || isCriticalAuthError) {\n        console.log('Critical authentication error, clearing token and redirecting to login', {\n          url,\n          status: error.response?.status,\n          code: error.response?.data?.code\n        });\n        \n        // Log GDPR action per redirect (non-blocking)\n        logGdprAction(\n           'system',\n           'AUTH_ERROR_REDIRECT',\n           'auth',\n           url || 'unknown',\n           {\n             status,\n             url,\n             errorCode: error.response?.data?.code\n           },\n           false,\n           'Authentication error redirect'\n         );\n        \n        removeToken();\n        if (window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n      } else {\n        // Log the error but don't logout for non-critical auth errors\n        console.warn('Non-critical auth error, not logging out:', {\n          url,\n          status: error.response?.status,\n          code: error.response?.data?.code\n        });\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// API utility functions with type assertions for safety\nexport const apiGet = async <T>(url: string, params = {}): Promise<T> => {\n  // Usa il throttling per prevenire ERR_INSUFFICIENT_RESOURCES\n  return throttledApiCall(url, async () => {\n    try {\n      // Configurazione speciale per endpoint di autenticazione per evitare cache browser\n      const isAuthEndpoint = url.includes('/auth/');\n      \n      // SOLUZIONE DEFINITIVA: Usa direttamente apiClient.get() per evitare problemi interni di Axios\n      const config: ExtendedAxiosConfig = {\n        params: {\n          ...params,\n          // Cache-busting per endpoint auth\n          ...(isAuthEndpoint && { _t: Date.now() })\n        },\n        timeout: 20000, // Timeout ridotto\n        headers: {}\n      };\n      \n      // Headers no-cache per endpoint di autenticazione\n      if (isAuthEndpoint) {\n        config.headers!['Cache-Control'] = 'no-cache, no-store, must-revalidate';\n        config.headers!['Pragma'] = 'no-cache';\n        config.headers!['Expires'] = '0';\n        console.log('🚫 [CACHE BYPASS] Adding no-cache headers for auth endpoint:', url);\n      }\n      \n      // Aggiungi il flag personalizzato per l'interceptor\n      (config as any)._isApiGetCall = true;\n      \n      // USA DIRETTAMENTE apiClient.get() invece di apiClient.request()\n      // Questo evita problemi interni di Axios con il metodo HTTP\n      const response = await apiClient.get(url, config);\n      return response.data as T;\n    } catch (error: unknown) {\n      // Errore più descrittivo per ERR_INSUFFICIENT_RESOURCES\n      if (error && typeof error === 'object' && 'code' in error && error.code === 'ERR_INSUFFICIENT_RESOURCES') {\n        console.error('Browser resource limit reached - try again in a moment');\n      }\n      console.error('🚨 [API GET] Error details:', {\n        url,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        code: error && typeof error === 'object' && 'code' in error ? error.code : 'Unknown',\n        config: error && typeof error === 'object' && 'config' in error ? error.config : 'Unknown'\n      });\n      throw error;\n    }\n  }, 2); // Priorità alta per le GET\n};\n\n// Funzione per garantire che i tipi dei campi numerici siano mantenuti\nconst preserveNumericTypes = (data: unknown): unknown => {\n  // Se è null, undefined o non è un oggetto, restituisci il valore originale\n  if (data === null || data === undefined || typeof data !== 'object') {\n    return data;\n  }\n  \n  // Se è un array, applica recursivamente la funzione a ogni elemento\n  if (Array.isArray(data)) {\n    return data.map(item => preserveNumericTypes(item));\n  }\n  \n  // Clona l'oggetto per non modificare l'originale\n  const result = { ...data };\n  \n  // Campi numerici di interesse\n  const integerFields = ['validityYears', 'maxPeople'];\n  const floatFields = ['price', 'pricePerPerson'];\n  \n  // Converti gli interi\n  for (const field of integerFields) {\n    if (result[field] !== undefined && result[field] !== null) {\n      const value = result[field];\n      // Se è già un numero, mantienilo tale\n      // Se è una stringa, convertila in numero se possibile\n      if (typeof value === 'string') {\n        const parsedValue = parseInt(value, 10);\n        if (!isNaN(parsedValue)) {\n          result[field] = parsedValue;\n        }\n      }\n    }\n  }\n  \n  // Converti i float\n  for (const field of floatFields) {\n    if (result[field] !== undefined && result[field] !== null) {\n      const value = result[field];\n      // Se è già un numero, mantienilo tale\n      // Se è una stringa, convertila in numero se possibile\n      if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!isNaN(parsedValue)) {\n          result[field] = parsedValue;\n        }\n      }\n    }\n  }\n  \n  // Processa recursivamente eventuali oggetti annidati\n  for (const key in result) {\n    if (result[key] !== null && typeof result[key] === 'object') {\n      result[key] = preserveNumericTypes(result[key]);\n    }\n  }\n  \n  return result;\n};\n\n// Funzione di POST API con preservazione di tipi numerici\nexport async function apiPost<T = unknown>(\n  url: string,\n  data?: unknown,\n  config?: Record<string, unknown>,\n  enablePreserveNumericTypes = true\n): Promise<T> {\n  // Usa il throttling per prevenire ERR_INSUFFICIENT_RESOURCES\n  return throttledApiCall(url, async () => {\n    // Se data è un oggetto e la preservazione dei tipi è abilitata, processa i dati\n    let processedData = data;\n    \n    // Elaboriamo i dati solo se necessario per evitare de/serializzazioni eccessive\n    if (enablePreserveNumericTypes && data && typeof data === 'object') {\n      try {\n        // Funzione semplificata per assicurare tipi corretti\n        const ensureCorrectTypes = (obj: unknown): unknown => {\n          // Se è un array, gestiamolo diversamente\n          if (Array.isArray(obj)) {\n            return obj.map(item => ensureCorrectTypes(item));\n          }\n          \n          // Se non è un oggetto o è null, restituisci com'è\n          if (!obj || typeof obj !== 'object') return obj;\n          \n          const result: Record<string, unknown> = {};\n          \n          // Copia tutte le proprietà, convertendo solo i tipi necessari\n          for (const [key, value] of Object.entries(obj)) {\n            if (value === undefined || value === null) {\n              result[key] = null;\n              continue;\n            }\n            \n            // Gestisci specificamente i campi di numeri interi\n            if ((key === 'validityYears' || key === 'maxPeople') && value !== undefined) {\n              const numValue = Number(value);\n              result[key] = !isNaN(numValue) ? Math.round(numValue) : null;\n            }\n            // Gestisci i campi di numeri decimali\n            else if ((key === 'price' || key === 'pricePerPerson') && value !== undefined) {\n              const numValue = Number(value);\n              result[key] = !isNaN(numValue) ? numValue : null;\n            }\n            // Per altri oggetti, applica ricorsivamente\n            else if (typeof value === 'object' && value !== null) {\n              result[key] = ensureCorrectTypes(value);\n            }\n            // Altrimenti, copia il valore così com'è\n            else {\n              result[key] = value;\n            }\n          }\n          \n          return result;\n        };\n        \n        processedData = ensureCorrectTypes(data);\n      } catch (error: unknown) {\n        // In caso di errore, continua con i dati originali\n        processedData = data;\n      }\n    }\n    \n    try {\n      // Determina il timeout in base al tipo di operazione\n      const getTimeoutForUrl = (url: string): number => {\n        // Timeout per autenticazione (10 secondi)\n        if (url.includes('/auth/')) {\n          return 10000; // 10 secondi per autenticazione\n        }\n        // Timeout esteso per generazione documenti (60 secondi)\n        if (url.includes('/generate') || url.includes('/documents')) {\n          return 60000;\n        }\n        // Timeout standard per altre operazioni (30 secondi)\n        return 30000;\n      };\n\n      const timeoutValue = config?.timeout || getTimeoutForUrl(url);\n      const withCredentialsValue = url.includes('/auth/'); // Abilita per auth endpoints\n      \n      // Debug log per le chiamate di autenticazione\n      if (url.includes('/auth/')) {\n        console.log('🔐 Auth API Call Debug:', {\n          url,\n          timeout: timeoutValue,\n          withCredentials: withCredentialsValue,\n          baseURL: API_BASE_URL\n        });\n      }\n      \n      const enhancedConfig: Record<string, unknown> = { \n        ...config,\n        timeout: timeoutValue,\n        // Abilita withCredentials per le chiamate di autenticazione\n        withCredentials: withCredentialsValue,\n        // Assicurati che il content-type sia corretto\n        headers: {\n          'Content-Type': 'application/json',\n          ...(config?.headers || {})\n        }\n      };\n      \n      const response = await apiClient.post<T>(url, processedData, enhancedConfig);\n      return response.data;\n    } catch (error: unknown) {\n      throw error;\n    }\n  }, 1); // Priorità media per le POST\n}\n\nexport const apiPut = async <T>(url: string, data = {}): Promise<T> => {\n  // Determina il timeout in base al tipo di operazione\n  const getTimeoutForUrl = (url: string): number => {\n    // Timeout ridotto per operazioni di autenticazione (10 secondi)\n    if (url.includes('/auth/')) {\n      return 10000;\n    }\n    // Timeout esteso per generazione documenti (60 secondi)\n    if (url.includes('/generate') || url.includes('/documents')) {\n      return 60000;\n    }\n    // Timeout standard per altre operazioni (30 secondi)\n    return 30000;\n  };\n\n  try {\n    const response = await apiClient.put(url, data, {\n      timeout: getTimeoutForUrl(url),\n      withCredentials: url.includes('/auth/') ? true : false\n    });\n    return response.data as T;\n  } catch (error: unknown) {\n    throw error;\n  }\n};\n\nexport const apiDelete = async <T>(url: string): Promise<T> => {\n  try {\n    // Determina il timeout in base al tipo di operazione\n    const getTimeoutForUrl = (url: string): number => {\n      // Timeout ridotto per operazioni di autenticazione (10 secondi)\n      if (url.includes('/auth/')) {\n        return 10000;\n      }\n      // Timeout esteso per generazione documenti (60 secondi)\n      if (url.includes('/generate') || url.includes('/documents')) {\n        return 60000;\n      }\n      // Timeout standard per altre operazioni (30 secondi)\n      return 30000;\n    };\n\n    const timeoutValue = getTimeoutForUrl(url);\n    const withCredentialsValue = url.includes('/auth/'); // Abilita per auth endpoints\n    \n    // Debug log per le chiamate di autenticazione\n    if (url.includes('/auth/')) {\n      console.log('🔐 Auth DELETE API Call Debug:', {\n        url,\n        timeout: timeoutValue,\n        withCredentials: withCredentialsValue,\n        baseURL: API_BASE_URL\n      });\n    }\n\n    const response = await apiClient.delete(url, {\n      timeout: timeoutValue,\n      // Abilita withCredentials per le chiamate di autenticazione\n      withCredentials: withCredentialsValue,\n      // Assicurati che gli headers siano corretti\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data as T;\n  } catch (error: unknown) {\n    throw error;\n  }\n};\n\n// For DELETE requests with payload\nexport const apiDeleteWithPayload = async <T>(url: string, data = {}): Promise<T> => {\n  const config = {\n    method: 'DELETE',\n    url,\n    data,\n    timeout: 30000 // Timeout esteso anche per DELETE with payload\n  };\n  const response = await apiClient(config);\n  return response.data as T;\n};\n\n// Funzione per upload di file con FormData\nexport const apiUpload = async <T>(url: string, formData: FormData, config?: Record<string, unknown>): Promise<T> => {\n  try {\n    const enhancedConfig: Record<string, unknown> = {\n      ...config,\n      timeout: 60000, // Timeout esteso per upload\n      headers: {\n        ...(config?.headers || {}),\n        // Non impostare Content-Type per FormData, axios lo gestisce automaticamente\n      }\n    };\n    \n    const response = await apiClient.post<T>(url, formData, enhancedConfig);\n    return response.data;\n  } catch (error: unknown) {\n    throw error;\n  }\n};\n\n// API Service Object per compatibilità con import esistenti\nexport const apiService = {\n  get: apiGet,\n  post: apiPost,\n  put: apiPut,\n  delete: apiDelete,\n  deleteWithPayload: apiDeleteWithPayload,\n  upload: apiUpload,\n  client: apiClient\n};\n\nexport default apiClient;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/apiClient.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'directApiClient' is assigned a value but never used.","line":14,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[660,663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[660,663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[668,671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[668,671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[699,702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[699,702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[707,710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[707,710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[732,735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[732,735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[740,743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[740,743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1438,1441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1438,1441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1629,1632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1629,1632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1831,1834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1831,1834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2951,2954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2951,2954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4000,4003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4000,4003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5557,5560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5557,5560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { API_BASE_URL } from '../config/api';\n\n// Create axios instance with API_BASE_URL\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // Include cookies for authentication\n});\n\n// Create a direct axios client for use with backend servers\nconst directApiClient = axios.create({\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // Include cookies for authentication\n});\n\n// Funzione per aggiungere intercettori (per gestione token, errori, ecc.)\nexport function setupInterceptors(\n  onRequest?: (config: any) => any,\n  onResponse?: (response: any) => any,\n  onError?: (error: any) => any\n) {\n  // Intercettore per le richieste\n  apiClient.interceptors.request.use(\n    (config) => (onRequest ? onRequest(config) : config),\n    (error) => Promise.reject(error)\n  );\n\n  // Intercettore per le risposte\n  apiClient.interceptors.response.use(\n    (response) => (onResponse ? onResponse(response) : response),\n    (error) => {\n      if (onError) {\n        return onError(error);\n      }\n      \n      // Gestione predefinita degli errori\n      const errorMessage = error.response?.data?.message || error.message;\n      console.error('API Error:', errorMessage);\n      return Promise.reject(error);\n    }\n  );\n}\n\n// API generiche\nexport async function getAll<T>(endpoint: string, config?: any): Promise<T[]> {\n  const response = await apiClient.get<T[]>(endpoint, config);\n  return response.data;\n}\n\nexport async function getOne<T>(endpoint: string, id: string | number, config?: any): Promise<T> {\n  const response = await apiClient.get<T>(`${endpoint}/${id}`, config);\n  return response.data;\n}\n\nexport async function create<T, D = Partial<T>>(endpoint: string, data: D, config?: any): Promise<T> {\n  console.log(`Creating ${endpoint} with data:`, JSON.stringify(data).substring(0, 100) + '...');\n  \n  // Special handling for schedules endpoint which is inconsistent across servers\n  if (endpoint === 'schedules') {\n    // Try possible endpoints in order until one works\n    const possibleEndpoints = [\n      '/schedules',                       // Direct endpoint via Vite proxy\n      'http://localhost:4003/schedules',  // Fixed server direct \n      '/api/schedules',                   // With API prefix via Vite proxy\n      'http://localhost:4003/api/schedules', // Fixed server with API prefix\n      'http://127.0.0.1:4003/schedules',  // Alternative localhost notation\n    ];\n    \n    let lastError = null;\n    const allErrors = [];\n    \n    // Try each endpoint until one works\n    for (const url of possibleEndpoints) {\n      try {\n        console.log(`[DEBUG] Trying endpoint: ${url} with payload:`, JSON.stringify(data));\n        const response = await axios.post<T>(url, data, config);\n        console.log(`Success with endpoint: ${url}`);\n        return response.data;\n      } catch (err: any) {\n        // More detailed error logging\n        console.warn(`Failed with endpoint: ${url}`);\n        console.error('Error details:', {\n          message: err.message,\n          response: err.response ? {\n            status: err.response.status,\n            data: err.response.data,\n            headers: err.response.headers\n          } : 'No response object',\n          request: err.request ? 'Request object exists' : 'No request object'\n        });\n        lastError = err;\n        allErrors.push({url, error: err.message, status: err.response?.status, data: err.response?.data});\n      }\n    }\n    \n    // If all endpoints failed, throw the last error with more context\n    console.error('All schedule creation endpoints failed', JSON.stringify(allErrors));\n    throw lastError;\n  }\n  \n  // Normal handling for other endpoints\n  const response = await apiClient.post<T>(endpoint, data, config);\n  return response.data;\n}\n\nexport async function update<T, D = Partial<T>>(\n  endpoint: string, \n  id: string | number, \n  data: D, \n  config?: any\n): Promise<T> {\n  console.log(`Updating ${endpoint}/${id} with data:`, JSON.stringify(data).substring(0, 100) + '...');\n  \n  // Special handling for schedules endpoint which is inconsistent across servers\n  if (endpoint === 'schedules') {\n    // Try possible endpoints in order until one works\n    const possibleEndpoints = [\n      `/schedules/${id}`,                       // Direct endpoint via Vite proxy\n      `http://localhost:4003/schedules/${id}`,  // Fixed server direct \n      `/api/schedules/${id}`,                   // With API prefix via Vite proxy\n      `http://localhost:4003/api/schedules/${id}`, // Fixed server with API prefix\n      `http://127.0.0.1:4003/schedules/${id}`,  // Alternative localhost notation\n    ];\n    \n    let lastError = null;\n    \n    // Try each endpoint until one works\n    for (const url of possibleEndpoints) {\n      try {\n        console.log(`Trying endpoint: ${url}...`);\n        const response = await axios.put<T>(url, data, config);\n        console.log(`Success with endpoint: ${url}`);\n        return response.data;\n      } catch (err) {\n        console.warn(`Failed with endpoint: ${url}`, err);\n        lastError = err;\n      }\n    }\n    \n    // If all endpoints failed, throw the last error\n    console.error('All schedule update endpoints failed');\n    throw lastError;\n  }\n  \n  // Normal handling for other endpoints\n  const response = await apiClient.put<T>(`${endpoint}/${id}`, data, config);\n  return response.data;\n}\n\nexport async function remove(endpoint: string, id: string | number, config?: any): Promise<void> {\n  console.log(`Deleting ${endpoint}/${id}`);\n  \n  // Special handling for schedules endpoint which is inconsistent across servers\n  if (endpoint === 'schedules') {\n    // Try possible endpoints in order until one works\n    const possibleEndpoints = [\n      `/schedules/${id}`,                       // Direct endpoint via Vite proxy\n      `http://localhost:4003/schedules/${id}`,  // Fixed server direct \n      `/api/schedules/${id}`,                   // With API prefix via Vite proxy\n      `http://localhost:4003/api/schedules/${id}`, // Fixed server with API prefix\n      `http://127.0.0.1:4003/schedules/${id}`,  // Alternative localhost notation\n    ];\n    \n    let lastError = null;\n    \n    // Try each endpoint until one works\n    for (const url of possibleEndpoints) {\n      try {\n        console.log(`Trying to delete from endpoint: ${url}...`);\n        await axios.delete(url, config);\n        console.log(`Successfully deleted from endpoint: ${url}`);\n        return;\n      } catch (err) {\n        console.warn(`Failed to delete from endpoint: ${url}`, err);\n        lastError = err;\n      }\n    }\n    \n    // If all endpoints failed, throw the last error\n    console.error('All schedule deletion endpoints failed');\n    throw lastError;\n  }\n  \n  // Normal handling for other endpoints\n  await apiClient.delete(`${endpoint}/${id}`, config);\n}\n\n// Esporta il client per utilizzi specifici\nexport default apiClient;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/attestatiService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[299,302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[299,302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[317,320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[317,320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2390,2393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2390,2393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3826,3829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3826,3829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4419,4422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4419,4422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5753,5756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5753,5756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet, apiDelete } from './api';\nimport { API_ENDPOINTS } from '../config/api';\n\ninterface Template {\n  id: string;\n  type: string;\n  url: string;\n  googleDocsUrl?: string;\n  isDefault?: boolean;\n}\n\ninterface GenerateAttestatiResponse {\n  success: boolean;\n  message: string;\n  attestati: any[];\n  errors?: any[];\n}\n\ninterface CheckExistingAttesatoResult {\n  exists: boolean;\n  attestatoId?: string;\n  name?: string;\n}\n\n/**\n * Attestati service for managing course certificates\n */\nconst attestatiService = {\n  /**\n   * Get all attestati documents\n   */\n  async getAllAttestati() {\n    try {\n      return await apiGet(`/api${API_ENDPOINTS.ATTESTATI}`);\n    } catch (error) {\n      console.error('Error fetching attestati:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Check if attestato exists for a specific employee and course\n   */\n  async checkExistingAttestato(scheduledCourseId: string, employeeId: string): Promise<CheckExistingAttesatoResult> {\n    try {\n      return await apiGet<CheckExistingAttesatoResult>(\n        `/api/attestati/check-existing?scheduledCourseId=${scheduledCourseId}&employeeId=${employeeId}`\n      );\n    } catch (error) {\n      console.error('Error checking for existing attestato:', error);\n      return { exists: false };\n    }\n  },\n  \n  /**\n   * Generate attestati for a scheduled course\n   */\n  async generateAttestati(scheduledCourseId: string, options: { \n    templateId?: string, \n    templateUrl?: string,\n    overwriteExisting?: boolean,\n    employeeIds?: string[]\n  } = {}) {\n    try {\n      console.log(\"generateAttestati called with options:\", {\n        scheduledCourseId,\n        ...options\n      });\n      \n      // Get default template if none specified\n      let templateUrl = options.templateUrl;\n      let templateId = options.templateId;\n      \n      if (!templateUrl && !templateId) {\n        // Fetch available templates\n        const templates = await apiGet<Template[]>('/api/template-links');\n        const attestatoTemplate = templates.find((tpl) => tpl.type === 'attestato' && tpl.isDefault);\n        \n        if (!attestatoTemplate) {\n          throw new Error('Nessun template attestato configurato nelle impostazioni.');\n        }\n        \n        templateUrl = attestatoTemplate.url;\n        templateId = attestatoTemplate.id;\n      }\n      \n      // Build request data\n      const requestData: Record<string, any> = {\n        scheduledCourseId,\n        overwriteExisting: options.overwriteExisting || false\n      };\n      \n      // Add template info\n      if (templateUrl) {\n        requestData.templateUrl = templateUrl;\n      }\n      \n      if (templateId) {\n        requestData.templateId = templateId;\n      }\n      \n      // Add specific employees if provided - IMPORTANT: backend expects participantIds, not employeeIds\n      if (options.employeeIds && options.employeeIds.length > 0) {\n        requestData.participantIds = options.employeeIds; // Fixed parameter name\n        console.log(`Converting employeeIds to participantIds for ${options.employeeIds.length} employees`);\n      } else {\n        console.warn(\"No employeeIds provided in options - server will reject request\");\n      }\n      \n      // Make API request\n      console.log(\"Sending attestati generation request:\", requestData);\n      \n      // Make API request using centralized service\n      console.log(\"Sending attestati generation request:\", requestData);\n      \n      try {\n        const response = await apiPost<GenerateAttestatiResponse>(\n          '/api/attestati/genera',\n          requestData\n        );\n        \n        console.log(\"Server responded with:\", {\n          success: response.success,\n          message: response.message,\n          attestatiCount: response.attestati?.length || 0\n        });\n        \n        return response;\n      } catch (error: any) {\n        console.error('Error generating attestati:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error generating attestati:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Delete an attestato\n   */\n  async deleteAttestato(id: string) {\n    if (!id) {\n      throw new Error('ID attestato non valido');\n    }\n    \n    try {\n      console.log(`Attempting to delete attestato ${id}`);\n      const result = await apiDelete(`/api/attestati/${id}`);\n      console.log(`Successfully deleted attestato ${id}`);\n      return result;\n    } catch (error: any) {\n      console.error('Error deleting attestato:', error);\n      throw new Error(`Errore durante l'eliminazione dell'attestato: ${error.message || error}`);\n    }\n  },\n  \n  /**\n   * Delete multiple attestati at once\n   */\n  async deleteMultipleAttestati(ids: string[]) {\n    if (!ids.length) {\n      throw new Error('Nessun attestato selezionato');\n    }\n    \n    try {\n      console.log(`Deleting ${ids.length} attestati`);\n      \n      // Define possible endpoints - using Vite proxy\n      const endpoints = [\n        `/api/attestati/delete-multiple`,\n        `/attestati/delete-multiple`\n      ];\n      \n      // Define different formats for the request payload that servers might expect\n      const payloadFormats = [\n        { ids },\n        { attestatoIds: ids },\n        { id: ids }\n      ];\n      \n      let lastError = null;\n      \n      // Try each endpoint with each payload format\n      for (const endpoint of endpoints) {\n        for (const payload of payloadFormats) {\n          try {\n            console.log(`Trying to delete multiple attestati with endpoint: ${endpoint} and payload:`, payload);\n            const response = await apiPost(endpoint, payload);\n            \n            console.log(`Successfully deleted attestati with endpoint: ${endpoint}`);\n            return response;\n          } catch (error: any) {\n            lastError = error;\n            console.warn(`Error with endpoint ${endpoint}:`, error.message || error);\n          }\n        }\n      }\n      \n      // If all batch endpoints failed, try deleting one by one\n      console.log('All batch deletion endpoints failed, trying to delete attestati one by one');\n      const results = await Promise.allSettled(ids.map(id => this.deleteAttestato(id)));\n      \n      const succeeded = results.filter(r => r.status === 'fulfilled').length;\n      const failed = results.filter(r => r.status === 'rejected').length;\n      \n      if (succeeded > 0) {\n        console.log(`Successfully deleted ${succeeded}/${ids.length} attestati individually`);\n        return { \n          success: true,\n          message: `Deleted ${succeeded}/${ids.length} attestati`,\n          failedCount: failed\n        };\n      }\n      \n      // Se arriviamo qui, tutti gli endpoint hanno fallito\n      console.error('Error deleting multiple attestati:', lastError);\n      throw lastError || new Error('Failed to delete attestati with all available endpoints');\n    } catch (error) {\n      console.error('Error in deleteMultipleAttestati:', error);\n      throw error;\n    }\n  }\n};\n\nexport default attestatiService;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LoginRequest' is defined but never used.","line":2,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":59,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":60,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2885,2888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2885,2888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet, apiPost } from './api';\nimport { AuthResponse, AuthVerifyResponse, LoginRequest } from '../types';\n\n// Types for permissions\nexport interface UserPermissions {\n  role: string;\n  permissions: Array<{\n    resource: string;\n    action: string;\n    scope?: string;\n  }>;\n}\n\nexport const login = async (identifier: string, password: string): Promise<AuthResponse> => {\n  return await apiPost<AuthResponse>('/api/v1/auth/login', {\n    identifier,\n    password,\n  });\n};\n\nexport const verifyToken = async (): Promise<AuthVerifyResponse> => {\n  return await apiGet<AuthVerifyResponse>('/api/v1/auth/verify');\n};\n\nexport const forgotPassword = async (email: string): Promise<{ message: string }> => {\n  return await apiPost<{ message: string }>('/api/v1/auth/forgot-password', { email });\n};\n\nexport const resetPassword = async (token: string, password: string): Promise<{ message: string }> => {\n  return await apiPost<{ message: string }>('/api/v1/auth/reset-password', { token, password });\n};\n\nexport const saveToken = (token: string): void => {\n  localStorage.setItem('authToken', token);\n};\n\nexport const getToken = (): string | null => {\n  return localStorage.getItem('authToken');\n};\n\nexport const removeToken = (): void => {\n  localStorage.removeItem('authToken');\n};\n\nexport const isAuthenticated = (): boolean => {\n  return !!getToken();\n};\n\nexport const getUserPermissions = async (personId: string): Promise<UserPermissions> => {\n  try {\n    console.log('🔍 getUserPermissions: Calling API for personId:', personId);\n    console.log('🔍 getUserPermissions: Current token:', getToken() ? getToken()?.substring(0, 20) + '...' : 'NO TOKEN');\n    const response = await apiGet<{ success: boolean; data: { personId: string; role: string; permissions: Record<string, boolean> } }>(`/api/v1/auth/permissions/${personId}`);\n    \n    console.log('🔍 getUserPermissions: Raw API response:', response);\n    \n    // Convert backend response format to frontend expected format\n    const permissionsArray = Object.entries(response.data.permissions || {})\n      .filter(([key, value]) => value === true) // Only include permissions that are granted\n      .map(([key, value]) => {\n        // Handle both formats: 'resource.action' and 'resource:action'\n        const [resource, action] = key.includes('.') ? key.split('.') : key.split(':');\n        return {\n          resource: resource || 'unknown',\n          action: action || 'unknown',\n          scope: undefined\n        };\n      })\n      .filter(p => p.resource !== 'unknown' && p.action !== 'unknown');\n    \n    console.log('🔍 getUserPermissions: Converted permissions:', {\n      backendPermissions: response.data.permissions,\n      convertedPermissions: permissionsArray,\n      role: response.data.role\n    });\n    \n    return {\n      role: response.data.role,\n      permissions: permissionsArray\n    };\n  } catch (error: any) {\n    console.error('❌ getUserPermissions: Error fetching user permissions:', {\n      error: error.message,\n      status: error.response?.status,\n      statusText: error.response?.statusText,\n      data: error.response?.data,\n      personId,\n      hasToken: !!getToken(),\n      tokenPreview: getToken() ? getToken()?.substring(0, 20) + '...' : 'NO TOKEN',\n      fullError: error\n    });\n    \n    // Return default EMPLOYEE role if there's an error\n    console.warn('⚠️ getUserPermissions: Returning default EMPLOYEE role due to error');\n    return {\n      role: 'EMPLOYEE',\n      permissions: []\n    };\n  }\n};\n\nexport default {\n  login,\n  verifyToken,\n  forgotPassword,\n  resetPassword,\n  saveToken,\n  getToken,\n  removeToken,\n  isAuthenticated\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/companies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/contactSubmissions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[919,922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[919,922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Contact Submissions Service\n * Gestisce l'invio di contact submissions dal frontend pubblico\n */\n\nimport { apiGet } from './api';\n\nexport interface ContactSubmissionData {\n  name: string;\n  email: string;\n  phone?: string;\n  subject: string;\n  message: string;\n  privacyAccepted: boolean;\n  marketingAccepted?: boolean;\n}\n\nexport interface ContactSubmissionResponse {\n  id: string;\n  status: 'pending' | 'processed' | 'archived';\n  submittedAt: string;\n  message: string;\n}\n\n/**\n * Invia una contact submission dal frontend pubblico\n */\nexport const submitContactForm = async (data: ContactSubmissionData): Promise<ContactSubmissionResponse> => {\n  try {\n    console.log('📤 Invio contact form:', data);\n    \n    const response = await apiPost<ContactSubmissionResponse>('/api/v1/submissions', data);\n    \n    console.log('✅ Contact form inviato con successo:', response);\n    return response;\n  } catch (error: any) {\n    console.error('❌ Errore invio contact form:', error);\n    \n    // Gestione specifica per rate limiting\n    if (error.response?.status === 429) {\n      throw new Error('Troppe richieste. Riprova tra qualche minuto.');\n    }\n    \n    // Gestione per errori di validazione\n    if (error.response?.status === 400) {\n      const errorMessage = error.response?.data?.message || 'Dati non validi';\n      throw new Error(errorMessage);\n    }\n    \n    // Gestione per errori del server\n    if (error.response?.status >= 500) {\n      throw new Error('Errore del server. Riprova più tardi.');\n    }\n    \n    // Errore generico\n    throw new Error('Errore nell\\'invio del messaggio. Riprova più tardi.');\n  }\n};\n\nexport const getContactSubmissions = async (): Promise<ContactSubmissionResponse[]> => {\n  try {\n    const response = await apiGet<ContactSubmissionResponse[]>('/api/v1/submissions');\n    return response;\n  } catch (error) {\n    console.error('Errore nel recupero delle submissions:', error);\n    throw error;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/contactSubmissionsManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[527,530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[527,530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Contact Submissions Management Service\n * Gestisce le contact submissions per l'area privata\n */\n\nimport apiClient from './apiClient';\n\nexport interface ContactSubmission {\n  id: string;\n  type: string;\n  name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  subject: string;\n  message: string;\n  status: 'NEW' | 'READ' | 'IN_PROGRESS' | 'RESOLVED' | 'ARCHIVED';\n  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';\n  source: string;\n  ipAddress?: string;\n  userAgent?: string;\n  metadata?: Record<string, any>;\n  assignedTo?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n  readAt?: string;\n  resolvedAt?: string;\n  tenantId: string;\n}\n\nexport interface ContactSubmissionFilters {\n  page?: number;\n  limit?: number;\n  status?: string;\n  type?: string;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface ContactSubmissionStats {\n  total: number;\n  byStatus: Record<string, number>;\n  byType: Record<string, number>;\n  byPriority: Record<string, number>;\n  recentCount: number;\n  avgResponseTime?: number;\n}\n\nclass ContactSubmissionsManagementService {\n  // Get contact submissions list\n  async getContactSubmissions(filters?: ContactSubmissionFilters): Promise<{\n    submissions: ContactSubmission[];\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  }> {\n    const params = new URLSearchParams();\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) {\n          params.append(key, value.toString());\n        }\n      });\n    }\n    \n    const response = await apiClient.get<{\n      submissions: ContactSubmission[];\n      pagination: {\n        page: number;\n        limit: number;\n        total: number;\n        pages: number;\n      };\n    }>(`/api/v1/submissions?${params.toString()}`);\n    return response.data;\n  }\n\n  // Get single contact submission\n  async getContactSubmission(id: string): Promise<ContactSubmission> {\n    const response = await apiClient.get<ContactSubmission>(`/api/v1/submissions/${id}`);\n    return response.data;\n  }\n\n  // Update submission status\n  async updateSubmissionStatus(id: string, status: ContactSubmission['status'], notes?: string): Promise<ContactSubmission> {\n    const response = await apiClient.put<ContactSubmission>(`/api/v1/submissions/${id}/status`, { \n      status, \n      notes \n    });\n    return response.data;\n  }\n\n  // Delete submission\n  async deleteContactSubmission(id: string): Promise<void> {\n    await apiClient.delete(`/api/v1/submissions/${id}`);\n  }\n\n  // Get submission statistics\n  async getSubmissionStats(): Promise<ContactSubmissionStats> {\n    const response = await apiClient.get<ContactSubmissionStats>('/api/v1/submissions/stats');\n    return response.data;\n  }\n\n  // Assign submission to user\n  async assignSubmission(id: string, assignedToId: string): Promise<ContactSubmission> {\n    const response = await apiClient.put<ContactSubmission>(`/api/v1/submissions/${id}/assign`, {\n      assignedToId\n    });\n    return response.data;\n  }\n\n  // Export submissions\n  async exportSubmissions(filters?: ContactSubmissionFilters, format: 'csv' | 'excel' = 'csv'): Promise<Blob> {\n    const params = new URLSearchParams();\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) {\n          params.append(key, value.toString());\n        }\n      });\n    }\n    params.append('format', format);\n    \n    const response = await apiClient.get<Blob>(`/api/v1/submissions/export?${params.toString()}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n}\n\nexport const contactSubmissionsManagementService = new ContactSubmissionsManagementService();\n\n// Export individual functions for convenience\nexport const getContactSubmissions = (filters?: ContactSubmissionFilters) => \n  contactSubmissionsManagementService.getContactSubmissions(filters);\n\nexport const getContactSubmission = (id: string) => \n  contactSubmissionsManagementService.getContactSubmission(id);\n\nexport const updateContactSubmissionStatus = (id: string, status: ContactSubmission['status'], notes?: string) => \n  contactSubmissionsManagementService.updateSubmissionStatus(id, status, notes);\n\nexport const deleteContactSubmission = (id: string) => \n  contactSubmissionsManagementService.deleteContactSubmission(id);\n\nexport const getContactSubmissionStats = () => \n  contactSubmissionsManagementService.getSubmissionStats();\n\nexport const assignContactSubmission = (id: string, assignedToId: string) => \n  contactSubmissionsManagementService.assignSubmission(id, assignedToId);\n\nexport const exportContactSubmissions = (filters?: ContactSubmissionFilters, format: 'csv' | 'excel' = 'csv') => \n  contactSubmissionsManagementService.exportSubmissions(filters, format);","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/courses.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":7,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":7,"endColumn":30,"suggestions":[{"fix":{"range":[274,354],"text":"type CourseCreate = Omit<Course, 'id' | 'createdAt' | 'updatedAt'>"},"messageId":"replaceEmptyInterfaceWithSuper","desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":8,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":8,"endColumn":30,"suggestions":[{"fix":{"range":[362,411],"text":"type CourseUpdate = Partial<Course>"},"messageId":"replaceEmptyInterfaceWithSuper","desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'convertNumericFields' is assigned a value but never used.","line":11,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[498,501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[498,501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[504,507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[504,507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[606,609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[606,609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4078,4081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4078,4081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4113,4116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4113,4116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":113,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":120,"endColumn":6}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createService } from './serviceFactory';\nimport type { Course, CourseSchedule, CourseEnrollment } from '../types/courses';\nimport { apiGet } from './api';\nimport { ImportWithTemplateResponse } from '../types';\n\n// Definizione dei tipi per il pattern factory\nexport interface CourseCreate extends Omit<Course, 'id' | 'createdAt' | 'updatedAt'> {}\nexport interface CourseUpdate extends Partial<Course> {}\n\n// Funzione per convertire le stringhe in numeri\nconst convertNumericFields = (data: any): any => {\n  // Create a completely new object to avoid reference issues\n  const result: Record<string, any> = {};\n  \n  // Copy all fields except the numeric ones we'll process separately\n  Object.keys(data).forEach(key => {\n    const value = data[key];\n    \n    // Skip numeric fields (we'll handle them separately)\n    if (key !== 'duration' && \n        key !== 'validityYears' && \n        key !== 'price' && \n        key !== 'pricePerPerson' && \n        key !== 'maxPeople') {\n      result[key] = value;\n    }\n  });\n  \n  // Process numeric fields with more aggressive conversion\n  const numericFields = ['duration', 'validityYears', 'price', 'pricePerPerson', 'maxPeople'];\n  \n  numericFields.forEach(field => {\n    if (data[field] !== undefined && data[field] !== null && data[field] !== '') {\n      // Ensure we're working with a string first\n      const strValue = String(data[field]);\n      \n      // Remove any non-digit characters and parse as integer\n      const cleanValue = strValue.replace(/[^\\d]/g, '');\n      const numValue = parseInt(cleanValue, 10);\n      \n      if (!isNaN(numValue)) {\n        // Assign the numeric value (not a string)\n        result[field] = numValue;\n      } else if (field === 'duration' || field === 'validityYears') {\n        // These are required fields, so use 0 as default\n        result[field] = 0;\n      }\n    }\n  });\n  \n  // Ensure renewalDuration is a string (as per type definition)\n  if (data.renewalDuration !== undefined && data.renewalDuration !== null) {\n    result.renewalDuration = String(data.renewalDuration);\n  }\n  \n  return result;\n};\n\n// Creazione del servizio base usando la factory\nconst baseService = createService<Course, CourseCreate, CourseUpdate>('/courses');\n\n// Estensione del servizio con metodi specifici e conversione dei campi\nconst courseService = baseService.extend({\n  // Sovrascriviamo i metodi standard per convertire i campi numerici\n  create: async (data: CourseCreate): Promise<Course> => {\n    // Garantiamo che i campi numerici siano del tipo corretto\n    const processedData = {\n      ...data,\n      validityYears: data.validityYears !== undefined ? Number(data.validityYears) : undefined,\n      price: data.price !== undefined ? Number(data.price) : undefined,\n      pricePerPerson: data.pricePerPerson !== undefined ? Number(data.pricePerPerson) : undefined,\n      maxPeople: data.maxPeople !== undefined ? Number(data.maxPeople) : undefined,\n      duration: data.duration !== undefined ? Number(data.duration) : undefined,\n    };\n    \n    return baseService.create(processedData);\n  },\n  \n  update: async (id: string, data: CourseUpdate): Promise<Course> => {\n    // Garantiamo che i campi numerici siano del tipo corretto\n    const processedData = {\n      ...data,\n      validityYears: data.validityYears !== undefined ? Number(data.validityYears) : undefined,\n      price: data.price !== undefined ? Number(data.price) : undefined,\n      pricePerPerson: data.pricePerPerson !== undefined ? Number(data.pricePerPerson) : undefined,\n      maxPeople: data.maxPeople !== undefined ? Number(data.maxPeople) : undefined,\n      duration: data.duration !== undefined ? Number(data.duration) : undefined,\n    };\n    \n    return baseService.update(id, processedData);\n  },\n  \n  // Metodi specifici per i corsi\n  createCourseSchedule: async (schedule: Omit<CourseSchedule, 'id' | 'createdAt' | 'updatedAt'>): Promise<CourseSchedule> => {\n    return await apiPost<CourseSchedule>('/course-schedules', schedule);\n  },\n  \n  enrollEmployees: async (scheduleId: string, employeeIds: string[]): Promise<any> => {\n    return await apiPost<any>(`/course-schedules/${scheduleId}/enrollments`, { employeeIds });\n  },\n  \n  getCourseEnrollments: async (scheduleId: string): Promise<CourseEnrollment[]> => {\n    return await apiGet<CourseEnrollment[]>(`/course-schedules/${scheduleId}/enrollments`);\n  },\n\n  importWithTemplate: async (\n    courseId: string,\n    templateFile: File\n  ): Promise<ImportWithTemplateResponse> => {\n    const formData = new FormData();\n    formData.append('template', templateFile);\n\n    try {\n      return await apiGet<ImportWithTemplateResponse>(\n        `/courses/${courseId}/import-with-template`,\n        { method: 'POST', data: formData }\n      );\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  getSchedules: async (courseId: string): Promise<CourseSchedule[]> => {\n    return await apiGet<CourseSchedule[]>(`/courses/${courseId}/schedules`);\n  },\n});\n\n// Esportazione dei metodi standard\nexport const getCourses = courseService.getAll;\nexport const getCourse = courseService.getById;\nexport const createCourse = courseService.create;\nexport const updateCourse = courseService.update;\nexport const deleteCourse = courseService.delete;\n\n// Esportazione dei metodi specifici\nexport const createCourseSchedule = courseService.createCourseSchedule;\nexport const enrollEmployees = courseService.enrollEmployees;\nexport const getCourseEnrollments = courseService.getCourseEnrollments;\nexport const importWithTemplate = courseService.importWithTemplate;\nexport const getSchedules = courseService.getSchedules;\n\n// Esportazione del servizio completo come default\nexport default courseService;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/employees.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2066,2069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2066,2069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2199,2202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2199,2202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2522,2525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2522,2525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2952,2955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2952,2955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3379,3382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3379,3382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3838,3841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3838,3841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4266,4269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4266,4269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5603,5606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5603,5606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet, apiDelete } from './api';\nimport { Person, CreatePersonDTO, UpdatePersonDTO, PersonsFilters, PersonsResponse } from './persons';\n\nexport interface Employee extends Person {\n  position?: string;\n  department?: string;\n  hiredDate?: string;\n  status: 'ACTIVE' | 'INACTIVE';\n}\n\nexport interface CreateEmployeeDTO extends Omit<CreatePersonDTO, 'roleType'> {\n  hiredDate?: string;\n  status?: 'ACTIVE' | 'INACTIVE';\n}\n\nexport interface UpdateEmployeeDTO extends Omit<UpdatePersonDTO, 'roleType'> {\n  hiredDate?: string;\n  status?: 'ACTIVE' | 'INACTIVE';\n}\n\nexport interface EmployeesFilters extends Omit<PersonsFilters, 'roleType'> {\n  department?: string;\n  position?: string;\n  status?: 'ACTIVE' | 'INACTIVE';\n}\n\nexport interface EmployeesResponse extends Omit<PersonsResponse, 'persons'> {\n  employees: Employee[];\n}\n\nexport class EmployeesService {\n  /**\n   * Ottiene la lista dei dipendenti con filtri e paginazione\n   */\n  static async getEmployees(filters: EmployeesFilters = {}): Promise<Employee[]> {\n    const params = new URLSearchParams();\n    \n    // Forza il roleType a EMPLOYEE\n    params.append('roleType', 'EMPLOYEE');\n    \n    // Imposta ordinamento di default per nome\n    const sortBy = filters.sortBy || 'firstName';\n    const sortOrder = filters.sortOrder || 'asc';\n    \n    params.append('sortBy', sortBy);\n    params.append('sortOrder', sortOrder);\n    \n    if (filters.isActive !== undefined) params.append('isActive', filters.isActive.toString());\n    if (filters.companyId) params.append('companyId', filters.companyId.toString());\n    if (filters.search) params.append('search', filters.search);\n    if (filters.page) params.append('page', filters.page.toString());\n    if (filters.limit) params.append('limit', filters.limit.toString());\n    if (filters.department) params.append('department', filters.department);\n    if (filters.position) params.append('position', filters.position);\n    if (filters.status) params.append('status', filters.status);\n    \n    const response = await apiGet(`/persons?${params.toString()}`) as any;\n    \n    // Trasforma i dati per includere i campi specifici degli employee\n    const employees = response.persons.map((person: any) => ({\n      ...person,\n      status: person.isActive ? 'ACTIVE' : 'INACTIVE' as 'ACTIVE' | 'INACTIVE'\n    }));\n    \n    return employees;\n  }\n\n  /**\n   * Ottiene un dipendente specifico per ID\n   */\n  static async getEmployeeById(id: string): Promise<Employee> {\n    const response = await apiGet(`/persons/${id}`) as any;\n    return {\n      ...response,\n      status: response.isActive ? 'ACTIVE' : 'INACTIVE'\n    };\n  }\n\n  /**\n   * Crea un nuovo dipendente\n   */\n  static async createEmployee(employeeData: CreateEmployeeDTO): Promise<Employee> {\n    const personData = {\n      ...employeeData,\n      roleType: 'EMPLOYEE',\n      isActive: employeeData.status === 'ACTIVE'\n    };\n    \n    const response = await apiPost('/persons', personData) as any;\n    return {\n      ...response,\n      status: response.isActive ? 'ACTIVE' : 'INACTIVE'\n    };\n  }\n\n  /**\n   * Aggiorna un dipendente esistente\n   */\n  static async updateEmployee(id: string, employeeData: UpdateEmployeeDTO): Promise<Employee> {\n    const personData = {\n      ...employeeData,\n      isActive: employeeData.status === 'ACTIVE'\n    };\n    \n    const response = await apiPut(`/persons/${id}`, personData) as any;\n    return {\n      ...response,\n      status: response.isActive ? 'ACTIVE' : 'INACTIVE'\n    };\n  }\n\n  /**\n   * Elimina un dipendente\n   */\n  static async deleteEmployee(id: string): Promise<void> {\n    await apiDelete(`/persons/${id}`);\n  }\n\n  /**\n   * Attiva/disattiva un dipendente\n   */\n  static async toggleEmployeeStatus(id: string, isActive: boolean): Promise<Employee> {\n    const response = await apiPut(`/persons/${id}/status`, { isActive }) as any;\n    return {\n      ...response,\n      status: response.isActive ? 'ACTIVE' : 'INACTIVE'\n    };\n  }\n\n  /**\n   * Ottiene le statistiche dei dipendenti\n   */\n  static async getEmployeeStats(): Promise<{\n    total: number;\n    active: number;\n    inactive: number;\n    byDepartment: Record<string, number>;\n    byPosition: Record<string, number>;\n  }> {\n    const response = await apiGet('/persons/stats?roleType=EMPLOYEE') as any;\n    return response;\n  }\n\n  /**\n   * Esporta la lista dei dipendenti in formato CSV\n   */\n  static async exportEmployees(filters: EmployeesFilters = {}): Promise<Blob> {\n    const params = new URLSearchParams();\n    \n    params.append('roleType', 'EMPLOYEE');\n    \n    if (filters.isActive !== undefined) params.append('isActive', filters.isActive.toString());\n    if (filters.companyId) params.append('companyId', filters.companyId.toString());\n    if (filters.search) params.append('search', filters.search);\n    if (filters.department) params.append('department', filters.department);\n    if (filters.position) params.append('position', filters.position);\n    if (filters.status) params.append('status', filters.status);\n    \n    const response = await apiGet(`/persons/export?${params.toString()}`, {\n      responseType: 'blob'\n    }) as Blob;\n    return response;\n  }\n\n  /**\n   * Importa dipendenti da file CSV\n   */\n  static async importEmployees(file: File): Promise<{\n    imported: number;\n    errors: Array<{ row: number; error: string }>;\n  }> {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('roleType', 'EMPLOYEE');\n    \n    const response = await apiPost('/api/v1/persons/import', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }) as any;\n    return response;\n  }\n}\n\n// Funzioni di utilità per compatibilità con il codice esistente\nexport const getEmployees = EmployeesService.getEmployees;\nexport const getEmployeeById = EmployeesService.getEmployeeById;\nexport const createEmployee = EmployeesService.createEmployee;\nexport const updateEmployee = EmployeesService.updateEmployee;\nexport const deleteEmployee = EmployeesService.deleteEmployee;\nexport const toggleEmployeeStatus = EmployeesService.toggleEmployeeStatus;\nexport const getEmployeeStats = EmployeesService.getEmployeeStats;\nexport const exportEmployees = EmployeesService.exportEmployees;\nexport const importEmployees = EmployeesService.importEmployees;\n\nexport default EmployeesService;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/formTemplates.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[191,194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[191,194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[471,474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[471,474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1675,1678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1675,1678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":101,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":101,"endColumn":43,"suggestions":[{"fix":{"range":[2271,2352],"text":"type UpdateFormTemplateRequest = Partial<CreateFormTemplateRequest>"},"messageId":"replaceEmptyInterfaceWithSuper","desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2737,2740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2737,2740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2756,2759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2756,2759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2966,2969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2966,2969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3206,3209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3206,3209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3457,3460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3457,3460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3813,3816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3813,3816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4564,4567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4564,4567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4754,4757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4754,4757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5240,5243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5240,5243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5744,5747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5744,5747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6981,6984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6981,6984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7252,7255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7252,7255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8886,8889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8886,8889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet, apiDelete } from './api';\n\n/**\n * Trasforma i dati del template dal formato backend (snake_case) al formato frontend (camelCase)\n */\nfunction transformFormTemplate(template: any): FormTemplate {\n  return {\n    ...template,\n    fields: template.form_fields || template.fields || [],\n    // Rimuovi form_fields per evitare duplicazioni\n    form_fields: undefined\n  };\n}\n\n/**\n * Trasforma un array di template\n */\nfunction transformFormTemplates(templates: any[]): FormTemplate[] {\n  return templates.map(transformFormTemplate);\n}\n\nexport interface FormField {\n  id: string;\n  name: string;\n  type: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'file' | 'date' | 'number';\n  label: string;\n  placeholder?: string;\n  required: boolean;\n  options?: string[];\n  validation?: {\n    min?: number;\n    max?: number;\n    pattern?: string;\n    message?: string;\n  };\n  conditional?: {\n    field: string;\n    value: string | string[];\n    operator: 'equals' | 'not_equals' | 'contains' | 'in';\n  };\n  entityMapping?: {\n    entity: 'Person' | 'Company' | 'CourseSchedule';\n    field: string;\n  };\n}\n\nexport interface FormTemplate {\n  id: string;\n  name: string;\n  description?: string;\n  fields: FormField[];\n  isActive: boolean;\n  isPublic: boolean;\n  allowAnonymous: boolean;\n  successMessage?: string;\n  redirectUrl?: string;\n  emailNotifications?: {\n    enabled: boolean;\n    recipients: string[];\n    subject: string;\n    template: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n  tenantId: string;\n}\n\nexport interface FormSubmission {\n  id: string;\n  formTemplateId: string;\n  formTemplate?: FormTemplate;\n  data: Record<string, any>;\n  submittedAt: string;\n  submittedBy?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  status: 'pending' | 'processed' | 'archived';\n  notes?: string;\n  processedAt?: string;\n  processedBy?: string;\n  tenantId: string;\n}\n\nexport interface CreateFormTemplateRequest {\n  name: string;\n  description?: string;\n  fields: FormField[];\n  isActive?: boolean;\n  isPublic?: boolean;\n  allowAnonymous?: boolean;\n  successMessage?: string;\n  redirectUrl?: string;\n  emailNotifications?: {\n    enabled: boolean;\n    recipients: string[];\n    subject: string;\n    template: string;\n  };\n}\n\nexport interface UpdateFormTemplateRequest extends Partial<CreateFormTemplateRequest> {}\n\nexport interface FormSubmissionFilters {\n  formTemplateId?: string;\n  status?: 'pending' | 'processed' | 'archived';\n  dateFrom?: string;\n  dateTo?: string;\n  submittedBy?: string;\n  type?: string;\n  source?: string;\n}\n\nclass FormTemplatesService {\n  // Form Templates\n  async getFormTemplates(): Promise<FormTemplate[]> {\n    const response = await apiGet<{ success: boolean; data: any[]; pagination: any }>('/api/v1/form-templates');\n    return transformFormTemplates(response.data);\n  }\n\n  async getFormTemplate(id: string): Promise<FormTemplate> {\n    const response = await apiGet<{ success: boolean; data: any }>(`/api/v1/form-templates/${id}`);\n    return transformFormTemplate(response.data);\n  }\n\n  async createFormTemplate(data: CreateFormTemplateRequest): Promise<FormTemplate> {\n    const response = await apiPost<{ success: boolean; data: any }>('/api/v1/form-templates', data);\n    return transformFormTemplate(response.data);\n  }\n\n  async updateFormTemplate(id: string, data: UpdateFormTemplateRequest): Promise<FormTemplate> {\n    const response = await apiPut<{ success: boolean; data: any }>(`/api/v1/form-templates/${id}`, data);\n    return transformFormTemplate(response.data);\n  }\n\n  async deleteFormTemplate(id: string): Promise<void> {\n    await apiDelete(`/api/v1/form-templates/${id}`);\n  }\n\n  async duplicateFormTemplate(id: string, name: string): Promise<FormTemplate> {\n    const response = await apiPost<{ success: boolean; data: any }>(`/api/v1/form-templates/${id}/duplicate`, { name });\n    return transformFormTemplate(response.data);\n  }\n\n  // Form Submissions\n  async getFormSubmissions(filters?: FormSubmissionFilters): Promise<{ submissions: FormSubmission[]; total: number; pages: number }> {\n    const params = new URLSearchParams();\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) {\n          params.append(key, value);\n        }\n      });\n    }\n    \n    // Costruisce l'URL solo con i parametri se presenti\n    const queryString = params.toString();\n    const url = queryString ? `/api/v1/submissions/advanced?${queryString}` : '/api/v1/submissions/advanced';\n    \n    const response = await apiGet<{ data: any[]; pagination: { total: number; pages: number } }>(url);\n    \n    // Trasforma i formTemplate inclusi nelle submissions\n    const transformedSubmissions = response.data.map((submission: any) => {\n      if (submission.formTemplate && submission.formTemplate.form_fields) {\n        submission.formTemplate = transformFormTemplate(submission.formTemplate);\n      }\n      return submission;\n    });\n    \n    return {\n      submissions: transformedSubmissions,\n      total: response.pagination.total,\n      pages: response.pagination.pages\n    };\n  }\n\n  async getFormSubmission(id: string): Promise<FormSubmission> {\n    const response = await apiGet<{ success: boolean; data: any }>(`/api/v1/submissions/advanced/${id}`);\n    \n    // Trasforma il formTemplate incluso se presente\n    if (response.data.formTemplate && response.data.formTemplate.form_fields) {\n      response.data.formTemplate = transformFormTemplate(response.data.formTemplate);\n    }\n    \n    return response.data;\n  }\n\n  async updateSubmissionStatus(id: string, status: 'pending' | 'processed' | 'archived', notes?: string): Promise<FormSubmission> {\n    const response = await apiPut<{ success: boolean; data: any }>(`/api/v1/submissions/advanced/${id}`, { status, notes });\n    \n    // Trasforma il formTemplate incluso se presente\n    if (response.data.formTemplate && response.data.formTemplate.form_fields) {\n      response.data.formTemplate = transformFormTemplate(response.data.formTemplate);\n    }\n    \n    return response.data;\n  }\n\n  async deleteFormSubmission(id: string): Promise<void> {\n    await apiDelete(`/api/v1/submissions/advanced/${id}`);\n  }\n\n  async exportSubmissions(formTemplateId?: string, format: 'csv' | 'excel' = 'csv'): Promise<Blob> {\n    const params = new URLSearchParams();\n    if (formTemplateId) params.append('formTemplateId', formTemplateId);\n    params.append('format', format);\n    \n    // Costruisce l'URL solo con i parametri se presenti\n    const queryString = params.toString();\n    const url = queryString ? `/api/v1/submissions/advanced/export?${queryString}` : '/api/v1/submissions/advanced/export';\n    \n    // Per il download di blob, usiamo una configurazione speciale\n    const response = await apiGet<Blob>(url, {\n      responseType: 'blob'\n    });\n    return response;\n  }\n\n  // Public form submission (for frontend pubblico)\n  async submitPublicForm(formTemplateId: string, data: Record<string, any>): Promise<{ success: boolean; message: string }> {\n    return await apiPost<{ success: boolean; message: string }>(`/api/public/forms/${formTemplateId}/submit`, data);\n  }\n\n  async getPublicForm(id: string): Promise<FormTemplate> {\n    const response = await apiGet<any>(`/api/public/forms/${id}`);\n    return transformFormTemplate(response);\n  }\n}\n\nexport const formTemplatesService = new FormTemplatesService();\n\n// Export individual functions for convenience\nexport const getFormTemplates = () => formTemplatesService.getFormTemplates();\nexport const getFormTemplate = (id: string) => formTemplatesService.getFormTemplate(id);\nexport const createFormTemplate = (data: CreateFormTemplateRequest) => formTemplatesService.createFormTemplate(data);\nexport const updateFormTemplate = (id: string, data: UpdateFormTemplateRequest) => formTemplatesService.updateFormTemplate(id, data);\nexport const deleteFormTemplate = (id: string) => formTemplatesService.deleteFormTemplate(id);\nexport const duplicateFormTemplate = (id: string, name: string) => formTemplatesService.duplicateFormTemplate(id, name);\n\nexport const getFormSubmissions = (filters?: FormSubmissionFilters): Promise<{ submissions: FormSubmission[]; total: number; pages: number }> => formTemplatesService.getFormSubmissions(filters);\nexport const getFormSubmission = (id: string) => formTemplatesService.getFormSubmission(id);\nexport const updateSubmissionStatus = (id: string, status: 'pending' | 'processed' | 'archived', notes?: string) => formTemplatesService.updateSubmissionStatus(id, status, notes);\nexport const deleteSubmission = (id: string) => formTemplatesService.deleteFormSubmission(id);\nexport const exportSubmissions = (formTemplateId?: string, format: 'csv' | 'excel' = 'csv') => formTemplatesService.exportSubmissions(formTemplateId, format);\n\nexport const submitPublicForm = (formTemplateId: string, data: Record<string, any>) => formTemplatesService.submitPublicForm(formTemplateId, data);\nexport const getPublicForm = (id: string) => formTemplatesService.getPublicForm(id);","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/googleApiClient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1595,1598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1595,1598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2312,2315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2312,2315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3106,3109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3106,3109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4092,4095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4092,4095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet} from './api';\n\n/**\n * Google Docs API endpoints\n */\nexport const GOOGLE_API_ENDPOINTS = {\n  TEMPLATES: '/api/google-docs/templates',\n  GENERATE: '/api/google-docs/generate',\n  ATTESTATI: '/api/google-docs/attestati',\n};\n\n/**\n * Interface for template response\n */\nexport interface GoogleTemplateResponse {\n  success: boolean;\n  template?: {\n    id: string;\n    name: string;\n    googleDocsUrl: string;\n    type: string;\n    isDefault: boolean;\n  };\n  error?: string;\n}\n\n/**\n * Interface for document generation response\n */\nexport interface GenerateDocumentResponse {\n  success: boolean;\n  message?: string;\n  fileName?: string;\n  fileUrl?: string;\n  fileFormat?: string;\n  error?: string;\n  details?: string;\n}\n\n/**\n * Interface for attestato generation response\n */\nexport interface AttestatiResponse extends GenerateDocumentResponse {\n  employeeId?: string;\n  scheduleId?: string;\n}\n\n/**\n * Google API client for document template operations\n * This client provides functionality for:\n * - Getting default templates by type\n * - Generating documents from templates\n * - Working with attestati (certificates)\n */\nconst googleApiClient = {\n  /**\n   * Get the default template for a document type\n   * \n   * @param type - Document type (e.g., 'attestato', 'lettera_incarico')\n   * @returns Promise with template response\n   */\n  async getDefaultTemplate(type: string): Promise<GoogleTemplateResponse> {\n    try {\n      const response = await apiGet<GoogleTemplateResponse>(\n        `${GOOGLE_API_ENDPOINTS.TEMPLATES}/${type}`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error getting default template:', error);\n      return {\n        success: false,\n        error: error.message || 'Impossibile ottenere il template predefinito'\n      };\n    }\n  },\n  \n  /**\n   * Generate a document using a template\n   * \n   * @param type - Document type\n   * @param data - Placeholder data to replace in the template\n   * @returns Promise with document generation response\n   */\n  async generateDocument(type: string, data: Record<string, string>): Promise<GenerateDocumentResponse> {\n    try {\n      const response = await apiPost<GenerateDocumentResponse>(\n        GOOGLE_API_ENDPOINTS.GENERATE,\n        { type, data }\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error generating document:', error);\n      return {\n        success: false,\n        error: error.message || 'Impossibile generare il documento',\n        details: error.details || error.message\n      };\n    }\n  },\n  \n  /**\n   * Generate an attestato (certificate) for a participant\n   * \n   * @param scheduledCourseId - ID of the scheduled course \n   * @param employeeId - ID of the employee/participant\n   * @returns Promise with attestato generation response\n   */\n  async generateAttestato(scheduledCourseId: string, employeeId: string): Promise<AttestatiResponse> {\n    try {\n      const response = await apiGet<AttestatiResponse>(\n        `${GOOGLE_API_ENDPOINTS.ATTESTATI}/${scheduledCourseId}/${employeeId}`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error generating attestato:', error);\n      return {\n        success: false,\n        error: error.message || 'Impossibile generare l\\'attestato',\n        details: error.details || error.message\n      };\n    }\n  },\n  \n  /**\n   * Generate multiple attestati (certificates) for multiple participants\n   * \n   * @param scheduledCourseId - ID of the scheduled course\n   * @param employeeIds - Array of employee/participant IDs\n   * @returns Promise with multiple attestato generation responses\n   */\n  async generateMultipleAttestati(\n    scheduledCourseId: string, \n    employeeIds: string[]\n  ): Promise<AttestatiResponse[]> {\n    const results: AttestatiResponse[] = [];\n    \n    for (const employeeId of employeeIds) {\n      try {\n        const response = await this.generateAttestato(scheduledCourseId, employeeId);\n        results.push({\n          ...response,\n          employeeId,\n          scheduleId: scheduledCourseId\n        });\n      } catch (error: any) {\n        results.push({\n          success: false,\n          error: `Errore per partecipante ${employeeId}: ${error.message}`,\n          employeeId,\n          scheduleId: scheduledCourseId\n        });\n      }\n    }\n    \n    return results;\n  }\n};\n\nexport default googleApiClient;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/googleDocsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'API_BASE_URL' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1724,1727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1724,1727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2577,2580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2577,2580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet} from './api';\nimport { API_BASE_URL } from '../config/api';\n\ninterface GoogleDocsTemplate {\n  id: string;\n  name: string;\n  type: string;\n  googleDocsUrl: string;\n  isDefault: boolean;\n}\n\ninterface GoogleDocsTemplateResponse {\n  success: boolean;\n  template: GoogleDocsTemplate;\n}\n\ninterface GenerateDocumentParams {\n  type: string;\n  data: Record<string, string>;\n}\n\ninterface GenerateDocumentResult {\n  success: boolean;\n  message: string;\n  fileName?: string;\n  fileUrl?: string;\n  fileFormat?: string;\n  error?: string;\n  details?: string;\n  userMessage?: string;\n}\n\n/**\n * Google Docs API service for interacting with the backend Google Docs integration\n */\nconst googleDocsService = {\n  /**\n   * Get the default Google Docs template for a specific document type\n   * @param type - Document type (e.g., 'attestato', 'lettera_incarico')\n   * @returns The default template or null if not found\n   */\n  async getDefaultTemplate(type: string): Promise<GoogleDocsTemplate | null> {\n    try {\n      const response = await apiGet<GoogleDocsTemplateResponse>(`/api/google-docs/templates/${type}`);\n      return response?.template || null;\n    } catch (error) {\n      console.error('Error getting default Google Docs template:', error);\n      return null;\n    }\n  },\n\n  /**\n   * Generate a document using a Google Docs template\n   * @param params - Generation parameters including type and placeholder data\n   * @returns Generation result with file information\n   */\n  async generateDocument(params: GenerateDocumentParams): Promise<GenerateDocumentResult> {\n    try {\n      const response = await apiPost<GenerateDocumentResult>(`/api/google-docs/generate`, params);\n      return response;\n    } catch (error: any) {\n      console.error('Error generating document from Google Docs template:', error);\n      return {\n        success: false,\n        message: 'Error generating document',\n        error: error.message || error,\n        details: error.details || 'Check server logs for more information'\n      };\n    }\n  },\n\n  /**\n   * Generate a certificate for a participant in a course\n   * @param scheduledCourseId - ID of the scheduled course\n   * @param employeeId - ID of the employee/participant\n   * @returns Generation result with file information\n   */\n  async generateAttestato(scheduledCourseId: string, employeeId: string): Promise<GenerateDocumentResult> {\n    try {\n      const response = await apiGet<GenerateDocumentResult>(\n        `/api/google-docs/attestati/${scheduledCourseId}/${employeeId}`\n      );\n      return response;\n    } catch (error: any) {\n      console.error('Error generating attestato from Google Docs template:', error);\n      \n      // Extract more detailed error information if available\n      const errorMessage = error.message || error;\n      \n      return {\n        success: false,\n        message: 'Error generating attestato',\n        error: errorMessage,\n        details: error.details || 'Check server logs for more information',\n        userMessage: 'Impossibile generare l\\'attestato. Verifica che le credenziali Google API siano configurate correttamente.'\n      };\n    }\n  }\n};\n\nexport default googleDocsService;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/groupedCourses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/import/conflictDetectionService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[317,320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[317,320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ConflictInfo, PersonData, CompanyOption } from '../../types/import/personImportTypes';\n\n/**\n * Servizio per la rilevazione e gestione dei conflitti durante l'importazione\n */\n\n/**\n * Rileva duplicati basati sul codice fiscale\n */\nexport const detectDuplicates = (\n  persons: PersonData[],\n  existingPersons: any[] = []\n): ConflictInfo[] => {\n  const conflicts: ConflictInfo[] = [];\n  const fiscalCodes = new Set();\n\n  // Controlla duplicati negli esistenti\n  existingPersons.forEach(existing => {\n    if (existing.fiscalCode) {\n      fiscalCodes.add(existing.fiscalCode.toLowerCase());\n    }\n  });\n\n  persons.forEach((person, index) => {\n    if (person.taxCode) {\n      const fiscalCode = person.taxCode.toLowerCase();\n      \n      if (fiscalCodes.has(fiscalCode)) {\n        const existingPerson = existingPersons.find(\n          p => p.fiscalCode?.toLowerCase() === fiscalCode\n        );\n        \n        conflicts.push({\n          type: 'duplicate',\n          rowIndex: index,\n          personData: person,\n          message: `Persona con codice fiscale ${person.taxCode} già esistente nel sistema`,\n          existingPerson,\n          resolution: 'skip' // Default: salta i duplicati\n        });\n      } else {\n        fiscalCodes.add(fiscalCode);\n      }\n    }\n  });\n\n  return conflicts;\n};\n\n/**\n * Rileva aziende non valide e suggerisce alternative\n */\nexport const detectInvalidCompanies = (\n  persons: PersonData[],\n  companies: CompanyOption[]\n): ConflictInfo[] => {\n  const conflicts: ConflictInfo[] = [];\n  const companyNames = new Set(companies.map(c => c.label.toLowerCase()));\n\n  persons.forEach((person, index) => {\n    if (person.companyName && !companyNames.has(person.companyName.toLowerCase())) {\n      // Trova aziende simili\n      const suggestedCompanies = findSimilarCompanies(person.companyName, companies);\n      \n      conflicts.push({\n        type: 'invalid_company',\n        rowIndex: index,\n        personData: person,\n        message: `Azienda \"${person.companyName}\" non trovata nel sistema`,\n        suggestedCompanies: suggestedCompanies.map(c => ({ id: c.value, name: c.label })),\n        suggestedCompanyId: suggestedCompanies.length > 0 ? suggestedCompanies[0].value : undefined,\n        resolution: suggestedCompanies.length > 0 ? 'company' : 'skip'\n      });\n    }\n  });\n\n  return conflicts;\n};\n\n/**\n * Trova aziende simili basate sul nome\n */\nexport const findSimilarCompanies = (\n  companyName: string,\n  companies: CompanyOption[]\n): CompanyOption[] => {\n  const searchTerm = companyName.toLowerCase();\n  \n  return companies\n    .filter(company => {\n      const companyNameLower = company.label.toLowerCase();\n      return companyNameLower.includes(searchTerm) || \n             searchTerm.includes(companyNameLower) ||\n             calculateSimilarity(searchTerm, companyNameLower) > 0.6;\n    })\n    .sort((a, b) => {\n      const similarityA = calculateSimilarity(searchTerm, a.label.toLowerCase());\n      const similarityB = calculateSimilarity(searchTerm, b.label.toLowerCase());\n      return similarityB - similarityA;\n    })\n    .slice(0, 5);\n};\n\n/**\n * Calcola la similarità tra due stringhe (algoritmo semplificato)\n */\nconst calculateSimilarity = (str1: string, str2: string): number => {\n  const longer = str1.length > str2.length ? str1 : str2;\n  const shorter = str1.length > str2.length ? str2 : str1;\n  \n  if (longer.length === 0) return 1.0;\n  \n  const editDistance = levenshteinDistance(longer, shorter);\n  return (longer.length - editDistance) / longer.length;\n};\n\n/**\n * Calcola la distanza di Levenshtein tra due stringhe\n */\nconst levenshteinDistance = (str1: string, str2: string): number => {\n  const matrix = [];\n  \n  for (let i = 0; i <= str2.length; i++) {\n    matrix[i] = [i];\n  }\n  \n  for (let j = 0; j <= str1.length; j++) {\n    matrix[0][j] = j;\n  }\n  \n  for (let i = 1; i <= str2.length; i++) {\n    for (let j = 1; j <= str1.length; j++) {\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j] + 1\n        );\n      }\n    }\n  }\n  \n  return matrix[str2.length][str1.length];\n};\n\n/**\n * Aggiorna la risoluzione di un conflitto\n */\nexport const updateConflictResolution = (\n  conflicts: ConflictInfo[],\n  index: number,\n  resolution: 'skip' | 'overwrite' | 'company',\n  companyId?: string\n): ConflictInfo[] => {\n  return conflicts.map((conflict, i) => {\n    if (i === index) {\n      return {\n        ...conflict,\n        resolution,\n        resolvedCompanyId: resolution === 'company' ? companyId : undefined\n      };\n    }\n    return conflict;\n  });\n};\n\n/**\n * Risolve i conflitti preparando i dati per l'importazione\n */\nexport const resolveConflicts = (\n  persons: PersonData[],\n  conflicts: ConflictInfo[]\n): PersonData[] => {\n  const resolvedPersons: PersonData[] = [];\n  \n  persons.forEach((person, index) => {\n    const conflict = conflicts.find(c => c.rowIndex === index);\n    \n    if (!conflict) {\n      // Nessun conflitto, aggiungi la persona\n      resolvedPersons.push(person);\n    } else if (conflict.resolution === 'overwrite') {\n      // Sovrascrivi la persona esistente\n      resolvedPersons.push(person);\n    } else if (conflict.resolution === 'company' && conflict.resolvedCompanyId) {\n      // Assegna l'azienda risolta\n      resolvedPersons.push({\n        ...person,\n        companyId: conflict.resolvedCompanyId\n      });\n    }\n    // Se resolution è 'skip', non aggiungere la persona\n  });\n  \n  return resolvedPersons;\n};\n\n/**\n * Ottiene un riassunto dei conflitti\n */\nexport const getConflictSummary = (conflicts: ConflictInfo[]) => {\n  const duplicates = conflicts.filter(c => c.type === 'duplicate').length;\n  const invalidCompanies = conflicts.filter(c => c.type === 'invalid_company').length;\n  const resolved = conflicts.filter(c => c.resolution).length;\n  \n  return {\n    total: conflicts.length,\n    duplicates,\n    invalidCompanies,\n    resolved,\n    unresolved: conflicts.length - resolved\n  };\n};\n\n/**\n * Verifica se tutti i conflitti sono stati risolti\n */\nexport const areAllConflictsResolved = (conflicts: ConflictInfo[]): boolean => {\n  return conflicts.every(conflict => conflict.resolution !== undefined);\n};\n\n/**\n * Ottiene gli indici delle righe con conflitti non risolti\n */\nexport const getUnresolvedConflictIndices = (conflicts: ConflictInfo[]): number[] => {\n  return conflicts\n    .filter(conflict => !conflict.resolution)\n    .map(conflict => conflict.rowIndex);\n};\n\n/**\n * Deseleziona automaticamente le righe con conflitti di duplicato\n */\nexport const autoDeselectDuplicateConflicts = (\n  selectedRows: boolean[],\n  conflicts: ConflictInfo[]\n): boolean[] => {\n  const newSelectedRows = [...selectedRows];\n  \n  conflicts.forEach(conflict => {\n    if (conflict.type === 'duplicate' && conflict.resolution === 'skip') {\n      newSelectedRows[conflict.rowIndex] = false;\n    }\n  });\n  \n  return newSelectedRows;\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/import/csvMappingService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[685,688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[685,688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1288,1291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1288,1291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1296,1299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1296,1299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1911,1914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1911,1914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1919,1922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1919,1922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2621,2624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2621,2624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2645,2648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2645,2648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2653,2656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2653,2656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3301,3304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3301,3304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3307,3310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3307,3310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3910,3913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3910,3913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4152,4155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4152,4155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4158,4161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4158,4161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4183,4186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4183,4186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4918,4921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4918,4921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5237,5240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5237,5240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5650,5653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5650,5653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CSV_HEADER_MAPPINGS, TITLE_CASE_FIELDS } from '../../types/import/personImportTypes';\nimport { applyTitleCaseToFields } from '../../utils/textFormatters';\n\n/**\n * Servizio per la mappatura e normalizzazione dei dati CSV\n */\nexport class CsvMappingService {\n  \n  /**\n   * Ottiene la mappatura degli header CSV\n   */\n  static getHeaderMappings(): Record<string, string> {\n    return CSV_HEADER_MAPPINGS;\n  }\n\n  /**\n   * Ottiene i campi da formattare in Title Case\n   */\n  static getTitleCaseFields(): readonly string[] {\n    return TITLE_CASE_FIELDS;\n  }\n\n  /**\n   * Applica la formattazione Title Case ai campi specificati\n   */\n  static applyTitleCaseFormatting(person: any): any {\n    return applyTitleCaseToFields(person, [...TITLE_CASE_FIELDS]);\n  }\n\n  /**\n   * Normalizza il codice fiscale\n   */\n  static normalizeTaxCode(taxCode: string): string {\n    if (!taxCode) return '';\n    return taxCode.toUpperCase().trim();\n  }\n\n  /**\n   * Normalizza il nome di un'azienda per il confronto\n   */\n  static normalizeCompanyName(companyName: string): string {\n    if (!companyName) return '';\n    return companyName.toLowerCase().trim();\n  }\n\n  /**\n   * Trova un'azienda corrispondente nella lista esistente\n   */\n  static findMatchingCompany(companyName: string, existingCompanies: any[]): any | null {\n    if (!companyName || !existingCompanies.length) return null;\n\n    const normalizedName = this.normalizeCompanyName(companyName);\n    \n    return existingCompanies.find(company => {\n      const ragioneSociale = company.ragioneSociale ? this.normalizeCompanyName(company.ragioneSociale) : '';\n      const name = company.name ? this.normalizeCompanyName(company.name) : '';\n      \n      return ragioneSociale === normalizedName || name === normalizedName;\n    }) || null;\n  }\n\n  /**\n   * Trova aziende simili per suggerimenti\n   */\n  static findSimilarCompanies(companyName: string, existingCompanies: any[]): any[] {\n    if (!companyName || !existingCompanies.length) return [];\n\n    const normalizedName = this.normalizeCompanyName(companyName);\n    \n    return existingCompanies.filter(company => {\n      const ragioneSociale = company.ragioneSociale ? this.normalizeCompanyName(company.ragioneSociale) : '';\n      const name = company.name ? this.normalizeCompanyName(company.name) : '';\n      \n      return ragioneSociale.includes(normalizedName) || \n             normalizedName.includes(ragioneSociale) ||\n             name.includes(normalizedName) || \n             normalizedName.includes(name);\n    });\n  }\n\n  /**\n   * Risolve l'ID dell'azienda basandosi sul nome\n   */\n  static resolveCompanyId(person: any, existingCompanies: any[]): any {\n    if (!person.companyName || typeof person.companyName !== 'string') {\n      return person;\n    }\n\n    const matchingCompany = this.findMatchingCompany(person.companyName, existingCompanies);\n    \n    if (matchingCompany) {\n      return {\n        ...person,\n        companyId: matchingCompany.id,\n        companyName: matchingCompany.ragioneSociale || matchingCompany.name\n      };\n    }\n\n    // Se non trova corrispondenza, rimuove companyId per attivare il conflict detection\n    return {\n      ...person,\n      companyId: undefined\n    };\n  }\n\n  /**\n   * Pulisce e normalizza i dati di una persona\n   */\n  static cleanPersonData(person: any): any {\n    const cleaned = { ...person };\n\n    // Normalizza il codice fiscale\n    if (cleaned.taxCode) {\n      cleaned.taxCode = this.normalizeTaxCode(cleaned.taxCode);\n    }\n\n    // Rimuove spazi extra da tutti i campi stringa\n    Object.keys(cleaned).forEach(key => {\n      if (typeof cleaned[key] === 'string') {\n        cleaned[key] = cleaned[key].trim();\n        // Rimuove campi vuoti\n        if (cleaned[key] === '') {\n          cleaned[key] = undefined;\n        }\n      }\n    });\n\n    return cleaned;\n  }\n\n  /**\n   * Valida se una riga è un template vuoto\n   */\n  static isEmptyTemplate(person: any): boolean {\n    return !person.firstName?.trim() && \n           !person.lastName?.trim() && \n           !person.taxCode?.trim();\n  }\n\n  /**\n   * Prepara i dati per l'API rimuovendo campi non necessari\n   */\n  static prepareForAPI(person: any): any {\n    const apiData: any = {};\n    \n    // Campi da includere nell'API\n    const apiFields = [\n      'firstName', 'lastName', 'email', 'phone', 'taxCode', 'birthDate',\n      'residenceAddress', 'city', 'province', 'postalCode', 'title', 'companyId', \n      'username', 'notes', 'roleType'\n    ];\n\n    apiFields.forEach(field => {\n      if (person[field] !== undefined && person[field] !== null && person[field] !== '') {\n        apiData[field] = person[field];\n      }\n    });\n\n    // Assicura che il roleType sia valido\n    if (!apiData.roleType) {\n      apiData.roleType = 'EMPLOYEE'; // Default\n    }\n\n    return apiData;\n  }\n\n  /**\n   * Converte le opzioni azienda per il componente SearchableSelect\n   */\n  static convertCompaniesToOptions(companies: any[]): Array<{ value: string; label: string }> {\n    return companies.map(company => ({\n      value: company.id,\n      label: company.ragioneSociale || company.name || 'Azienda senza nome'\n    }));\n  }\n\n  /**\n   * Estrae i nomi delle aziende uniche dai dati importati\n   */\n  static extractUniqueCompanyNames(persons: any[]): string[] {\n    const companyNames = new Set<string>();\n    \n    persons.forEach(person => {\n      if (person.companyName && typeof person.companyName === 'string') {\n        companyNames.add(person.companyName.trim());\n      }\n    });\n\n    return Array.from(companyNames).filter(name => name.length > 0);\n  }\n\n  /**\n   * Valida la struttura dei dati importati\n   */\n  static validateImportStructure(data: any[]): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!Array.isArray(data)) {\n      errors.push('I dati importati devono essere un array');\n      return { isValid: false, errors };\n    }\n\n    if (data.length === 0) {\n      errors.push('Il file non contiene dati da importare');\n      return { isValid: false, errors };\n    }\n\n    // Verifica che almeno una riga abbia dati validi\n    const hasValidData = data.some(person => !this.isEmptyTemplate(person));\n    \n    if (!hasValidData) {\n      errors.push('Il file non contiene righe con dati validi');\n      return { isValid: false, errors };\n    }\n\n    return { isValid: true, errors };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/import/dateFormattingService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DateFormatConfig' is defined but never used.","line":1,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":81,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DATE_FORMATS, DateFormatConfig } from '../../types/import/personImportTypes';\n\n/**\n * Servizio per la gestione e formattazione delle date nell'importazione\n */\nexport class DateFormattingService {\n  \n  /**\n   * Formatta una data per la visualizzazione (dd/mm/yyyy)\n   */\n  static formatDateForDisplay(dateString: string): string {\n    if (!dateString) return '';\n    \n    try {\n      const cleanDateStr = dateString.toString().trim();\n      \n      // Se è già in formato dd/mm/yyyy, verifica che sia valido\n      if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(cleanDateStr)) {\n        const parts = cleanDateStr.split('/');\n        const day = parseInt(parts[0]);\n        const month = parseInt(parts[1]);\n        const year = parseInt(parts[2]);\n        \n        // Verifica che sia una data valida\n        if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {\n          const date = new Date(year, month - 1, day);\n          if (date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year) {\n            return cleanDateStr; // È già nel formato corretto\n          }\n        }\n      }\n      \n      // Prova i diversi formati supportati\n      for (const format of DATE_FORMATS) {\n        if (format.inputFormat.test(cleanDateStr)) {\n          const date = format.parser(cleanDateStr);\n          if (date && !isNaN(date.getTime())) {\n            const day = date.getDate().toString().padStart(2, '0');\n            const month = (date.getMonth() + 1).toString().padStart(2, '0');\n            const year = date.getFullYear();\n            return `${day}/${month}/${year}`;\n          }\n        }\n      }\n      \n      // Fallback: prova a parsare come Date\n      const date = new Date(cleanDateStr);\n      if (!isNaN(date.getTime())) {\n        const day = date.getDate().toString().padStart(2, '0');\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const year = date.getFullYear();\n        return `${day}/${month}/${year}`;\n      }\n      \n      return cleanDateStr; // Se non riesce a parsare, restituisce l'originale\n    } catch (error) {\n      console.warn(`Errore nella formattazione della data: ${dateString}`, error);\n      return dateString;\n    }\n  }\n\n  /**\n   * Valida una data con supporto per più formati\n   */\n  static isValidDate(dateString: string): boolean {\n    if (!dateString) return false;\n    \n    try {\n      const cleanDateStr = dateString.toString().trim();\n      \n      // Prova tutti i formati supportati\n      for (const format of DATE_FORMATS) {\n        if (format.inputFormat.test(cleanDateStr) && format.validator(cleanDateStr)) {\n          return true;\n        }\n      }\n      \n      // Fallback: prova a parsare direttamente\n      const date = new Date(cleanDateStr);\n      return !isNaN(date.getTime()) && date.getFullYear() >= 1900 && date.getFullYear() <= 2100;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Formatta una data per l'API (YYYY-MM-DD)\n   */\n  static formatDateForAPI(dateString: string): string {\n    if (!dateString) return '';\n    \n    const cleanDateStr = dateString.toString().trim();\n    \n    // Se è già nel formato YYYY-MM-DD, verifica che sia valido\n    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(cleanDateStr)) {\n      const date = new Date(cleanDateStr);\n      if (!isNaN(date.getTime()) && date.getFullYear() >= 1900 && date.getFullYear() <= 2100) {\n        return cleanDateStr;\n      }\n    }\n\n    // Prova i diversi formati supportati\n    for (const format of DATE_FORMATS) {\n      if (format.inputFormat.test(cleanDateStr) && format.validator(cleanDateStr)) {\n        const date = format.parser(cleanDateStr);\n        if (date && !isNaN(date.getTime())) {\n          return date.toISOString().split('T')[0]; // Ritorna YYYY-MM-DD\n        }\n      }\n    }\n\n    // Fallback: prova a parsare direttamente\n    try {\n      const date = new Date(cleanDateStr);\n      if (!isNaN(date.getTime()) && date.getFullYear() >= 1900 && date.getFullYear() <= 2100) {\n        return date.toISOString().split('T')[0];\n      }\n    } catch (error) {\n      console.warn(`Impossibile formattare la data per l'API: ${dateString}`, error);\n    }\n\n    return cleanDateStr; // Se non riesce a convertire, restituisce l'originale\n  }\n\n  /**\n   * Estrae la data di nascita dal codice fiscale italiano\n   */\n  static extractBirthDateFromTaxCode(taxCode: string): string | null {\n    if (!taxCode || taxCode.length !== 16) {\n      return null;\n    }\n\n    try {\n      const normalizedTaxCode = taxCode.toUpperCase().trim();\n      \n      // Estrai anno, mese e giorno dal codice fiscale\n      const yearPart = normalizedTaxCode.substring(6, 8);\n      const monthChar = normalizedTaxCode.substring(8, 9);\n      const dayPart = normalizedTaxCode.substring(9, 11);\n\n      // Mappa dei mesi\n      const monthMap: { [key: string]: number } = {\n        'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'H': 6,\n        'L': 7, 'M': 8, 'P': 9, 'R': 10, 'S': 11, 'T': 12\n      };\n\n      const month = monthMap[monthChar];\n      if (!month) {\n        return null;\n      }\n\n      // Calcola l'anno (assumendo che le persone siano nate tra 1920 e 2020)\n      let year = parseInt(yearPart);\n      const currentYear = new Date().getFullYear();\n      const currentYearLastTwoDigits = currentYear % 100;\n      \n      if (year <= currentYearLastTwoDigits) {\n        year += 2000;\n      } else {\n        year += 1900;\n      }\n\n      // Calcola il giorno (per le donne si aggiunge 40)\n      let day = parseInt(dayPart);\n      if (day > 31) {\n        day -= 40; // È una donna\n      }\n\n      // Verifica che la data sia valida\n      if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 || year > currentYear) {\n        return null;\n      }\n\n      const date = new Date(year, month - 1, day);\n      if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {\n        return null;\n      }\n\n      // Ritorna nel formato dd/mm/yyyy\n      const dayStr = day.toString().padStart(2, '0');\n      const monthStr = month.toString().padStart(2, '0');\n      return `${dayStr}/${monthStr}/${year}`;\n    } catch (error) {\n      console.warn(`Errore nell'estrazione della data dal codice fiscale: ${taxCode}`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Normalizza una data in un formato standard\n   */\n  static normalizeDate(dateString: string): string {\n    const formatted = this.formatDateForDisplay(dateString);\n    return formatted || dateString;\n  }\n\n  /**\n   * Verifica se due date sono uguali (indipendentemente dal formato)\n   */\n  static areDatesEqual(date1: string, date2: string): boolean {\n    if (!date1 || !date2) return false;\n    \n    const normalized1 = this.formatDateForAPI(date1);\n    const normalized2 = this.formatDateForAPI(date2);\n    \n    return normalized1 === normalized2;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/import/validationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ValidationError' is defined but never used.","line":1,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":37},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":106,"column":27,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":106,"endColumn":28,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3148,3149],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3148,3148],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":106,"column":39,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":106,"endColumn":40,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3160,3161],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3160,3160],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":106,"column":41,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":106,"endColumn":42,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3162,3163],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3162,3162],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PersonData, ValidationError, ImportValidationResult } from '../../types/import/personImportTypes';\nimport { DateFormattingService } from './dateFormattingService';\nimport { CsvMappingService } from './csvMappingService';\nimport { isValidCodiceFiscale } from '../../lib/utils';\n\n/**\n * Servizio per la validazione dei dati delle persone durante l'importazione\n */\nexport class ValidationService {\n\n  /**\n   * Valida una singola persona\n   */\n  static validatePerson(person: PersonData): string[] {\n    const errors: string[] = [];\n\n    // Controlla se è un template vuoto\n    if (CsvMappingService.isEmptyTemplate(person)) {\n      return errors; // Non validare template vuoti\n    }\n\n    // Validazione campi obbligatori\n    if (!person.firstName?.trim()) {\n      errors.push('Nome è obbligatorio');\n    }\n\n    if (!person.lastName?.trim()) {\n      errors.push('Cognome è obbligatorio');\n    }\n\n    if (!person.taxCode?.trim()) {\n      errors.push('Codice fiscale è obbligatorio');\n    } else if (!isValidCodiceFiscale(person.taxCode)) {\n      errors.push('Formato codice fiscale non valido');\n    }\n\n    // Validazione email se presente\n    if (person.email && !this.isValidEmail(person.email)) {\n      errors.push('Formato email non valido');\n    }\n\n    // Validazione data di nascita se presente\n    if (person.birthDate && !DateFormattingService.isValidDate(person.birthDate)) {\n      errors.push('Formato data di nascita non valido');\n    }\n\n    // Validazione telefono se presente\n    if (person.phone && !this.isValidPhone(person.phone)) {\n      errors.push('Formato telefono non valido');\n    }\n\n    // Validazione CAP se presente\n    if (person.postalCode && !this.isValidPostalCode(person.postalCode)) {\n      errors.push('Formato CAP non valido');\n    }\n\n    return errors;\n  }\n\n  /**\n   * Valida un array di persone\n   */\n  static validatePersons(persons: PersonData[]): ImportValidationResult {\n    const errors: ImportValidationResult = {};\n    \n    persons.forEach((person, index) => {\n      // Estrae la data di nascita dal codice fiscale se non presente\n      if (person.taxCode && !person.birthDate) {\n        const extractedDate = DateFormattingService.extractBirthDateFromTaxCode(person.taxCode);\n        if (extractedDate) {\n          person.birthDate = extractedDate;\n        }\n      }\n      \n      // Formatta la data di nascita per la visualizzazione\n      if (person.birthDate) {\n        person.birthDate = DateFormattingService.formatDateForDisplay(person.birthDate);\n      }\n      \n      const personErrors = this.validatePerson(person);\n      if (personErrors.length > 0) {\n        errors[index] = personErrors;\n      }\n    });\n    \n    return errors;\n  }\n\n\n\n  /**\n   * Valida il formato email\n   */\n  static isValidEmail(email: string): boolean {\n    if (!email) return false;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email.trim());\n  }\n\n  /**\n   * Valida il formato telefono\n   */\n  static isValidPhone(phone: string): boolean {\n    if (!phone) return false;\n    // Accetta numeri con o senza prefisso internazionale, spazi, trattini, parentesi\n    const phoneRegex = /^[\\+]?[0-9\\s\\-\\(\\)]{6,20}$/;\n    return phoneRegex.test(phone.trim());\n  }\n\n  /**\n   * Valida il formato CAP italiano\n   */\n  static isValidPostalCode(postalCode: string): boolean {\n    if (!postalCode) return false;\n    const capRegex = /^[0-9]{5}$/;\n    return capRegex.test(postalCode.trim());\n  }\n\n  /**\n   * Verifica se ci sono errori critici che impediscono l'importazione\n   */\n  static hasCriticalErrors(validationResult: ImportValidationResult): boolean {\n    return Object.keys(validationResult).length > 0;\n  }\n\n  /**\n   * Ottiene un riassunto degli errori di validazione\n   */\n  static getValidationSummary(validationResult: ImportValidationResult): {\n    totalErrors: number;\n    affectedRows: number;\n    errorTypes: { [errorType: string]: number };\n  } {\n    const totalErrors = Object.values(validationResult).reduce((sum, errors) => sum + errors.length, 0);\n    const affectedRows = Object.keys(validationResult).length;\n    const errorTypes: { [errorType: string]: number } = {};\n\n    Object.values(validationResult).forEach(errors => {\n      errors.forEach((error: string) => {\n        errorTypes[error] = (errorTypes[error] || 0) + 1;\n      });\n    });\n\n    return {\n      totalErrors,\n      affectedRows,\n      errorTypes\n    };\n  }\n\n  /**\n   * Filtra le righe valide da quelle con errori\n   */\n  static filterValidRows(persons: PersonData[], validationResult: ImportValidationResult): {\n    validRows: PersonData[];\n    invalidRows: PersonData[];\n    validIndices: number[];\n    invalidIndices: number[];\n  } {\n    const validRows: PersonData[] = [];\n    const invalidRows: PersonData[] = [];\n    const validIndices: number[] = [];\n    const invalidIndices: number[] = [];\n\n    persons.forEach((person, index) => {\n      if (validationResult[index]) {\n        invalidRows.push(person);\n        invalidIndices.push(index);\n      } else {\n        validRows.push(person);\n        validIndices.push(index);\n      }\n    });\n\n    return {\n      validRows,\n      invalidRows,\n      validIndices,\n      invalidIndices\n    };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/logs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/persons.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/requestThrottler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[229,232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[229,232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2676,2679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2676,2679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'requestKey' is defined but never used.","line":188,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":41}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servizio di throttling per gestire le richieste API\n * Previene ERR_INSUFFICIENT_RESOURCES limitando le richieste simultanee\n */\n\ninterface PendingRequest {\n  url: string;\n  resolve: () => Promise<void>;\n  reject: (error: any) => void;\n  timestamp: number;\n  priority: number;\n}\n\nclass RequestThrottler {\n  private maxConcurrentRequests = 3; // Massimo 3 richieste simultanee\n  private activeRequests = new Set<string>();\n  private pendingQueue: PendingRequest[] = [];\n  private requestCounts = new Map<string, number>();\n  private lastRequestTime = new Map<string, number>();\n  private readonly minInterval = 100; // Minimo 100ms tra richieste dello stesso tipo\n\n  /**\n   * Aggiunge una richiesta alla coda con throttling\n   */\n  async throttleRequest<T>(\n    url: string, \n    requestFn: () => Promise<T>,\n    priority: number = 1\n  ): Promise<T> {\n    const requestKey = this.getRequestKey(url);\n    \n    // Le richieste di autenticazione hanno priorità massima e non vengono mai throttled\n    if (requestKey.startsWith('auth-')) {\n      console.log(`🔐 RequestThrottler: Auth request detected for ${url}, executing immediately`);\n      return this.executeRequest(url, requestFn);\n    }\n    \n    // Le richieste di permessi e ruoli sono critiche e non devono essere throttled\n    if (requestKey.startsWith('roles-') || requestKey.startsWith('permissions-') || requestKey.includes('permissions')) {\n      console.log(`🔑 RequestThrottler: Critical permissions request detected for ${url}, executing immediately`);\n      return this.executeRequest(url, requestFn);\n    }\n    \n    // Controlla se c'è già una richiesta identica in corso\n    if (this.activeRequests.has(requestKey)) {\n      console.log(`🔄 RequestThrottler: Duplicate request detected for ${url}, waiting...`);\n      await this.waitForRequest(requestKey);\n    }\n\n    // Controlla rate limiting per tipo di richiesta\n    if (this.shouldThrottle(requestKey)) {\n      console.log(`⏳ RequestThrottler: Rate limiting ${url}, queuing...`);\n      return this.queueRequest(url, requestFn, priority);\n    }\n\n    return this.executeRequest(url, requestFn);\n  }\n\n  /**\n   * Esegue una richiesta immediatamente\n   */\n  private async executeRequest<T>(url: string, requestFn: () => Promise<T>): Promise<T> {\n    const requestKey = this.getRequestKey(url);\n    \n    try {\n      this.activeRequests.add(requestKey);\n      this.updateRequestStats(requestKey);\n      \n      console.log(`🚀 RequestThrottler: Executing ${url} (active: ${this.activeRequests.size})`);\n      \n      const result = await requestFn();\n      \n      console.log(`✅ RequestThrottler: Completed ${url}`);\n      return result;\n    } catch (error: any) {\n      console.error(`❌ RequestThrottler: Failed ${url}:`, error.message);\n      \n      // Se è un errore di risorse insufficienti, aumenta il throttling\n      if (error.code === 'ERR_INSUFFICIENT_RESOURCES') {\n        this.handleResourceError(requestKey);\n      }\n      \n      throw error;\n    } finally {\n      this.activeRequests.delete(requestKey);\n      this.processQueue();\n    }\n  }\n\n  /**\n   * Aggiunge una richiesta alla coda\n   */\n  private queueRequest<T>(\n    url: string, \n    requestFn: () => Promise<T>,\n    priority: number\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const request: PendingRequest = {\n        url,\n        resolve: async () => {\n          try {\n            const result = await this.executeRequest(url, requestFn);\n            resolve(result);\n          } catch (error) {\n            reject(error);\n          }\n        },\n        reject,\n        timestamp: Date.now(),\n        priority\n      };\n\n      // Inserisce nella coda ordinata per priorità\n      const insertIndex = this.pendingQueue.findIndex(r => r.priority < priority);\n      if (insertIndex === -1) {\n        this.pendingQueue.push(request);\n      } else {\n        this.pendingQueue.splice(insertIndex, 0, request);\n      }\n\n      console.log(`📋 RequestThrottler: Queued ${url} (queue size: ${this.pendingQueue.length})`);\n    });\n  }\n\n  /**\n   * Processa la coda delle richieste in attesa\n   */\n  private processQueue(): void {\n    if (this.pendingQueue.length === 0) return;\n    if (this.activeRequests.size >= this.maxConcurrentRequests) return;\n\n    const nextRequest = this.pendingQueue.shift();\n    if (nextRequest) {\n      // Controlla se la richiesta non è scaduta (timeout di 30 secondi)\n      if (Date.now() - nextRequest.timestamp > 30000) {\n        nextRequest.reject(new Error('Request timeout'));\n        this.processQueue();\n        return;\n      }\n\n      const requestKey = this.getRequestKey(nextRequest.url);\n      if (!this.shouldThrottle(requestKey)) {\n        // CORREZIONE CRITICA: Esegui la richiesta chiamando la funzione resolve asincrona\n        setTimeout(async () => {\n          await nextRequest.resolve();\n        }, 0);\n      } else {\n        // Rimette in coda se ancora throttled\n        this.pendingQueue.unshift(nextRequest);\n        setTimeout(() => this.processQueue(), this.minInterval);\n      }\n    }\n  }\n\n  /**\n   * Determina se una richiesta deve essere throttled\n   */\n  private shouldThrottle(requestKey: string): boolean {\n    // Le richieste di autenticazione non devono mai essere throttled\n    if (requestKey.startsWith('auth-')) {\n      return false;\n    }\n    \n    // Le richieste di permessi e ruoli non devono mai essere throttled\n    if (requestKey.startsWith('roles-') || requestKey.startsWith('permissions-') || requestKey.includes('permissions')) {\n      return false;\n    }\n    \n    const lastTime = this.lastRequestTime.get(requestKey) || 0;\n    const timeSinceLastRequest = Date.now() - lastTime;\n    \n    return timeSinceLastRequest < this.minInterval;\n  }\n\n  /**\n   * Aggiorna le statistiche delle richieste\n   */\n  private updateRequestStats(requestKey: string): void {\n    this.lastRequestTime.set(requestKey, Date.now());\n    const count = this.requestCounts.get(requestKey) || 0;\n    this.requestCounts.set(requestKey, count + 1);\n  }\n\n  /**\n   * Gestisce errori di risorse insufficienti\n   */\n  private handleResourceError(requestKey: string): void {\n    // Riduce temporaneamente il numero di richieste simultanee\n    this.maxConcurrentRequests = Math.max(1, this.maxConcurrentRequests - 1);\n    \n    console.warn(`⚠️ RequestThrottler: Resource error, reducing concurrent requests to ${this.maxConcurrentRequests}`);\n    \n    // Ripristina dopo 10 secondi\n    setTimeout(() => {\n      this.maxConcurrentRequests = Math.min(3, this.maxConcurrentRequests + 1);\n      console.log(`🔄 RequestThrottler: Restored concurrent requests to ${this.maxConcurrentRequests}`);\n    }, 10000);\n  }\n\n  /**\n   * Aspetta che una richiesta specifica sia completata\n   */\n  private async waitForRequest(requestKey: string): Promise<void> {\n    return new Promise((resolve) => {\n      const checkInterval = setInterval(() => {\n        if (!this.activeRequests.has(requestKey)) {\n          clearInterval(checkInterval);\n          resolve();\n        }\n      }, 50);\n      \n      // Timeout dopo 5 secondi\n      setTimeout(() => {\n        clearInterval(checkInterval);\n        resolve();\n      }, 5000);\n    });\n  }\n\n  /**\n   * Genera una chiave per identificare il tipo di richiesta\n   */\n  private getRequestKey(url: string): string {\n    // Normalizza l'URL per raggruppare richieste simili\n    const cleanUrl = url.split('?')[0]; // Rimuove query parameters\n    \n    // Raggruppa per tipo di endpoint\n    // PRIORITÀ ALTA: Richieste di autenticazione (non devono essere throttled)\n    if (cleanUrl.includes('/auth/login')) return 'auth-login';\n    if (cleanUrl.includes('/auth/logout')) return 'auth-logout';\n    if (cleanUrl.includes('/auth/refresh')) return 'auth-refresh';\n    if (cleanUrl.includes('/auth/verify')) return 'auth-verify';\n    if (cleanUrl.includes('/auth/')) return 'auth-other';\n    \n    // PRIORITÀ ALTA: Richieste di permessi e ruoli (critiche per il funzionamento)\n    if (cleanUrl.includes('/roles/') && cleanUrl.includes('/permissions')) return 'permissions-role-specific';\n    if (cleanUrl.includes('/advanced-permissions')) return 'permissions-advanced';\n    if (cleanUrl.includes('/permissions')) return 'permissions-general';\n    if (cleanUrl.includes('/roles/hierarchy')) return 'roles-hierarchy';\n    if (cleanUrl.includes('/roles')) return 'roles-general';\n    \n    // Altri endpoint\n    if (cleanUrl.includes('/tenants')) return 'tenants';\n    if (cleanUrl.includes('/users')) return 'users';\n    \n    return cleanUrl;\n  }\n\n  /**\n   * Ottiene statistiche del throttler\n   */\n  getStats() {\n    return {\n      activeRequests: this.activeRequests.size,\n      queuedRequests: this.pendingQueue.length,\n      maxConcurrentRequests: this.maxConcurrentRequests,\n      requestCounts: Object.fromEntries(this.requestCounts),\n      lastRequestTimes: Object.fromEntries(this.lastRequestTime)\n    };\n  }\n\n  /**\n   * Resetta il throttler\n   */\n  reset(): void {\n    this.activeRequests.clear();\n    this.pendingQueue.length = 0;\n    this.requestCounts.clear();\n    this.lastRequestTime.clear();\n    this.maxConcurrentRequests = 3;\n    console.log('🔄 RequestThrottler: Reset completed');\n  }\n}\n\n// Istanza singleton\nexport const requestThrottler = new RequestThrottler();\n\n/**\n * Wrapper per le chiamate API con throttling automatico\n */\nexport async function throttledApiCall<T>(\n  url: string,\n  requestFn: () => Promise<T>,\n  priority: number = 1\n): Promise<T> {\n  return requestThrottler.throttleRequest(url, requestFn, priority);\n}\n\nexport default requestThrottler;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/roleHierarchyService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5776,5779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5776,5779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5884,5887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5884,5887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servizio per la gestione della gerarchia dei ruoli\n * Implementa i filtri per employees e trainers secondo le regole del progetto\n */\n\nexport interface PersonRole {\n  id: string;\n  roleType: string;\n  isActive: boolean;\n  company?: {\n    id: string;\n    ragioneSociale: string;\n  };\n  assignedAt: string;\n}\n\nexport interface Person {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  taxCode?: string;\n  roles: PersonRole[];\n  company?: {\n    id: string;\n    ragioneSociale: string;\n  };\n  status: 'ACTIVE' | 'INACTIVE' | 'PENDING';\n  deletedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface FilterConfig {\n  minRoleLevel: number;\n  maxRoleLevel: number;\n  roleTypes?: string[];\n}\n\n/**\n * Gerarchia dei ruoli secondo il planning dettagliato\n * Livelli più bassi = maggiore autorità\n */\nexport const ROLE_HIERARCHY: Record<string, number> = {\n  'SUPER_ADMIN': 0,\n  'ADMIN': 1,\n  'COMPANY_ADMIN': 2,        // \"Responsabile Aziendale\"\n  'HR_MANAGER': 3,\n  'MANAGER': 3,\n  'TRAINER_COORDINATOR': 4,  // \"Coordinatore Formatori\"\n  'SENIOR_TRAINER': 5,\n  'TRAINER': 6,\n  'EXTERNAL_TRAINER': 6,\n  'EMPLOYEE': 8\n};\n\n/**\n * Configurazioni predefinite per i filtri\n */\nexport const FILTER_CONFIGS = {\n  // Employees: COMPANY_ADMIN (2) o inferiore (livelli più alti)\n  employees: {\n    minRoleLevel: 2,\n    maxRoleLevel: 8,\n    roleTypes: ['COMPANY_ADMIN', 'HR_MANAGER', 'MANAGER', 'TRAINER_COORDINATOR', 'SENIOR_TRAINER', 'TRAINER', 'EMPLOYEE'] as string[]\n  } as FilterConfig,\n  \n  // Trainers: TRAINER_COORDINATOR (4) o inferiore (livelli più alti)\n  trainers: {\n    minRoleLevel: 4,\n    maxRoleLevel: 6,\n    roleTypes: ['TRAINER_COORDINATOR', 'SENIOR_TRAINER', 'TRAINER', 'EXTERNAL_TRAINER'] as string[]\n  } as FilterConfig\n};\n\n/**\n * Filtra le persone in base alla gerarchia dei ruoli\n * Una persona appare nel filtro se ha ALMENO UN ruolo attivo nel range specificato\n */\nexport const filterPersonsByRoleLevel = (\n  persons: Person[], \n  minLevel: number, \n  maxLevel: number\n): Person[] => {\n  return persons.filter(person => \n    person.roles.some(role => {\n      if (!role.isActive) return false;\n      \n      const level = ROLE_HIERARCHY[role.roleType];\n      return level !== undefined && level >= minLevel && level <= maxLevel;\n    })\n  );\n};\n\n/**\n * Filtra le persone per il ramo \"Employees\"\n * Include persone con ruoli da COMPANY_ADMIN in giù\n */\nexport const filterEmployees = (persons: Person[]): Person[] => {\n  const config = FILTER_CONFIGS.employees;\n  return filterPersonsByRoleLevel(persons, config.minRoleLevel, config.maxRoleLevel);\n};\n\n/**\n * Filtra le persone per il ramo \"Trainers\"\n * Include persone con ruoli da TRAINER_COORDINATOR in giù\n */\nexport const filterTrainers = (persons: Person[]): Person[] => {\n  const config = FILTER_CONFIGS.trainers;\n  return filterPersonsByRoleLevel(persons, config.minRoleLevel, config.maxRoleLevel);\n};\n\n/**\n * Ottiene il nome visualizzato per un ruolo\n */\nexport const getRoleDisplayName = (roleType: string): string => {\n  const roleNames: Record<string, string> = {\n    'SUPER_ADMIN': 'Super Admin',\n    'ADMIN': 'Amministratore',\n    'COMPANY_ADMIN': 'Responsabile Aziendale',\n    'HR_MANAGER': 'Manager HR',\n    'MANAGER': 'Manager',\n    'TRAINER_COORDINATOR': 'Coordinatore Formatori',\n    'SENIOR_TRAINER': 'Formatore Senior',\n    'TRAINER': 'Formatore',\n    'EXTERNAL_TRAINER': 'Formatore Esterno',\n    'EMPLOYEE': 'Dipendente'\n  };\n  \n  return roleNames[roleType] || roleType;\n};\n\n/**\n * Ottiene il roleType dal nome visualizzato (mappatura inversa)\n */\nexport const getRoleTypeFromDisplayName = (displayName: string): string => {\n  const displayNameToRoleType: Record<string, string> = {\n    'Super Admin': 'SUPER_ADMIN',\n    'Amministratore': 'ADMIN',\n    'Responsabile Aziendale': 'COMPANY_ADMIN',\n    'Manager HR': 'HR_MANAGER',\n    'Manager': 'MANAGER',\n    'Coordinatore Formatori': 'TRAINER_COORDINATOR',\n    'Formatore Senior': 'SENIOR_TRAINER',\n    'Formatore': 'TRAINER',\n    'Formatore Esterno': 'EXTERNAL_TRAINER',\n    'Dipendente': 'EMPLOYEE'\n  };\n  \n  return displayNameToRoleType[displayName] || displayName;\n};\n\n/**\n * Ottiene il livello di un ruolo\n */\nexport const getRoleLevel = (roleType: string): number => {\n  return ROLE_HIERARCHY[roleType] ?? 999;\n};\n\n/**\n * Verifica se una persona ha un ruolo specifico attivo\n */\nexport const hasActiveRole = (person: Person, roleType: string): boolean => {\n  return person.roles.some(role => role.roleType === roleType && role.isActive);\n};\n\n/**\n * Ottiene tutti i ruoli attivi di una persona\n */\nexport const getActiveRoles = (person: Person): PersonRole[] => {\n  if (!person.roles || !Array.isArray(person.roles)) {\n    return [];\n  }\n  return person.roles.filter(role => role.isActive);\n};\n\n/**\n * Ottiene il ruolo con il livello più alto (numero più basso) di una persona\n */\nexport const getHighestRole = (person: Person): PersonRole | null => {\n  const activeRoles = getActiveRoles(person);\n  if (activeRoles.length === 0) return null;\n  \n  return activeRoles.reduce((highest, current) => {\n    const currentLevel = getRoleLevel(current.roleType);\n    const highestLevel = getRoleLevel(highest.roleType);\n    return currentLevel < highestLevel ? current : highest;\n  });\n};\n\n/**\n * Verifica se una persona rientra in entrambi i rami (employees e trainers)\n */\nexport function isInBothBranches(person: Person): boolean {\n  const employeeRoleTypes = FILTER_CONFIGS.employees?.roleTypes;\n  const trainerRoleTypes = FILTER_CONFIGS.trainers?.roleTypes;\n  \n  if (!employeeRoleTypes || !trainerRoleTypes) {\n    return false;\n  }\n  \n  const activeRoles = getActiveRoles(person);\n  const hasEmployeeRole = activeRoles.some(role => \n    employeeRoleTypes.includes(role.roleType as any)\n  );\n  const hasTrainerRole = activeRoles.some(role => \n    trainerRoleTypes.includes(role.roleType as any)\n  );\n  \n  return hasEmployeeRole && hasTrainerRole;\n}\n\n/**\n * Applica un filtro personalizzato alle persone\n */\nexport const applyCustomFilter = (persons: Person[], filterConfig: FilterConfig): Person[] => {\n  return filterPersonsByRoleLevel(persons, filterConfig.minRoleLevel, filterConfig.maxRoleLevel);\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/roles.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5562,5565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5562,5565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5702,5705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5702,5705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":346,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11568,11571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11568,11571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet, apiDelete } from './api';\n\ninterface Role {\n  type: string;\n  name: string;\n  description: string;\n  userCount: number;\n  persons?: Person[];\n  permissions?: string[];\n}\n\ninterface Person {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n\ninterface Permission {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n  resource?: string;\n  action?: string;\n  entity?: string; // Aggiungo il campo entity\n  scope?: 'all' | 'own';\n}\n\ninterface RolePermissionUpdate {\n  roleType: string;\n  permissions: {\n    [entity: string]: {\n      [action: string]: {\n        granted: boolean;\n        scope?: 'all' | 'own';\n        fields?: string[];\n      }\n    }\n  };\n}\n\n// Nuove interfacce per la gerarchia dei ruoli\ninterface RoleHierarchyLevel {\n  level: number;\n  name: string;\n  description: string;\n  assignableRoles: string[];\n  permissions: string[];\n}\n\ninterface RoleHierarchy {\n  [roleType: string]: RoleHierarchyLevel;\n}\n\ninterface UserRoleHierarchy {\n  userId: string;\n  userRoles: string[];\n  hierarchy: RoleHierarchy;\n  highestRole: string;\n  userLevel: number;\n  assignableRoles: string[];\n  assignablePermissions: string[];\n}\n\ninterface RoleAssignmentResult {\n  success: boolean;\n  message: string;\n  assignedRole?: string;\n  targetUserId?: string;\n}\n\ninterface PermissionAssignmentResult {\n  success: boolean;\n  message: string;\n  assignedPermissions?: string[];\n  targetUserId?: string;\n}\n\ninterface AssignableRolesAndPermissions {\n  roleType: string;\n  roleLevel: number;\n  assignableRoles: string[];\n  assignablePermissions: string[];\n}\n\nclass RolesService {\n  private baseUrl = '/api/v1/roles';\n\n  async getAll(): Promise<{ roles: Role[], totalRoles: number, totalUsers: number }> {\n    interface BackendResponse {\n      success: boolean;\n      data: {\n        data: Array<{\n          roleType?: string;\n          type?: string;\n          name: string;\n          description: string;\n          userCount: number;\n          persons?: Person[];\n          permissions?: string[];\n        }>;\n        pagination: {\n          totalCount: number;\n        };\n      };\n    }\n    \n    const response = await apiGet<BackendResponse>(this.baseUrl);\n    // Il backend restituisce { success: true, data: { data: [...], pagination: {...} } }\n    const backendRoles = response.data.data || [];\n    \n    // Mappa i ruoli dal backend al formato frontend (roleType -> type)\n    const roles: Role[] = backendRoles.map((backendRole) => ({\n      type: backendRole.roleType || backendRole.type || '',\n      name: backendRole.name,\n      description: backendRole.description,\n      userCount: backendRole.userCount,\n      persons: backendRole.persons,\n      permissions: backendRole.permissions\n    }));\n    \n    const totalRoles = response.data.pagination?.totalCount || roles.length;\n    const totalUsers = roles.reduce((sum, role) => sum + (role.userCount || 0), 0);\n    \n    return {\n      roles,\n      totalRoles,\n      totalUsers\n    };\n  }\n\n  async getById(roleType: string): Promise<Role> {\n    interface BackendRoleResponse {\n      success: boolean;\n      data: {\n        roleType?: string;\n        type?: string;\n        name: string;\n        description: string;\n        userCount: number;\n        persons?: Person[];\n        permissions?: string[];\n      };\n    }\n    \n    const encodedRoleType = encodeURIComponent(roleType);\n    const response = await apiGet<BackendRoleResponse>(`${this.baseUrl}/${encodedRoleType}`);\n    const backendRole = response.data;\n    \n    // Mappa il ruolo dal backend al formato frontend (roleType -> type)\n    return {\n      type: backendRole.roleType || backendRole.type || '',\n      name: backendRole.name,\n      description: backendRole.description,\n      userCount: backendRole.userCount,\n      persons: backendRole.persons,\n      permissions: backendRole.permissions\n    };\n  }\n\n  async create(role: { \n    name: string; \n    description: string; \n    level?: number; \n    parentRoleType?: string; \n    permissions?: string[] \n  }): Promise<Role> {\n    console.log('RolesService.create called with:', role);\n    // Usa l'endpoint per ruoli personalizzati\n    const response = await apiPost<{ success: boolean, data: Role }>(`${this.baseUrl}/custom`, role);\n    return response.data;\n  }\n\n  async update(roleType: string, role: { name: string; description: string; permissions?: string[] }): Promise<Role> {\n    const encodedRoleType = encodeURIComponent(roleType);\n    const response = await apiPut<{ success: boolean, data: Role }>(`${this.baseUrl}/${encodedRoleType}`, role);\n    return response.data;\n  }\n\n  async updateCustomRole(customRoleId: string, role: { name: string; description: string; permissions?: string[] }): Promise<Role> {\n    const response = await apiPut<{ success: boolean, data: Role }>(`${this.baseUrl}/custom/${customRoleId}`, role);\n    return response.data;\n  }\n\n  async delete(roleType: string): Promise<void> {\n    const encodedRoleType = encodeURIComponent(roleType);\n    await apiDelete<{ success: boolean }>(`${this.baseUrl}/${encodedRoleType}`);\n  }\n\n  async getPermissions(): Promise<Permission[]> {\n    const response = await apiGet(`${this.baseUrl}/permissions`);\n    // Il backend restituisce { success: true, data: { permissions: {...}, tenants: [...], ... } }\n    // Convertiamo la struttura raggruppata in un array piatto di permessi\n    const permissionsData = response.data.permissions || {};\n    const permissionsArray: Permission[] = [];\n    \n    Object.entries(permissionsData).forEach(([category, categoryData]: [string, any]) => {\n      if (categoryData.permissions && Array.isArray(categoryData.permissions)) {\n        categoryData.permissions.forEach((perm: any) => {\n          // Estrai action ed entity dal permissionId (es. \"VIEW_COMPANIES\" -> action: \"VIEW\", entity: \"COMPANIES\")\n          const parts = perm.key.split('_');\n          if (parts.length >= 2) {\n            const action = parts[0]?.toLowerCase() || 'view';\n            const entity = parts.slice(1).join('_').toLowerCase() || category;\n            \n            // Verifica che action ed entity siano validi\n            if (action && entity) {\n              permissionsArray.push({\n                id: perm.key,\n                name: perm.label || perm.name,\n                category: category,\n                description: perm.description,\n                resource: category,\n                action: action,\n                entity: entity,\n                scope: 'all'\n              });\n            } else {\n              console.warn('Invalid permission format:', perm.key);\n            }\n          } else {\n            console.warn('Invalid permission key format:', perm.key);\n          }\n        });\n      }\n    });\n    \n    return permissionsArray;\n  }\n\n  async getRolePermissions(roleType: string): Promise<string[]> {\n    const encodedRoleType = encodeURIComponent(roleType);\n    console.log('🔍 [RolesService] Getting permissions for role:', roleType, 'encoded:', encodedRoleType);\n    \n    const response = await apiGet<{ success: boolean, data: { permissions: Array<{ permissionId: string, granted: boolean }> } }>(`${this.baseUrl}/${encodedRoleType}/permissions`);\n    \n    console.log('🔍 [RolesService] Raw API response:', response);\n    console.log('🔍 [RolesService] Response data:', response.data);\n    console.log('🔍 [RolesService] Response data permissions:', response.data?.permissions);\n    \n    // Il backend restituisce { success: true, data: { permissions: [...], ... } }\n    // Ogni permission ha la struttura { permissionId: string, granted: boolean, ... }\n    // Restituiamo solo i permissionId dei permessi granted\n    if (response.data && response.data.permissions && Array.isArray(response.data.permissions)) {\n      console.log('🔍 [RolesService] Processing permissions array, length:', response.data.permissions.length);\n      \n      const grantedPermissions = response.data.permissions\n        .filter((perm) => {\n          console.log('🔍 [RolesService] Permission:', perm.permissionId, 'granted:', perm.granted);\n          return perm.granted === true;\n        })\n        .map((perm) => perm.permissionId);\n        \n      console.log('🔍 [RolesService] Granted permissions:', grantedPermissions);\n      return grantedPermissions;\n    }\n    \n    console.warn('🔍 [RolesService] No valid permissions found, returning empty array');\n    return [];\n  }\n\n  async updateRolePermissions(roleType: string, permissions: RolePermissionUpdate): Promise<void> {\n    const encodedRoleType = encodeURIComponent(roleType);\n    await apiPut(`${this.baseUrl}/${encodedRoleType}/permissions`, permissions);\n  }\n\n  async updateSystemRolePermissions(roleType: string, permissions: Array<{\n    permissionId: string;\n    granted: boolean;\n    scope?: string;\n    tenantIds?: string[];\n    fieldRestrictions?: string[];\n  }>): Promise<void> {\n    const encodedRoleType = encodeURIComponent(roleType);\n    await apiPut(`${this.baseUrl}/${encodedRoleType}/permissions`, permissions);\n  }\n\n  async getPersonsByRole(roleType: string): Promise<Person[]> {\n    const encodedRoleType = encodeURIComponent(roleType);\n    const response = await apiGet(`${this.baseUrl}/persons?role=${encodedRoleType}`);\n    return response.data;\n  }\n\n  async assignRole(personId: number, roleType: string): Promise<void> {\n    await apiPost(`${this.baseUrl}/assign`, { personId, roleType });\n  }\n\n  async removeRole(personId: number, roleType: string): Promise<void> {\n    await apiDelete(`${this.baseUrl}/remove`, { data: { personId, roleType } });\n  }\n\n  // Nuove funzioni per la gerarchia dei ruoli\n  async getRoleHierarchy(): Promise<RoleHierarchy> {\n    const response = await apiGet<{ success: boolean, data: RoleHierarchy }>(`${this.baseUrl}/hierarchy`);\n    return response.data;\n  }\n\n  async getUserRoleHierarchy(userId: string): Promise<UserRoleHierarchy> {\n    const response = await apiGet<{ success: boolean, data: UserRoleHierarchy }>(`${this.baseUrl}/hierarchy/user/${userId}`);\n    return response.data;\n  }\n\n  async getCurrentUserRoleHierarchy(): Promise<UserRoleHierarchy> {\n    const response = await apiGet<{ success: boolean, data: { data: UserRoleHierarchy } }>(`${this.baseUrl}/hierarchy/current-user`);\n    return response.data.data;\n  }\n\n  async assignRoleWithHierarchy(targetUserId: string, roleType: string): Promise<RoleAssignmentResult> {\n    const response = await apiPost(`${this.baseUrl}/hierarchy/assign`, {\n      targetUserId,\n      roleType\n    });\n    return {\n      success: response.success,\n      message: response.message,\n      assignedRole: roleType,\n      targetUserId\n    };\n  }\n\n  async assignPermissionsWithHierarchy(targetUserId: string, permissions: string[]): Promise<PermissionAssignmentResult> {\n    const response = await apiPost(`${this.baseUrl}/hierarchy/assign-permissions`, {\n      targetUserId,\n      permissions\n    });\n    return {\n      success: response.success,\n      message: response.message,\n      assignedPermissions: permissions,\n      targetUserId\n    };\n  }\n\n  async getAssignableRolesAndPermissions(roleType: string): Promise<AssignableRolesAndPermissions> {\n    const encodedRoleType = encodeURIComponent(roleType);\n    const response = await apiGet(`${this.baseUrl}/hierarchy/assignable/${encodedRoleType}`);\n    return response.data;\n  }\n\n  async getVisibleRoles(): Promise<RoleHierarchy> {\n    const response = await apiGet(`${this.baseUrl}/hierarchy/visible`);\n    return response.data;\n  }\n\n  async moveRoleInHierarchy(roleType: string, newLevel: number, newParentRoleType?: string): Promise<any> {\n    const response = await apiPut(`${this.baseUrl}/hierarchy/move`, {\n      roleType,\n      newLevel,\n      newParentRoleType\n    });\n    return response.data;\n  }\n}\n\nexport const rolesService = new RolesService();\n\n// Export the class itself\nexport { RolesService };\n\n// Export individual functions for backward compatibility\nexport const getRoles = () => rolesService.getAll();\nexport const getRole = (roleType: string) => rolesService.getById(roleType);\nexport const createRole = (role: { name: string; description: string; permissions?: string[] }) => rolesService.create(role);\nexport const updateRole = (roleType: string, role: { name: string; description: string; permissions?: string[] }) => rolesService.update(roleType, role);\nexport const deleteRole = (roleType: string) => rolesService.delete(roleType);\nexport const getPermissions = () => rolesService.getPermissions();\nexport const getRolePermissions = (roleType: string) => rolesService.getRolePermissions(roleType);\nexport const updateRolePermissions = (roleType: string, permissions: RolePermissionUpdate) => rolesService.updateRolePermissions(roleType, permissions);\nexport const updateSystemRolePermissions = (roleType: string, permissions: Array<{\n  permissionId: string;\n  granted: boolean;\n  scope?: string;\n  tenantIds?: string[];\n  fieldRestrictions?: string[];\n}>) => rolesService.updateSystemRolePermissions(roleType, permissions);\nexport const getPersonsByRole = (roleType: string) => rolesService.getPersonsByRole(roleType);\nexport const assignRole = (personId: number, roleType: string) => rolesService.assignRole(personId, roleType);\nexport const removeRole = (personId: number, roleType: string) => rolesService.removeRole(personId, roleType);\n\n// Export new hierarchy functions\nexport const getRoleHierarchy = () => rolesService.getRoleHierarchy();\nexport const getUserRoleHierarchy = (userId: string) => rolesService.getUserRoleHierarchy(userId);\nexport const getCurrentUserRoleHierarchy = () => rolesService.getCurrentUserRoleHierarchy();\nexport const assignRoleWithHierarchy = (targetUserId: string, roleType: string) => rolesService.assignRoleWithHierarchy(targetUserId, roleType);\nexport const assignPermissionsWithHierarchy = (targetUserId: string, permissions: string[]) => rolesService.assignPermissionsWithHierarchy(targetUserId, permissions);\nexport const getAssignableRolesAndPermissions = (roleType: string) => rolesService.getAssignableRolesAndPermissions(roleType);\nexport const getVisibleRoles = () => rolesService.getVisibleRoles();\nexport const moveRoleInHierarchy = (roleType: string, newLevel: number, newParentRoleType?: string) => rolesService.moveRoleInHierarchy(roleType, newLevel, newParentRoleType);\n\nexport type { \n  Role, \n  Person, \n  Permission, \n  RolePermissionUpdate,\n  RoleHierarchy,\n  RoleHierarchyLevel,\n  UserRoleHierarchy,\n  RoleAssignmentResult,\n  PermissionAssignmentResult,\n  AssignableRolesAndPermissions\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/scheduleService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'API_BASE_URL' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[824,827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[824,827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1143,1146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1143,1146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1782,1785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1782,1785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2054,2057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2054,2057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet, apiDelete } from './api';\nimport { API_ENDPOINTS, API_BASE_URL } from '../config/api';\n\n/**\n * Schedule service for managing course schedules\n */\nconst scheduleService = {\n  /**\n   * Get all schedules\n   */\n  async getAllSchedules() {\n    try {\n      const data = await apiGet(`${API_ENDPOINTS.SCHEDULES}`);\n      return data;\n    } catch (error) {\n      console.error('Error fetching schedules:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get schedule by ID\n   */\n  async getScheduleById(id: string) {\n    try {\n      const data = await apiGet(`${API_ENDPOINTS.SCHEDULE_BY_ID(id)}`);\n      return data;\n    } catch (error) {\n      console.error(`Error fetching schedule ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Create a new schedule\n   */\n  async createSchedule(scheduleData: any) {\n    try {\n      const data = await apiPost(`${API_ENDPOINTS.SCHEDULES}`, scheduleData);\n      return data;\n    } catch (error) {\n      console.error('Error creating schedule:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Update an existing schedule\n   */\n  async updateSchedule(id: string, scheduleData: any) {\n    try {\n      const data = await apiPut(`${API_ENDPOINTS.SCHEDULE_BY_ID(id)}`, scheduleData);\n      return data;\n    } catch (error) {\n      console.error(`Error updating schedule ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Delete a schedule\n   */\n  async deleteSchedule(id: string) {\n    try {\n      const data = await apiDelete(`${API_ENDPOINTS.SCHEDULE_BY_ID(id)}`);\n      return data;\n    } catch (error) {\n      console.error(`Error deleting schedule ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get employees by company IDs\n   */\n  async getEmployeesByCompany(companyIds: string[]): Promise<any[]> {\n    try {\n      // Get all employees and filter client-side\n      // This is more reliable than using a potentially missing endpoint\n      console.log(`Getting all employees and filtering for companies: ${companyIds.join(', ')}`);\n      const data = await apiGet<any[]>('/employees');\n      \n      if (!data || !Array.isArray(data)) {\n        console.warn('Invalid response from employees endpoint:', data);\n        return [];\n      }\n      \n      // Filter employees by company ID\n      const filteredEmployees = data.filter(emp => {\n        // Convert IDs to string for comparison\n        const employeeCompanyId = String(emp.companyId || emp.company_id || (emp.company && emp.company.id) || '');\n        return companyIds.some(id => String(id) === employeeCompanyId);\n      });\n      \n      console.log(`Found ${filteredEmployees.length} employees for the selected companies`);\n      return filteredEmployees;\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      return [];\n    }\n  }\n};\n\nexport default scheduleService;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/serviceFactory.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'apiDeleteWithPayload' is defined but never used.","line":1,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[616,619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[616,619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[640,643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[640,643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet, apiDelete, apiDeleteWithPayload } from './api';\n\ninterface ServiceMethods<T, C, U> {\n  getAll: () => Promise<T[]>;\n  getById: (id: string) => Promise<T>;\n  create: (data: C) => Promise<T>;\n  update: (id: string, data: U) => Promise<T>;\n  delete: (id: string) => Promise<void>;\n  deleteMultiple: (ids: string[]) => Promise<void>;\n  extend: <E>(methods: E) => ServiceMethods<T, C, U> & E;\n}\n\n/**\n * Factory per creare servizi REST standard\n * @param basePath - Path base dell'API (es. '/users')\n * @returns Un oggetto con i metodi CRUD standard\n */\nexport const createService = <T, C extends object = any, U extends object = any>(basePath: string): ServiceMethods<T, C, U> => {\n  const baseService = {\n    getAll: async (): Promise<T[]> => {\n      return await apiGet<T[]>(basePath);\n    },\n\n    getById: async (id: string): Promise<T> => {\n      return await apiGet<T>(`${basePath}/${id}`);\n    },\n\n    create: async (data: C): Promise<T> => {\n      return await apiPost<T>(basePath, data);\n    },\n\n    update: async (id: string, data: U): Promise<T> => {\n      return await apiPut<T>(`${basePath}/${id}`, data);\n    },\n\n    delete: async (id: string): Promise<void> => {\n      return await apiDelete(`${basePath}/${id}`);\n    },\n\n    deleteMultiple: async (ids: string[]): Promise<void> => {\n      const deletePromises = ids.map(id => {\n        return apiDelete(`${basePath}/${id}`);\n      });\n      \n      await Promise.all(deletePromises);\n    },\n\n    extend: function <E>(methods: E): ServiceMethods<T, C, U> & E {\n      return { ...this, ...methods };\n    }\n  };\n\n  return baseService;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/tenants.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[179,182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[179,182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[198,201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[198,201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[325,328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[325,328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[463,466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[463,466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1007,1010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1007,1010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1367,1370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1367,1370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1693,1696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1693,1696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2057,2060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2057,2060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2449,2452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2449,2452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2761,2764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2761,2764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3127,3130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3127,3130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3463,3466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3463,3466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3860,3863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3860,3863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4262,4265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4262,4265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Company } from '../types';\nimport apiClient from './api';\n\n// Types\ninterface TenantCurrentResponse {\n  success: boolean;\n  data: {\n    tenant: Company;\n    statistics?: any;\n    billing?: any;\n  };\n}\n\nexport interface TenantCreateDTO {\n  name: string;\n  slug: string;\n  domain?: string;\n  settings?: Record<string, any>;\n  subscription_plan?: string;\n}\n\nexport interface TenantUpdateDTO {\n  name?: string;\n  domain?: string;\n  settings?: Record<string, any>;\n  subscription_plan?: string;\n  is_active?: boolean;\n}\n\nexport interface TenantUsage {\n  userCount: number;\n  companyCount: number;\n  storageUsed: number;\n  apiCallsCount: number;\n}\n\n// API Functions\nexport const getCurrentTenant = async (): Promise<Company> => {\n  try {\n    const response = await apiClient.get<TenantCurrentResponse>('/tenants/current');\n    // L'endpoint restituisce { success: true, data: { tenant: {...} } }\n    // Estraiamo il tenant dalla struttura annidata\n    return response.data.data.tenant;\n  } catch (error: any) {\n    console.error('Error fetching current tenant:', error);\n    throw new Error(error.response?.data?.message || 'Errore nel caricamento del tenant');\n  }\n};\n\nexport const getTenantById = async (tenantId: string): Promise<Company> => {\n  try {\n    const response = await apiClient.get(`/tenant/${tenantId}`);\n    return response.data;\n  } catch (error: any) {\n    console.error('Error fetching tenant:', error);\n    throw new Error(error.response?.data?.message || 'Errore nel caricamento del tenant');\n  }\n};\n\nexport const getAllTenants = async (): Promise<Company[]> => {\n  try {\n    const response = await apiClient.get('/tenant');\n    return response.data;\n  } catch (error: any) {\n    console.error('Error fetching tenants:', error);\n    throw new Error(error.response?.data?.message || 'Errore nel caricamento dei tenant');\n  }\n};\n\nexport const createTenant = async (tenantData: TenantCreateDTO): Promise<Company> => {\n  try {\n    const response = await apiClient.post('/tenant', tenantData);\n    return response.data;\n  } catch (error: any) {\n    console.error('Error creating tenant:', error);\n    throw new Error(error.response?.data?.message || 'Errore nella creazione del tenant');\n  }\n};\n\nexport const updateTenant = async (tenantId: string, tenantData: TenantUpdateDTO): Promise<Company> => {\n  try {\n    const response = await apiClient.put(`/tenant/${tenantId}`, tenantData);\n    return response.data;\n  } catch (error: any) {\n    console.error('Error updating tenant:', error);\n    throw new Error(error.response?.data?.message || 'Errore nell\\'aggiornamento del tenant');\n  }\n};\n\nexport const deleteTenant = async (tenantId: string): Promise<void> => {\n  try {\n    await apiClient.delete(`/tenant/${tenantId}`);\n  } catch (error: any) {\n    console.error('Error deleting tenant:', error);\n    throw new Error(error.response?.data?.message || 'Errore nell\\'eliminazione del tenant');\n  }\n};\n\nexport const getTenantUsage = async (tenantId: string): Promise<TenantUsage> => {\n  try {\n    const response = await apiClient.get(`/tenant/${tenantId}/usage`);\n    return response.data;\n  } catch (error: any) {\n    console.error('Error fetching tenant usage:', error);\n    throw new Error(error.response?.data?.message || 'Errore nel caricamento dell\\'utilizzo del tenant');\n  }\n};\n\nexport const switchTenant = async (tenantId: string): Promise<void> => {\n  try {\n    await apiClient.post('/tenant/switch', { tenantId });\n  } catch (error: any) {\n    console.error('Error switching tenant:', error);\n    throw new Error(error.response?.data?.message || 'Errore nel cambio tenant');\n  }\n};\n\nexport const validateTenantDomain = async (domain: string): Promise<{ isValid: boolean; message?: string }> => {\n  try {\n    const response = await apiClient.post('/tenant/validate-domain', { domain });\n    return response.data;\n  } catch (error: any) {\n    console.error('Error validating domain:', error);\n    throw new Error(error.response?.data?.message || 'Errore nella validazione del dominio');\n  }\n};\n\nexport const validateTenantSlug = async (slug: string): Promise<{ isValid: boolean; message?: string }> => {\n  try {\n    const response = await apiClient.post('/tenant/validate-slug', { slug });\n    return response.data;\n  } catch (error: any) {\n    console.error('Error validating slug:', error);\n    throw new Error(error.response?.data?.message || 'Errore nella validazione dello slug');\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/trainers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2527,2530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2527,2530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2584,2587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2584,2587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2981,2984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2981,2984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3040,3043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3040,3043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3531,3534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3531,3534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3590,3593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3590,3593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4079,4082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4079,4082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4138,4141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4138,4141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4668,4671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4668,4671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4727,4730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4727,4730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiGet, apiDelete } from './api';\nimport { Person, CreatePersonDTO, UpdatePersonDTO, PersonsFilters, PersonsResponse } from './persons';\n\nexport interface Trainer extends Person {\n  specialties: string[];\n  certifications: string[];\n  status: 'ACTIVE' | 'INACTIVE';\n  specialization?: string;\n}\n\nexport interface CreateTrainerDTO extends Omit<CreatePersonDTO, 'roleType'> {\n  specialties?: string[];\n  certifications?: string[];\n  specialization?: string;\n  status?: 'ACTIVE' | 'INACTIVE';\n}\n\nexport interface UpdateTrainerDTO extends Omit<UpdatePersonDTO, 'roleType'> {\n  specialties?: string[];\n  certifications?: string[];\n  specialization?: string;\n  status?: 'ACTIVE' | 'INACTIVE';\n}\n\nexport interface TrainersFilters extends Omit<PersonsFilters, 'roleType'> {\n  specialization?: string;\n  specialty?: string;\n  certification?: string;\n  status?: 'ACTIVE' | 'INACTIVE';\n}\n\nexport interface TrainersResponse extends Omit<PersonsResponse, 'persons'> {\n  trainers: Trainer[];\n}\n\nexport class TrainersService {\n  /**\n   * Ottiene la lista dei formatori con filtri e paginazione\n   */\n  static async getTrainers(filters: TrainersFilters = {}): Promise<Trainer[]> {\n    const params = new URLSearchParams();\n    \n    // Forza il roleType a TRAINER\n    params.append('roleType', 'TRAINER');\n    \n    // Imposta ordinamento di default per nome\n    const sortBy = filters.sortBy || 'firstName';\n    const sortOrder = filters.sortOrder || 'asc';\n    \n    params.append('sortBy', sortBy);\n    params.append('sortOrder', sortOrder);\n    \n    if (filters.isActive !== undefined) params.append('isActive', filters.isActive.toString());\n    if (filters.companyId) params.append('companyId', filters.companyId.toString());\n    if (filters.search) params.append('search', filters.search);\n    if (filters.page) params.append('page', filters.page.toString());\n    if (filters.limit) params.append('limit', filters.limit.toString());\n    if (filters.specialization) params.append('specialization', filters.specialization);\n    if (filters.specialty) params.append('specialty', filters.specialty);\n    if (filters.certification) params.append('certification', filters.certification);\n    if (filters.status) params.append('status', filters.status);\n    \n    const response = await apiGet(`/api/v1/persons?${params.toString()}`) as PersonsResponse;\n    \n    // Trasforma i dati per includere i campi specifici dei trainer\n    const trainers = response.persons.map((person: Person) => ({\n      ...person,\n      specialties: (person as any).specialties || [],\n      certifications: (person as any).certifications || [],\n      status: person.isActive ? 'ACTIVE' : 'INACTIVE' as 'ACTIVE' | 'INACTIVE'\n    }));\n    \n    return trainers;\n  }\n\n  /**\n   * Ottiene un formatore specifico per ID\n   */\n  static async getTrainerById(id: string): Promise<Trainer> {\n    const response = await apiGet(`/api/v1/persons/${id}`) as Person;\n    return {\n      ...response,\n      specialties: (response as any).specialties || [],\n      certifications: (response as any).certifications || [],\n      status: response.isActive ? 'ACTIVE' : 'INACTIVE'\n    };\n  }\n\n  /**\n   * Crea un nuovo formatore\n   */\n  static async createTrainer(trainerData: CreateTrainerDTO): Promise<Trainer> {\n    const personData = {\n      ...trainerData,\n      roleType: 'TRAINER',\n      isActive: trainerData.status === 'ACTIVE'\n    };\n    \n    const response = await apiPost('/api/v1/persons', personData) as Person;\n    return {\n      ...response,\n      specialties: (response as any).specialties || [],\n      certifications: (response as any).certifications || [],\n      status: response.isActive ? 'ACTIVE' : 'INACTIVE'\n    };\n  }\n\n  /**\n   * Aggiorna un formatore esistente\n   */\n  static async updateTrainer(id: string, trainerData: UpdateTrainerDTO): Promise<Trainer> {\n    const personData = {\n      ...trainerData,\n      isActive: trainerData.status === 'ACTIVE'\n    };\n    \n    const response = await apiPut(`/api/v1/persons/${id}`, personData) as Person;\n    return {\n      ...response,\n      specialties: (response as any).specialties || [],\n      certifications: (response as any).certifications || [],\n      status: response.isActive ? 'ACTIVE' : 'INACTIVE'\n    };\n  }\n\n  /**\n   * Elimina un formatore\n   */\n  static async deleteTrainer(id: string): Promise<void> {\n    await apiDelete(`/api/v1/persons/${id}`);\n  }\n\n  /**\n   * Attiva/disattiva un formatore\n   */\n  static async toggleTrainerStatus(id: string, isActive: boolean): Promise<Trainer> {\n    const response = await apiPut(`/api/v1/persons/${id}/status`, { isActive }) as Person;\n    return {\n      ...response,\n      specialties: (response as any).specialties || [],\n      certifications: (response as any).certifications || [],\n      status: response.isActive ? 'ACTIVE' : 'INACTIVE'\n    };\n  }\n\n  /**\n   * Ottiene le statistiche dei formatori\n   */\n  static async getTrainerStats(): Promise<{\n    total: number;\n    active: number;\n    inactive: number;\n    bySpecialization: Record<string, number>;\n    bySpecialty: Record<string, number>;\n  }> {\n    const response = await apiGet('/api/v1/persons/stats?roleType=TRAINER') as {\n      total: number;\n      active: number;\n      inactive: number;\n      bySpecialization: Record<string, number>;\n      bySpecialty: Record<string, number>;\n    };\n    return response;\n  }\n\n  /**\n   * Esporta la lista dei formatori in formato CSV\n   */\n  static async exportTrainers(filters: TrainersFilters = {}): Promise<Blob> {\n    const params = new URLSearchParams();\n    \n    params.append('roleType', 'TRAINER');\n    \n    if (filters.isActive !== undefined) params.append('isActive', filters.isActive.toString());\n    if (filters.companyId) params.append('companyId', filters.companyId.toString());\n    if (filters.search) params.append('search', filters.search);\n    if (filters.specialization) params.append('specialization', filters.specialization);\n    if (filters.specialty) params.append('specialty', filters.specialty);\n    if (filters.certification) params.append('certification', filters.certification);\n    if (filters.status) params.append('status', filters.status);\n    \n    const response = await apiGet(`/api/v1/persons/export?${params.toString()}`, {\n      responseType: 'blob'\n    }) as Blob;\n    return response;\n  }\n\n  /**\n   * Importa formatori da file CSV\n   */\n  static async importTrainers(file: File): Promise<{\n    imported: number;\n    errors: Array<{ row: number; error: string }>;\n  }> {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('roleType', 'TRAINER');\n    \n    const response = await apiPost('/api/v1/persons/import', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response;\n  }\n}\n\n// Funzioni di utilità per compatibilità con il codice esistente\nexport const getTrainers = TrainersService.getTrainers;\nexport const getTrainerById = TrainersService.getTrainerById;\nexport const createTrainer = TrainersService.createTrainer;\nexport const updateTrainer = TrainersService.updateTrainer;\nexport const deleteTrainer = TrainersService.deleteTrainer;\nexport const toggleTrainerStatus = TrainersService.toggleTrainerStatus;\nexport const getTrainerStats = TrainersService.getTrainerStats;\nexport const exportTrainers = TrainersService.exportTrainers;\nexport const importTrainers = TrainersService.importTrainers;\n\nexport default TrainersService;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/useFetch.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'API_BASE_URL' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[214,217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[214,217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[967,970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[967,970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1155,1158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1155,1158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":69,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2648,2651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2648,2651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { apiGet } from './api';\nimport { API_BASE_URL } from '../config/api';\n\n// Tipizzazione per i dati mock\ninterface MockData {\n  attestati: any[];\n  [key: string]: any[];\n}\n\n// Dati mock per vari tipi di entità\nconst MOCK_DATA: MockData = {\n  'attestati': [\n    {\n      id: \"mock-1\",\n      scheduledCourseId: \"mock-course-1\",\n      partecipanteId: \"mock-employee-1\",\n      nomeFile: \"attestato_mock.pdf\",\n      url: \"/uploads/attestati/attestato_mock.pdf\",\n      dataGenerazione: new Date().toISOString(),\n      numeroProgressivo: 1,\n      annoProgressivo: 2023,\n      partecipante: {\n        id: \"mock-employee-1\",\n        first_name: \"Mario\",\n        last_name: \"Rossi\"\n      },\n      scheduledCourse: {\n        id: \"mock-course-1\",\n        title: \"Corso di Sicurezza Base\"\n      }\n    }\n  ]\n};\n\n/**\n * Trasforma le chiavi in snake_case in camelCase per compatibilità\n */\nfunction normalizeResponseData(data: any): any {\n  if (Array.isArray(data)) {\n    return data.map(item => normalizeResponseData(item));\n  }\n  \n  if (data !== null && typeof data === 'object') {\n    const normalized: Record<string, any> = {};\n    \n    for (const [key, value] of Object.entries(data)) {\n      // Converti da snake_case a camelCase\n      const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n      \n      // Normalizza anche i valori nidificati\n      normalized[camelKey] = normalizeResponseData(value);\n      \n      // Mantieni anche la chiave originale per retrocompatibilità\n      if (camelKey !== key) {\n        normalized[key] = normalizeResponseData(value);\n      }\n    }\n    \n    return normalized;\n  }\n  \n  return data;\n}\n\n/**\n * Custom hook per gestire le chiamate API con caching opzionale\n */\nexport function useFetch<T>(url: string, options?: { cache?: boolean, defaultValue?: T }) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    \n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Costruisci l'URL completo se è relativo\n        const fullUrl = url.startsWith('http') ? url : url;\n        const responseData = await apiGet(fullUrl);\n        \n        if (isMounted) {\n          // Normalizza i dati per gestire sia snake_case che camelCase\n          const normalizedData = normalizeResponseData(responseData);\n          \n          // Cast esplicito a T per evitare errori di tipo\n          setData(normalizedData as T);\n        }\n      } catch (err: any) {\n        if (isMounted) {\n          console.error(\"Fetch error:\", err);\n          setError(new Error(`Error: ${err.message}`));\n          \n          // Se l'URL contiene un path che corrisponde a uno dei nostri mock data\n          // Cerca il path nel MOCK_DATA\n          const pathMatch = Object.keys(MOCK_DATA).find(path => url.includes(path));\n          if (pathMatch) {\n            console.warn(`Utilizzando dati mock per ${pathMatch}`);\n            // Cast esplicito a T per evitare errori di tipo\n            setData(MOCK_DATA[pathMatch] as unknown as T);\n          }\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [url]);\n\n  return { data, loading, error };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/userPreferences.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[497,500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[497,500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servizi per la gestione delle preferenze utente\n * Utilizza localStorage per persistenza locale\n */\n\n// Tipi di preferenze supportate\ntype PreferenceType = 'viewMode' | 'columnWidths' | 'hiddenColumns' | 'columnOrder';\n\n/**\n * Salva una preferenza utente in localStorage\n * @param section La sezione/pagina di riferimento\n * @param type Il tipo di preferenza\n * @param value Il valore da salvare\n */\nexport const savePreference = async (\n  section: string,\n  type: PreferenceType,\n  value: any\n): Promise<void> => {\n  try {\n    const key = `${section}-${type}`;\n    localStorage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  } catch (error) {\n    console.error('Error saving user preference to localStorage:', error);\n    return Promise.reject(error);\n  }\n};\n\n/**\n * Recupera una preferenza utente da localStorage\n * @param section La sezione/pagina di riferimento\n * @param type Il tipo di preferenza \n * @returns Il valore della preferenza o undefined se non trovato\n */\nexport const getPreference = async <T>(\n  section: string,\n  type: PreferenceType\n): Promise<T | undefined> => {\n  try {\n    const key = `${section}-${type}`;\n    const value = localStorage.getItem(key);\n    return value ? JSON.parse(value) : undefined;\n  } catch (error) {\n    console.error('Error loading user preference from localStorage:', error);\n    return undefined;\n  }\n};\n\n/**\n * Salva la modalità di visualizzazione per una sezione\n * @param section Nome della sezione/pagina\n * @param mode Modalità di visualizzazione ('table' o 'grid')\n */\nexport const saveViewMode = async (\n  section: string,\n  mode: 'table' | 'grid'\n): Promise<void> => {\n  return savePreference(section, 'viewMode', mode);\n};\n\n/**\n * Recupera la modalità di visualizzazione per una sezione\n * @param section Nome della sezione/pagina\n * @returns La modalità di visualizzazione o 'table' come default\n */\nexport const getViewMode = async (\n  section: string\n): Promise<'table' | 'grid'> => {\n  const mode = await getPreference<'table' | 'grid'>(section, 'viewMode');\n  return mode || 'table';\n};\n\n/**\n * Salva le larghezze delle colonne di una tabella\n * @param tableName Nome della tabella\n * @param widths Oggetto con le larghezze delle colonne\n */\nexport const saveTableWidths = async (\n  tableName: string,\n  widths: Record<string, number>\n): Promise<void> => {\n  return savePreference(tableName, 'columnWidths', widths);\n};\n\n/**\n * Recupera le larghezze delle colonne di una tabella\n * @param tableName Nome della tabella\n * @returns Oggetto con le larghezze delle colonne o oggetto vuoto\n */\nexport const getTableWidths = async (\n  tableName: string\n): Promise<Record<string, number>> => {\n  const widths = await getPreference<Record<string, number>>(tableName, 'columnWidths');\n  return widths || {};\n};\n\n/**\n * Salva le colonne nascoste di una tabella\n * @param tableName Nome della tabella\n * @param hiddenColumns Array con le chiavi delle colonne nascoste\n */\nexport const saveHiddenColumns = async (\n  tableName: string,\n  hiddenColumns: string[]\n): Promise<void> => {\n  return savePreference(tableName, 'hiddenColumns', hiddenColumns);\n};\n\n/**\n * Recupera le colonne nascoste di una tabella\n * @param tableName Nome della tabella\n * @returns Array con le chiavi delle colonne nascoste o array vuoto\n */\nexport const getHiddenColumns = async (\n  tableName: string\n): Promise<string[]> => {\n  const columns = await getPreference<string[]>(tableName, 'hiddenColumns');\n  return columns || [];\n};\n\n/**\n * Salva l'ordine delle colonne di una tabella\n * @param tableName Nome della tabella\n * @param columnOrder Oggetto con l'ordine delle colonne\n */\nexport const saveColumnOrder = async (\n  tableName: string,\n  columnOrder: Record<string, number>\n): Promise<void> => {\n  return savePreference(tableName, 'columnOrder', columnOrder);\n};\n\n/**\n * Recupera l'ordine delle colonne di una tabella\n * @param tableName Nome della tabella\n * @returns Oggetto con l'ordine delle colonne o oggetto vuoto\n */\nexport const getColumnOrder = async (\n  tableName: string\n): Promise<Record<string, number>> => {\n  const order = await getPreference<Record<string, number>>(tableName, 'columnOrder');\n  return order || {};\n};\n\n/**\n * Salva le preferenze della tabella (metodo unificato)\n */\nexport const saveTablePreferences = async (\n  tableName: string, \n  preferences: {\n    columnWidths?: Record<string, number>;\n    hiddenColumns?: string[];\n    columnOrder?: Record<string, number>;\n  }\n): Promise<void> => {\n  const promises: Promise<void>[] = [];\n  \n  if (preferences.columnWidths) {\n    promises.push(saveTableWidths(tableName, preferences.columnWidths));\n  }\n  \n  if (preferences.hiddenColumns) {\n    promises.push(saveHiddenColumns(tableName, preferences.hiddenColumns));\n  }\n  \n  if (preferences.columnOrder) {\n    promises.push(saveColumnOrder(tableName, preferences.columnOrder));\n  }\n  \n  await Promise.all(promises);\n};\n\n/**\n * Carica tutte le preferenze della tabella (metodo unificato)\n */\nexport const loadTablePreferences = async (\n  tableName: string\n): Promise<{\n  columnWidths: Record<string, number>;\n  hiddenColumns: string[];\n  columnOrder: Record<string, number>;\n}> => {\n  const [columnWidths, hiddenColumns, columnOrder] = await Promise.all([\n    getTableWidths(tableName),\n    getHiddenColumns(tableName),\n    getColumnOrder(tableName)\n  ]);\n  \n  return {\n    columnWidths,\n    hiddenColumns,\n    columnOrder\n  };\n};\n\n/**\n * Hook per utilizzare le preferenze della tabella\n * @param tableName Nome della tabella\n */\nexport const useTablePreferences = (tableName: string) => {\n  return {\n    savePreferences: (preferences: {\n      columnWidths?: Record<string, number>;\n      hiddenColumns?: string[];\n      columnOrder?: Record<string, number>;\n    }) => saveTablePreferences(tableName, preferences),\n    \n    loadPreferences: () => loadTablePreferences(tableName)\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/services/users.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/stories/pages/WorkWithUsPage.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/GDPREntityConfig.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[552,555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[552,555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3084,3087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3084,3087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5966,5969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5966,5969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8334,8337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8334,8337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":316,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8756,8759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8756,8759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":322,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8903,8906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8903,8906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":343,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9426,9429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9426,9429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { DataTableColumn } from '../../components/shared/tables/DataTable';\nimport { GDPREntityTemplateProps } from './GDPREntityTemplate';\nimport { Company } from '../../types';\nimport { \n  Award,\n  Clock,\n  Download,\n  Edit,\n  Euro,\n  Eye,\n  FileText,\n  Trash2,\n  Users\n} from 'lucide-react';\n\n/**\n * Configurazioni predefinite per il template GDPR Entity\n * Fornisce configurazioni complete per entità comuni del sistema\n */\n\n// Tipo per configurazioni con campi obbligatori\ntype GDPREntityConfig<T extends Record<string, any> & { id: string }> = \n  Omit<GDPREntityTemplateProps<T>, 'columns'> & {\n    columns?: DataTableColumn<T>[];\n  };\n\n// Configurazione per Companies\nexport const companiesConfig: GDPREntityConfig<Company> = {\n  entityName: 'company',\n  entityNamePlural: 'companies',\n  entityDisplayName: 'Azienda',\n  entityDisplayNamePlural: 'Aziende',\n  readPermission: 'companies.read',\n  writePermission: 'companies.write',\n  deletePermission: 'companies.delete',\n  exportPermission: 'companies.export',\n  apiEndpoint: '/api/v1/companies',\n  searchFields: ['ragioneSociale', 'citta', 'piva', 'mail', 'personaRiferimento'] as (keyof Company)[],\n  filterOptions: [\n      {\n        key: 'status',\n        label: 'Stato',\n        options: [\n          { label: 'Attiva', value: 'Active' },\n          { label: 'Inattiva', value: 'Inactive' }\n        ]\n      },\n      {\n        key: 'province',\n        label: 'Provincia',\n        options: [] // Sarà popolato dinamicamente\n      }\n    ],\n  sortOptions: [\n    { key: 'ragioneSociale', label: 'Nome (A-Z)' },\n    { key: 'ragioneSociale', label: 'Nome (Z-A)' },\n    { key: 'citta', label: 'Città (A-Z)' },\n    { key: 'citta', label: 'Città (Z-A)' }\n  ],\n  csvHeaders: {\n    'ragioneSociale': 'Nome Azienda',\n    'sedeAzienda': 'Indirizzo',\n    'citta': 'Città',\n    'provincia': 'Provincia',\n    'piva': 'P.IVA',\n    'mail': 'Email',\n    'telefono': 'Telefono',\n    'personaRiferimento': 'Persona di Contatto',\n    'status': 'Stato'\n  },\n  csvTemplateData: [{\n    'Nome Azienda': 'Esempio S.r.l.',\n    'Indirizzo': 'Via Roma 123',\n    'Città': 'Milano',\n    'Provincia': 'MI',\n    'P.IVA': '12345678901',\n    'Email': 'info@esempio.it',\n    'Telefono': '+39 02 1234567',\n    'Persona di Contatto': 'Mario Rossi',\n    'Stato': 'ACTIVE'\n  }],\n  cardConfig: {\n    titleField: 'ragioneSociale',\n    subtitleField: 'citta',\n    badgeField: 'status',\n    descriptionField: 'sedeAzienda',\n    additionalFields: [\n      {\n        key: 'piva',\n        label: 'P.IVA',\n        icon: <FileText className=\"h-3.5 w-3.5\" />\n      },\n      {\n        key: 'mail',\n        label: 'Email',\n        icon: <FileText className=\"h-3.5 w-3.5\" />\n      },\n      {\n        key: 'telefono',\n        label: 'Telefono',\n        icon: <FileText className=\"h-3.5 w-3.5\" />\n      }\n    ]\n  },\n  enableBatchOperations: true,\n  enableImportExport: true,\n  enableColumnSelector: true,\n  enableAdvancedFilters: true,\n  defaultViewMode: 'table'\n};\n\n// Configurazione per Courses\nexport const coursesConfig: Partial<GDPREntityTemplateProps<any>> = {\n  entityName: 'course',\n  entityNamePlural: 'courses',\n  entityDisplayName: 'Corso',\n  entityDisplayNamePlural: 'Corsi',\n  readPermission: 'courses.read',\n  writePermission: 'courses.write',\n  deletePermission: 'courses.delete',\n  exportPermission: 'courses.export',\n  apiEndpoint: '/api/v1/courses',\n  searchFields: ['title', 'description', 'category', 'code'],\n  filterOptions: [\n      {\n        key: 'category',\n        label: 'Categoria',\n        options: [] // Sarà popolato dinamicamente\n      },\n      {\n        key: 'duration',\n        label: 'Durata',\n        options: [\n          { label: '< 4 ore', value: 'short' },\n          { label: '4-8 ore', value: 'medium' },\n          { label: '> 8 ore', value: 'long' }\n        ]\n      }\n    ],\n  sortOptions: [\n    { key: 'title', label: 'Titolo (A-Z)' },\n    { key: 'title', label: 'Titolo (Z-A)' },\n    { key: 'duration', label: 'Durata (crescente)' },\n    { key: 'duration', label: 'Durata (decrescente)' }\n  ],\n  csvHeaders: {\n    'title': 'Corso',\n    'code': 'Codice',\n    'category': 'Categoria',\n    'duration': 'DurataCorso',\n    'validityYears': 'AnniValidita',\n    'renewalDuration': 'DurataCorsoAggiornamento',\n    'pricePerPerson': 'EuroPersona',\n    'certifications': 'Certificazioni',\n    'maxPeople': 'MaxPersone',\n    'regulation': 'Normativa',\n    'contents': 'Contenuti',\n    'description': 'Descrizione'\n  },\n  csvTemplateData: [{\n    'Corso': 'Nome del corso',\n    'Codice': 'ABC123',\n    'Categoria': 'Categoria corso',\n    'DurataCorso': '8',\n    'AnniValidita': '5',\n    'DurataCorsoAggiornamento': '4',\n    'EuroPersona': '150',\n    'Certificazioni': 'Tipo certificazione',\n    'MaxPersone': '20',\n    'Normativa': 'Riferimento normativo',\n    'Contenuti': 'Descrizione contenuti',\n    'Descrizione': 'Descrizione dettagliata'\n  }],\n  cardConfig: {\n    titleField: 'title',\n    subtitleField: 'category',\n    badgeField: 'code',\n    descriptionField: 'description',\n    additionalFields: [\n      {\n        key: 'duration',\n        label: 'Durata',\n        icon: <Clock className=\"h-3.5 w-3.5\" />,\n        formatter: (value) => `${value} ore`\n      },\n      {\n        key: 'validityYears',\n        label: 'Validità',\n        icon: <Award className=\"h-3.5 w-3.5\" />,\n        formatter: (value) => `${value} anni`\n      },\n      {\n        key: 'pricePerPerson',\n        label: 'Prezzo',\n        icon: <Euro className=\"h-3.5 w-3.5\" />,\n        formatter: (value) => `€${Number(value).toFixed(2)}`\n      },\n      {\n        key: 'maxPeople',\n        label: 'Max Persone',\n        icon: <Users className=\"h-3.5 w-3.5\" />\n      }\n    ]\n  },\n  enableBatchOperations: true,\n  enableImportExport: true,\n  enableColumnSelector: true,\n  enableAdvancedFilters: true,\n  defaultViewMode: 'table'\n};\n\n// Configurazione per Employees\nexport const employeesConfig: Partial<GDPREntityTemplateProps<Record<string, any> & { id: string }>> = {\n  entityName: 'employee',\n  entityNamePlural: 'employees',\n  entityDisplayName: 'Dipendente',\n  entityDisplayNamePlural: 'Dipendenti',\n  readPermission: 'employees.read',\n  writePermission: 'employees.write',\n  deletePermission: 'employees.delete',\n  exportPermission: 'employees.export',\n  apiEndpoint: '/api/v1/persons',\n  searchFields: ['firstName', 'lastName', 'email', 'fiscalCode'],\n  filterOptions: [\n      {\n        key: 'status',\n        label: 'Stato',\n        options: [\n          { label: 'Attivo', value: 'Active' },\n          { label: 'Inattivo', value: 'Inactive' }\n        ]\n      },\n      {\n        key: 'companyId',\n        label: 'Azienda',\n        options: [] // Sarà popolato dinamicamente\n      }\n    ],\n  sortOptions: [\n    { key: 'firstName', label: 'Nome (A-Z)' },\n    { key: 'firstName', label: 'Nome (Z-A)' },\n    { key: 'lastName', label: 'Cognome (A-Z)' },\n    { key: 'lastName', label: 'Cognome (Z-A)' }\n  ],\n  csvHeaders: {\n    'firstName': 'Nome',\n    'lastName': 'Cognome',\n    'email': 'Email',\n    'fiscalCode': 'Codice Fiscale',\n    'phone': 'Telefono',\n    'birthDate': 'Data di Nascita',\n    'hireDate': 'Data Assunzione',\n    'status': 'Stato'\n  },\n  csvTemplateData: [{\n    'Nome': 'Mario',\n    'Cognome': 'Rossi',\n    'Email': 'mario.rossi@esempio.it',\n    'Codice Fiscale': 'RSSMRA80A01H501Z',\n    'Telefono': '+39 333 1234567',\n    'Data di Nascita': '1980-01-01',\n    'Data Assunzione': '2020-01-15',\n    'Stato': 'Active'\n  }],\n  cardConfig: {\n    titleField: 'firstName',\n    subtitleField: 'lastName',\n    badgeField: 'status',\n    descriptionField: 'email',\n    additionalFields: [\n      {\n        key: 'fiscalCode',\n        label: 'C.F.',\n        icon: <FileText className=\"h-3.5 w-3.5\" />\n      },\n      {\n        key: 'phone',\n        label: 'Telefono',\n        icon: <FileText className=\"h-3.5 w-3.5\" />\n      },\n      {\n        key: 'hireDate',\n        label: 'Assunto',\n        icon: <FileText className=\"h-3.5 w-3.5\" />,\n        formatter: (value) => new Date(value).toLocaleDateString('it-IT')\n      }\n    ]\n  },\n  enableBatchOperations: true,\n  enableImportExport: true,\n  enableColumnSelector: true,\n  enableAdvancedFilters: true,\n  defaultViewMode: 'table'\n};\n\n/**\n * Utility per creare configurazioni personalizzate\n */\nexport function createEntityConfig<T extends Record<string, any> & { id: string }>(\n  baseConfig: Partial<GDPREntityTemplateProps<T>>\n): Partial<GDPREntityTemplateProps<T>> {\n  return {\n    enableBatchOperations: true,\n    enableImportExport: true,\n    enableColumnSelector: true,\n    enableAdvancedFilters: true,\n    defaultViewMode: 'table',\n    ...baseConfig\n  };\n}\n\n/**\n * Utility per generare colonne standard\n */\nexport function createStandardColumns<T extends Record<string, any> & { id: string }>(\n  fields: Array<{\n    key: keyof T;\n    label: string;\n    sortable?: boolean;\n    width?: number;\n    formatter?: (value: any) => React.ReactNode;\n  }>\n): DataTableColumn<T>[] {\n  return fields.map(field => ({\n    key: String(field.key),\n    label: field.label,\n    sortable: field.sortable ?? true,\n    width: field.width ?? 150,\n    renderCell: (entity: T) => {\n      const value = entity[field.key];\n      if (field.formatter) {\n        return field.formatter(value);\n      }\n      return value || '-';\n    }\n  }));\n}\n\n/**\n * Utility per generare opzioni di filtro dinamiche\n */\nexport function generateFilterOptions<T extends Record<string, any> & { id: string }>(\n  entities: T[],\n  field: keyof T,\n  label: string\n): { key: string; label: string; options: Array<{ label: string; value: string }> } {\n  const uniqueValues = Array.from(new Set(\n    entities\n      .map(entity => entity[field])\n      .filter(Boolean)\n      .map(value => String(value))\n  ));\n  \n  return {\n    key: String(field),\n    label,\n    options: uniqueValues.map(value => ({\n      label: value,\n      value: value\n    }))\n  };\n}\n\nexport default {\n  companiesConfig,\n  coursesConfig,\n  employeesConfig,\n  createEntityConfig,\n  createStandardColumns,\n  generateFilterOptions\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/GDPREntityTemplate.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1361,1364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1361,1364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2151,2154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2151,2154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2338,2341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2338,2341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2737,2740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2737,2740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3509,3512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3509,3512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setEntities' is assigned a value but never used.","line":146,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":179,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":188,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":15},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":215,"column":3,"nodeType":"Identifier","endLine":215,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":244,"column":28,"nodeType":"Identifier","endLine":244,"endColumn":35},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":297,"column":3,"nodeType":"Identifier","endLine":297,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":311,"column":46,"nodeType":"Identifier","endLine":311,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":339,"column":19,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":339,"endColumn":108},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'filteredEntities'. Either include it or remove the dependency array.","line":416,"column":6,"nodeType":"ArrayExpression","endLine":416,"endColumn":239,"suggestions":[{"desc":"Update the dependencies array to be: [columns, selectionMode, enableBatchOperations, permissions.canWrite, permissions.canDelete, permissions.canExport, enableImportExport, navigate, entityNamePlural, onEditEntity, handleDelete, onExportEntities, csvHeaders, entityName, selectedIds, handleSelect, selectAll, filteredEntities, handleSelectAll]","fix":{"range":[14250,14483],"text":"[columns, selectionMode, enableBatchOperations, permissions.canWrite, permissions.canDelete, permissions.canExport, enableImportExport, navigate, entityNamePlural, onEditEntity, handleDelete, onExportEntities, csvHeaders, entityName, selectedIds, handleSelect, selectAll, filteredEntities, handleSelectAll]"}}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":419,"column":22,"nodeType":"Identifier","endLine":419,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":455,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16004,16007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16004,16007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'navigate', 'onImportEntities', and 'permissions.canWrite'. Either include them or remove the dependency array. If 'onImportEntities' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":517,"column":6,"nodeType":"ArrayExpression","endLine":517,"endColumn":115,"suggestions":[{"desc":"Update the dependencies array to be: [permissions.canWrite, enableImportExport, entityDisplayName, onCreateEntity, navigate, entityNamePlural, onImportEntities, toast, csvTemplateData, csvHeaders]","fix":{"range":[18243,18352],"text":"[permissions.canWrite, enableImportExport, entityDisplayName, onCreateEntity, navigate, entityNamePlural, onImportEntities, toast, csvTemplateData, csvHeaders]"}}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":520,"column":24,"nodeType":"Identifier","endLine":520,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'clearSelection', 'handleDeleteSelected', 'permissions.canDelete', and 'permissions.canExport'. Either include them or remove the dependency array.","line":562,"column":6,"nodeType":"ArrayExpression","endLine":562,"endColumn":131,"suggestions":[{"desc":"Update the dependencies array to be: [permissions.canDelete, permissions.canExport, enableImportExport, handleDeleteSelected, entities, onExportEntities, selectedIds, csvHeaders, entityNamePlural, clearSelection]","fix":{"range":[19658,19783],"text":"[permissions.canDelete, permissions.canExport, enableImportExport, handleDeleteSelected, entities, onExportEntities, selectedIds, csvHeaders, entityNamePlural, clearSelection]"}}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":689,"column":19,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":689,"endColumn":108},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":843,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":843,"endColumn":54}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useGDPRPermissions } from '../../hooks/useGDPRPermissions';\nimport { useGDPREntityData } from '../../hooks/useGDPREntityData';\nimport { useGDPREntityOperations } from '../../hooks/useGDPREntityOperations';\nimport { DataTableColumn } from '../../components/shared/tables/DataTable';\nimport { SearchBar, Badge } from '../../design-system';\nimport { \n  Download,\n  Edit,\n  Eye,\n  FileText,\n  Plus,\n  Trash2,\n  Upload,\n  XCircle\n} from 'lucide-react';\nimport { ViewModeToggle } from '../../design-system/molecules/ViewModeToggle';\nimport { FilterPanel } from '../../design-system/organisms/FilterPanel';\nimport { AddEntityDropdown, ColumnSelector, BatchEditButton, ActionButton } from '../../components/ui';\nimport { exportToCsv } from '../../utils/csvExport';\n\nimport ResizableTable from '../../components/shared/ResizableTable';\nimport EntityListLayout from '../../components/layouts/EntityListLayout';\nimport { useToast } from '../../hooks/useToast';\n\n/**\n * Template GDPR-compliant unificato per la gestione di entità\n * Integra tutti i pattern e componenti delle pagine companies e courses\n * Supporta permessi avanzati, visualizzazione tabella/griglia, operazioni batch\n */\n\nexport interface GDPREntityTemplateProps<T extends Record<string, any> & { id: string }> {\n  // Configurazione entità\n  entityName: string;\n  entityNamePlural: string;\n  entityDisplayName: string;\n  entityDisplayNamePlural: string;\n  \n  // Permessi\n  readPermission: string;\n  writePermission: string;\n  deletePermission: string;\n  exportPermission?: string;\n  \n  // API endpoints\n  apiEndpoint: string;\n  \n  // Configurazione colonne\n  columns: DataTableColumn<T>[];\n  \n  // Configurazione UI\n  searchFields: (keyof T)[];\n  filterOptions?: Array<{\n        key: string;\n        label: string;\n        options: Array<{ label: string; value: string }>;\n      }>;\n  sortOptions?: Array<{ key: string; label: string }>;\n  \n  // Configurazione CSV\n  csvHeaders: Array<{ key: string; label: string }> | Record<string, string>;\n  csvTemplateData?: Record<string, any>[];\n  \n  // Handlers personalizzati\n  onCreateEntity?: () => void;\n  onEditEntity?: (entity: T) => void;\n  onDeleteEntity?: (id: string) => Promise<void>;\n  onImportEntities?: (data: any[]) => Promise<void>;\n  onExportEntities?: (entities: T[]) => void;\n  \n  // Configurazione card per vista griglia\n  cardConfig?: {\n    titleField: keyof T;\n    subtitleField?: keyof T;\n    badgeField?: keyof T;\n    descriptionField?: keyof T;\n    iconField?: keyof T;\n    additionalFields?: Array<{\n      key: keyof T;\n      label: string;\n      icon?: React.ReactNode;\n      formatter?: (value: any) => string;\n    }>;\n    // Funzioni per configurazione dinamica (compatibilità con Companies/Courses)\n    title?: (entity: T) => string;\n    subtitle?: (entity: T) => string;\n    badge?: (entity: T) => { text: string; variant: 'default' | 'secondary' | 'outline' | 'destructive' };\n    icon?: (entity: T) => React.ReactNode;\n    fields?: Array<{\n      label: string;\n      value: (entity: T) => string;\n      icon?: React.ReactNode;\n    }>;\n    description?: (entity: T) => string | undefined;\n  };\n  \n  // Configurazione avanzata\n  enableBatchOperations?: boolean;\n  enableImportExport?: boolean;\n  enableColumnSelector?: boolean;\n  enableAdvancedFilters?: boolean;\n  defaultViewMode?: 'table' | 'grid';\n}\n\nexport function GDPREntityTemplate<T extends Record<string, any> & { id: string }>({\n  entityName,\n  entityNamePlural,\n  entityDisplayName,\n  entityDisplayNamePlural,\n  readPermission,\n  writePermission,\n  deletePermission,\n  exportPermission,\n  apiEndpoint,\n  columns,\n  searchFields,\n  filterOptions = [],\n  sortOptions = [],\n  csvHeaders,\n  csvTemplateData,\n  onCreateEntity,\n  onEditEntity,\n  onDeleteEntity,\n  onImportEntities,\n  onExportEntities,\n  cardConfig,\n  enableBatchOperations = true,\n  enableImportExport = true,\n  enableColumnSelector = true,\n  enableAdvancedFilters = true,\n  defaultViewMode = 'table'\n}: GDPREntityTemplateProps<T>): JSX.Element {\n  const navigate = useNavigate();\n  \n  // Hook ottimizzati per GDPR\n  const permissions = useGDPRPermissions({\n    entityName,\n    entityNamePlural,\n    readPermission,\n    writePermission,\n    deletePermission,\n    exportPermission\n  });\n  \n  const { entities, loading, error, refetch, setEntities } = useGDPREntityData<T>({\n    apiEndpoint,\n    entityNamePlural,\n    entityDisplayNamePlural,\n    readPermission\n  });\n  \n  const operations = useGDPREntityOperations({\n    entityName,\n    entityNamePlural,\n    entityDisplayName,\n    entityDisplayNamePlural,\n    onDeleteEntity,\n    refetch\n  });\n  \n  const toast = useToast();\n  \n  // Stati per ricerca e filtri\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeFilters, setActiveFilters] = useState<Record<string, string>>({});\n  const [activeSort, setActiveSort] = useState<{ field: string, direction: 'asc' | 'desc' } | undefined>(undefined);\n  \n  // Stati per visualizzazione\n  const [viewMode, setViewMode] = useState<'table' | 'grid'>(() => {\n    return (localStorage.getItem(`${entityNamePlural}ViewMode`) as 'table' | 'grid') || defaultViewMode;\n  });\n  \n  // Stati per gestione colonne\n  const [hiddenColumns, setHiddenColumns] = useState<string[]>(() => {\n    try {\n      const saved = localStorage.getItem(`${entityNamePlural}-hidden-columns`);\n      return saved ? JSON.parse(saved) : [];\n    } catch (e) {\n      return [];\n    }\n  });\n  \n  const [columnOrder, setColumnOrder] = useState<Record<string, number>>(() => {\n    try {\n      const saved = localStorage.getItem(`${entityNamePlural}-column-order`);\n      return saved ? JSON.parse(saved) : {};\n    } catch (e) {\n      return {};\n    }\n  });\n  \n  // Funzioni di verifica permessi (per compatibilità con il codice esistente)\n  const canCreateEntity = () => permissions.canCreate;\n  const canUpdateEntity = () => permissions.canUpdate;\n  const canDeleteEntity = () => permissions.canDelete;\n  const canExportEntity = () => permissions.canExport;\n  \n  // Verifica permessi\n  if (!permissions.canRead) {\n    return (\n      <div className=\"h-64 flex flex-col justify-center items-center text-center px-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Accesso negato</h1>\n        <p className=\"text-gray-600 mb-6\">\n          Non hai i permessi necessari per accedere a questa sezione.\n        </p>\n        <p className=\"text-sm text-gray-500\">\n          Risorsa richiesta: {readPermission}\n        </p>\n      </div>\n    );\n  }\n  \n  // Salvataggio preferenze visualizzazione\n  useEffect(() => {\n    localStorage.setItem(`${entityNamePlural}ViewMode`, viewMode);\n  }, [viewMode, entityNamePlural]);\n  \n  // Gestione visibilità colonne\n  const handleColumnVisibilityChange = (newHiddenColumns: string[]) => {\n    setHiddenColumns(newHiddenColumns);\n    localStorage.setItem(`${entityNamePlural}-hidden-columns`, JSON.stringify(newHiddenColumns));\n  };\n\n  const handleColumnOrderChange = (newColumnOrder: Record<string, number>) => {\n    setColumnOrder(newColumnOrder);\n    localStorage.setItem(`${entityNamePlural}-column-order`, JSON.stringify(newColumnOrder));\n  };\n  \n  // Le funzioni di gestione selezione ed eliminazione sono ora gestite dagli hook ottimizzati\n  const { \n    selectedIds, \n    selectAll, \n    selectionMode, \n    setSelectionMode,\n    handleSelectAll, \n    handleSelectEntity: handleSelect, \n    handleDeleteEntity: handleDelete, \n    handleBatchDelete: handleDeleteSelected,\n    clearSelection \n  } = operations;\n  \n  // Filtraggio e ricerca\n  const filteredEntities = useMemo(() => {\n    // Validazione di sicurezza per assicurarsi che entities sia un array\n    if (!Array.isArray(entities)) {\n      console.error('GDPREntityTemplate: entities deve essere un array, ricevuto:', typeof entities, entities);\n      return [];\n    }\n    \n    let filtered = entities;\n    \n    // Applica filtri attivi\n    Object.entries(activeFilters).forEach(([key, value]) => {\n      if (value) {\n        filtered = filtered.filter(entity => {\n          const entityValue = entity[key];\n          return entityValue === value || String(entityValue).toLowerCase().includes(value.toLowerCase());\n        });\n      }\n    });\n    \n    // Applica ricerca\n    if (searchQuery) {\n      const searchLower = searchQuery.toLowerCase();\n      filtered = filtered.filter(entity => {\n        return searchFields.some(field => {\n          const value = entity[field];\n          return value && String(value).toLowerCase().includes(searchLower);\n        });\n      });\n    }\n    \n    // Applica ordinamento\n    if (activeSort) {\n      filtered = [...filtered].sort((a, b) => {\n        const valueA = a[activeSort.field];\n        const valueB = b[activeSort.field];\n        \n        if (valueA == null && valueB == null) return 0;\n        if (valueA == null) return activeSort.direction === 'asc' ? -1 : 1;\n        if (valueB == null) return activeSort.direction === 'asc' ? 1 : -1;\n        \n        const compareValueA = typeof valueA === 'string' ? valueA.toLowerCase() : valueA;\n        const compareValueB = typeof valueB === 'string' ? valueB.toLowerCase() : valueB;\n        \n        if (compareValueA < compareValueB) return activeSort.direction === 'asc' ? -1 : 1;\n        if (compareValueA > compareValueB) return activeSort.direction === 'asc' ? 1 : -1;\n        return 0;\n      });\n    }\n    \n    return filtered;\n  }, [entities, activeFilters, searchQuery, searchFields, activeSort]);\n  \n  // Sincronizzazione stato selectAll con selezione effettiva\n  useEffect(() => {\n    if (Array.isArray(filteredEntities) && filteredEntities.length > 0) {\n      const allFilteredSelected = filteredEntities.every(entity => selectedIds.includes(entity.id));\n      if (allFilteredSelected !== selectAll) {\n        // Aggiorna lo stato selectAll solo se necessario per evitare loop infiniti\n        operations.setSelectAll(allFilteredSelected);\n      }\n    } else if (selectAll && filteredEntities.length === 0) {\n      // Se non ci sono entità filtrate ma selectAll è true, resettalo\n      operations.setSelectAll(false);\n    }\n  }, [filteredEntities, selectedIds, selectAll, operations]);\n  \n  // Configurazione colonne con selezione\n  const tableColumns: DataTableColumn<T>[] = useMemo(() => {\n    const cols: DataTableColumn<T>[] = [];\n    \n    // 1. Prima colonna: Azioni (sempre presente come prima colonna)\n    const hasActionsColumn = columns.some(col => col.key === 'actions');\n    if (!hasActionsColumn) {\n      cols.push({\n        key: 'actions',\n        label: 'Azioni',\n        sortable: false,\n        width: 120,\n        renderCell: (entity: T) => (\n          <ActionButton\n            actions={[\n              { \n                label: 'Visualizza', \n                icon: <Eye className=\"h-4 w-4\" />, \n                onClick: (e?: React.MouseEvent<Element>) => {\n                  if (e) e.stopPropagation();\n                  navigate(`/${entityNamePlural}/${entity.id}`);\n                },\n                variant: 'default',\n              },\n              ...(permissions.canWrite ? [{\n                label: 'Modifica',\n                icon: <Edit className=\"h-4 w-4\" />,\n                onClick: (e?: React.MouseEvent<Element>) => {\n                  if (e) e.stopPropagation();\n                  onEditEntity ? onEditEntity(entity) : navigate(`/${entityNamePlural}/${entity.id}/edit`);\n                },\n                variant: 'default' as const,\n              }] : []),\n              ...(permissions.canDelete ? [{\n                label: 'Elimina',\n                icon: <Trash2 className=\"h-4 w-4\" />,\n                onClick: (e?: React.MouseEvent<Element>) => {\n                  if (e) e.stopPropagation();\n                  handleDelete(entity.id);\n                },\n                variant: 'danger' as const,\n              }] : []),\n              ...(enableImportExport && permissions.canExport ? [{\n                label: 'Esporta',\n                icon: <Download className=\"h-4 w-4\" />,\n                onClick: (e?: React.MouseEvent<Element>) => {\n                  if (e) e.stopPropagation();\n                  if (onExportEntities) {\n                    onExportEntities([entity]);\n                  } else {\n                    const headers = Array.isArray(csvHeaders) ? \n                      csvHeaders.reduce((acc, h) => ({ ...acc, [h.key]: h.label }), {}) : \n                      csvHeaders;\n                    exportToCsv([entity], headers, `${entityName}_${entity.id}.csv`, ';');\n                  }\n                },\n                variant: 'default' as const,\n              }] : [])\n            ]}            className=\"\"\n          />\n        )\n      });\n    }\n    \n    // 2. Seconda colonna: Selezione (se in modalità selezione)\n    if (selectionMode && enableBatchOperations) {\n      cols.push({\n        key: 'select',\n        label: '',\n        sortable: false,\n        width: 50,\n        renderCell: (entity: T) => (\n          <div className=\"flex justify-center\" onClick={(e: React.MouseEvent) => e.stopPropagation()}>\n            <input\n              type=\"checkbox\"\n              checked={selectedIds.includes(entity.id)}\n              onChange={() => handleSelect(entity.id)}\n              className=\"h-4 w-4 accent-blue-600\"\n            />\n          </div>\n        ),\n        renderHeader: () => (\n          <div className=\"flex justify-center\">\n            <input\n              type=\"checkbox\"\n              checked={selectAll}\n              onChange={() => {\n                // Validazione aggiuntiva per assicurarsi che filteredEntities sia un array\n                if (Array.isArray(filteredEntities)) {\n                  handleSelectAll(filteredEntities);\n                } else {\n                  console.error('GDPREntityTemplate: filteredEntities non è un array:', filteredEntities);\n                }\n              }}\n              className=\"h-4 w-4 accent-blue-600\"\n            />\n          </div>\n        )\n      });\n    }\n    \n    // 3. Aggiungi tutte le altre colonne (esclusa quella azioni se già presente)\n    const otherColumns = columns.filter(col => col.key !== 'actions');\n    cols.push(...otherColumns);\n    \n    return cols;\n  }, [columns, selectionMode, enableBatchOperations, selectedIds, selectAll, permissions, entityNamePlural, onEditEntity, enableImportExport, onExportEntities, csvHeaders, entityName, handleSelect, handleSelectAll, navigate, handleDelete]);\n  \n  // Opzioni dropdown aggiungi\n  const addOptions = useMemo(() => {\n    const options = [];\n    \n    if (permissions.canWrite) {\n      options.push({\n        label: `Aggiungi ${entityDisplayName.toLowerCase()}`,\n        icon: <Plus className=\"h-4 w-4\" />,\n        onClick: onCreateEntity || (() => navigate(`/${entityNamePlural}/create`))\n      });\n    }\n    \n    if (enableImportExport) {\n      options.push(\n        {\n          label: 'Importa da CSV',\n          icon: <Upload className=\"h-4 w-4\" />,\n          onClick: () => {\n            if (onImportEntities) {\n              // Chiama la funzione onImportEntities fornita dal componente padre\n              onImportEntities([]);\n            } else {\n              // Fallback per import CSV automatico\n              const input = document.createElement('input');\n              input.type = 'file';\n              input.accept = '.csv';\n              input.onchange = (e) => {\n                const file = (e.target as HTMLInputElement).files?.[0];\n                if (file) {\n                  const reader = new FileReader();\n                  reader.onload = (event) => {\n                    try {\n                      const csv = event.target?.result as string;\n                      const lines = csv.split('\\n');\n                      const headers = lines[0].split(';');\n                      const data = lines.slice(1).filter(line => line.trim()).map(line => {\n                        const values = line.split(';');\n                        const obj: any = {};\n                        headers.forEach((header, index) => {\n                          obj[header.trim()] = values[index]?.trim() || '';\n                        });\n                        return obj;\n                      });\n                      console.log('CSV data imported:', data);\n                      toast.showToast({\n                        message: `Importati ${data.length} record da CSV`,\n                        type: 'success'\n                      });\n                      // Qui si potrebbe aggiungere la logica per salvare i dati\n                    } catch (error) {\n                      console.error('Errore import CSV:', error);\n                      toast.showToast({\n                        message: 'Errore durante l\\'importazione del CSV',\n                        type: 'error'\n                      });\n                    }\n                  };\n                  reader.readAsText(file);\n                }\n              };\n              input.click();\n            }\n          }\n        },\n        {\n          label: 'Scarica template CSV',\n          icon: <FileText className=\"h-4 w-4\" />,\n          onClick: () => {\n            if (csvTemplateData) {\n              const headers = Array.isArray(csvHeaders) ? \n                csvHeaders.reduce((acc, h) => ({ ...acc, [h.key]: h.label }), {}) : \n                csvHeaders;\n              exportToCsv(csvTemplateData, headers, `template_${entityNamePlural}.csv`, ';');\n            } else {\n              // Fallback per template CSV generico\n              const genericTemplate = [{\n                id: 'esempio_id',\n                name: 'Esempio Nome',\n                email: 'esempio@email.com',\n                status: 'ACTIVE'\n              }];\n              const genericHeaders = {\n                id: 'ID',\n                name: 'Nome',\n                email: 'Email',\n                status: 'Stato'\n              };\n              exportToCsv(genericTemplate, genericHeaders, `template_${entityNamePlural}.csv`, ';');\n              toast.showToast({\n                message: 'Template CSV generico scaricato',\n                type: 'info'\n              });\n            }\n          }\n        }\n      );\n    }\n    \n    return options;\n  }, [entityDisplayName, entityNamePlural, enableImportExport, onCreateEntity, csvTemplateData, csvHeaders, toast]);\n  \n  // Azioni batch\n  const batchActions = useMemo(() => {\n    const actions = [];\n    \n    if (permissions.canDelete) {\n      actions.push({\n        label: 'Elimina selezionati',\n        icon: <Trash2 className=\"h-4 w-4\" />,\n        onClick: handleDeleteSelected,\n        variant: 'danger' as const\n      });\n    }\n    \n    if (enableImportExport && permissions.canExport) {\n      actions.push({\n        label: 'Esporta selezionati',\n        icon: <Download className=\"h-4 w-4\" />,\n        onClick: () => {\n          const selectedEntities = entities.filter(e => selectedIds.includes(e.id));\n          if (onExportEntities) {\n            onExportEntities(selectedEntities);\n          } else {\n            const headers = Array.isArray(csvHeaders) ? \n              csvHeaders.reduce((acc, h) => ({ ...acc, [h.key]: h.label }), {}) : \n              csvHeaders;\n            exportToCsv(selectedEntities, headers, `${entityNamePlural}_selezionati.csv`, ';');\n          }\n        },\n        variant: 'default' as const\n      });\n    }\n    \n    // Azione per annullare selezione\n    actions.push({\n      label: 'Annulla selezione',\n      icon: <XCircle className=\"h-4 w-4\" />,\n      onClick: () => {\n        clearSelection();\n      },\n      variant: 'default' as const\n    });\n    \n    return actions;\n  }, [canDeleteEntity, canExportEntity, enableImportExport, entities, selectedIds, onExportEntities, csvHeaders, entityNamePlural]);\n  \n  // Rendering card per vista griglia\n  const renderEntityCard = (entity: T) => {\n    if (!cardConfig) return null;\n    \n    // Supporta sia configurazione field-based che function-based\n    const title = cardConfig.title ? cardConfig.title(entity) : entity[cardConfig.titleField];\n    const subtitle = cardConfig.subtitle ? cardConfig.subtitle(entity) : \n      (cardConfig.subtitleField ? entity[cardConfig.subtitleField] : undefined);\n    const badgeData = cardConfig.badge ? cardConfig.badge(entity) : \n      (cardConfig.badgeField ? { text: entity[cardConfig.badgeField], variant: 'default' as const } : undefined);\n    const description = cardConfig.description ? cardConfig.description(entity) : \n      (cardConfig.descriptionField ? entity[cardConfig.descriptionField] : undefined);\n    const iconElement = cardConfig.icon ? cardConfig.icon(entity) : \n      (cardConfig.iconField ? entity[cardConfig.iconField] : <FileText className=\"h-5 w-5 text-blue-600\" />);\n    \n    return (\n      <div \n        key={entity.id}\n        className=\"bg-white rounded-lg shadow overflow-hidden relative flex flex-col h-full cursor-pointer hover:shadow-md transition-all duration-200\"\n        onClick={() => {\n          if (!selectionMode) {\n            navigate(`/${entityNamePlural}/${entity.id}`);\n          }\n        }}\n      >\n        {/* Checkbox selezione */}\n        {selectionMode && (\n          <div \n            className={`absolute top-2 right-2 h-5 w-5 rounded border ${\n              selectedIds.includes(entity.id) ? 'bg-blue-500 border-blue-600' : 'bg-white border-gray-300'\n            } flex items-center justify-center z-10`}\n            onClick={(e: React.MouseEvent) => {\n              e.stopPropagation();\n              handleSelect(entity.id);\n            }}\n          >\n            {selectedIds.includes(entity.id) && (\n              <svg className=\"h-3 w-3 text-white\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M20 6L9 17l-5-5\"></path>\n              </svg>\n            )}\n          </div>\n        )}\n        \n        {/* Header */}\n        <div className=\"flex items-center p-4\">\n          <div className=\"flex-shrink-0 h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center\">\n            {iconElement}\n          </div>\n          \n          <div className=\"ml-3 flex-grow min-w-0\">\n            <h3 className=\"text-base font-semibold text-gray-800 line-clamp-2 whitespace-normal\">\n              {title}\n            </h3>\n            {subtitle && (\n              <p className=\"text-sm text-gray-600 mt-1\">{subtitle}</p>\n            )}\n            {badgeData && (\n              <div className=\"mt-1\">\n                <Badge variant={badgeData.variant}>{badgeData.text}</Badge>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Contenuto */}\n        <div className=\"px-4 pb-3 space-y-1.5 flex-grow\">\n          {/* Supporta sia additionalFields che fields */}\n          {cardConfig.fields?.map((field, index) => {\n            const value = field.value(entity);\n            if (!value || value === 'N/A') return null;\n            \n            return (\n              <div key={index} className=\"flex items-baseline text-sm\">\n                <span className=\"flex items-center\">\n                  {field.icon && <span className=\"mr-2 h-3.5 w-3.5 text-gray-400\">{field.icon}</span>}\n                  <span className=\"text-gray-500\">{field.label}:</span>\n                </span>\n                <span className=\"ml-2 text-gray-700\">{value}</span>\n              </div>\n            );\n          })}\n          \n          {cardConfig.additionalFields?.map(field => {\n            const value = entity[field.key];\n            if (!value) return null;\n            \n            return (\n              <div key={String(field.key)} className=\"flex items-baseline text-sm\">\n                <span className=\"flex items-center\">\n                  {field.icon && <span className=\"mr-2 h-3.5 w-3.5 text-gray-400\">{field.icon}</span>}\n                  <span className=\"text-gray-500\">{field.label}:</span>\n                </span>\n                <span className=\"ml-2 text-gray-700\">\n                  {field.formatter ? field.formatter(value) : String(value)}\n                </span>\n              </div>\n            );\n          })}\n          \n          {description && (\n            <div className=\"mt-2 text-sm text-gray-600 line-clamp-2\">\n              {description}\n            </div>\n          )}\n        </div>\n        \n        {/* Footer azioni */}\n        <div className=\"px-4 py-3 bg-white border-t border-gray-200 flex justify-end items-center mt-auto\" style={{position: 'relative', maxWidth: '100%'}}>\n          <ActionButton\n            actions={[\n              { \n                label: 'Visualizza', \n                icon: <Eye className=\"h-4 w-4\" />, \n                onClick: (e?: React.MouseEvent) => {\n                  if (e) e.stopPropagation();\n                  navigate(`/${entityNamePlural}/${entity.id}`);\n                },\n                variant: 'default',\n              },\n              ...(canUpdateEntity() ? [{\n                label: 'Modifica',\n                icon: <Edit className=\"h-4 w-4\" />,\n                onClick: (e?: React.MouseEvent) => {\n                  if (e) e.stopPropagation();\n                  onEditEntity ? onEditEntity(entity) : navigate(`/${entityNamePlural}/${entity.id}/edit`);\n                },\n                variant: 'default' as const,\n              }] : []),\n              ...(canDeleteEntity() ? [{\n                label: 'Elimina',\n                icon: <Trash2 className=\"h-4 w-4\" />,\n                onClick: (e?: React.MouseEvent) => {\n                  if (e) e.stopPropagation();\n                  handleDelete(entity.id);\n                },\n                variant: 'danger' as const,\n              }] : []),\n              ...(enableImportExport && permissions.canExport ? [{\n                label: 'Esporta',\n                icon: <Download className=\"h-4 w-4\" />,\n                onClick: (e?: React.MouseEvent) => {\n                  if (e) e.stopPropagation();\n                  if (onExportEntities) {\n                    onExportEntities([entity]);\n                  } else {\n                    const headers = Array.isArray(csvHeaders) ? \n                      csvHeaders.reduce((acc, h) => ({ ...acc, [h.key]: h.label }), {}) : \n                      csvHeaders;\n                    exportToCsv([entity], headers, `${entityName}_${entity.id}.csv`, ';');\n                  }\n                },\n                variant: 'default' as const,\n              }] : [])\n            ]}\n            asPill={true}\n          />\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <EntityListLayout \n      title={entityDisplayNamePlural}\n      subtitle={`Gestisci ${entityDisplayNamePlural.toLowerCase()}`}\n      headerContent={\n        <div className=\"space-y-4 mb-4\">\n          {/* Prima riga: Descrizione con toggle switch e dropdown in linea */}\n          <div className=\"flex flex-wrap items-center justify-between gap-3\">\n            <div className=\"flex-1\">\n              <p className=\"text-gray-500\">\n                Gestisci {entityDisplayNamePlural.toLowerCase()}, visualizza i dettagli e crea nuovi {entityDisplayNamePlural.toLowerCase()}.\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <ViewModeToggle\n                viewMode={viewMode}\n                onChange={setViewMode}\n                gridLabel=\"Griglia\"\n                tableLabel=\"Tabella\"\n              />\n              \n              {(canCreateEntity() || addOptions.length > 1) && (\n                <AddEntityDropdown\n                  label={`Aggiungi ${entityDisplayName}`}\n                  options={addOptions}\n                  icon={<Plus className=\"h-4 w-4\" />}\n                  variant=\"primary\"\n                />\n              )}\n            </div>\n          </div>\n          \n          {/* Seconda riga: Search bar a sinistra e pulsanti a destra */}\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex-1 max-w-md\">\n              <SearchBar\n                value={searchQuery}\n                onChange={setSearchQuery}\n                placeholder={`Cerca ${entityDisplayNamePlural.toLowerCase()}...`}\n                className=\"h-10 bg-white\"\n                showButton={false}\n                showClearButton={true}\n              />\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {enableAdvancedFilters && filterOptions.length > 0 && (\n                <FilterPanel \n                  filterOptions={filterOptions.map(option => ({ value: option.key, label: option.label, options: option.options }))}\n                  activeFilters={activeFilters}\n                  onFilterChange={setActiveFilters}\n                  sortOptions={sortOptions.map(option => ({ value: option.key, label: option.label }))}\n                  activeSort={activeSort}\n                  onSortChange={setActiveSort}\n                  className=\"h-10\"\n                />\n              )}\n              \n              {/* Pulsanti Colonne e Modifica su una sola riga */}\n              <div className=\"flex items-center gap-2\">\n                {enableColumnSelector && (\n                  <ColumnSelector\n                    columns={tableColumns.map(col => ({\n                      key: col.key,\n                      label: col.label,\n                      required: col.key === 'actions' || col.key === 'select'\n                    }))}\n                    hiddenColumns={hiddenColumns}\n                    onChange={handleColumnVisibilityChange}\n                    onOrderChange={handleColumnOrderChange}\n                    columnOrder={columnOrder}\n                    buttonClassName=\"h-10 flex items-center gap-2\"\n                  />\n                )}\n                \n                {enableBatchOperations && canUpdateEntity() && (\n                  <BatchEditButton\n                    selectionMode={selectionMode}\n                    onToggleSelectionMode={() => setSelectionMode(!selectionMode)}\n                    selectedCount={selectedIds.length}\n                    className=\"h-10 flex items-center gap-2\"\n                    variant={selectionMode ? \"primary\" : \"outline\"}\n                    actions={batchActions}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      }\n      searchBarContent={null}\n    >\n      <div className={loading ? 'opacity-50 pointer-events-none' : ''}>\n        {/* Messaggio errore */}\n        {error && (\n          <div className=\"mb-4 p-4 border border-red-300 bg-red-50 rounded-md\">\n            <p className=\"text-red-800 text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* Loading */}\n        {loading ? (\n          <div className=\"flex justify-center items-center h-64\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500\"></div>\n          </div>\n        ) : (\n          <>\n            {/* Vista tabella */}\n            {viewMode === 'table' ? (\n              <ResizableTable<T>\n                columns={tableColumns.map(col => ({\n                  key: col.key,\n                  label: col.label,\n                  width: col.width,\n                  minWidth: col.minWidth,\n                  sortable: col.sortable,\n                  renderHeader: col.renderHeader ? (_) => col.renderHeader!(col) : undefined,\n                  renderCell: col.renderCell ? (row, _, rowIndex) => col.renderCell!(row as T, rowIndex) : undefined\n                }))}\n                data={filteredEntities as T[]}\n                onSort={(key, direction) => {\n                  setActiveSort(direction ? { field: key, direction } : undefined);\n                }}\n                sortKey={activeSort?.field}\n                sortDirection={activeSort?.direction || null}\n                hiddenColumns={hiddenColumns}\n                onColumnVisibilityChange={handleColumnVisibilityChange}\n                onColumnOrderChange={handleColumnOrderChange}\n                columnOrder={columnOrder}\n                tableName={entityNamePlural}\n                onRowClick={(entity) => {\n                  if (!selectionMode) {\n                    navigate(`/${entityNamePlural}/${entity.id}`);\n                  }\n                }}\n                rowClassName={() => selectionMode ? '' : 'cursor-pointer hover:bg-gray-50'}\n                zebra={true}\n                tableProps={{\n                  className: \"border rounded-md overflow-hidden shadow-sm\"\n                }}\n              />\n            ) : (\n              /* Vista griglia */\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5\">\n                {filteredEntities.map(renderEntityCard)}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </EntityListLayout>\n  );\n}\n\nexport default GDPREntityTemplate;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/__tests__/GDPREntityPageTemplate.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'waitFor' is defined but never used.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[610,613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[610,613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[816,819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[816,819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1225,1228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1225,1228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockApiCall' is assigned a value but never used.","line":55,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1794,1797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1794,1797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3263,3266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3263,3266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { vi, describe, it, beforeEach, expect } from 'vitest';\nimport {\n  GDPREntityPageTemplate,\n  ConfigFactory,\n  type GDPREntityPageConfig\n} from '../index';\n\n// Mock delle dipendenze\nvi.mock('@/components/shared/layout/PageLayout', () => {\n  return {\n    PageLayout: ({ children }: { children: React.ReactNode }) => (\n      <div data-testid=\"page-layout\">{children}</div>\n    )\n  };\n});\n\nvi.mock('@/components/shared/table/DataTable', () => {\n  return {\n    DataTable: ({ data, columns, onRowClick }: any) => (\n      <div data-testid=\"data-table\">\n        <div data-testid=\"table-columns\">{columns.length} columns</div>\n        <div data-testid=\"table-rows\">{data.length} rows</div>\n        {data.map((row: any, index: number) => (\n          <div\n            key={index}\n            data-testid={`table-row-${index}`}\n            onClick={() => onRowClick?.(row)}\n          >\n            {row.name || row.title || `Row ${index}`}\n          </div>\n        ))}\n      </div>\n    )\n  };\n});\n\nvi.mock('@/components/shared/forms/FormModal', () => {\n  return {\n    FormModal: ({ open, onClose, onSubmit, title, children }: any) => (\n      open ? (\n        <div data-testid=\"form-modal\">\n          <div data-testid=\"modal-title\">{title}</div>\n          <div data-testid=\"modal-content\">{children}</div>\n          <button data-testid=\"modal-submit\" onClick={() => onSubmit?.({})}>Submit</button>\n          <button data-testid=\"modal-close\" onClick={onClose}>Close</button>\n        </div>\n      ) : null\n    )\n  };\n});\n\n// Mock delle API\nconst mockApiCall = vi.fn();\nglobal.fetch = vi.fn(() =>\n  Promise.resolve({\n    ok: true,\n    json: () => Promise.resolve({ data: mockEntities }),\n  })\n) as any;\n\n// Configurazione di test base\nconst createTestConfig = (overrides: Partial<GDPREntityPageConfig> = {}): GDPREntityPageConfig => {\n  const baseConfig = ConfigFactory.createBaseConfig('test-entities', 'Test Entities');\n  \n  return {\n    ...baseConfig,\n    entity: {\n      ...baseConfig.entity,\n      columns: [\n        {\n          key: 'id',\n          label: 'ID',\n          sortable: true,\n          filterable: false,\n          visible: true,\n          required: true\n        },\n        {\n          key: 'name',\n          label: 'Name',\n          sortable: true,\n          filterable: true,\n          visible: true,\n          required: true\n        },\n        {\n          key: 'email',\n          label: 'Email',\n          sortable: true,\n          filterable: true,\n          visible: true,\n          required: true\n        }\n      ]\n    },\n    api: {\n      ...baseConfig.api,\n      endpoints: {\n        list: '/api/test-entities',\n        create: '/api/test-entities',\n        read: '/api/test-entities',\n        update: '/api/test-entities',\n        delete: '/api/test-entities'\n      }\n    },\n    ...overrides\n  };\n};\n\n// Test data\nconst mockEntities = [\n  { id: 1, name: 'Test Entity 1', email: 'test1@example.com' },\n  { id: 2, name: 'Test Entity 2', email: 'test2@example.com' },\n  { id: 3, name: 'Test Entity 3', email: 'test3@example.com' }\n];\n\ndescribe('GDPREntityPageTemplate', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    (global.fetch as any).mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve({ data: mockEntities, total: mockEntities.length })\n    });\n  });\n\n  describe('Basic Rendering', () => {\n    it('should render the template with basic configuration', async () => {\n      const config = createTestConfig();\n      \n      render(<GDPREntityPageTemplate config={config} />);\n      \n      // Verifica che il componente si renderizzi senza errori\n      expect(document.body).toBeInTheDocument();\n    });\n\n  });\n });","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/BatchOperations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronDown' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Dropdown, DropdownAction } from '../../../design-system/molecules/Dropdown';\nimport { Modal } from '../../../design-system/molecules/Modal';\nimport { ChevronDown, Trash2, Download, Archive } from 'lucide-react';\nimport { toast } from 'react-hot-toast';\nimport { GDPRPermissions } from '../hooks/useGDPRPermissions';\n\nexport interface BatchOperation {\n  key: string;\n  label: string;\n  icon?: React.ReactNode;\n  variant?: 'default' | 'danger' | 'secondary' | 'primary';\n  requiresConfirmation?: boolean;\n  confirmationTitle?: string;\n  confirmationDescription?: string;\n  permission?: string;\n  action: (selectedIds: string[]) => Promise<void>;\n}\n\nexport interface BatchOperationsProps {\n  selectedEntities: Set<string>;\n  permissions: GDPRPermissions;\n  onClearSelection: () => void;\n  entityName: string;\n  entityNamePlural: string;\n  customOperations?: BatchOperation[];\n}\n\n/**\n * Componente per le operazioni batch sulle entità GDPR\n * Fornisce azioni comuni come eliminazione, esportazione, archiviazione\n */\nexport function BatchOperations({\n  selectedEntities,\n  permissions,\n  onClearSelection,\n  entityName,\n  entityNamePlural,\n  customOperations = []\n}: BatchOperationsProps) {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [currentOperation, setCurrentOperation] = useState<BatchOperation | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const selectedCount = selectedEntities.size;\n  const selectedIds = Array.from(selectedEntities);\n\n  // Operazioni predefinite\n  const defaultOperations: BatchOperation[] = [\n    {\n      key: 'export',\n      label: `Esporta ${selectedCount} ${selectedCount === 1 ? entityName : entityNamePlural}`,\n      icon: <Download className=\"h-4 w-4\" />,\n      variant: 'secondary',\n      permission: 'export',\n      action: async (ids: string[]) => {\n        try {\n          const response = await fetch('/api/export/batch', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ ids, type: entityName })\n          });\n          \n          if (!response.ok) throw new Error('Errore durante l\\'esportazione');\n          \n          const blob = await response.blob();\n          const url = window.URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `${entityNamePlural}_${new Date().toISOString().split('T')[0]}.csv`;\n          document.body.appendChild(a);\n          a.click();\n          window.URL.revokeObjectURL(url);\n          document.body.removeChild(a);\n          \n          toast.success(`${ids.length} ${ids.length === 1 ? entityName : entityNamePlural} esportati con successo`);\n        } catch (error) {\n          toast.error('Errore durante l\\'esportazione');\n          throw error;\n        }\n      }\n    },\n    {\n      key: 'archive',\n      label: `Archivia ${selectedCount} ${selectedCount === 1 ? entityName : entityNamePlural}`,\n      icon: <Archive className=\"h-4 w-4\" />,\n      variant: 'secondary',\n      requiresConfirmation: true,\n      confirmationTitle: 'Conferma archiviazione',\n      confirmationDescription: `Sei sicuro di voler archiviare ${selectedCount} ${selectedCount === 1 ? entityName : entityNamePlural}? Questa azione può essere annullata.`,\n      permission: 'update',\n      action: async (ids: string[]) => {\n        try {\n          const response = await fetch('/api/batch/archive', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ ids, type: entityName })\n          });\n          \n          if (!response.ok) throw new Error('Errore durante l\\'archiviazione');\n          \n          toast.success(`${ids.length} ${ids.length === 1 ? entityName : entityNamePlural} archiviati con successo`);\n        } catch (error) {\n          toast.error('Errore durante l\\'archiviazione');\n          throw error;\n        }\n      }\n    },\n    {\n      key: 'delete',\n      label: `Elimina ${selectedCount} ${selectedCount === 1 ? entityName : entityNamePlural}`,\n      icon: <Trash2 className=\"h-4 w-4\" />,\n      variant: 'danger',\n      requiresConfirmation: true,\n      confirmationTitle: 'Conferma eliminazione',\n      confirmationDescription: `Sei sicuro di voler eliminare definitivamente ${selectedCount} ${selectedCount === 1 ? entityName : entityNamePlural}? Questa azione non può essere annullata.`,\n      permission: 'delete',\n      action: async (ids: string[]) => {\n        try {\n          const response = await fetch('/api/batch/delete', {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ ids, type: entityName })\n          });\n          \n          if (!response.ok) throw new Error('Errore durante l\\'eliminazione');\n          \n          toast.success(`${ids.length} ${ids.length === 1 ? entityName : entityNamePlural} eliminati con successo`);\n        } catch (error) {\n          toast.error('Errore durante l\\'eliminazione');\n          throw error;\n        }\n      }\n    }\n  ];\n\n  // Combina operazioni predefinite e personalizzate\n  const allOperations = [...defaultOperations, ...customOperations];\n\n  // Filtra operazioni in base ai permessi\n  const availableOperations = allOperations.filter(operation => {\n    if (!operation.permission) return true;\n    \n    switch (operation.permission) {\n      case 'export':\n        return permissions.canExport;\n      case 'delete':\n        return permissions.canDelete;\n      case 'update':\n        return permissions.canUpdate;\n      default:\n        return permissions.checkPermission(operation.permission);\n    }\n  });\n\n  // Converte le operazioni in azioni per il dropdown\n  const dropdownActions: DropdownAction[] = availableOperations.map(operation => ({\n    label: operation.label,\n    icon: operation.icon,\n    variant: operation.variant,\n    onClick: () => handleOperation(operation)\n  }));\n\n  // Gestione esecuzione operazione\n  const handleOperation = async (operation: BatchOperation) => {\n    if (operation.requiresConfirmation) {\n      setCurrentOperation(operation);\n      setShowConfirmModal(true);\n      return;\n    }\n\n    await executeOperation(operation);\n  };\n\n  // Esecuzione effettiva dell'operazione\n  const executeOperation = async (operation: BatchOperation) => {\n    setIsProcessing(true);\n    \n    try {\n      await operation.action(selectedIds);\n      onClearSelection();\n    } catch (error) {\n      console.error(`Errore nell'operazione ${operation.key}:`, error);\n    } finally {\n      setIsProcessing(false);\n      setShowConfirmModal(false);\n      setCurrentOperation(null);\n    }\n  };\n\n  // Gestione conferma modal\n  const handleConfirm = () => {\n    if (currentOperation) {\n      executeOperation(currentOperation);\n    }\n  };\n\n  const handleCancel = () => {\n    setShowConfirmModal(false);\n    setCurrentOperation(null);\n  };\n\n  if (selectedCount === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"flex items-center gap-2 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n        <span className=\"text-sm font-medium text-blue-900\">\n          {selectedCount} {selectedCount === 1 ? entityName : entityNamePlural} selezionati\n        </span>\n        \n        <div className=\"flex items-center gap-2 ml-auto\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onClearSelection}\n          >\n            Deseleziona tutto\n          </Button>\n          \n          {availableOperations.length > 0 && (\n            <Dropdown\n              label=\"Azioni batch\"\n              variant=\"primary\"\n              actions={dropdownActions}\n              showArrow={true}\n              pill={true}\n            />\n          )}\n        </div>\n      </div>\n\n      {/* Modal di conferma */}\n      <Modal\n        isOpen={showConfirmModal}\n        onClose={handleCancel}\n        title={currentOperation?.confirmationTitle || 'Conferma operazione'}\n        size=\"md\"\n        footer={\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={handleCancel}\n              disabled={isProcessing}\n            >\n              Annulla\n            </Button>\n            <Button\n               variant={currentOperation?.variant === 'danger' ? 'destructive' : 'primary'}\n               onClick={handleConfirm}\n               disabled={isProcessing}\n             >\n              {isProcessing ? 'Elaborazione...' : 'Conferma'}\n            </Button>\n          </div>\n        }\n      >\n        <p className=\"text-gray-600\">\n          {currentOperation?.confirmationDescription || \n           `Sei sicuro di voler eseguire questa operazione su ${selectedCount} ${selectedCount === 1 ? entityName : entityNamePlural}?`}\n        </p>\n      </Modal>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/EntityBatchActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/EntityCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1257,1260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1257,1260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../../design-system/molecules/Card';\nimport { Badge } from '../../../design-system/atoms/Badge';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Eye, Edit, Trash2, Download } from 'lucide-react';\n\n/**\n * Componente per il rendering delle card nella vista griglia\n * Gestisce la visualizzazione delle entità in formato card con azioni\n */\nexport interface CardConfig<T> {\n  title: string | ((entity: T) => string);\n  subtitle?: string | ((entity: T) => string);\n  description?: string | ((entity: T) => string);\n  badge?: {\n    field: string | ((entity: T) => string);\n    variant?: 'default' | 'secondary' | 'destructive' | 'outline';\n  };\n  icon?: React.ComponentType<{ className?: string }>;\n}\n\nexport interface EntityCardProps<T> {\n  entity: T;\n  config: CardConfig<T>;\n  isSelected: boolean;\n  onSelect: (id: string) => void;\n  onView?: (entity: T) => void;\n  onEdit?: (entity: T) => void;\n  onDelete?: (id: string) => void;\n  onExport?: (entity: T) => void;\n  showActions: {\n    view: boolean;\n    edit: boolean;\n    delete: boolean;\n    export: boolean;\n  };\n  selectionMode: boolean;\n}\n\nexport const EntityCard = <T extends Record<string, any>>({\n  entity,\n  config,\n  isSelected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n  onExport,\n  showActions,\n  selectionMode\n}: EntityCardProps<T>) => {\n  // Helper per ottenere il valore da una configurazione\n  const getValue = (value: string | ((entity: T) => string)): string => {\n    return typeof value === 'function' ? value(entity) : entity[value] || '';\n  };\n\n  // Gestione click sulla card\n  const handleCardClick = () => {\n    if (selectionMode) {\n      onSelect(entity.id);\n    } else if (onView) {\n      onView(entity);\n    }\n  };\n\n  return (\n    <Card \n      className={`cursor-pointer transition-all hover:shadow-md ${\n        isSelected ? 'ring-2 ring-blue-500' : ''\n      }`}\n      onClick={handleCardClick}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg font-semibold\">\n              {getValue(config.title)}\n            </CardTitle>\n            {config.subtitle && (\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {getValue(config.subtitle)}\n              </p>\n            )}\n          </div>\n          \n          {/* Icona e badge */}\n          <div className=\"flex items-center gap-2\">\n            {config.icon && (\n              <config.icon className=\"h-5 w-5 text-muted-foreground\" />\n            )}\n            {config.badge && (\n              <Badge variant={config.badge.variant || 'default'}>\n                {getValue(config.badge.field)}\n              </Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        {/* Descrizione */}\n        {config.description && (\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            {getValue(config.description)}\n          </p>\n        )}\n\n        {/* Azioni */}\n        <div className=\"flex items-center justify-between\">\n          {/* Checkbox per selezione */}\n          {selectionMode && (\n            <input\n              type=\"checkbox\"\n              checked={isSelected}\n              onChange={() => onSelect(entity.id)}\n              onClick={(e: React.MouseEvent) => e.stopPropagation()}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n          )}\n\n          {/* Pulsanti azioni */}\n          <div className=\"flex gap-1 ml-auto\">\n            {showActions.view && onView && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e: React.MouseEvent) => {\n                  e.stopPropagation();\n                  onView(entity);\n                }}\n                title=\"Visualizza\"\n              >\n                <Eye className=\"h-4 w-4\" />\n              </Button>\n            )}\n            \n            {showActions.edit && onEdit && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e: React.MouseEvent) => {\n                  e.stopPropagation();\n                  onEdit(entity);\n                }}\n                title=\"Modifica\"\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n            )}\n            \n            {showActions.delete && onDelete && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e: React.MouseEvent) => {\n                  e.stopPropagation();\n                  onDelete(entity.id);\n                }}\n                title=\"Elimina\"\n                className=\"text-destructive hover:text-destructive\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n            \n            {showActions.export && onExport && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e: React.MouseEvent) => {\n                  e.stopPropagation();\n                  onExport(entity);\n                }}\n                title=\"Esporta\"\n              >\n                <Download className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/EntitySearchBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":122,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Badge } from '../../../design-system/atoms/Badge';\nimport { Search, Filter, X, ChevronDown } from 'lucide-react';\n\n/**\n * Componente per la barra di ricerca e filtri avanzati\n * Gestisce ricerca testuale e filtri multipli\n */\nexport interface FilterOption {\n  key: string;\n  label: string;\n  options: Array<{ label: string; value: string }>;\n}\n\nexport interface EntitySearchBarProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  activeFilters: Record<string, string>;\n  onFilterChange: (filters: Record<string, string>) => void;\n  filterOptions: FilterOption[];\n  onClearFilters: () => void;\n  hasActiveFilters: boolean;\n  placeholder?: string;\n}\n\nexport const EntitySearchBar: React.FC<EntitySearchBarProps> = ({\n  searchQuery,\n  onSearchChange,\n  activeFilters,\n  onFilterChange,\n  filterOptions,\n  onClearFilters,\n  hasActiveFilters,\n  placeholder = \"Cerca...\"\n}) => {\n  // Gestione cambio filtro\n  const handleFilterChange = (filterKey: string, value: string) => {\n    onFilterChange({\n      ...activeFilters,\n      [filterKey]: value\n    });\n  };\n\n  // Conta filtri attivi\n  const activeFilterCount = Object.values(activeFilters).filter(value => value !== '').length;\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Barra di ricerca principale */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n        <input\n          type=\"text\"\n          placeholder={placeholder}\n          value={searchQuery}\n          onChange={(e) => onSearchChange(e.target.value)}\n          className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n        />\n        {searchQuery && (\n          <button\n            onClick={() => onSearchChange('')}\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n          >\n            <X className=\"h-4 w-4\" />\n          </button>\n        )}\n      </div>\n\n      {/* Filtri avanzati */}\n      {filterOptions.length > 0 && (\n        <div className=\"flex flex-wrap gap-2 items-center\">\n          <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n            <Filter className=\"h-4 w-4\" />\n            <span>Filtri:</span>\n          </div>\n\n          {filterOptions.map((filter) => (\n            <div key={filter.key} className=\"relative\">\n              <select\n                value={activeFilters[filter.key] || ''}\n                onChange={(e) => handleFilterChange(filter.key, e.target.value)}\n                className=\"appearance-none bg-white border border-gray-300 rounded px-3 py-1 pr-8 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">{filter.label}</option>\n                {filter.options.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n              <ChevronDown className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-3 w-3 text-gray-400 pointer-events-none\" />\n            </div>\n          ))}\n\n          {/* Badge contatore filtri attivi */}\n          {activeFilterCount > 0 && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {activeFilterCount} filtri attivi\n            </Badge>\n          )}\n\n          {/* Pulsante pulisci filtri */}\n          {hasActiveFilters && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClearFilters}\n              className=\"text-xs\"\n            >\n              <X className=\"h-3 w-3 mr-1\" />\n              Pulisci tutto\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Indicatori filtri attivi */}\n      {activeFilterCount > 0 && (\n        <div className=\"flex flex-wrap gap-1\">\n          {Object.entries(activeFilters)\n            .filter(([_, value]) => value !== '')\n            .map(([key, value]) => {\n              const filter = filterOptions.find(f => f.key === key);\n              const option = filter?.options.find(o => o.value === value);\n              \n              return (\n                <Badge\n                  key={key}\n                  variant=\"outline\"\n                  className=\"text-xs flex items-center gap-1\"\n                >\n                  <span>{filter?.label}: {option?.label || value}</span>\n                  <button\n                    onClick={() => handleFilterChange(key, '')}\n                    className=\"ml-1 hover:text-red-600\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </button>\n                </Badge>\n              );\n            })}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/EntityView.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1250,1253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1250,1253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { \n  Table, \n  TableHeader, \n  TableBody, \n  TableRow, \n  TableHead, \n  TableCell \n} from '../../../design-system/molecules/Table';\nimport { Card, CardContent } from '../../../design-system/molecules/Card';\nimport { Grid, List, Eye, Edit, Trash2, Download } from 'lucide-react';\nimport { cn } from '../../../design-system/utils';\nimport { ColumnConfig } from '../hooks/useTableColumns';\nimport { GDPRPermissions } from '../hooks/useGDPRPermissions';\n\nexport type ViewMode = 'table' | 'grid';\n\nexport interface EntityViewProps<T> {\n  entities: T[];\n  viewMode: ViewMode;\n  onViewModeChange: (mode: ViewMode) => void;\n  columns: ColumnConfig[];\n  permissions: GDPRPermissions;\n  selectedEntities: Set<string>;\n  onEntitySelect: (id: string) => void;\n  onSelectAll: () => void;\n  onClearSelection: () => void;\n  onEntityAction: (action: string, entity: T) => void;\n  loading?: boolean;\n  error?: string | null;\n  emptyMessage?: string;\n  className?: string;\n}\n\n/**\n * Componente per la visualizzazione delle entità GDPR\n * Supporta modalità tabella e griglia con azioni personalizzabili\n */\nexport function EntityView<T extends { id: string; [key: string]: any }>({\n  entities,\n  viewMode,\n  onViewModeChange,\n  columns,\n  permissions,\n  selectedEntities,\n  onEntitySelect,\n  onSelectAll,\n  onClearSelection,\n  onEntityAction,\n  loading = false,\n  error = null,\n  emptyMessage = 'Nessuna entità trovata',\n  className\n}: EntityViewProps<T>) {\n\n  // Rendering della modalità tabella\n  const renderTableView = () => {\n    return (\n      <Table className=\"w-full\">\n        <TableHeader>\n          <TableRow>\n            {/* Colonna di selezione */}\n            {(permissions.canUpdate || permissions.canDelete) && (\n              <TableHead className=\"w-12\">\n                <input\n                  type=\"checkbox\"\n                  checked={entities.length > 0 && selectedEntities.size === entities.length}\n                  onChange={() => {\n                    if (selectedEntities.size === entities.length) {\n                      onClearSelection();\n                    } else {\n                      onSelectAll();\n                    }\n                  }}\n                  className=\"rounded border-gray-300\"\n                />\n              </TableHead>\n            )}\n            \n            {/* Colonne dati */}\n            {columns.map((col) => (\n              <TableHead key={col.key} style={{ width: col.width }}>\n                {col.label}\n              </TableHead>\n            ))}\n            \n            {/* Colonna azioni */}\n            <TableHead className=\"w-32\">Azioni</TableHead>\n          </TableRow>\n        </TableHeader>\n        \n        <TableBody>\n          {entities.map((entity) => (\n            <TableRow key={entity.id}>\n              {/* Checkbox di selezione */}\n              {(permissions.canUpdate || permissions.canDelete) && (\n                <TableCell>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedEntities.has(entity.id)}\n                    onChange={() => onEntitySelect(entity.id)}\n                    className=\"rounded border-gray-300\"\n                  />\n                </TableCell>\n              )}\n              \n              {/* Celle dati */}\n              {columns.map((col) => {\n                const value = entity[col.key];\n                const displayValue = col.render \n                  ? col.render(value, entity)\n                  : value?.toString() || '-';\n                \n                return (\n                  <TableCell key={col.key}>\n                    {displayValue}\n                  </TableCell>\n                );\n              })}\n              \n              {/* Celle azioni */}\n              <TableCell>\n                <div className=\"flex items-center gap-1\">\n                  {permissions.canRead && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onEntityAction('view', entity)}\n                      title=\"Visualizza\"\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {permissions.canUpdate && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onEntityAction('edit', entity)}\n                      title=\"Modifica\"\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {permissions.canDelete && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onEntityAction('delete', entity)}\n                      title=\"Elimina\"\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {permissions.canExport && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onEntityAction('export', entity)}\n                      title=\"Esporta\"\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  };\n\n  // Rendering della modalità griglia\n  const renderGridView = () => {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {entities.map((entity) => (\n          <Card\n            key={entity.id}\n            className={cn(\n              'relative hover:shadow-md transition-shadow',\n              selectedEntities.has(entity.id) && 'ring-2 ring-blue-500'\n            )}\n          >\n            <CardContent className=\"p-4\">\n              {/* Checkbox di selezione */}\n              {(permissions.canUpdate || permissions.canDelete) && (\n                <div className=\"absolute top-2 left-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedEntities.has(entity.id)}\n                    onChange={() => onEntitySelect(entity.id)}\n                    className=\"rounded border-gray-300\"\n                  />\n                </div>\n              )}\n\n              {/* Contenuto della card */}\n              <div className=\"space-y-2\">\n                {columns\n                  .filter(col => col.key !== 'actions' && col.key !== 'select')\n                  .slice(0, 4) // Mostra solo i primi 4 campi\n                  .map((col) => {\n                    const value = entity[col.key];\n                    const displayValue = col.render \n                      ? col.render(value, entity)\n                      : value?.toString() || '-';\n\n                    return (\n                      <div key={col.key} className=\"text-sm\">\n                        <span className=\"font-medium text-gray-600\">{col.label}:</span>\n                        <span className=\"ml-2 text-gray-900\">{displayValue}</span>\n                      </div>\n                    );\n                  })}\n              </div>\n\n              {/* Azioni della card */}\n              <div className=\"flex justify-end gap-1 mt-4 pt-2 border-t border-gray-200\">\n                {permissions.canRead && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEntityAction('view', entity)}\n                    title=\"Visualizza\"\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                {permissions.canUpdate && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEntityAction('edit', entity)}\n                    title=\"Modifica\"\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                {permissions.canDelete && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEntityAction('delete', entity)}\n                    title=\"Elimina\"\n                    className=\"text-red-600 hover:text-red-700\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                {permissions.canExport && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEntityAction('export', entity)}\n                    title=\"Esporta\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  // Rendering degli stati di caricamento ed errore\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-gray-600\">Caricamento...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"text-red-600 text-lg font-medium mb-2\">Errore</div>\n          <div className=\"text-gray-600\">{error}</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (entities.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"text-gray-400 text-lg font-medium mb-2\">Nessun risultato</div>\n          <div className=\"text-gray-500\">{emptyMessage}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Toggle modalità visualizzazione */}\n      <div className=\"flex justify-end\">\n        <div className=\"flex rounded-lg border border-gray-300 p-1\">\n          <Button\n            variant={viewMode === 'table' ? 'primary' : 'ghost'}\n            size=\"sm\"\n            onClick={() => onViewModeChange('table')}\n            className=\"rounded-md\"\n          >\n            <List className=\"h-4 w-4\" />\n            <span className=\"ml-1 hidden sm:inline\">Tabella</span>\n          </Button>\n          <Button\n            variant={viewMode === 'grid' ? 'primary' : 'ghost'}\n            size=\"sm\"\n            onClick={() => onViewModeChange('grid')}\n            className=\"rounded-md\"\n          >\n            <Grid className=\"h-4 w-4\" />\n            <span className=\"ml-1 hidden sm:inline\">Griglia</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Contenuto principale */}\n      {viewMode === 'table' ? renderTableView() : renderGridView()}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/EntityViewControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPRAuditPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":11,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Search' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityId' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityType' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":13}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPRAuditPanel - Pannello per visualizzare e gestire l'audit trail GDPR\n * \n * Componente che mostra la cronologia delle azioni GDPR per un'entità,\n * permettendo di visualizzare, filtrare e esportare i log di audit.\n * \n * @version 1.0\n * @date 30 Gennaio 2025\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Calendar,\n  Download,\n  Eye,\n  Filter,\n  Search\n} from 'lucide-react';\nimport { GDPRAuditLogEntry, GDPRAuditAction } from '../types/gdpr.types';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Card } from '../../../design-system/molecules/Card';\nimport { SearchBar } from '../../../design-system/molecules/SearchBar';\nimport { cn } from '../../../design-system/utils';\n\nexport interface GDPRAuditPanelProps {\n  /** ID dell'entità per cui mostrare l'audit trail */\n  entityId: string;\n  \n  /** Tipo di entità */\n  entityType: string;\n  \n  /** Log di audit da visualizzare */\n  auditLogs?: GDPRAuditLogEntry[];\n  \n  /** Callback per caricare più log */\n  onLoadMore?: () => void;\n  \n  /** Callback per esportare i log */\n  onExport?: (logs: GDPRAuditLogEntry[]) => void;\n  \n  /** Stato di caricamento */\n  loading?: boolean;\n  \n  /** Classi CSS personalizzate */\n  className?: string;\n}\n\nexport const GDPRAuditPanel: React.FC<GDPRAuditPanelProps> = ({\n  entityId,\n  entityType,\n  auditLogs,\n  onLoadMore,\n  onExport,\n  loading = false,\n  className = ''\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedAction, setSelectedAction] = useState<GDPRAuditAction | 'all'>('all');\n  const [expandedLog, setExpandedLog] = useState<string | null>(null);\n\n  // Filtra i log in base ai criteri di ricerca\n  const filteredLogs = (auditLogs || []).filter(log => {\n    const matchesSearch = searchTerm === '' || \n      log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.ipAddress?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.userAgent?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesAction = selectedAction === 'all' || log.action === selectedAction;\n    \n    return matchesSearch && matchesAction;\n  });\n\n  // Formatta la data per la visualizzazione\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('it-IT', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date(date));\n  };\n\n  // Ottieni il colore per il tipo di azione\n  const getActionColor = (action: GDPRAuditAction) => {\n    switch (action) {\n      case 'VIEW':\n        return 'bg-blue-100 text-blue-800';\n      case 'CREATE':\n        return 'bg-green-100 text-green-800';\n      case 'UPDATE':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'DELETE':\n        return 'bg-red-100 text-red-800';\n      case 'EXPORT':\n        return 'bg-purple-100 text-purple-800';\n      case 'CONSENT_GIVEN':\n        return 'bg-emerald-100 text-emerald-800';\n      case 'CONSENT_REVOKED':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Gestisce l'espansione/contrazione dei dettagli del log\n  const toggleLogExpansion = (logId: string) => {\n    setExpandedLog(expandedLog === logId ? null : logId);\n  };\n\n  return (\n    <Card className={cn('p-6', className)}>\n      {/* Header del pannello */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-2\">\n          <Calendar className=\"h-5 w-5 text-gray-500\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Audit Trail GDPR\n          </h3>\n          <span className=\"text-sm text-gray-500\">\n            ({filteredLogs.length} di {(auditLogs || []).length} log)\n          </span>\n        </div>\n        \n        {onExport && (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onExport(filteredLogs)}\n            disabled={filteredLogs.length === 0}\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Esporta\n          </Button>\n        )}\n      </div>\n\n      {/* Controlli di filtro */}\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"flex-1\">\n          <SearchBar\n            value={searchTerm}\n            onChange={setSearchTerm}\n            placeholder=\"Cerca nei log di audit...\"\n            className=\"w-full\"\n          />\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Filter className=\"h-4 w-4 text-gray-500\" />\n          <select\n            value={selectedAction}\n            onChange={(e) => setSelectedAction(e.target.value as GDPRAuditAction | 'all')}\n            className=\"px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"all\">Tutte le azioni</option>\n            <option value=\"VIEW\">Visualizzazione</option>\n            <option value=\"CREATE\">Creazione</option>\n            <option value=\"UPDATE\">Modifica</option>\n            <option value=\"DELETE\">Eliminazione</option>\n            <option value=\"EXPORT\">Esportazione</option>\n            <option value=\"CONSENT_GIVEN\">Consenso dato</option>\n            <option value=\"CONSENT_REVOKED\">Consenso revocato</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Lista dei log */}\n      <div className=\"space-y-3\">\n        {loading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"text-gray-500 mt-2\">Caricamento log...</p>\n          </div>\n        ) : filteredLogs.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Calendar className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-500\">\n              {(auditLogs || []).length === 0 \n                ? 'Nessun log di audit disponibile'\n                : 'Nessun log corrisponde ai criteri di ricerca'\n              }\n            </p>\n          </div>\n        ) : (\n          filteredLogs.map((log) => (\n            <div\n              key={log.id}\n              className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors\"\n            >\n              {/* Riga principale del log */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <span className={cn(\n                    'px-2 py-1 rounded-full text-xs font-medium',\n                    getActionColor(log.action)\n                  )}>\n                    {log.action}\n                  </span>\n                  \n                  <div className=\"text-sm\">\n                    <span className=\"font-medium text-gray-900\">\n                      {formatDate(log.timestamp)}\n                    </span>\n                    {log.ipAddress && (\n                      <span className=\"text-gray-500 ml-2\">\n                        da {log.ipAddress}\n                      </span>\n                    )}\n                  </div>\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => toggleLogExpansion(log.id)}\n                >\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              {/* Dettagli espansi */}\n              {expandedLog === log.id && (\n                <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium text-gray-700\">ID Sessione:</span>\n                      <span className=\"ml-2 text-gray-600\">{log.sessionId || 'N/A'}</span>\n                    </div>\n                    \n                    <div>\n                      <span className=\"font-medium text-gray-700\">User Agent:</span>\n                      <span className=\"ml-2 text-gray-600 truncate\" title={log.userAgent}>\n                        {log.userAgent || 'N/A'}\n                      </span>\n                    </div>\n                    \n                    {log.oldData && (\n                      <div className=\"md:col-span-2\">\n                        <span className=\"font-medium text-gray-700\">Dati precedenti:</span>\n                        <pre className=\"mt-1 p-2 bg-gray-100 rounded text-xs overflow-x-auto\">\n                          {JSON.stringify(log.oldData, null, 2)}\n                        </pre>\n                      </div>\n                    )}\n                    \n                    {log.newData && (\n                      <div className=\"md:col-span-2\">\n                        <span className=\"font-medium text-gray-700\">Nuovi dati:</span>\n                        <pre className=\"mt-1 p-2 bg-gray-100 rounded text-xs overflow-x-auto\">\n                          {JSON.stringify(log.newData, null, 2)}\n                        </pre>\n                      </div>\n                    )}\n                    \n                    {log.metadata && (\n                      <div className=\"md:col-span-2\">\n                        <span className=\"font-medium text-gray-700\">Metadati:</span>\n                        <pre className=\"mt-1 p-2 bg-gray-100 rounded text-xs overflow-x-auto\">\n                          {JSON.stringify(log.metadata, null, 2)}\n                        </pre>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Pulsante per caricare più log */}\n      {onLoadMore && !loading && filteredLogs.length > 0 && (\n        <div className=\"text-center mt-6\">\n          <Button\n            variant=\"outline\"\n            onClick={onLoadMore}\n          >\n            Carica altri log\n          </Button>\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default GDPRAuditPanel;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPRComplianceIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPRConsentModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GDPRConsent' is defined but never used.","line":12,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":57}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Consent Modal - Modale per gestione consensi GDPR\n * \n * Componente per la gestione dei consensi GDPR con interfaccia\n * user-friendly e conformità normativa.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { GDPRConsentConfig, GDPRConsentType, GDPRConsent } from '../types/gdpr.types';\nimport { Modal } from '../../../design-system/molecules/Modal';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Card } from '../../../design-system/molecules/Card';\nimport { Label } from '../../../design-system/atoms/Label';\n// Note: Some UI components may need to be implemented or imported from alternative sources\n// Switch, Badge, Separator, Alert, ScrollArea, Checkbox are not available in current design system\nimport { Shield, Info, Clock, AlertTriangle } from 'lucide-react';\n\n/**\n * Props del componente GDPRConsentModal\n */\nexport interface GDPRConsentModalProps {\n  /** Stato apertura modale */\n  open: boolean;\n  \n  /** Callback chiusura modale */\n  onClose: () => void;\n  \n  /** Configurazione consensi GDPR */\n  config?: GDPRConsentConfig;\n  \n  /** Consensi attuali dell'utente */\n  currentConsents: Record<string, boolean>;\n  \n  /** Callback per richiesta consenso */\n  onConsentChange: (consentTypes: GDPRConsentType[]) => Promise<void>;\n  \n  /** Callback per revoca consenso */\n  onConsentRevoke: (consentTypes: GDPRConsentType[]) => Promise<void>;\n  \n  /** Mostra solo consensi mancanti */\n  showOnlyMissing?: boolean;\n  \n  /** Modalità sola lettura */\n  readOnly?: boolean;\n}\n\n/**\n * Descrizioni dei tipi di consenso\n */\nconst CONSENT_DESCRIPTIONS: Record<GDPRConsentType, {\n  title: string;\n  description: string;\n  purpose: string;\n  legalBasis: string;\n  icon: React.ReactNode;\n}> = {\n  DATA_PROCESSING: {\n    title: 'Trattamento Dati Personali',\n    description: 'Consenso per il trattamento dei tuoi dati personali per le finalità del servizio.',\n    purpose: 'Gestione account, erogazione servizi, comunicazioni necessarie',\n    legalBasis: 'Art. 6(1)(a) GDPR - Consenso dell\\'interessato',\n    icon: <Shield className=\"h-5 w-5 text-blue-600\" />\n  },\n  DATA_STORAGE: {\n    title: 'Conservazione Dati',\n    description: 'Consenso per la conservazione dei dati oltre il periodo strettamente necessario.',\n    purpose: 'Miglioramento servizi, analisi storiche, backup di sicurezza',\n    legalBasis: 'Art. 6(1)(a) GDPR - Consenso dell\\'interessato',\n    icon: <Shield className=\"h-5 w-5 text-green-600\" />\n  },\n  DATA_SHARING: {\n    title: 'Condivisione Dati',\n    description: 'Consenso per la condivisione dei dati con partner e fornitori di servizi.',\n    purpose: 'Integrazione servizi, supporto tecnico, elaborazioni esterne',\n    legalBasis: 'Art. 6(1)(a) GDPR - Consenso dell\\'interessato',\n    icon: <Shield className=\"h-5 w-5 text-orange-600\" />\n  },\n  MARKETING: {\n    title: 'Comunicazioni Marketing',\n    description: 'Consenso per l\\'invio di comunicazioni promozionali e marketing.',\n    purpose: 'Newsletter, offerte commerciali, aggiornamenti prodotti',\n    legalBasis: 'Art. 6(1)(a) GDPR - Consenso dell\\'interessato',\n    icon: <Shield className=\"h-5 w-5 text-purple-600\" />\n  },\n  ANALYTICS: {\n    title: 'Analisi e Statistiche',\n    description: 'Consenso per l\\'utilizzo dei dati a fini analitici e statistici.',\n    purpose: 'Miglioramento UX, analisi comportamentali, ottimizzazione servizi',\n    legalBasis: 'Art. 6(1)(a) GDPR - Consenso dell\\'interessato',\n    icon: <Shield className=\"h-5 w-5 text-cyan-600\" />\n  },\n  PROFILING: {\n    title: 'Profilazione',\n    description: 'Consenso per attività di profilazione e personalizzazione.',\n    purpose: 'Contenuti personalizzati, raccomandazioni, targeting',\n    legalBasis: 'Art. 6(1)(a) GDPR - Consenso dell\\'interessato',\n    icon: <Shield className=\"h-5 w-5 text-red-600\" />\n  },\n  AUTOMATED_DECISION: {\n    title: 'Decisioni Automatizzate',\n    description: 'Consenso per processi decisionali automatizzati che ti riguardano.',\n    purpose: 'Approvazioni automatiche, scoring, classificazioni',\n    legalBasis: 'Art. 22 GDPR - Decisioni automatizzate',\n    icon: <Shield className=\"h-5 w-5 text-indigo-600\" />\n  }\n};\n\n/**\n * Modale per gestione consensi GDPR\n */\nexport function GDPRConsentModal({\n  open,\n  onClose,\n  config,\n  currentConsents,\n  onConsentChange,\n  onConsentRevoke,\n  showOnlyMissing = false,\n  readOnly = false\n}: GDPRConsentModalProps) {\n  \n  const [pendingConsents, setPendingConsents] = useState<Record<string, boolean>>({});\n  const [loading, setLoading] = useState(false);\n  const [acceptAll, setAcceptAll] = useState(false);\n  \n  // Inizializza consensi pending con quelli attuali\n  useEffect(() => {\n    setPendingConsents({ ...currentConsents });\n  }, [currentConsents, open]);\n  \n  // Aggiorna stato \"Accetta tutto\"\n  useEffect(() => {\n    if (!config) return;\n    \n    const allRequired = config.requiredConsents.every(type => pendingConsents[type]);\n    const allOptional = config.optionalConsents?.every(type => pendingConsents[type]) ?? true;\n    \n    setAcceptAll(allRequired && allOptional);\n  }, [pendingConsents, config]);\n  \n  // Consensi da mostrare\n  const consentsToShow = React.useMemo(() => {\n    if (!config) return [];\n    \n    const allConsents = [...config.requiredConsents, ...(config.optionalConsents || [])];\n    \n    if (showOnlyMissing) {\n      return allConsents.filter(type => !currentConsents[type]);\n    }\n    \n    return allConsents;\n  }, [config, currentConsents, showOnlyMissing]);\n  \n  // Handler per cambio consenso singolo\n  const handleConsentToggle = (consentType: GDPRConsentType, granted: boolean) => {\n    setPendingConsents(prev => ({\n      ...prev,\n      [consentType]: granted\n    }));\n  };\n  \n  // Handler per \"Accetta tutto\"\n  const handleAcceptAll = (accept: boolean) => {\n    if (!config) return;\n    \n    const newConsents = { ...pendingConsents };\n    \n    // Imposta tutti i consensi richiesti\n    config.requiredConsents.forEach(type => {\n      newConsents[type] = accept;\n    });\n    \n    // Imposta tutti i consensi opzionali\n    config.optionalConsents?.forEach(type => {\n      newConsents[type] = accept;\n    });\n    \n    setPendingConsents(newConsents);\n    setAcceptAll(accept);\n  };\n  \n  // Handler per salvataggio\n  const handleSave = async () => {\n    if (!config) return;\n    \n    setLoading(true);\n    \n    try {\n      // Identifica consensi da concedere e revocare\n      const toGrant: GDPRConsentType[] = [];\n      const toRevoke: GDPRConsentType[] = [];\n      \n      Object.entries(pendingConsents).forEach(([type, granted]) => {\n        const consentType = type as GDPRConsentType;\n        const currentlyGranted = currentConsents[type];\n        \n        if (granted && !currentlyGranted) {\n          toGrant.push(consentType);\n        } else if (!granted && currentlyGranted) {\n          toRevoke.push(consentType);\n        }\n      });\n      \n      // Esegui operazioni\n      if (toGrant.length > 0) {\n        await onConsentChange(toGrant);\n      }\n      \n      if (toRevoke.length > 0) {\n        await onConsentRevoke(toRevoke);\n      }\n      \n      onClose();\n    } catch (error) {\n      console.error('Errore nel salvataggio consensi:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Verifica se ci sono consensi richiesti mancanti\n  const missingRequiredConsents = config?.requiredConsents.filter(type => !pendingConsents[type]) || [];\n  const canSave = missingRequiredConsents.length === 0;\n  \n  return (\n    <Modal \n      isOpen={open} \n      onClose={onClose}\n      title=\"Gestione Consensi GDPR\"\n      size=\"xl\"\n      className=\"max-w-4xl\"\n    >\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-2 text-lg font-semibold\">\n          <Shield className=\"h-5 w-5\" />\n          Gestione Consensi GDPR\n        </div>\n        <p className=\"text-sm text-gray-600\">\n          Gestisci i tuoi consensi per il trattamento dei dati personali in conformità al GDPR.\n          I consensi contrassegnati come obbligatori sono necessari per l'utilizzo del servizio.\n        </p>\n        \n        <div className=\"max-h-[60vh] overflow-y-auto pr-4\">\n          <div className=\"space-y-6\">\n            {/* Informazioni generali */}\n            <div className=\"flex gap-3 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <Info className=\"h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm\">\n                <strong>I tuoi diritti:</strong> Puoi modificare o revocare i tuoi consensi in qualsiasi momento.\n                La revoca non compromette la liceità del trattamento basata sul consenso prestato prima della revoca.\n              </div>\n            </div>\n            \n            {/* Controllo \"Accetta tutto\" */}\n            {!readOnly && consentsToShow.length > 1 && (\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-base font-medium\">Accetta tutti i consensi</Label>\n                    <p className=\"text-sm text-gray-600\">\n                      Concedi tutti i consensi disponibili con un solo click\n                    </p>\n                  </div>\n                  <input\n                    type=\"checkbox\"\n                    checked={acceptAll}\n                    onChange={(e) => handleAcceptAll(e.target.checked)}\n                    disabled={loading}\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                  />\n                </div>\n              </Card>\n            )}\n            \n            <hr className=\"border-gray-200\" />\n            \n            {/* Lista consensi */}\n            <div className=\"space-y-4\">\n              {consentsToShow.map((consentType) => {\n                const consentInfo = CONSENT_DESCRIPTIONS[consentType];\n                const isRequired = config?.requiredConsents.includes(consentType);\n                const isGranted = pendingConsents[consentType];\n                const isCurrentlyGranted = currentConsents[consentType];\n                \n                return (\n                  <Card key={consentType} className={`p-4 transition-colors ${\n                    isGranted ? 'border-green-200 bg-green-50/50' : 'border-gray-200'\n                  }`}>\n                    <div className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start gap-3\">\n                          {consentInfo.icon}\n                          <div className=\"space-y-1\">\n                            <h3 className=\"text-base font-semibold flex items-center gap-2\">\n                              {consentInfo.title}\n                              {isRequired && (\n                                <span className=\"px-2 py-1 text-xs bg-red-100 text-red-800 rounded\">\n                                  Obbligatorio\n                                </span>\n                              )}\n                              {isCurrentlyGranted && (\n                                <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded\">\n                                  Attivo\n                                </span>\n                              )}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">\n                              {consentInfo.description}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        {!readOnly && (\n                          <input\n                            type=\"checkbox\"\n                            checked={isGranted}\n                            onChange={(e) => handleConsentToggle(consentType, e.target.checked)}\n                            disabled={loading || (isRequired && showOnlyMissing)}\n                            className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                          />\n                        )}\n                        \n                        {readOnly && (\n                          <span className={`px-2 py-1 text-xs rounded ${\n                            isGranted ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                          }`}>\n                            {isGranted ? 'Concesso' : 'Non concesso'}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-0\">\n                      <div className=\"space-y-3 text-sm\">\n                        <div>\n                          <strong>Finalità:</strong>\n                          <p className=\"text-gray-600 mt-1\">{consentInfo.purpose}</p>\n                        </div>\n                        \n                        <div>\n                          <strong>Base giuridica:</strong>\n                          <p className=\"text-gray-600 mt-1\">{consentInfo.legalBasis}</p>\n                        </div>\n                        \n                        {config?.consentValidityDays && (\n                          <div className=\"flex items-center gap-2 text-gray-600\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span>Validità: {config.consentValidityDays} giorni</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n            \n            {/* Avviso consensi mancanti */}\n            {missingRequiredConsents.length > 0 && (\n              <div className=\"flex gap-3 p-4 bg-red-50 border border-red-200 rounded-lg\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm\">\n                  <strong>Attenzione:</strong> Alcuni consensi obbligatori non sono stati concessi.\n                  È necessario concedere tutti i consensi obbligatori per utilizzare il servizio.\n                </div>\n              </div>\n            )}\n            \n            {/* Informazioni aggiuntive */}\n            {config?.requiresReconfirmation && (\n              <div className=\"flex gap-3 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <Info className=\"h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm\">\n                  <strong>Riconferma periodica:</strong> Ti verrà richiesto di riconfermare i tuoi consensi\n                  ogni {config.reconfirmationIntervalDays} giorni per garantire che siano sempre aggiornati.\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end gap-2 mt-6 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={onClose} disabled={loading}>\n            Annulla\n          </Button>\n          \n          {!readOnly && (\n            <Button\n              onClick={handleSave}\n              disabled={!canSave || loading}\n              className=\"min-w-[120px]\"\n            >\n              {loading ? 'Salvataggio...' : 'Salva Consensi'}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default GDPRConsentModal;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPRDataExportModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPRDeletionRequestModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPRDeletionRequestModal - Modal per la richiesta di cancellazione dati GDPR\n * \n * Componente che permette agli utenti di richiedere la cancellazione\n * dei propri dati personali in conformità al diritto all'oblio GDPR.\n * \n * @version 1.0\n * @date 30 Gennaio 2025\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Trash2, AlertTriangle, CheckCircle, Clock, X, Loader, Shield } from 'lucide-react';\nimport { GDPRDeletionRequest, GDPRDeletionReason, GDPRDeletionStatus } from '../types/gdpr.types';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Card } from '../../../design-system/molecules/Card';\nimport { cn } from '../../../design-system/utils';\n\nexport interface GDPRDeletionRequestModalProps {\n  /** Indica se il modal è aperto */\n  isOpen: boolean;\n  \n  /** Callback per chiudere il modal */\n  onClose: () => void;\n  \n  /** ID dell'entità da cancellare */\n  entityId: string;\n  \n  /** Tipo di entità */\n  entityType: string;\n  \n  /** Callback per avviare la richiesta di cancellazione */\n  onSubmitDeletion: (request: Omit<GDPRDeletionRequest, 'id' | 'createdAt' | 'status'>) => Promise<void>;\n  \n  /** Lista delle richieste di cancellazione esistenti */\n  existingRequests?: GDPRDeletionRequest[];\n  \n  /** Indica se ci sono dati che non possono essere cancellati */\n  hasRetentionConstraints?: boolean;\n  \n  /** Dettagli sui vincoli di conservazione */\n  retentionDetails?: string[];\n  \n  /** Stato di caricamento */\n  loading?: boolean;\n  \n  /** Classi CSS personalizzate */\n  className?: string;\n}\n\nexport const GDPRDeletionRequestModal: React.FC<GDPRDeletionRequestModalProps> = ({\n  isOpen,\n  onClose,\n  entityId,\n  entityType,\n  onSubmitDeletion,\n  existingRequests = [],\n  hasRetentionConstraints = false,\n  retentionDetails = [],\n  loading = false,\n  className = ''\n}) => {\n  const [selectedReason, setSelectedReason] = useState<GDPRDeletionReason>('NO_LONGER_NECESSARY');\n  const [customReason, setCustomReason] = useState('');\n  const [confirmationText, setConfirmationText] = useState('');\n  const [hasConfirmed, setHasConfirmed] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [currentStep, setCurrentStep] = useState<'reason' | 'confirmation' | 'review'>('reason');\n\n  const CONFIRMATION_TEXT = 'CANCELLA I MIEI DATI';\n\n  // Reset form quando il modal si apre\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedReason('NO_LONGER_NECESSARY');\n      setCustomReason('');\n      setConfirmationText('');\n      setHasConfirmed(false);\n      setIsSubmitting(false);\n      setCurrentStep('reason');\n    }\n  }, [isOpen]);\n\n  // Gestisce la chiusura del modal\n  const handleClose = () => {\n    if (!isSubmitting) {\n      onClose();\n    }\n  };\n\n  // Gestisce l'invio della richiesta di cancellazione\n  const handleSubmit = async () => {\n    if (isSubmitting || !hasConfirmed) return;\n    \n    setIsSubmitting(true);\n    \n    try {\n      await onSubmitDeletion({\n        entityId,\n        entityType,\n        reason: selectedReason,\n        customReason: selectedReason === 'OTHER' ? customReason.trim() : undefined,\n        requestedAt: new Date()\n      });\n      \n      onClose();\n    } catch (error) {\n      console.error('Errore durante la richiesta di cancellazione:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Ottieni la configurazione per lo stato della richiesta\n  const getStatusConfig = (status: GDPRDeletionStatus) => {\n    switch (status) {\n      case 'PENDING':\n        return {\n          icon: Clock,\n          color: 'text-blue-600',\n          bgColor: 'bg-blue-50',\n          label: 'In attesa'\n        };\n      case 'UNDER_REVIEW':\n        return {\n          icon: Loader,\n          color: 'text-yellow-600',\n          bgColor: 'bg-yellow-50',\n          label: 'In revisione'\n        };\n      case 'APPROVED':\n        return {\n          icon: CheckCircle,\n          color: 'text-green-600',\n          bgColor: 'bg-green-50',\n          label: 'Approvata'\n        };\n      case 'COMPLETED':\n        return {\n          icon: CheckCircle,\n          color: 'text-green-600',\n          bgColor: 'bg-green-50',\n          label: 'Completata'\n        };\n      case 'REJECTED':\n        return {\n          icon: X,\n          color: 'text-red-600',\n          bgColor: 'bg-red-50',\n          label: 'Rifiutata'\n        };\n      default:\n        return {\n          icon: Clock,\n          color: 'text-gray-600',\n          bgColor: 'bg-gray-50',\n          label: 'Sconosciuto'\n        };\n    }\n  };\n\n  // Ottieni la descrizione per il motivo di cancellazione\n  const getReasonDescription = (reason: GDPRDeletionReason) => {\n    switch (reason) {\n      case 'NO_LONGER_NECESSARY':\n        return 'I dati non sono più necessari per gli scopi originali';\n      case 'WITHDRAW_CONSENT':\n        return 'Ritiro il consenso al trattamento dei dati';\n      case 'UNLAWFUL_PROCESSING':\n        return 'I dati sono stati trattati in modo illecito';\n      case 'LEGAL_OBLIGATION':\n        return 'Cancellazione richiesta per obbligo legale';\n      case 'OTHER':\n        return 'Altro motivo (specificare)';\n      default:\n        return '';\n    }\n  };\n\n  // Formatta la data\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('it-IT', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(new Date(date));\n  };\n\n  // Verifica se può procedere al passo successivo\n  const canProceed = () => {\n    if (currentStep === 'reason') {\n      return selectedReason !== 'OTHER' || customReason.trim().length > 0;\n    }\n    if (currentStep === 'confirmation') {\n      return confirmationText === CONFIRMATION_TEXT;\n    }\n    return hasConfirmed;\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Overlay */}\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\n        onClick={handleClose}\n      />\n      \n      {/* Modal */}\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <Card className={cn(\n          'relative w-full max-w-2xl bg-white shadow-xl',\n          className\n        )}>\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-red-50 rounded-full\">\n                <Trash2 className=\"h-6 w-6 text-red-600\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  Richiesta Cancellazione Dati\n                </h2>\n                <p className=\"text-sm text-gray-500\">\n                  Diritto all'oblio secondo il GDPR\n                </p>\n              </div>\n            </div>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClose}\n              disabled={isSubmitting}\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n\n          {/* Contenuto */}\n          <div className=\"p-6\">\n            {/* Richieste esistenti */}\n            {existingRequests.length > 0 && (\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-3\">\n                  Richieste precedenti\n                </h3>\n                <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                  {existingRequests.slice(0, 3).map((request) => {\n                    const statusConfig = getStatusConfig(request.status);\n                    const StatusIcon = statusConfig.icon;\n                    \n                    return (\n                      <div\n                        key={request.id}\n                        className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <StatusIcon className={cn(\n                            'h-4 w-4',\n                            statusConfig.color\n                          )} />\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900\">\n                              {formatDate(request.createdAt)}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {statusConfig.label} - {getReasonDescription(request.reason)}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n\n            {/* Vincoli di conservazione */}\n            {hasRetentionConstraints && (\n              <div className=\"mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Shield className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\n                  <div className=\"text-sm text-yellow-800\">\n                    <p className=\"font-medium mb-2\">Vincoli di conservazione attivi:</p>\n                    <ul className=\"list-disc list-inside space-y-1 text-yellow-700\">\n                      {retentionDetails.map((detail, index) => (\n                        <li key={index}>{detail}</li>\n                      ))}\n                    </ul>\n                    <p className=\"mt-2 text-xs\">\n                      Alcuni dati potrebbero non essere cancellabili immediatamente per motivi legali.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 1: Selezione motivo */}\n            {currentStep === 'reason' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n                    Motivo della richiesta di cancellazione\n                  </h3>\n                  \n                  <div className=\"space-y-3\">\n                    {(['NO_LONGER_NECESSARY', 'WITHDRAW_CONSENT', 'UNLAWFUL_PROCESSING', 'LEGAL_OBLIGATION', 'OTHER'] as GDPRDeletionReason[]).map((reason) => (\n                      <label\n                        key={reason}\n                        className={cn(\n                          'relative flex cursor-pointer rounded-lg border p-4 focus:outline-none',\n                          selectedReason === reason\n                            ? 'border-red-600 bg-red-50'\n                            : 'border-gray-300 bg-white hover:bg-gray-50'\n                        )}\n                      >\n                        <input\n                          type=\"radio\"\n                          name=\"reason\"\n                          value={reason}\n                          checked={selectedReason === reason}\n                          onChange={(e) => setSelectedReason(e.target.value as GDPRDeletionReason)}\n                          className=\"sr-only\"\n                        />\n                        <div className=\"flex items-center w-full\">\n                          <div className=\"text-sm flex-1\">\n                            <div className=\"font-medium text-gray-900\">\n                              {getReasonDescription(reason)}\n                            </div>\n                          </div>\n                        </div>\n                        {selectedReason === reason && (\n                          <CheckCircle className=\"h-5 w-5 text-red-600 absolute top-4 right-4\" />\n                        )}\n                      </label>\n                    ))}\n                  </div>\n\n                  {selectedReason === 'OTHER' && (\n                    <div className=\"mt-4\">\n                      <label htmlFor=\"customReason\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Specifica il motivo\n                      </label>\n                      <textarea\n                        id=\"customReason\"\n                        value={customReason}\n                        onChange={(e) => setCustomReason(e.target.value)}\n                        rows={3}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500\"\n                        placeholder=\"Descrivi il motivo della richiesta di cancellazione...\"\n                        maxLength={500}\n                        required\n                      />\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {customReason.length}/500 caratteri\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Conferma */}\n            {currentStep === 'confirmation' && (\n              <div className=\"space-y-6\">\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <AlertTriangle className=\"h-5 w-5 text-red-600 mt-0.5\" />\n                    <div className=\"text-sm text-red-800\">\n                      <p className=\"font-medium mb-2\">Attenzione: Azione irreversibile</p>\n                      <ul className=\"list-disc list-inside space-y-1 text-red-700\">\n                        <li>Questa azione cancellerà permanentemente i tuoi dati</li>\n                        <li>Non sarà possibile recuperare i dati una volta cancellati</li>\n                        <li>Alcuni dati potrebbero essere conservati per motivi legali</li>\n                        <li>La cancellazione potrebbe richiedere fino a 30 giorni</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <label htmlFor=\"confirmation\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Per confermare, digita: <span className=\"font-mono font-bold\">{CONFIRMATION_TEXT}</span>\n                  </label>\n                  <input\n                    id=\"confirmation\"\n                    type=\"text\"\n                    value={confirmationText}\n                    onChange={(e) => setConfirmationText(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500\"\n                    placeholder={CONFIRMATION_TEXT}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Step 3: Revisione finale */}\n            {currentStep === 'review' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n                    Riepilogo richiesta\n                  </h3>\n                  \n                  <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Motivo:</span>\n                      <span className=\"ml-2 text-gray-600\">\n                        {getReasonDescription(selectedReason)}\n                      </span>\n                    </div>\n                    \n                    {selectedReason === 'OTHER' && customReason && (\n                      <div>\n                        <span className=\"font-medium text-gray-700\">Dettagli:</span>\n                        <span className=\"ml-2 text-gray-600\">{customReason}</span>\n                      </div>\n                    )}\n                    \n                    <div>\n                      <span className=\"font-medium text-gray-700\">Entità:</span>\n                      <span className=\"ml-2 text-gray-600\">{entityType} (ID: {entityId})</span>\n                    </div>\n                  </div>\n                </div>\n\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={hasConfirmed}\n                    onChange={(e) => setHasConfirmed(e.target.checked)}\n                    className=\"h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded\"\n                  />\n                  <span className=\"ml-3 text-sm text-gray-700\">\n                    Confermo di voler procedere con la cancellazione dei miei dati personali\n                  </span>\n                </label>\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"flex items-center justify-between p-6 border-t border-gray-200\">\n            <div className=\"flex space-x-2\">\n              {currentStep !== 'reason' && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    if (currentStep === 'confirmation') setCurrentStep('reason');\n                    if (currentStep === 'review') setCurrentStep('confirmation');\n                  }}\n                  disabled={isSubmitting}\n                >\n                  Indietro\n                </Button>\n              )}\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={isSubmitting}\n              >\n                Annulla\n              </Button>\n              \n              {currentStep === 'review' ? (\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleSubmit}\n                  disabled={!canProceed() || isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Elaborazione...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Conferma cancellazione\n                    </>\n                  )}\n                </Button>\n              ) : (\n                <Button\n                  onClick={() => {\n                    if (currentStep === 'reason') setCurrentStep('confirmation');\n                    if (currentStep === 'confirmation') setCurrentStep('review');\n                  }}\n                  disabled={!canProceed()}\n                >\n                  Continua\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default GDPRDeletionRequestModal;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPREntityActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Entity Actions - Componente azioni batch\n * \n * Componente per gestire le azioni batch sulle entità:\n * - Azioni di selezione\n * - Azioni batch\n * - Azioni GDPR\n * - Conferme e validazioni\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport React, { useState } from 'react';\nimport { Button, Badge } from '../../../design-system';\nimport { \n  DropdownMenu, \n  DropdownMenuTrigger, \n  DropdownMenuContent, \n  DropdownMenuItem\n} from '../../../design-system';\nimport { \n  CheckSquare,\n  Square,\n  Trash2,\n  Download,\n  Archive,\n  Mail,\n  Shield,\n  AlertTriangle,\n  ChevronDown,\n  X\n} from 'lucide-react';\nimport { EntityAction, BaseEntity } from '../types';\n\n/**\n * Props del componente GDPREntityActions\n */\nexport interface GDPREntityActionsProps<T extends BaseEntity = BaseEntity> {\n  /** Elementi selezionati */\n  selectedItems: string[];\n  \n  /** Totale elementi */\n  totalItems: number;\n  \n  /** Dati completi per validazioni */\n  allData: T[];\n  \n  /** Azioni batch disponibili */\n  batchActions?: EntityAction[];\n  \n  /** Callback per selezione tutti */\n  onSelectAll: () => void;\n  \n  /** Callback per deseleziona tutti */\n  onDeselectAll: () => void;\n  \n  /** Callback per azioni batch */\n  onBatchAction?: (actionKey: string, selectedIds: string[]) => void;\n  \n  /** Mostra contatori */\n  showCounters?: boolean;\n  \n  /** Mostra azioni GDPR */\n  showGDPRActions?: boolean;\n  \n  /** Classi CSS personalizzate */\n  className?: string;\n}\n\n/**\n * Componente per gestire le azioni batch\n */\nexport function GDPREntityActions<T extends BaseEntity = BaseEntity>({\n  selectedItems,\n  totalItems,\n  allData,\n  batchActions = [],\n  onSelectAll,\n  onDeselectAll,\n  onBatchAction,\n  showCounters = true,\n  showGDPRActions = true,\n  className\n}: GDPREntityActionsProps<T>) {\n  const [confirmAction, setConfirmAction] = useState<string | null>(null);\n  \n  // Stato selezione\n  const hasSelection = selectedItems.length > 0;\n  const isAllSelected = selectedItems.length === totalItems && totalItems > 0;\n  const isPartiallySelected = selectedItems.length > 0 && selectedItems.length < totalItems;\n  \n  // Azioni GDPR predefinite\n  const gdprActions: EntityAction[] = [\n    {\n      key: 'export-data',\n      label: 'Esporta Dati Selezionati',\n      icon: <Download className=\"h-4 w-4\" />,\n      variant: 'secondary',\n      visible: true\n    },\n    {\n      key: 'request-consent',\n      label: 'Richiedi Consenso',\n      icon: <Shield className=\"h-4 w-4\" />,\n      variant: 'secondary',\n      visible: true\n    },\n    {\n      key: 'anonymize',\n      label: 'Anonimizza Dati',\n      icon: <Archive className=\"h-4 w-4\" />,\n      variant: 'secondary',\n      visible: true\n    },\n    {\n      key: 'delete-gdpr',\n      label: 'Cancellazione GDPR',\n      icon: <Trash2 className=\"h-4 w-4\" />,\n      variant: 'danger',\n      visible: true\n    }\n  ];\n  \n  // Combina azioni batch e GDPR\n  const allActions = [\n    ...batchActions,\n    ...(showGDPRActions ? gdprActions : [])\n  ];\n  \n  // Azioni che richiedono conferma\n  const actionsRequiringConfirmation = ['request-consent', 'anonymize', 'delete-gdpr'];\n  \n  // Gestione azioni\n  const handleAction = (actionKey: string) => {\n    if (actionsRequiringConfirmation.includes(actionKey)) {\n      setConfirmAction(actionKey);\n    } else {\n      onBatchAction?.(actionKey, selectedItems);\n    }\n  };\n  \n  // Conferma azione\n  const handleConfirmAction = () => {\n    if (confirmAction) {\n      onBatchAction?.(confirmAction, selectedItems);\n      setConfirmAction(null);\n    }\n  };\n  \n  // Annulla conferma\n  const handleCancelAction = () => {\n    setConfirmAction(null);\n  };\n  \n  // Filtra azioni visibili\n  const visibleActions = allActions.filter(action => {\n    if (typeof action.visible === 'function') {\n      // Per azioni batch, verifica su tutti gli elementi selezionati\n      const selectedData = allData.filter(item => selectedItems.includes(item.id));\n      return selectedData.every(item => action.visible!(item));\n    }\n    return action.visible !== false;\n  });\n  \n  // Azioni principali (prime 3)\n  const primaryActions = visibleActions.slice(0, 3);\n  const secondaryActions = visibleActions.slice(3);\n  \n  if (!hasSelection && !showCounters) {\n    return null;\n  }\n  \n  return (\n    <div className={`gdpr-entity-actions ${className || ''}`}>\n      <div className=\"flex items-center justify-between p-4 bg-muted/25 border rounded-lg\">\n        {/* Selezione e contatori */}\n        <div className=\"flex items-center gap-4\">\n          {/* Checkbox selezione tutti */}\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={isAllSelected ? onDeselectAll : onSelectAll}\n              className=\"flex items-center justify-center w-5 h-5 border-2 border-gray-300 rounded hover:border-primary focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-1\"\n            >\n              {isAllSelected ? (\n                <CheckSquare className=\"h-4 w-4 text-primary\" />\n              ) : isPartiallySelected ? (\n                <div className=\"w-2 h-2 bg-primary rounded-sm\" />\n              ) : (\n                <Square className=\"h-4 w-4 text-gray-400\" />\n              )}\n            </button>\n            \n            <span className=\"text-sm font-medium\">\n              {isAllSelected ? 'Deseleziona tutto' : 'Seleziona tutto'}\n            </span>\n          </div>\n          \n          {/* Contatori */}\n          {showCounters && (\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {selectedItems.length} di {totalItems} selezionati\n              </Badge>\n              \n              {hasSelection && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onDeselectAll}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  <X className=\"h-3 w-3 mr-1\" />\n                  Deseleziona\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n        \n        {/* Azioni batch */}\n        {hasSelection && visibleActions.length > 0 && (\n          <div className=\"flex items-center gap-2\">\n            {/* Azioni principali */}\n            {primaryActions.map((action) => (\n              <Button\n                key={action.key}\n                variant={action.variant === 'danger' ? 'danger' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleAction(action.key)}\n                disabled={\n                  typeof action.disabled === 'function'\n                    ? allData\n                        .filter(item => selectedItems.includes(item.id))\n                        .some(item => action.disabled!(item))\n                    : action.disabled\n                }\n                className=\"flex items-center gap-1\"\n              >\n                {action.icon}\n                <span className=\"hidden sm:inline\">{action.label}</span>\n              </Button>\n            ))}\n            \n            {/* Menu azioni secondarie */}\n            {secondaryActions.length > 0 && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <span className=\"hidden sm:inline\">Altre azioni</span>\n                    <ChevronDown className=\"h-4 w-4 sm:ml-1\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  {secondaryActions.map((action) => (\n                    <DropdownMenuItem\n                      key={action.key}\n                      onClick={() => handleAction(action.key)}\n                      disabled={\n                        typeof action.disabled === 'function'\n                          ? allData\n                              .filter(item => selectedItems.includes(item.id))\n                              .some(item => action.disabled!(item))\n                          : action.disabled\n                      }\n                      className=\"flex items-center gap-2\"\n                    >\n                      {action.icon}\n                      {action.label}\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n          </div>\n        )}\n      </div>\n      \n      {/* Modal conferma azione */}\n      {confirmAction && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <AlertTriangle className=\"h-6 w-6 text-amber-500\" />\n              <h3 className=\"text-lg font-semibold\">Conferma Azione</h3>\n            </div>\n            \n            <p className=\"text-gray-600 mb-6\">\n              Sei sicuro di voler eseguire l'azione \"{allActions.find(a => a.key === confirmAction)?.label}\" \n              su {selectedItems.length} elementi selezionati?\n              {confirmAction === 'delete-gdpr' && (\n                <span className=\"block mt-2 text-red-600 font-medium\">\n                  Questa azione non può essere annullata e comporterà la cancellazione permanente dei dati.\n                </span>\n              )}\n            </p>\n            \n            <div className=\"flex justify-end gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleCancelAction}\n              >\n                Annulla\n              </Button>\n              <Button\n                variant={confirmAction === 'delete-gdpr' ? 'destructive' : 'primary'}\n                onClick={handleConfirmAction}\n              >\n                Conferma\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GDPREntityActions;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPREntityFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":16,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Entity Filters - Componente filtri avanzati\n * \n * Componente per gestire filtri avanzati delle entità:\n * - Filtri per campo\n * - Filtri per data\n * - Filtri per stato\n * - Filtri GDPR\n * - Reset filtri\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport React, { useState } from 'react';\nimport { Button, Input, Select, Badge } from '../../../design-system';\nimport { Card } from '../../../design-system';\nimport { \n  X, \n  Filter, \n  Search,\n  RotateCcw,\n  ChevronDown,\n  ChevronUp\n} from 'lucide-react';\nimport { FilterConfig, EntityField } from '../types';\n\n/**\n * Tipo per valore filtro\n */\nexport type FilterValue = string | number | boolean | Date | null | undefined;\n\n/**\n * Tipo per tipo di filtro supportato\n */\nexport type FilterType = 'text' | 'number' | 'boolean' | 'date' | 'select';\n\n/**\n * Interfaccia per filtro attivo\n */\nexport interface ActiveFilter {\n  key: string;\n  label: string;\n  value: FilterValue;\n  operator: 'equals' | 'contains' | 'startsWith' | 'endsWith' | 'gt' | 'lt' | 'gte' | 'lte' | 'between';\n  type: FilterType;\n}\n\n/**\n * Props del componente GDPREntityFilters\n */\nexport interface GDPREntityFiltersProps {\n  /** Configurazione filtri disponibili */\n  filterConfig: FilterConfig[];\n  \n  /** Campi entità per filtri dinamici */\n  fields: EntityField[];\n  \n  /** Filtri attivi */\n  activeFilters: ActiveFilter[];\n  \n  /** Callback per aggiornamento filtri */\n  onFiltersChange: (filters: ActiveFilter[]) => void;\n  \n  /** Callback per reset filtri */\n  onResetFilters: () => void;\n  \n  /** Mostra filtri compatti */\n  compact?: boolean;\n  \n  /** Mostra contatore filtri */\n  showCount?: boolean;\n  \n  /** Classi CSS personalizzate */\n  className?: string;\n}\n\n/**\n * Componente per gestire i filtri avanzati\n */\nexport function GDPREntityFilters({\n  filterConfig,\n  fields,\n  activeFilters,\n  onFiltersChange,\n  onResetFilters,\n  compact = false,\n  showCount = true,\n  className\n}: GDPREntityFiltersProps) {\n  const [isExpanded, setIsExpanded] = useState(!compact);\n  const [selectedField, setSelectedField] = useState<string>('');\n  const [filterValue, setFilterValue] = useState<string>('');\n  const [filterOperator, setFilterOperator] = useState<string>('contains');\n  \n  // Operatori disponibili per tipo\n  const operatorsByType = {\n    text: [\n      { value: 'contains', label: 'Contiene' },\n      { value: 'equals', label: 'Uguale a' },\n      { value: 'startsWith', label: 'Inizia con' },\n      { value: 'endsWith', label: 'Finisce con' }\n    ],\n    number: [\n      { value: 'equals', label: 'Uguale a' },\n      { value: 'gt', label: 'Maggiore di' },\n      { value: 'lt', label: 'Minore di' },\n      { value: 'gte', label: 'Maggiore o uguale' },\n      { value: 'lte', label: 'Minore o uguale' }\n    ],\n    date: [\n      { value: 'equals', label: 'Uguale a' },\n      { value: 'gt', label: 'Dopo' },\n      { value: 'lt', label: 'Prima' },\n      { value: 'gte', label: 'Da' },\n      { value: 'lte', label: 'Fino a' }\n    ],\n    boolean: [\n      { value: 'equals', label: 'Uguale a' }\n    ],\n    select: [\n      { value: 'equals', label: 'Uguale a' }\n    ]\n  };\n  \n  // Aggiungi nuovo filtro\n  const handleAddFilter = () => {\n    if (!selectedField || !filterValue) return;\n    \n    const field = fields.find(f => f.key === selectedField);\n    if (!field) return;\n    \n    // Mappa i tipi di campo ai tipi di filtro supportati\n    const getFilterType = (fieldType: string | undefined): FilterType => {\n      switch (fieldType) {\n        case 'number':\n          return 'number';\n        case 'boolean':\n          return 'boolean';\n        case 'date':\n          return 'date';\n        case 'select':\n          return 'select';\n        case 'email':\n        case 'phone':\n        case 'textarea':\n        case 'text':\n        default:\n          return 'text';\n      }\n    };\n    \n    const newFilter: ActiveFilter = {\n      key: selectedField,\n      label: field.label,\n      value: filterValue,\n      operator: filterOperator as ActiveFilter['operator'],\n      type: getFilterType(field.type)\n    };\n    \n    // Evita duplicati\n    const existingIndex = activeFilters.findIndex(f => f.key === selectedField);\n    if (existingIndex >= 0) {\n      const updatedFilters = [...activeFilters];\n      updatedFilters[existingIndex] = newFilter;\n      onFiltersChange(updatedFilters);\n    } else {\n      onFiltersChange([...activeFilters, newFilter]);\n    }\n    \n    // Reset form\n    setSelectedField('');\n    setFilterValue('');\n    setFilterOperator('contains');\n  };\n  \n  // Rimuovi filtro\n  const handleRemoveFilter = (index: number) => {\n    const updatedFilters = activeFilters.filter((_, i) => i !== index);\n    onFiltersChange(updatedFilters);\n  };\n  \n  // Campi filtrabili\n  const filterableFields = fields.filter(field => \n    field.filterable !== false && \n    !['id', 'createdAt', 'updatedAt'].includes(field.key)\n  );\n  \n  // Campo selezionato\n  const selectedFieldConfig = filterableFields.find(f => f.key === selectedField);\n  \n  // Mappa il tipo di campo al tipo di filtro supportato\n  const getFilterType = (fieldType: string | undefined): FilterType => {\n    switch (fieldType) {\n      case 'number':\n        return 'number';\n      case 'boolean':\n        return 'boolean';\n      case 'date':\n        return 'date';\n      case 'select':\n        return 'select';\n      case 'email':\n      case 'phone':\n      case 'textarea':\n      case 'text':\n      default:\n        return 'text';\n    }\n  };\n  \n  const selectedFieldType = selectedFieldConfig ? getFilterType(selectedFieldConfig.type) : 'text';\n  const availableOperators = operatorsByType[selectedFieldType] || operatorsByType.text;\n  \n  // Renderizza valore filtro\n  const renderFilterValue = (filter: ActiveFilter) => {\n    if (filter.type === 'boolean') {\n      return filter.value ? 'Sì' : 'No';\n    }\n    \n    if (filter.type === 'date' && filter.value instanceof Date) {\n      return filter.value.toLocaleDateString('it-IT');\n    }\n    \n    return String(filter.value);\n  };\n  \n  return (\n    <div className={`gdpr-entity-filters ${className || ''}`}>\n      {/* Header con toggle */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Filter className=\"h-4 w-4\" />\n          <span className=\"font-medium\">Filtri</span>\n          {showCount && activeFilters.length > 0 && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {activeFilters.length}\n            </Badge>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {activeFilters.length > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onResetFilters}\n              className=\"text-xs\"\n            >\n              <RotateCcw className=\"h-3 w-3 mr-1\" />\n              Reset\n            </Button>\n          )}\n          \n          {compact && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n            >\n              {isExpanded ? (\n                <ChevronUp className=\"h-4 w-4\" />\n              ) : (\n                <ChevronDown className=\"h-4 w-4\" />\n              )}\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      {/* Filtri attivi */}\n      {activeFilters.length > 0 && (\n        <div className=\"mb-4\">\n          <div className=\"text-sm text-muted-foreground mb-2\">Filtri attivi:</div>\n          <div className=\"flex flex-wrap gap-2\">\n            {activeFilters.map((filter, index) => (\n              <Badge\n                key={`${filter.key}-${index}`}\n                variant=\"outline\"\n                className=\"flex items-center gap-1 pr-1\"\n              >\n                <span className=\"text-xs\">\n                  {filter.label}: {renderFilterValue(filter)}\n                </span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleRemoveFilter(index)}\n                  className=\"h-4 w-4 p-0 hover:bg-destructive hover:text-destructive-foreground\"\n                >\n                  <X className=\"h-3 w-3\" />\n                </Button>\n              </Badge>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* Form aggiunta filtri */}\n      {isExpanded && (\n        <Card className=\"p-4\">\n          <div className=\"space-y-4\">\n            <div className=\"text-sm font-medium\">Aggiungi filtro</div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n              {/* Selezione campo */}\n              <div>\n                <label className=\"text-xs text-muted-foreground mb-1 block\">\n                  Campo\n                </label>\n                <select\n                  value={selectedField}\n                  onChange={(e) => setSelectedField(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n                >\n                  <option value=\"\">Seleziona campo</option>\n                  {filterableFields.map((field) => (\n                    <option key={field.key} value={field.key}>\n                      {field.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              {/* Selezione operatore */}\n              <div>\n                <label className=\"text-xs text-muted-foreground mb-1 block\">\n                  Operatore\n                </label>\n                <select\n                  value={filterOperator}\n                  onChange={(e) => setFilterOperator(e.target.value)}\n                  disabled={!selectedField}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent disabled:bg-gray-100\"\n                >\n                  {availableOperators.map((op: { value: string; label: string }) => (\n                    <option key={op.value} value={op.value}>\n                      {op.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              {/* Input valore */}\n              <div>\n                <label className=\"text-xs text-muted-foreground mb-1 block\">\n                  Valore\n                </label>\n                {selectedFieldConfig?.type === 'boolean' ? (\n                  <select\n                    value={filterValue}\n                    onChange={(e) => setFilterValue(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n                  >\n                    <option value=\"\">Seleziona valore</option>\n                    <option value=\"true\">Sì</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                ) : selectedFieldConfig?.type === 'date' ? (\n                  <Input\n                    type=\"date\"\n                    value={filterValue}\n                    onChange={(e) => setFilterValue(e.target.value)}\n                    placeholder=\"Seleziona data\"\n                  />\n                ) : selectedFieldConfig?.type === 'number' ? (\n                  <Input\n                    type=\"number\"\n                    value={filterValue}\n                    onChange={(e) => setFilterValue(e.target.value)}\n                    placeholder=\"Inserisci numero\"\n                  />\n                ) : selectedFieldConfig?.options ? (\n                  <select\n                    value={filterValue}\n                    onChange={(e) => setFilterValue(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n                  >\n                    <option value=\"\">Seleziona opzione</option>\n                    {selectedFieldConfig.options.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                ) : (\n                  <Input\n                    type=\"text\"\n                    value={filterValue}\n                    onChange={(e) => setFilterValue(e.target.value)}\n                    placeholder=\"Inserisci valore\"\n                  />\n                )}\n              </div>\n              \n              {/* Pulsante aggiungi */}\n              <div className=\"flex items-end\">\n                <Button\n                  onClick={handleAddFilter}\n                  disabled={!selectedField || !filterValue}\n                  className=\"w-full\"\n                >\n                  <Search className=\"h-4 w-4 mr-1\" />\n                  Aggiungi\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n      \n      {/* Filtri predefiniti */}\n      {filterConfig.length > 0 && isExpanded && (\n        <div className=\"mt-4\">\n          <div className=\"text-sm font-medium mb-2\">Filtri rapidi</div>\n          <div className=\"flex flex-wrap gap-2\">\n            {filterConfig.map((config) => (\n              <Button\n                key={config.key}\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  const newFilter: ActiveFilter = {\n                    key: config.key,\n                    label: config.label,\n                    value: config.defaultValue,\n                    operator: 'equals',\n                    type: config.type === 'dateRange' ? 'date' : (config.type as FilterType) || 'text'\n                  };\n                  onFiltersChange([...activeFilters, newFilter]);\n                }}\n                className=\"text-xs\"\n              >\n                {config.label}\n              </Button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GDPREntityFilters;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPREntityGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2441,2444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2441,2444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7475,7478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7475,7478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8365,8368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8365,8368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9143,9146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9143,9146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":285,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9296,9299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9296,9299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9469,9472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9469,9472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Entity Grid - Componente griglia per visualizzare le entità\n * \n * Componente griglia che include:\n * - Visualizzazione dati in formato card\n * - Layout responsive\n * - Selezione card\n * - Azioni per card\n * - Supporto GDPR\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport React from 'react';\nimport { Button, Badge, Card } from '../../../design-system';\nimport { \n  DropdownMenu, \n  DropdownMenuTrigger, \n  DropdownMenuContent, \n  DropdownMenuItem\n} from '../../../design-system';\nimport { \n  MoreVertical,\n  Eye,\n  Edit,\n  Trash2,\n  Download,\n  Check\n} from 'lucide-react';\nimport { EntityField, EntityAction, BaseEntity } from '../types';\n\n/**\n * Props del componente GDPREntityGrid\n */\nexport interface GDPREntityGridProps<T extends BaseEntity = BaseEntity> {\n  /** Dati da visualizzare */\n  data: T[];\n  \n  /** Configurazione campi principali */\n  fields: EntityField[];\n  \n  /** Configurazione campi aggiuntivi */\n  additionalFields?: EntityField[];\n  \n  /** Elementi selezionati */\n  selectedItems: string[];\n  \n  /** Callback per selezione elementi */\n  onSelectionChange: (selectedIds: string[]) => void;\n  \n  /** Azioni disponibili per card */\n  cardActions?: EntityAction[];\n  \n  /** Callback per azioni card */\n  onCardAction?: (actionKey: string, entity: T) => void;\n  \n  /** Stato di caricamento */\n  loading?: boolean;\n  \n  /** Messaggio stato vuoto */\n  emptyMessage?: string;\n  \n  /** Mostra checkbox selezione */\n  showSelection?: boolean;\n  \n  /** Mostra azioni */\n  showActions?: boolean;\n  \n  /** Numero colonne griglia */\n  columns?: 1 | 2 | 3 | 4 | 6;\n  \n  /** Classi CSS personalizzate */\n  className?: string;\n}\n\n/**\n * Componente griglia per visualizzare le entità\n */\nexport function GDPREntityGrid<T extends BaseEntity = BaseEntity>({\n  data,\n  fields,\n  additionalFields = [],\n  selectedItems,\n  onSelectionChange,\n  cardActions,\n  onCardAction,\n  loading = false,\n  emptyMessage = 'Nessun elemento trovato',\n  showSelection = true,\n  showActions = true,\n  columns = 3,\n  className\n}: GDPREntityGridProps<T>) {\n  \n  // Gestione selezione\n  const handleSelectItem = (id: string) => {\n    if (selectedItems.includes(id)) {\n      onSelectionChange(selectedItems.filter(itemId => itemId !== id));\n    } else {\n      onSelectionChange([...selectedItems, id]);\n    }\n  };\n  \n  // Renderizza valore campo\n  const renderFieldValue = (field: EntityField, entity: T) => {\n    const value = (entity as any)[field.key];\n    \n    if (field.formatter) {\n      return field.formatter(value, entity);\n    }\n    \n    // Formattazione di default per tipi comuni\n    if (value === null || value === undefined) {\n      return <span className=\"text-muted-foreground\">-</span>;\n    }\n    \n    if (typeof value === 'boolean') {\n      return (\n        <Badge variant={value ? 'secondary' : 'outline'} className=\"text-xs\">\n          {value ? 'Sì' : 'No'}\n        </Badge>\n      );\n    }\n    \n    if (value instanceof Date) {\n      return <span className=\"text-sm\">{value.toLocaleDateString('it-IT')}</span>;\n    }\n    \n    if (typeof value === 'string' && value.includes('@')) {\n      return <span className=\"font-mono text-xs text-muted-foreground\">{value}</span>;\n    }\n    \n    if (typeof value === 'string' && value.length > 50) {\n      return (\n        <span className=\"text-sm\" title={value}>\n          {value.substring(0, 50)}...\n        </span>\n      );\n    }\n    \n    return <span className=\"text-sm\">{String(value)}</span>;\n  };\n  \n  // Classi CSS per il grid\n  const gridClasses = {\n    1: 'grid-cols-1',\n    2: 'grid-cols-1 md:grid-cols-2',\n    3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',\n    4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4',\n    6: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-6'\n  };\n  \n  if (loading) {\n    return (\n      <div className={`gdpr-entity-grid ${className || ''}`}>\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Caricamento dati...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (data.length === 0) {\n    return (\n      <div className={`gdpr-entity-grid ${className || ''}`}>\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">{emptyMessage}</p>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className={`gdpr-entity-grid ${className || ''}`}>\n      <div className={`grid gap-4 ${gridClasses[columns]}`}>\n        {data.map((entity) => {\n          const isSelected = selectedItems.includes(entity.id);\n          \n          return (\n            <Card\n              key={entity.id}\n              className={`relative transition-all duration-200 hover:shadow-md ${\n                isSelected ? 'ring-2 ring-primary bg-primary/5' : ''\n              }`}\n            >\n              {/* Header card con selezione e azioni */}\n              <div className=\"flex items-center justify-between p-4 pb-2\">\n                {/* Checkbox selezione */}\n                {showSelection && (\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={isSelected}\n                      onChange={() => handleSelectItem(entity.id)}\n                      className=\"rounded border-gray-300 text-primary focus:ring-primary\"\n                    />\n                    {isSelected && (\n                      <Check className=\"h-4 w-4 text-primary ml-2\" />\n                    )}\n                  </div>\n                )}\n                \n                {/* Menu azioni */}\n                {showActions && cardActions && cardActions.length > 0 && (\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                        <MoreVertical className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      {cardActions\n                        .filter(action => \n                          typeof action.visible === 'function' \n                            ? action.visible(entity) \n                            : action.visible !== false\n                        )\n                        .map((action) => (\n                          <DropdownMenuItem\n                            key={action.key}\n                            onClick={() => onCardAction?.(action.key, entity)}\n                            disabled={\n                              typeof action.disabled === 'function' \n                                ? action.disabled(entity) \n                                : action.disabled\n                            }\n                            className=\"flex items-center gap-2\"\n                          >\n                            {action.icon && <span>{action.icon}</span>}\n                            {action.label}\n                          </DropdownMenuItem>\n                        ))}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                )}\n              </div>\n              \n              {/* Contenuto principale */}\n              <div className=\"px-4 pb-4 space-y-3\">\n                {/* Campi principali */}\n                {fields.slice(0, 3).map((field) => {\n                  const value = (entity as any)[field.key];\n                  if (value === null || value === undefined || value === '') return null;\n                  \n                  return (\n                    <div key={field.key} className=\"space-y-1\">\n                      <div className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                        {field.label}\n                      </div>\n                      <div className=\"font-medium\">\n                        {renderFieldValue(field, entity)}\n                      </div>\n                    </div>\n                  );\n                })}\n                \n                {/* Campi aggiuntivi (compatti) */}\n                {additionalFields.length > 0 && (\n                  <div className=\"pt-2 border-t space-y-2\">\n                    {additionalFields.slice(0, 4).map((field) => {\n                      const value = (entity as any)[field.key];\n                      if (value === null || value === undefined || value === '') return null;\n                      \n                      return (\n                        <div key={field.key} className=\"flex justify-between items-center\">\n                          <span className=\"text-xs text-muted-foreground\">\n                            {field.label}:\n                          </span>\n                          <div className=\"text-xs\">\n                            {renderFieldValue(field, entity)}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n                \n                {/* Badge di stato (se presente) */}\n                {(entity as any).status && (\n                  <div className=\"pt-2\">\n                    <Badge \n                      variant={\n                        (entity as any).status === 'active' ? 'secondary' : 'outline'\n                      }\n                      className=\"text-xs\"\n                    >\n                      {(entity as any).status}\n                    </Badge>\n                  </div>\n                )}\n              </div>\n              \n              {/* Footer con azioni rapide */}\n              {showActions && cardActions && cardActions.length > 0 && (\n                <div className=\"px-4 py-3 bg-muted/25 border-t flex justify-end gap-2\">\n                  {cardActions.slice(0, 3).map((action) => {\n                    const isVisible = typeof action.visible === 'function' \n                      ? action.visible(entity) \n                      : action.visible !== false;\n                    \n                    const isDisabled = typeof action.disabled === 'function' \n                      ? action.disabled(entity) \n                      : action.disabled;\n                    \n                    if (!isVisible) return null;\n                    \n                    return (\n                      <Button\n                        key={action.key}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onCardAction?.(action.key, entity)}\n                        disabled={isDisabled}\n                        className=\"h-8 px-2 text-xs\"\n                        title={action.label}\n                      >\n                        {action.icon || <Eye className=\"h-3 w-3\" />}\n                      </Button>\n                    );\n                  })}\n                </div>\n              )}\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default GDPREntityGrid;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPREntityHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPREntityPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1047,1050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1047,1050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2152,2155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2152,2155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'searchQuery' is assigned a value but never used.","line":98,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSearchQuery' is assigned a value but never used.","line":98,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'columnState' is assigned a value but never used.","line":119,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'columnActions' is assigned a value but never used.","line":119,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":36},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":146,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":146,"endColumn":76,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4013,4119],"text":"{ const customAction = actions.custom?.find(a => a.label === action);\n        customAction?.onClick(entity); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleBatchAction' is assigned a value but never used.","line":151,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":26}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Button } from '../../../design-system/atoms/Button';\nimport { Input } from '../../../design-system/atoms/Input';\nimport { Dropdown } from '../../../design-system/molecules/Dropdown';\nimport { \n  Download,\n  Filter,\n  Plus,\n  Search,\n  Settings\n} from 'lucide-react';\nimport { cn } from '../../../design-system/utils';\n\n// Import dei componenti ottimizzati\nimport { useGDPRPermissions } from '../hooks/useGDPRPermissions';\nimport { useEntityState } from '../hooks/useEntityState';\nimport { useTableColumns } from '../hooks/useTableColumns';\nimport { EntityView, ViewMode } from './EntityView';\nimport { BatchOperations } from './BatchOperations';\n\nexport interface GDPREntityPageProps<T> {\n  // Configurazione entità\n  entityType: string;\n  entityName: string;\n  entityNamePlural: string;\n  \n  // API endpoints\n  apiEndpoint: string;\n  \n  // Configurazione colonne\n  columns: Array<{\n    key: string;\n    label: string;\n    sortable?: boolean;\n    width?: number;\n    render?: (value: any, entity: T) => React.ReactNode;\n  }>;\n  \n  // Azioni personalizzate\n  actions?: {\n    onView?: (entity: T) => void;\n    onEdit?: (entity: T) => void;\n    onDelete?: (entity: T) => void;\n    onExport?: (entity: T) => void;\n    onCreate?: () => void;\n    onImport?: () => void;\n    custom?: Array<{\n      label: string;\n      icon?: React.ReactNode;\n      onClick: (entity: T) => void;\n      variant?: 'primary' | 'secondary' | 'danger';\n      permission?: string;\n    }>;\n  };\n  \n  // Configurazione permessi\n  permissions?: {\n    read?: string;\n    create?: string;\n    update?: string;\n    delete?: string;\n    export?: string;\n  };\n  \n  // Opzioni di visualizzazione\n  defaultViewMode?: ViewMode;\n  showBatchOperations?: boolean;\n  showFilters?: boolean;\n  showColumnSettings?: boolean;\n  \n  // Personalizzazione UI\n  className?: string;\n  headerActions?: React.ReactNode;\n}\n\n/**\n * Componente principale ottimizzato per la gestione delle entità GDPR\n * Sostituisce il monolitico GDPREntityTemplate con un approccio modulare\n */\nexport function GDPREntityPage<T extends { id: string; [key: string]: any }>({\n  entityType,\n  entityName,\n  entityNamePlural,\n  apiEndpoint,\n  columns,\n  actions = {},\n  permissions = {},\n  defaultViewMode = 'table',\n  showBatchOperations = true,\n  showFilters = true,\n  showColumnSettings = true,\n  className,\n  headerActions\n}: GDPREntityPageProps<T>) {\n  \n  // Stati locali per UI\n  const [viewMode, setViewMode] = useState<ViewMode>(defaultViewMode);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showFiltersPanel, setShowFiltersPanel] = useState(false);\n  const [showColumnPanel, setShowColumnPanel] = useState(false);\n  \n  // Hook personalizzati per la logica di business\n  const gdprPermissions = useGDPRPermissions({\n    entityName,\n    entityNamePlural,\n    readPermission: permissions.read || `${entityType}:read`,\n    writePermission: permissions.create || `${entityType}:write`,\n    deletePermission: permissions.delete || `${entityType}:delete`,\n    exportPermission: permissions.export || `${entityType}:export`\n  });\n  \n  const [entityState, entityActions] = useEntityState<T>({\n    apiEndpoint,\n    pageSize: 10,\n    enableSearch: true,\n    enablePagination: true\n  });\n  \n  const [columnState, columnActions] = useTableColumns({\n    baseColumns: columns,\n    actions,\n    permissions: gdprPermissions\n  });\n  \n  // Gestori di eventi\n  const handleSearch = useCallback((query: string) => {\n    entityActions.setSearchTerm(query);\n  }, [entityActions]);\n  \n  const handleEntityAction = useCallback((action: string, entity: T) => {\n    switch (action) {\n      case 'view':\n        actions.onView?.(entity);\n        break;\n      case 'edit':\n        actions.onEdit?.(entity);\n        break;\n      case 'delete':\n        actions.onDelete?.(entity);\n        break;\n      case 'export':\n        actions.onExport?.(entity);\n        break;\n      default:\n        // Gestione azioni personalizzate\n        const customAction = actions.custom?.find(a => a.label === action);\n        customAction?.onClick(entity);\n    }\n  }, [actions]);\n  \n  const handleBatchAction = useCallback(async (action: string, entityIds: string[]) => {\n    switch (action) {\n      case 'delete':\n        // Elimina le entità selezionate\n        entityIds.forEach(id => entityActions.removeEntity(id));\n        break;\n      case 'export':\n        // Logica di esportazione batch\n        console.log('Esportazione batch:', entityIds);\n        break;\n      case 'archive':\n        // Logica di archiviazione batch\n        console.log('Archiviazione batch:', entityIds);\n        break;\n    }\n  }, [entityActions]);\n  \n  // Preparazione delle azioni del dropdown \"Aggiungi\"\n  const addActions = [\n    ...(gdprPermissions.canCreate ? [{\n      label: `Nuovo ${entityName}`,\n      icon: <Plus className=\"h-4 w-4\" />,\n      onClick: () => actions.onCreate?.(),\n      variant: 'primary' as const\n    }] : []),\n    ...(gdprPermissions.canCreate ? [{\n      label: `Importa ${entityNamePlural}`,\n      icon: <Download className=\"h-4 w-4\" />,\n      onClick: () => actions.onImport?.(),\n      variant: 'secondary' as const\n    }] : [])\n  ];\n  \n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header della pagina */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            {entityNamePlural}\n          </h1>\n          <p className=\"text-gray-600\">\n            Gestisci {entityNamePlural.toLowerCase()} conformi al GDPR\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {headerActions}\n          \n          {/* Dropdown per aggiungere entità */}\n          {addActions.length > 0 && (\n            <Dropdown\n              actions={addActions}\n              variant=\"primary\"\n              icon={<Plus className=\"h-4 w-4\" />}\n            />\n          )}\n        </div>\n      </div>\n      \n      {/* Barra di ricerca e filtri */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        {/* Campo di ricerca */}\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            type=\"text\"\n            placeholder={`Cerca ${entityNamePlural.toLowerCase()}...`}\n            value={entityState.searchTerm}\n            onChange={(e) => handleSearch(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        \n        {/* Controlli aggiuntivi */}\n        <div className=\"flex items-center gap-2\">\n          {/* Filtri avanzati */}\n          {showFilters && (\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowFiltersPanel(!showFiltersPanel)}\n              className={cn(showFiltersPanel && 'bg-gray-100')}\n            >\n              <Filter className=\"h-4 w-4\" />\n              <span className=\"ml-1 hidden sm:inline\">Filtri</span>\n            </Button>\n          )}\n          \n          {/* Impostazioni colonne */}\n          {showColumnSettings && viewMode === 'table' && (\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowColumnPanel(!showColumnPanel)}\n              className={cn(showColumnPanel && 'bg-gray-100')}\n            >\n              <Settings className=\"h-4 w-4\" />\n              <span className=\"ml-1 hidden sm:inline\">Colonne</span>\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      {/* Operazioni batch */}\n      {showBatchOperations && entityState.selectedEntities.size > 0 && (\n        <BatchOperations\n          selectedEntities={entityState.selectedEntities}\n          permissions={gdprPermissions}\n          onClearSelection={entityActions.clearSelection}\n          entityName={entityName}\n          entityNamePlural={entityNamePlural}\n        />\n      )}\n      \n      {/* Visualizzazione entità */}\n        <EntityView\n          entities={entityState.entities}\n          viewMode={viewMode}\n          onViewModeChange={setViewMode}\n          columns={tableColumns}\n          permissions={gdprPermissions}\n          selectedEntities={entityState.selectedEntities}\n          onEntitySelect={entityActions.toggleEntitySelection}\n          onSelectAll={entityActions.selectAllEntities}\n          onClearSelection={entityActions.clearSelection}\n          onEntityAction={handleEntityAction}\n          loading={entityState.loading}\n          error={entityState.error}\n          emptyMessage={`Nessun ${entityName.toLowerCase()} trovato`}\n        />\n      \n      {/* Paginazione */}\n        {entityState.totalPages > 1 && (\n          <div className=\"flex justify-center\">\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                disabled={entityState.currentPage === 1}\n                onClick={() => entityActions.setCurrentPage(entityState.currentPage - 1)}\n              >\n                Precedente\n              </Button>\n              \n              <span className=\"text-sm text-gray-600\">\n                Pagina {entityState.currentPage} di {entityState.totalPages}\n              </span>\n              \n              <Button\n                variant=\"outline\"\n                disabled={entityState.currentPage === entityState.totalPages}\n                onClick={() => entityActions.setCurrentPage(entityState.currentPage + 1)}\n              >\n                Successiva\n              </Button>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPREntityPageTemplate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DataTableColumn' is defined but never used.","line":32,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2488,2491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2488,2491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2653,2656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2653,2656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2693,2696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2693,2696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2731,2734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2731,2734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2771,2774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2771,2774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onDataImport' is defined but never used.","line":87,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":15},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useAuth\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":97,"column":16,"nodeType":"Identifier","endLine":97,"endColumn":23},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useGDPREntityPage\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":171,"column":7,"nodeType":"Identifier","endLine":171,"endColumn":24},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useGDPRConsent\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":185,"column":7,"nodeType":"Identifier","endLine":185,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuditHistory' is assigned a value but never used.","line":193,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":20},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useGDPRAudit\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":194,"column":7,"nodeType":"Identifier","endLine":194,"endColumn":19},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":200,"column":41,"nodeType":"Identifier","endLine":200,"endColumn":49},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":201,"column":45,"nodeType":"Identifier","endLine":201,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6308,6311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6308,6311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":202,"column":51,"nodeType":"Identifier","endLine":202,"endColumn":59},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":203,"column":49,"nodeType":"Identifier","endLine":203,"endColumn":57},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":204,"column":47,"nodeType":"Identifier","endLine":204,"endColumn":55},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":205,"column":47,"nodeType":"Identifier","endLine":205,"endColumn":55},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":206,"column":57,"nodeType":"Identifier","endLine":206,"endColumn":65},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":209,"column":3,"nodeType":"Identifier","endLine":209,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkRequiredConsents'. Either include it or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [checkRequiredConsents, config.gdpr.requiresConsent]","fix":{"range":[6794,6823],"text":"[checkRequiredConsents, config.gdpr.requiresConsent]"}}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":216,"column":33,"nodeType":"Identifier","endLine":216,"endColumn":44},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":227,"column":28,"nodeType":"Identifier","endLine":227,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleEntityCreate' is assigned a value but never used.","line":254,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":27},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":254,"column":30,"nodeType":"Identifier","endLine":254,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleEntityUpdate' is assigned a value but never used.","line":259,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":259,"endColumn":27},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":259,"column":30,"nodeType":"Identifier","endLine":259,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":264,"column":30,"nodeType":"Identifier","endLine":264,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":269,"column":28,"nodeType":"Identifier","endLine":269,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":276,"column":28,"nodeType":"Identifier","endLine":276,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":296,"column":24,"nodeType":"Identifier","endLine":296,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9888,9891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9888,9891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":321,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10760,10763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10760,10763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":321,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10780,10783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10780,10783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":591,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":591,"endColumn":38}],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":15,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":15,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":34,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Entity Page Template - Componente principale\n * \n * Template di pagina GDPR-compliant che replica la struttura\n * della pagina Courses con componenti riutilizzabili.\n * \n * TODO: Refactoring completo delle interfacce GDPR necessario\n * Disabilitazione temporanea errori TypeScript per permettere build\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { BaseEntity } from '../types/entity.types';\nimport { GDPREntityPageConfig, GDPREntityPageContext as GDPREntityPageContextType } from '../types/template.types';\nimport { useGDPREntityPage } from '../hooks/useGDPREntityPage';\nimport { useGDPRConsent } from '../hooks/useGDPRConsent';\nimport { useGDPRAudit } from '../hooks/useGDPRAudit';\nimport { useAuth } from '../../../context/AuthContext';\n\n// Context per condividere stato del template\nexport const GDPREntityPageContextProvider = React.createContext<GDPREntityPageContextType | null>(null);\n\n// Import componenti esistenti (da adattare ai path reali)\nimport EntityListLayout from '../../../components/layouts/EntityListLayout';\nimport { SearchBar, FilterPanel, Button, Card } from '../../../design-system';\nimport DataTable, { DataTableColumn } from '../../../components/shared/tables/DataTable';\n// Note: Badge, Separator, Alert components need to be replaced with simple HTML or alternative components\n\n// Import componenti GDPR specifici\nimport { GDPREntityHeader } from './GDPREntityHeader';\nimport { GDPRConsentModal } from './GDPRConsentModal';\nimport { GDPRAuditPanel } from './GDPRAuditPanel';\nimport { GDPRComplianceIndicator } from './GDPRComplianceIndicator';\nimport { GDPRDataExportModal } from './GDPRDataExportModal';\nimport { GDPRDeletionRequestModal } from './GDPRDeletionRequestModal';\n\n/**\n * Props del template principale\n */\nexport interface GDPREntityPageTemplateProps<T extends BaseEntity = BaseEntity> {\n  /** Configurazione del template */\n  config: GDPREntityPageConfig<T>;\n  \n  /** Dati iniziali (opzionale) */\n  initialData?: T[];\n  \n  /** Callback personalizzate */\n  onEntityCreate?: (entity: Omit<T, 'id'>) => Promise<T>;\n  onEntityUpdate?: (id: string, entity: Partial<T>) => Promise<T>;\n  onEntityDelete?: (id: string) => Promise<void>;\n  onBulkDelete?: (ids: string[]) => Promise<void>;\n  onDataExport?: (format: string, filters?: any) => Promise<Blob>;\n  onDataImport?: (file: File) => Promise<void>;\n  \n  /** Componenti personalizzati */\n  customComponents?: {\n    header?: React.ComponentType<any>;\n    toolbar?: React.ComponentType<any>;\n    table?: React.ComponentType<any>;\n    sidebar?: React.ComponentType<any>;\n  };\n  \n  /** Classi CSS personalizzate */\n  className?: string;\n  \n  /** Stili inline personalizzati */\n  style?: React.CSSProperties;\n}\n\n/**\n * Template principale per pagine entità GDPR-compliant\n */\nexport function GDPREntityPageTemplate<T extends BaseEntity = BaseEntity>({\n  config,\n  initialData,\n  onEntityCreate,\n  onEntityUpdate,\n  onEntityDelete,\n  onBulkDelete,\n  onDataExport,\n  onDataImport,\n  customComponents,\n  className,\n  style\n}: GDPREntityPageTemplateProps<T>) {\n  // Hook per autenticazione e autorizzazione con gestione sicura\n  let authData;\n  let hasPermissionFunc;\n  \n  try {\n    authData = useAuth();\n    hasPermissionFunc = authData.hasPermission;\n  } catch (error) {\n    console.warn('⚠️ GDPREntityPageTemplate: AuthContext not yet initialized:', error.message);\n    return (\n      <div className=\"h-64 flex justify-center items-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n  \n  const { isAuthenticated, isLoading: authLoading, user } = authData;\n  \n  // Verifica autorizzazione\n  if (authLoading) {\n    return (\n      <div className=\"h-64 flex justify-center items-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n  \n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace />;\n  }\n  \n  // Verifica permessi specifici per la risorsa\n  const resourceName = config.entity.name.toLowerCase();\n  \n  // Debug logging per troubleshooting\n  console.log('🔍 GDPREntityPageTemplate - Debug permessi:', {\n    resourceName,\n    entityName: config.entity.name,\n    user: user ? { id: user.id, email: user.email, roles: user.roles } : null,\n    isAuthenticated,\n    authLoading\n  });\n  \n  const hasReadPermission = hasPermissionFunc(resourceName, 'read');\n  console.log('🔍 hasPermission result:', {\n    resource: resourceName,\n    action: 'read',\n    result: hasReadPermission\n  });\n  \n  if (!hasReadPermission) {\n    console.log('❌ Accesso negato per:', resourceName);\n    return (\n      <div className=\"h-64 flex flex-col justify-center items-center text-center px-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Accesso negato</h1>\n        <p className=\"text-gray-600 mb-6\">\n          Non hai i permessi necessari per accedere a questa sezione.\n        </p>\n        <p className=\"text-sm text-gray-500\">\n          Risorsa richiesta: {resourceName} (lettura)\n        </p>\n        <div className=\"mt-4 text-xs text-gray-400\">\n          <p>Debug info:</p>\n          <p>User: {user?.email || 'N/A'}</p>\n          <p>Roles: {user?.roles?.join(', ') || 'N/A'}</p>\n          <p>Resource: {resourceName}</p>\n        </div>\n      </div>\n    );\n  }\n  \n  console.log('✅ Accesso consentito per:', resourceName);\n  \n  // Hooks principali\n  const {\n    state,\n    actions,\n    loading,\n    error\n  } = useGDPREntityPage<T>({\n    config,\n    initialData,\n    onEntityCreate,\n    onEntityUpdate,\n    onEntityDelete,\n    onBulkDelete\n  });\n  \n  const {\n    consents,\n    requestConsent,\n    revokeConsent,\n    checkConsent\n  } = useGDPRConsent({\n    config: config.gdpr.consentConfig,\n    personId: user?.id || 'anonymous'\n  });\n  \n  const {\n    auditLog,\n    logAction,\n    getAuditHistory\n  } = useGDPRAudit({\n    config: config.gdpr.auditConfig,\n    entityType: config.entity.name\n  });\n  \n  // Stati locali\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeFilters, setActiveFilters] = useState<Record<string, any>>({});\n  const [selectedEntities, setSelectedEntities] = useState<T[]>([]);\n  const [showGDPRConsent, setShowGDPRConsent] = useState(false);\n  const [showAuditPanel, setShowAuditPanel] = useState(false);\n  const [showDataExport, setShowDataExport] = useState(false);\n  const [showDeletionRequest, setShowDeletionRequest] = useState(false);\n  \n  // Verifica consensi GDPR all'avvio\n  useEffect(() => {\n    if (config.gdpr.requiresConsent) {\n      checkRequiredConsents();\n    }\n  }, [config.gdpr.requiresConsent]);\n  \n  // Funzione per verificare consensi richiesti\n  const checkRequiredConsents = useCallback(async () => {\n    if (!config.gdpr.consentConfig) return;\n    \n    const verification = await checkConsent(config.gdpr.consentConfig.requiredConsents);\n    \n    if (!verification.hasConsent && verification.missingConsents.length > 0) {\n      setShowGDPRConsent(true);\n    }\n  }, [config.gdpr.consentConfig, checkConsent]);\n  \n  // Dati filtrati e ordinati\n  const filteredEntities = useMemo(() => {\n    let filtered = state.entities;\n    \n    // Applica ricerca\n    if (searchQuery) {\n      filtered = filtered.filter(entity => {\n        return config.entity.columns.some(column => {\n          const value = entity[column.key as keyof T];\n          return value?.toString().toLowerCase().includes(searchQuery.toLowerCase());\n        });\n      });\n    }\n    \n    // Applica filtri\n    Object.entries(activeFilters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        filtered = filtered.filter(entity => {\n          const entityValue = entity[key as keyof T];\n          return entityValue === value;\n        });\n      }\n    });\n    \n    return filtered;\n  }, [state.entities, searchQuery, activeFilters, config.entity.columns]);\n  \n  // Handlers per azioni entità\n  const handleEntityCreate = useCallback(async (entityData: Omit<T, 'id'>) => {\n    await logAction('CREATE', undefined, entityData);\n    await actions.createEntity(entityData);\n  }, [actions, logAction]);\n  \n  const handleEntityUpdate = useCallback(async (id: string, entityData: Partial<T>) => {\n    await logAction('UPDATE', id, entityData);\n    await actions.updateEntity(id, entityData);\n  }, [actions, logAction]);\n  \n  const handleEntityDelete = useCallback(async (id: string) => {\n    await logAction('DELETE', id);\n    await actions.deleteEntity(id);\n  }, [actions, logAction]);\n  \n  const handleBulkDelete = useCallback(async (ids: string[]) => {\n    await logAction('BULK_DELETE', undefined, { ids });\n    await actions.bulkDelete(ids);\n    setSelectedEntities([]);\n  }, [actions, logAction]);\n  \n  // Handler per export dati\n  const handleDataExport = useCallback(async (format: string) => {\n    await logAction('EXPORT', undefined, { format, filters: activeFilters });\n    \n    if (onDataExport) {\n      const blob = await onDataExport(format, activeFilters);\n      // Trigger download\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${config.entity.namePlural}-export.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }\n    \n    setShowDataExport(false);\n  }, [onDataExport, activeFilters, config.entity.namePlural, logAction]);\n  \n  // Configurazione colonne tabella con GDPR\n  const tableColumns = useMemo(() => {\n    return config.entity.columns.map(column => ({\n      ...column,\n      // Applica mascheramento per campi sensibili se necessario\n      render: (value: any, entity: T) => {\n        if (config.gdpr.sensitiveFields.includes(column.key)) {\n          // Verifica permessi per visualizzare dati sensibili\n          const userRole = user?.role || 'EMPLOYEE';\n          const canViewSensitive = config.gdpr.dataMinimizationConfig?.sensitiveDataRoles.includes(userRole);\n          \n          if (!canViewSensitive) {\n            const maskingConfig = config.gdpr.dataMinimizationConfig?.fieldMaskingConfig[column.key];\n            if (maskingConfig) {\n              return maskValue(value, maskingConfig);\n            }\n            return '***';\n          }\n        }\n        \n        return column.render ? column.render(value, entity) : value;\n      }\n    }));\n  }, [config.entity.columns, config.gdpr.sensitiveFields, config.gdpr.dataMinimizationConfig, user]);\n  \n  // Funzione per mascherare valori\n  const maskValue = (value: any, maskingConfig: any) => {\n    if (!value) return value;\n    \n    const str = value.toString();\n    const { pattern, showFirst = 0, showLast = 0, replacement = '*' } = maskingConfig;\n    \n    if (pattern) {\n      return str.replace(new RegExp(pattern, 'g'), replacement);\n    }\n    \n    if (showFirst || showLast) {\n      const start = str.substring(0, showFirst);\n      const end = str.substring(str.length - showLast);\n      const middle = replacement.repeat(Math.max(0, str.length - showFirst - showLast));\n      return start + middle + end;\n    }\n    \n    return replacement.repeat(str.length);\n  };\n  \n  // Render del template\n  return (\n    <GDPREntityPageContextProvider.Provider value={{\n      config,\n      state,\n      actions,\n      gdpr: {\n        consents,\n        auditLog,\n        dataRetention: {\n          daysRemaining: config.gdpr.dataRetentionDays,\n          nextCleanup: new Date(Date.now() + config.gdpr.dataRetentionDays * 24 * 60 * 60 * 1000)\n        },\n        compliance: {\n          score: 85, // Da calcolare dinamicamente\n          issues: [],\n          recommendations: []\n        }\n      }\n    }}>\n      <div className={`gdpr-entity-page ${className || ''}`} style={style}>\n        {/* Alert errori */}\n        {error && (\n          <div className=\"mb-4 p-4 border border-red-300 bg-red-50 rounded-md\">\n            <p className=\"text-red-800 text-sm\">{error}</p>\n          </div>\n        )}\n        \n        {/* Header della pagina */}\n        {customComponents?.header ? (\n          <customComponents.header\n            config={config}\n            entityCount={filteredEntities.length}\n            selectedCount={selectedEntities.length}\n          />\n        ) : (\n          <GDPREntityHeader\n            title={config.ui.header.title}\n            subtitle={config.ui.header.subtitle}\n            entityCount={filteredEntities.length}\n            selectedCount={selectedEntities.length}\n            showGDPRIndicators={config.ui.header.showGDPRIndicators}\n            breadcrumb={config.ui.header.breadcrumb}\n            customActions={config.ui.header.customActions}\n            onAuditClick={() => setShowAuditPanel(true)}\n            onExportClick={() => setShowDataExport(true)}\n            onConsentClick={() => setShowGDPRConsent(true)}\n          />\n        )}\n        \n        <hr className=\"my-4 border-gray-200\" />\n        \n        {/* Layout principale */}\n        <EntityListLayout\n          sidebar={config.ui.layout.showSidebar ? (\n            customComponents?.sidebar ? (\n              <customComponents.sidebar config={config} />\n            ) : (\n              <Card className=\"p-4\">\n                <GDPRComplianceIndicator\n                  score={85}\n                  issues={[]}\n                  recommendations={[]}\n                />\n                \n                {config.ui.header.showGDPRIndicators && (\n                  <div className=\"mt-4 space-y-2\">\n                    <span className=\"inline-block px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded border border-green-200\">GDPR Compliant</span>\n                    <span className=\"inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded border border-gray-200\">Audit Enabled</span>\n                    <span className=\"inline-block px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded border border-blue-200\">Consent Managed</span>\n                  </div>\n                )}\n              </Card>\n            )\n          ) : undefined}\n          sidebarWidth={config.ui.layout.sidebar?.width}\n          sidebarCollapsed={state.ui.sidebarCollapsed}\n          onSidebarToggle={() => actions.toggleSidebar?.()}\n        >\n          {/* Toolbar */}\n          {customComponents?.toolbar ? (\n            <customComponents.toolbar\n              config={config}\n              searchQuery={searchQuery}\n              onSearchChange={setSearchQuery}\n              filters={activeFilters}\n              onFiltersChange={setActiveFilters}\n              selectedEntities={selectedEntities}\n              onBulkDelete={() => handleBulkDelete(selectedEntities.map(e => e.id))}\n            />\n          ) : (\n            <div className=\"flex flex-col gap-4 mb-6\">\n              {/* Barra di ricerca e azioni principali */}\n              <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n                <div className=\"flex-1 max-w-md\">\n                  {config.ui.toolbar.showSearch && (\n                    <SearchBar\n                      value={searchQuery}\n                      onChange={setSearchQuery}\n                      placeholder={config.ui.toolbar.searchPlaceholder || `Cerca ${config.entity.namePlural.toLowerCase()}...`}\n                    />\n                  )}\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  {/* Pulsante Crea */}\n                  <Button\n                    onClick={() => actions.openModal('create')}\n                    disabled={loading}\n                  >\n                    Crea {config.entity.name}\n                  </Button>\n                  \n                  {/* Azioni personalizzate toolbar */}\n                  {config.ui.toolbar.customActions?.map(action => (\n                    <Button\n                      key={action.id}\n                      variant={action.variant || 'outline'}\n                      onClick={action.onClick}\n                      disabled={action.disabled || loading}\n                      title={action.tooltip}\n                    >\n                      {action.icon && <span className=\"mr-2\">{action.icon}</span>}\n                      {action.label}\n                    </Button>\n                  ))}\n                  \n                  {/* Azioni bulk se ci sono selezioni */}\n                  {selectedEntities.length > 0 && (\n                    <>\n                      <Button\n                        variant=\"destructive\"\n                        onClick={() => handleBulkDelete(selectedEntities.map(e => e.id))}\n                        disabled={loading}\n                      >\n                        Elimina Selezionati ({selectedEntities.length})\n                      </Button>\n                      \n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setShowDeletionRequest(true)}\n                        disabled={loading}\n                      >\n                        Richiesta Cancellazione GDPR\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n              \n              {/* Pannello filtri */}\n              {config.ui.toolbar.showFilters && config.entity.filters.length > 0 && (\n                <FilterPanel\n                  filters={config.entity.filters}\n                  values={activeFilters}\n                  onChange={setActiveFilters}\n                />\n              )}\n            </div>\n          )}\n          \n          {/* Tabella dati */}\n          {customComponents?.table ? (\n            <customComponents.table\n              config={config}\n              data={filteredEntities}\n              columns={tableColumns}\n              loading={loading}\n              selectedEntities={selectedEntities}\n              onSelectionChange={setSelectedEntities}\n              onEntityEdit={(entity) => actions.openModal('edit', entity)}\n              onEntityDelete={handleEntityDelete}\n            />\n          ) : (\n            <DataTable\n              data={filteredEntities}\n              columns={tableColumns}\n              loading={loading}\n              pagination={{\n                page: state.pagination.page,\n                pageSize: state.pagination.pageSize,\n                total: state.pagination.total,\n                onPageChange: actions.setPage,\n                onPageSizeChange: actions.setPageSize\n              }}\n              sorting={{\n                field: state.sorting?.field,\n                direction: state.sorting?.direction,\n                onSortChange: actions.setSorting\n              }}\n              selection={{\n                selectedItems: selectedEntities,\n                onSelectionChange: setSelectedEntities,\n                showCheckboxes: config.ui.table.showSelectionCheckboxes\n              }}\n              density={state.ui.density}\n              onDensityChange={actions.setDensity}\n              enableColumnResizing={config.ui.table.enableColumnResizing}\n              enableColumnReordering={config.ui.table.enableColumnReordering}\n              showRowNumbers={config.ui.table.showRowNumbers}\n              virtualization={config.ui.table.virtualization}\n            />\n          )}\n        </EntityListLayout>\n        \n        {/* Modali GDPR */}\n        <GDPRConsentModal\n          open={showGDPRConsent}\n          onClose={() => setShowGDPRConsent(false)}\n          config={config.gdpr.consentConfig}\n          currentConsents={consents}\n          onConsentChange={requestConsent}\n          onConsentRevoke={revokeConsent}\n        />\n        \n        {showAuditPanel && (\n          <GDPRAuditPanel\n            entityId=\"current-entity\"\n            entityType={config.entity.name}\n            auditLogs={auditLog}\n            onExport={() => handleDataExport('audit-log')}\n            loading={loading}\n          />\n        )}\n        \n        <GDPRDataExportModal\n          open={showDataExport}\n          onClose={() => setShowDataExport(false)}\n          config={config.gdpr.dataPortabilityConfig}\n          onExport={handleDataExport}\n          entityType={config.entity.name}\n        />\n        \n        <GDPRDeletionRequestModal\n          open={showDeletionRequest}\n          onClose={() => setShowDeletionRequest(false)}\n          selectedEntities={selectedEntities}\n          config={config.gdpr.rightToBeForgottenConfig}\n          onSubmitRequest={(reason) => {\n            // Implementa logica richiesta cancellazione\n            console.log('Richiesta cancellazione GDPR:', { entities: selectedEntities, reason });\n            setShowDeletionRequest(false);\n          }}\n        />\n      </div>\n    </GDPREntityPageContextProvider.Provider>\n  );\n}\n\n// Hook per utilizzare il context\nexport const useGDPREntityPageContext = () => {\n  const context = React.useContext(GDPREntityPageContextProvider);\n  if (!context) {\n    throw new Error('useGDPREntityPageContext must be used within GDPREntityPageTemplate');\n  }\n  return context;\n};\n\nexport default GDPREntityPageTemplate;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPREntityTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3634,3637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3634,3637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":262,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":262,"endColumn":39}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Entity Table - Componente tabella per visualizzare le entità\n * \n * Componente tabella che include:\n * - Visualizzazione dati in formato tabella\n * - Ordinamento colonne\n * - Selezione righe\n * - Azioni per riga\n * - Supporto GDPR\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport React from 'react';\nimport { Button, Badge } from '../../../design-system';\nimport { \n  DropdownMenu, \n  DropdownMenuTrigger, \n  DropdownMenuContent, \n  DropdownMenuItem\n} from '../../../design-system';\nimport { \n  ChevronUp, \n  ChevronDown, \n  MoreVertical,\n  Eye,\n  Edit,\n  Trash2,\n  Download\n} from 'lucide-react';\nimport { ColumnConfig, EntityAction, BaseEntity } from '../types';\n\n/**\n * Props del componente GDPREntityTable\n */\nexport interface GDPREntityTableProps<T extends BaseEntity = BaseEntity> {\n  /** Dati da visualizzare */\n  data: T[];\n  \n  /** Configurazione colonne */\n  columns: ColumnConfig[];\n  \n  /** Colonne visibili */\n  visibleColumns: string[];\n  \n  /** Configurazione ordinamento */\n  sortConfig?: {\n    field: string;\n    direction: 'asc' | 'desc';\n  };\n  \n  /** Callback per cambio ordinamento */\n  onSort?: (field: string, direction: 'asc' | 'desc') => void;\n  \n  /** Elementi selezionati */\n  selectedItems: string[];\n  \n  /** Callback per selezione elementi */\n  onSelectionChange: (selectedIds: string[]) => void;\n  \n  /** Azioni disponibili per riga */\n  rowActions?: EntityAction[];\n  \n  /** Callback per azioni riga */\n  onRowAction?: (actionKey: string, entity: T) => void;\n  \n  /** Stato di caricamento */\n  loading?: boolean;\n  \n  /** Messaggio stato vuoto */\n  emptyMessage?: string;\n  \n  /** Mostra checkbox selezione */\n  showSelection?: boolean;\n  \n  /** Mostra colonna azioni */\n  showActions?: boolean;\n  \n  /** Classi CSS personalizzate */\n  className?: string;\n}\n\n/**\n * Componente tabella per visualizzare le entità\n */\nexport function GDPREntityTable<T extends BaseEntity = BaseEntity>({\n  data,\n  columns,\n  visibleColumns,\n  sortConfig,\n  onSort,\n  selectedItems,\n  onSelectionChange,\n  rowActions,\n  onRowAction,\n  loading = false,\n  emptyMessage = 'Nessun elemento trovato',\n  showSelection = true,\n  showActions = true,\n  className\n}: GDPREntityTableProps<T>) {\n  \n  // Filtra colonne visibili\n  const displayColumns = columns.filter(col => visibleColumns.includes(col.key));\n  \n  // Gestione selezione\n  const isAllSelected = data.length > 0 && selectedItems.length === data.length;\n  const isPartiallySelected = selectedItems.length > 0 && selectedItems.length < data.length;\n  \n  const handleSelectAll = () => {\n    if (isAllSelected) {\n      onSelectionChange([]);\n    } else {\n      onSelectionChange(data.map(item => item.id));\n    }\n  };\n  \n  const handleSelectItem = (id: string) => {\n    if (selectedItems.includes(id)) {\n      onSelectionChange(selectedItems.filter(itemId => itemId !== id));\n    } else {\n      onSelectionChange([...selectedItems, id]);\n    }\n  };\n  \n  // Gestione ordinamento\n  const handleSort = (field: string) => {\n    if (!onSort) return;\n    \n    let direction: 'asc' | 'desc' = 'asc';\n    if (sortConfig?.field === field && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n    \n    onSort(field, direction);\n  };\n  \n  // Renderizza icona ordinamento\n  const renderSortIcon = (field: string) => {\n    if (sortConfig?.field !== field) return null;\n    \n    return sortConfig.direction === 'asc' ? (\n      <ChevronUp className=\"h-4 w-4\" />\n    ) : (\n      <ChevronDown className=\"h-4 w-4\" />\n    );\n  };\n  \n  // Renderizza valore cella\n  const renderCellValue = (column: ColumnConfig, entity: T) => {\n    const value = (entity as any)[column.key];\n    \n    if (column.formatter) {\n      return column.formatter(value, entity);\n    }\n    \n    // Formattazione di default per tipi comuni\n    if (value === null || value === undefined) {\n      return <span className=\"text-muted-foreground\">-</span>;\n    }\n    \n    if (typeof value === 'boolean') {\n      return (\n        <Badge variant={value ? 'secondary' : 'outline'}>\n          {value ? 'Sì' : 'No'}\n        </Badge>\n      );\n    }\n    \n    if (value instanceof Date) {\n      return value.toLocaleDateString('it-IT');\n    }\n    \n    if (typeof value === 'string' && value.includes('@')) {\n      return <span className=\"font-mono text-sm\">{value}</span>;\n    }\n    \n    return String(value);\n  };\n  \n  if (loading) {\n    return (\n      <div className={`gdpr-entity-table ${className || ''}`}>\n        <div className=\"border rounded-lg\">\n          <div className=\"p-8 text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Caricamento dati...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (data.length === 0) {\n    return (\n      <div className={`gdpr-entity-table ${className || ''}`}>\n        <div className=\"border rounded-lg\">\n          <div className=\"p-8 text-center\">\n            <p className=\"text-muted-foreground\">{emptyMessage}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className={`gdpr-entity-table ${className || ''}`}>\n      <div className=\"border rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            {/* Header */}\n            <thead className=\"bg-muted/50\">\n              <tr>\n                {/* Checkbox selezione */}\n                {showSelection && (\n                  <th className=\"w-12 p-4\">\n                    <input\n                      type=\"checkbox\"\n                      checked={isAllSelected}\n                      ref={(input) => {\n                        if (input) input.indeterminate = isPartiallySelected;\n                      }}\n                      onChange={handleSelectAll}\n                      className=\"rounded border-gray-300 text-primary focus:ring-primary\"\n                    />\n                  </th>\n                )}\n                \n                {/* Colonne dati */}\n                {displayColumns.map((column) => (\n                  <th\n                    key={column.key}\n                    className={`p-4 text-left font-medium text-sm ${\n                      column.sortable ? 'cursor-pointer hover:bg-muted' : ''\n                    } ${column.headerClassName || ''}`}\n                    onClick={() => column.sortable && handleSort(column.key)}\n                    style={{\n                      width: column.width,\n                      minWidth: column.minWidth,\n                      maxWidth: column.maxWidth\n                    }}\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <span>{column.label}</span>\n                      {column.sortable && renderSortIcon(column.key)}\n                    </div>\n                  </th>\n                ))}\n                \n                {/* Colonna azioni */}\n                {showActions && rowActions && rowActions.length > 0 && (\n                  <th className=\"w-16 p-4 text-center\">\n                    <span className=\"text-sm font-medium\">Azioni</span>\n                  </th>\n                )}\n              </tr>\n            </thead>\n            \n            {/* Body */}\n            <tbody>\n              {data.map((entity, index) => (\n                <tr\n                  key={entity.id}\n                  className={`border-t hover:bg-muted/25 ${\n                    selectedItems.includes(entity.id) ? 'bg-muted/50' : ''\n                  }`}\n                >\n                  {/* Checkbox selezione */}\n                  {showSelection && (\n                    <td className=\"p-4\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedItems.includes(entity.id)}\n                        onChange={() => handleSelectItem(entity.id)}\n                        className=\"rounded border-gray-300 text-primary focus:ring-primary\"\n                      />\n                    </td>\n                  )}\n                  \n                  {/* Celle dati */}\n                  {displayColumns.map((column) => (\n                    <td\n                      key={column.key}\n                      className={`p-4 ${column.cellClassName || ''}`}\n                      style={{\n                        textAlign: column.align || 'left'\n                      }}\n                    >\n                      {renderCellValue(column, entity)}\n                    </td>\n                  ))}\n                  \n                  {/* Cella azioni */}\n                  {showActions && rowActions && rowActions.length > 0 && (\n                    <td className=\"p-4 text-center\">\n                      {rowActions.length === 1 ? (\n                        // Singola azione - pulsante diretto\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onRowAction?.(rowActions[0].key, entity)}\n                          disabled={\n                            typeof rowActions[0].disabled === 'function' \n                              ? rowActions[0].disabled(entity) \n                              : rowActions[0].disabled\n                          }\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          {rowActions[0].icon || <Eye className=\"h-4 w-4\" />}\n                        </Button>\n                      ) : (\n                        // Multiple azioni - dropdown menu\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            {rowActions\n                              .filter(action => \n                                typeof action.visible === 'function' \n                                  ? action.visible(entity) \n                                  : action.visible !== false\n                              )\n                              .map((action) => (\n                                <DropdownMenuItem\n                                  key={action.key}\n                                  onClick={() => onRowAction?.(action.key, entity)}\n                                  disabled={\n                                    typeof action.disabled === 'function' \n                                      ? action.disabled(entity) \n                                      : action.disabled\n                                  }\n                                  className=\"flex items-center gap-2\"\n                                >\n                                  {action.icon && <span>{action.icon}</span>}\n                                  {action.label}\n                                </DropdownMenuItem>\n                              ))}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      )}\n                    </td>\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GDPREntityTable;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/GDPREntityToolbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'columns' is defined but never used.","line":102,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'visibleColumns' is defined but never used.","line":103,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onColumnsChange' is defined but never used.","line":104,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":18}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Entity Toolbar - Toolbar con controlli di ricerca, filtri e azioni\n * \n * Componente toolbar che include:\n * - Barra di ricerca\n * - Toggle vista (tabella/griglia)\n * - Pulsanti azioni batch\n * - Dropdown per aggiungere entità\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport React from 'react';\nimport { Button, Input, Badge } from '../../../design-system';\nimport { \n  DropdownMenu, \n  DropdownMenuTrigger, \n  DropdownMenuContent, \n  DropdownMenuItem\n} from '../../../design-system';\nimport { \n  ChevronDown,\n  Columns,\n  Download,\n  Filter,\n  Grid,\n  Plus,\n  Search,\n  Settings,\n  Table,\n  X\n} from 'lucide-react';\nimport { FilterState, ColumnConfig, EntityAction } from '../types';\n\nexport type ViewMode = 'table' | 'grid';\n\n/**\n * Props del componente GDPREntityToolbar\n */\nexport interface GDPREntityToolbarProps {\n  /** Valore corrente della ricerca */\n  searchValue: string;\n  \n  /** Callback per cambio ricerca */\n  onSearchChange: (value: string) => void;\n  \n  /** Stato corrente dei filtri */\n  filters: FilterState;\n  \n  /** Callback per cambio filtri */\n  onFiltersChange: (filters: FilterState) => void;\n  \n  /** Configurazione colonne disponibili */\n  columns: ColumnConfig[];\n  \n  /** Colonne visibili */\n  visibleColumns: string[];\n  \n  /** Callback per cambio visibilità colonne */\n  onColumnsChange: (columns: string[]) => void;\n  \n  /** Modalità vista corrente */\n  viewMode: ViewMode;\n  \n  /** Callback per cambio modalità vista */\n  onViewModeChange: (mode: ViewMode) => void;\n  \n  /** Numero di elementi selezionati */\n  selectedCount: number;\n  \n  /** Azioni disponibili per aggiungere entità */\n  addActions?: EntityAction[];\n  \n  /** Azioni batch disponibili */\n  batchActions?: EntityAction[];\n  \n  /** Callback per azioni batch */\n  onBatchAction?: (actionKey: string) => void;\n  \n  /** Mostra controlli GDPR */\n  showGDPRControls?: boolean;\n  \n  /** Callback per export GDPR */\n  onGDPRExport?: () => void;\n  \n  /** Callback per audit */\n  onAuditAction?: () => void;\n  \n  /** Classi CSS personalizzate */\n  className?: string;\n}\n\n/**\n * Toolbar con controlli per la gestione delle entità\n */\nexport function GDPREntityToolbar({\n  searchValue,\n  onSearchChange,\n  filters,\n  onFiltersChange,\n  columns,\n  visibleColumns,\n  onColumnsChange,\n  viewMode,\n  onViewModeChange,\n  selectedCount,\n  addActions,\n  batchActions,\n  onBatchAction,\n  showGDPRControls = true,\n  onGDPRExport,\n  onAuditAction,\n  className\n}: GDPREntityToolbarProps) {\n  \n  // Conta filtri attivi\n  const activeFiltersCount = Object.values(filters).filter(value => \n    value !== null && value !== undefined && value !== '' && \n    (Array.isArray(value) ? value.length > 0 : true)\n  ).length;\n  \n  return (\n    <div className={`gdpr-entity-toolbar space-y-4 ${className || ''}`}>\n      {/* Prima riga: Ricerca e azioni principali */}\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n        {/* Sezione sinistra: Ricerca */}\n        <div className=\"flex-1 max-w-md\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Cerca entità...\"\n              value={searchValue}\n              onChange={(e) => onSearchChange(e.target.value)}\n              className=\"pl-10\"\n            />\n            {searchValue && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onSearchChange('')}\n                className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0\"\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        {/* Sezione destra: Azioni principali */}\n        <div className=\"flex items-center gap-2\">\n          {/* Dropdown Aggiungi Entità */}\n          {addActions && addActions.length > 0 && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button className=\"flex items-center gap-2\">\n                  <Plus className=\"h-4 w-4\" />\n                  Aggiungi\n                  <ChevronDown className=\"h-3 w-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {addActions.map((action) => (\n                  <DropdownMenuItem\n                    key={action.key}\n                    onClick={() => action.onClick({})}\n                    disabled={typeof action.disabled === 'function' ? action.disabled({}) : action.disabled}\n                    className=\"flex items-center gap-2\"\n                  >\n                    {action.icon && <span>{action.icon}</span>}\n                    {action.label}\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n          \n          {/* Controlli GDPR */}\n          {showGDPRControls && (\n            <>\n              {onGDPRExport && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onGDPRExport}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  Export GDPR\n                </Button>\n              )}\n              \n              {onAuditAction && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onAuditAction}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                  Audit\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Seconda riga: Filtri e controlli vista */}\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n        {/* Sezione sinistra: Filtri */}\n        <div className=\"flex items-center gap-2 flex-wrap\">\n          {/* Pulsante Filtri */}\n          <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n            <Filter className=\"h-4 w-4\" />\n            Filtri\n            {activeFiltersCount > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-1 h-5 w-5 p-0 text-xs\">\n                {activeFiltersCount}\n              </Badge>\n            )}\n          </Button>\n          \n          {/* Badge filtri attivi */}\n          {activeFiltersCount > 0 && (\n            <div className=\"flex items-center gap-1 flex-wrap\">\n              {Object.entries(filters).map(([key, value]) => {\n                if (!value || (Array.isArray(value) && value.length === 0)) return null;\n                \n                return (\n                  <Badge\n                    key={key}\n                    variant=\"secondary\"\n                    className=\"flex items-center gap-1 text-xs\"\n                  >\n                    {key}: {Array.isArray(value) ? value.join(', ') : String(value)}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onFiltersChange({ ...filters, [key]: null })}\n                      className=\"h-3 w-3 p-0 ml-1\"\n                    >\n                      <X className=\"h-2 w-2\" />\n                    </Button>\n                  </Badge>\n                );\n              })}\n            </div>\n          )}\n        </div>\n        \n        {/* Sezione destra: Controlli vista */}\n        <div className=\"flex items-center gap-2\">\n          {/* Selettore Colonne */}\n          <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n            <Columns className=\"h-4 w-4\" />\n            Colonne\n          </Button>\n          \n          {/* Toggle Vista */}\n          <div className=\"flex items-center border rounded-md\">\n            <Button\n              variant={viewMode === 'table' ? 'primary' : 'ghost'}\n              size=\"sm\"\n              onClick={() => onViewModeChange('table')}\n              className=\"rounded-r-none border-r\"\n            >\n              <Table className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'grid' ? 'primary' : 'ghost'}\n              size=\"sm\"\n              onClick={() => onViewModeChange('grid')}\n              className=\"rounded-l-none\"\n            >\n              <Grid className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Terza riga: Azioni batch (visibile solo se ci sono elementi selezionati) */}\n      {selectedCount > 0 && batchActions && batchActions.length > 0 && (\n        <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\">\n              {selectedCount} {selectedCount === 1 ? 'elemento selezionato' : 'elementi selezionati'}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {batchActions.map((action) => {\n              // Mappa i variant non supportati a quelli supportati\n              let buttonVariant: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive' = 'outline';\n              if (action.variant === 'danger') {\n                buttonVariant = 'destructive';\n              } else if (action.variant && ['primary', 'secondary', 'outline'].includes(action.variant)) {\n                buttonVariant = action.variant as 'primary' | 'secondary' | 'outline';\n              }\n              \n              return (\n                <Button\n                  key={action.key}\n                  variant={buttonVariant}\n                  size=\"sm\"\n                  onClick={() => onBatchAction?.(action.key)}\n                  disabled={typeof action.disabled === 'function' ? action.disabled({}) : action.disabled}\n                  className=\"flex items-center gap-2\"\n                >\n                  {action.icon && <span>{action.icon}</span>}\n                  {action.label}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GDPREntityToolbar;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/config/defaults.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EntityPermissions' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EntityUIConfig' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EntityAPIConfig' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EntityValidationConfig' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":25}],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":15,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":15,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Default Configurations - Configurazioni predefinite per template GDPR\n * \n * File che contiene tutte le configurazioni predefinite per il template\n * GDPR-compliant, incluse configurazioni per entità, UI, API e GDPR.\n * \n * TODO: Refactoring completo delle interfacce GDPR necessario\n * Disabilitazione temporanea errori TypeScript per permettere build\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport {\n  GDPREntityPageConfig,\n  EntityTemplateConfig,\n  UITemplateConfig,\n  APITemplateConfig,\n  PermissionsTemplateConfig,\n  EntityValidationTemplateConfig,\n  EntityDataExchangeConfig,\n  AdvancedTemplateConfig\n} from '../types/template.types';\nimport {\n  GDPRConfig,\n  GDPRConsentConfig,\n  GDPRAuditConfig,\n  GDPRDataMinimizationConfig,\n  GDPRRightToBeForgottenConfig,\n  GDPRDataPortabilityConfig,\n  GDPRPrivacyImpactConfig\n} from '../types/gdpr.types';\nimport {\n  EntityColumn,\n  EntityFilter,\n  EntityAction,\n  EntityPermissions,\n  EntityUIConfig,\n  EntityAPIConfig,\n  EntityValidationConfig\n} from '../types/entity.types';\nimport { GDPR_CONSTANTS } from '../utils/gdpr.utils';\nimport { VALIDATION_CONSTANTS } from '../utils/validation.utils';\n\n/**\n * Configurazione GDPR predefinita\n */\nexport const DEFAULT_GDPR_CONFIG: GDPRConfig = {\n  consent: {\n    enabled: true,\n    requiredConsents: ['data_processing', 'data_storage'],\n    optionalConsents: ['marketing', 'analytics'],\n    consentExpirationDays: GDPR_CONSTANTS.DEFAULT_CONSENT_EXPIRATION_DAYS,\n    autoRenewal: false,\n    granularConsent: true,\n    consentWithdrawalEnabled: true,\n    consentHistoryEnabled: true,\n    explicitConsentRequired: true,\n    consentVerificationRequired: false,\n    defaultConsentState: false\n  } as GDPRConsentConfig,\n  \n  audit: {\n    enabled: true,\n    level: 'standard',\n    retentionDays: GDPR_CONSTANTS.DEFAULT_AUDIT_RETENTION_DAYS,\n    includeUserAgent: true,\n    includeIpAddress: true,\n    includeSessionId: true,\n    includeStackTrace: false,\n    encryptSensitiveData: true,\n    realTimeLogging: true,\n    batchSize: 10,\n    flushInterval: 30000,\n    compressionEnabled: true,\n    minimalActions: ['data_access', 'consent_granted', 'consent_revoked'],\n    standardActions: [\n      'data_access', 'data_creation', 'data_modification', 'data_deletion',\n      'consent_granted', 'consent_revoked', 'data_export', 'data_import'\n    ],\n    comprehensiveActions: [\n      'data_access', 'data_creation', 'data_modification', 'data_deletion',\n      'consent_granted', 'consent_revoked', 'consent_updated',\n      'data_export', 'data_import', 'data_anonymization',\n      'user_login', 'user_logout', 'permission_change',\n      'system_access', 'configuration_change'\n    ]\n  } as GDPRAuditConfig,\n  \n  dataMinimization: {\n    enabled: true,\n    autoApply: false,\n    rules: [\n      {\n        field: 'email',\n        condition: (value, entity) => !entity.consentMarketing,\n        action: 'pseudonymize'\n      },\n      {\n        field: 'phone',\n        condition: (value, entity) => !entity.consentMarketing,\n        action: 'anonymize'\n      },\n      {\n        field: 'address',\n        condition: (value, entity) => !entity.consentDataProcessing,\n        action: 'remove'\n      }\n    ],\n    retentionPeriodDays: 2555, // 7 anni\n    automaticDeletion: true,\n    notificationBeforeDeletion: true,\n    notificationDays: 30\n  } as GDPRDataMinimizationConfig,\n  \n  rightToBeForgotten: {\n    enabled: true,\n    automatedDeletion: true,\n    verificationRequired: true,\n    cascadeDeletion: true,\n    softDelete: true,\n    hardDeleteAfterDays: 90,\n    notifyRelatedSystems: true,\n    backupRetentionDays: 30,\n    auditDeletionProcess: true,\n    allowPartialDeletion: false,\n    requireManagerApproval: true,\n    deletionConfirmationRequired: true\n  } as GDPRRightToBeForgottenConfig,\n  \n  dataPortability: {\n    enabled: true,\n    supportedFormats: ['json', 'csv', 'xml'],\n    defaultFormat: 'json',\n    includeMetadata: true,\n    includeRelatedData: true,\n    encryptExport: true,\n    maxExportSize: 100 * 1024 * 1024, // 100MB\n    exportExpirationHours: 24,\n    notifyOnExport: true,\n    auditExport: true,\n    allowScheduledExports: false\n  } as GDPRDataPortabilityConfig,\n  \n  privacyImpact: {\n    enabled: true,\n    riskAssessmentRequired: true,\n    highRiskThreshold: 7,\n    mediumRiskThreshold: 4,\n    automaticAssessment: true,\n    manualReviewRequired: true,\n    documentationRequired: true,\n    stakeholderNotification: true,\n    regularReviewRequired: true,\n    reviewIntervalMonths: 12\n  } as GDPRPrivacyImpactConfig\n};\n\n/**\n * Permessi predefiniti\n */\nexport const DEFAULT_PERMISSIONS: PermissionsTemplateConfig = {\n  required: {\n    view: ['read'],\n    create: ['create'],\n    edit: ['update'],\n    delete: ['delete'],\n    export: ['export'],\n    import: ['import'],\n    bulkOperations: ['bulk'],\n    gdprOperations: ['gdpr']\n  },\n  optional: {\n    advancedFilters: ['advanced_filters'],\n    auditLog: ['audit'],\n    systemSettings: ['settings']\n  }\n};\n\n/**\n * Configurazione UI predefinita\n */\nexport const DEFAULT_UI_CONFIG: UITemplateConfig = {\n  header: {\n    showTitle: true,\n    showSubtitle: true,\n    showEntityCount: true,\n    showLastUpdate: true,\n    customActions: []\n  },\n  toolbar: {\n    showSearch: true,\n    showFilters: true,\n    showSort: true,\n    showExport: true,\n    showImport: false,\n    showBulkActions: true,\n    showRefresh: true,\n    showSettings: true,\n    customButtons: []\n  },\n  table: {\n    showPagination: true,\n    showSelection: true,\n    showRowActions: true,\n    showColumnToggle: true,\n    showDensityToggle: true,\n    defaultPageSize: 25,\n    pageSizeOptions: [10, 25, 50, 100],\n    stickyHeader: true,\n    stickyColumns: [],\n    resizableColumns: true,\n    sortableColumns: true,\n    filterableColumns: true\n  },\n  modals: {\n    showCreateModal: true,\n    showEditModal: true,\n    showDeleteConfirmation: true,\n    showBulkDeleteConfirmation: true,\n    showGDPRConsent: true,\n    showAuditLog: true,\n    modalSize: 'medium'\n  },\n  layout: {\n    sidebar: false,\n    breadcrumbs: true,\n    pageHeader: true,\n    footer: false,\n    spacing: 'normal',\n    containerMaxWidth: 'xl'\n  },\n  theme: {\n    primaryColor: '#1976d2',\n    secondaryColor: '#dc004e',\n    successColor: '#2e7d32',\n    warningColor: '#ed6c02',\n    errorColor: '#d32f2f',\n    infoColor: '#0288d1',\n    backgroundColor: '#fafafa',\n    surfaceColor: '#ffffff',\n    textPrimaryColor: '#212121',\n    textSecondaryColor: '#757575'\n  }\n};\n\n/**\n * Configurazione API predefinita\n */\nexport const DEFAULT_API_CONFIG: APITemplateConfig = {\n  endpoints: {\n    list: '/api/entities',\n    create: '/api/entities',\n    read: '/api/entities',\n    update: '/api/entities',\n    delete: '/api/entities',\n    export: '/api/entities/export',\n    import: '/api/entities/import'\n  },\n  defaultOptions: {\n    timeout: 30000,\n    retries: 3,\n    retryDelay: 1000\n  },\n  caching: {\n    enabled: true,\n    ttl: 300000, // 5 minuti\n    maxSize: 100,\n    strategy: 'lru'\n  },\n  pagination: {\n    defaultPage: 1,\n    defaultPageSize: 25,\n    maxPageSize: 100,\n    pageSizeParam: 'pageSize',\n    pageParam: 'page',\n    totalCountHeader: 'X-Total-Count'\n  },\n  search: {\n    searchParam: 'search',\n    searchFields: ['name', 'description'],\n    minSearchLength: 2,\n    searchDelay: 300\n  },\n  sorting: {\n    sortParam: 'sort',\n    orderParam: 'order',\n    defaultSort: 'createdAt',\n    defaultOrder: 'desc'\n  },\n  filtering: {\n    filterPrefix: 'filter',\n    dateFormat: 'YYYY-MM-DD',\n    booleanFormat: 'true/false'\n  }\n};\n\n/**\n * Configurazione validazione predefinita\n */\nexport const DEFAULT_VALIDATION_CONFIG: EntityValidationTemplateConfig = {\n  rules: [\n    {\n      field: 'name',\n      type: 'string',\n      required: true,\n      minLength: VALIDATION_CONSTANTS.LENGTHS.NAME.min,\n      maxLength: VALIDATION_CONSTANTS.LENGTHS.NAME.max,\n      pattern: VALIDATION_CONSTANTS.PATTERNS.LETTERS_SPACES\n    },\n    {\n      field: 'email',\n      type: 'email',\n      required: false,\n      maxLength: VALIDATION_CONSTANTS.LENGTHS.EMAIL.max\n    },\n    {\n      field: 'phone',\n      type: 'phone',\n      required: false\n    },\n    {\n      field: 'description',\n      type: 'string',\n      required: false,\n      maxLength: VALIDATION_CONSTANTS.LENGTHS.DESCRIPTION.max\n    }\n  ],\n  strictMode: false,\n  allowUnknownFields: true,\n  sanitizeInput: true\n};\n\n/**\n * Configurazione import/export predefinita\n */\nexport const DEFAULT_DATA_EXCHANGE_CONFIG: EntityDataExchangeConfig = {\n  import: {\n    enabled: false,\n    supportedFormats: ['csv', 'xlsx'],\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    validateBeforeImport: true,\n    allowPartialImport: true,\n    duplicateHandling: 'skip',\n    batchSize: 100,\n    templateUrl: '/templates/template-entities.csv'\n  },\n  export: {\n    enabled: true,\n    supportedFormats: ['csv', 'xlsx', 'json'],\n    defaultFormat: 'csv',\n    includeHeaders: true,\n    includeMetadata: false,\n    maxRecords: 10000,\n    filename: 'entities-export',\n    gdprCompliant: true\n  }\n};\n\n/**\n * Configurazioni avanzate predefinite\n */\nexport const DEFAULT_ADVANCED_CONFIG: AdvancedTemplateConfig = {\n  performance: {\n    virtualScrolling: false,\n    lazyLoading: true,\n    debounceMs: 300,\n    throttleMs: 100,\n    memoization: true,\n    optimisticUpdates: false\n  },\n  analytics: {\n    enabled: false,\n    trackUserActions: false,\n    trackPerformance: false,\n    trackErrors: true,\n    anonymizeData: true\n  },\n  debug: {\n    enabled: false,\n    logLevel: 'warn',\n    showPerformanceMetrics: false,\n    showStateChanges: false,\n    enableDevTools: false\n  },\n  experimental: {\n    enableNewFeatures: false,\n    betaFeatures: [],\n    featureFlags: {}\n  }\n};\n\n/**\n * Colonne predefinite per entità base\n */\nexport const DEFAULT_ENTITY_COLUMNS: EntityColumn[] = [\n  {\n    key: 'id',\n    label: 'ID',\n    type: 'string',\n    sortable: true,\n    filterable: true,\n    visible: false,\n    width: 100,\n    align: 'left'\n  },\n  {\n    key: 'name',\n    label: 'Nome',\n    type: 'string',\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 200,\n    align: 'left',\n    required: true\n  },\n  {\n    key: 'email',\n    label: 'Email',\n    type: 'email',\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 250,\n    align: 'left'\n  },\n  {\n    key: 'phone',\n    label: 'Telefono',\n    type: 'phone',\n    sortable: false,\n    filterable: true,\n    visible: true,\n    width: 150,\n    align: 'left'\n  },\n  {\n    key: 'status',\n    label: 'Stato',\n    type: 'select',\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120,\n    align: 'center',\n    options: [\n      { value: 'active', label: 'Attivo', color: 'success' },\n      { value: 'inactive', label: 'Inattivo', color: 'default' },\n      { value: 'pending', label: 'In attesa', color: 'warning' },\n      { value: 'suspended', label: 'Sospeso', color: 'error' }\n    ]\n  },\n  {\n    key: 'createdAt',\n    label: 'Creato il',\n    type: 'datetime',\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 150,\n    align: 'center'\n  },\n  {\n    key: 'updatedAt',\n    label: 'Modificato il',\n    type: 'datetime',\n    sortable: true,\n    filterable: true,\n    visible: false,\n    width: 150,\n    align: 'center'\n  }\n];\n\n/**\n * Filtri predefiniti\n */\nexport const DEFAULT_ENTITY_FILTERS: EntityFilter[] = [\n  {\n    key: 'status',\n    label: 'Stato',\n    type: 'select',\n    options: [\n      { value: 'active', label: 'Attivo' },\n      { value: 'inactive', label: 'Inattivo' },\n      { value: 'pending', label: 'In attesa' },\n      { value: 'suspended', label: 'Sospeso' }\n    ],\n    multiple: true\n  },\n  {\n    key: 'createdAt',\n    label: 'Data creazione',\n    type: 'dateRange'\n  },\n  {\n    key: 'updatedAt',\n    label: 'Data modifica',\n    type: 'dateRange'\n  }\n];\n\n/**\n * Azioni predefinite\n */\nexport const DEFAULT_ENTITY_ACTIONS: EntityAction[] = [\n  {\n    key: 'view',\n    label: 'Visualizza',\n    icon: 'visibility',\n    type: 'primary',\n    permission: 'read'\n  },\n  {\n    key: 'edit',\n    label: 'Modifica',\n    icon: 'edit',\n    type: 'secondary',\n    permission: 'update'\n  },\n  {\n    key: 'delete',\n    label: 'Elimina',\n    icon: 'delete',\n    type: 'danger',\n    permission: 'delete',\n    confirmationRequired: true,\n    confirmationMessage: 'Sei sicuro di voler eliminare questo elemento?'\n  },\n  {\n    key: 'audit',\n    label: 'Audit Log',\n    icon: 'history',\n    type: 'secondary',\n    permission: 'auditView'\n  },\n  {\n    key: 'gdpr',\n    label: 'GDPR',\n    icon: 'security',\n    type: 'secondary',\n    permission: 'gdprManagement'\n  }\n];\n\n/**\n * Configurazione template completa predefinita\n */\nexport const DEFAULT_TEMPLATE_CONFIG: Omit<GDPREntityPageConfig, 'entity'> & { entity: Omit<EntityTemplateConfig, 'name' | 'namePlural'> } = {\n  entity: {\n    columns: DEFAULT_ENTITY_COLUMNS,\n    filters: DEFAULT_ENTITY_FILTERS,\n    actions: DEFAULT_ENTITY_ACTIONS,\n    searchFields: ['name', 'email', 'description'],\n    defaultSort: { field: 'createdAt', direction: 'desc' },\n    bulkActions: [\n      {\n        key: 'bulkDelete',\n        label: 'Elimina selezionati',\n        icon: 'delete',\n        type: 'danger',\n        permission: 'delete',\n        confirmationRequired: true,\n        confirmationMessage: 'Sei sicuro di voler eliminare gli elementi selezionati?'\n      },\n      {\n        key: 'bulkExport',\n        label: 'Esporta selezionati',\n        icon: 'download',\n        type: 'secondary',\n        permission: 'export'\n      }\n    ]\n  },\n  \n  ui: DEFAULT_UI_CONFIG,\n  api: DEFAULT_API_CONFIG,\n  permissions: DEFAULT_PERMISSIONS,\n  validation: DEFAULT_VALIDATION_CONFIG,\n  dataExchange: DEFAULT_DATA_EXCHANGE_CONFIG,\n  advanced: DEFAULT_ADVANCED_CONFIG,\n  gdpr: DEFAULT_GDPR_CONFIG\n};\n\n/**\n * Factory per creare configurazione personalizzata\n */\nexport class ConfigFactory {\n  \n  /**\n   * Crea configurazione base per un tipo di entità\n   */\n  static createBaseConfig(\n    entityType: string,\n    title: string,\n    overrides: Partial<GDPREntityPageConfig> = {}\n  ): GDPREntityPageConfig {\n    return {\n      ...DEFAULT_TEMPLATE_CONFIG,\n      entity: {\n        ...DEFAULT_TEMPLATE_CONFIG.entity,\n        name: entityType,\n        namePlural: title,\n        description: `Gestione ${title.toLowerCase()}`\n      },\n      ...overrides\n    };\n  }\n  \n  /**\n   * Crea configurazione per entità semplice (senza GDPR complesso)\n   */\n  static createSimpleConfig(\n    entityType: string,\n    title: string,\n    overrides: Partial<GDPREntityPageConfig> = {}\n  ): GDPREntityPageConfig {\n    const simpleGDPR: GDPRConfig = {\n      ...DEFAULT_GDPR_CONFIG,\n      consent: {\n        ...DEFAULT_GDPR_CONFIG.consent!,\n        requiredConsents: ['data_processing'],\n        optionalConsents: []\n      },\n      audit: {\n        ...DEFAULT_GDPR_CONFIG.audit!,\n        level: 'minimal'\n      },\n      dataMinimization: {\n        ...DEFAULT_GDPR_CONFIG.dataMinimization!,\n        enabled: false\n      }\n    };\n    \n    return this.createBaseConfig(entityType, title, {\n      gdpr: simpleGDPR,\n      ...overrides\n    });\n  }\n  \n  /**\n   * Crea configurazione per entità con dati sensibili\n   */\n  static createSensitiveDataConfig(\n    entityType: string,\n    title: string,\n    overrides: Partial<GDPREntityPageConfig> = {}\n  ): GDPREntityPageConfig {\n    const sensitiveGDPR: GDPRConfig = {\n      ...DEFAULT_GDPR_CONFIG,\n      audit: {\n        ...DEFAULT_GDPR_CONFIG.audit!,\n        level: 'comprehensive',\n        encryptSensitiveData: true\n      },\n      dataMinimization: {\n        ...DEFAULT_GDPR_CONFIG.dataMinimization!,\n        autoApply: true\n      },\n      privacyImpact: {\n        ...DEFAULT_GDPR_CONFIG.privacyImpact!,\n        riskAssessmentRequired: true,\n        manualReviewRequired: true\n      }\n    };\n    \n    return this.createBaseConfig(entityType, title, {\n      gdpr: sensitiveGDPR,\n      ...overrides\n    });\n  }\n  \n  /**\n   * Crea configurazione per entità di sola lettura\n   */\n  static createReadOnlyConfig(\n    entityType: string,\n    title: string,\n    overrides: Partial<GDPREntityPageConfig> = {}\n  ): GDPREntityPageConfig {\n    const readOnlyPermissions: PermissionsTemplateConfig = {\n      required: {\n        create: false,\n        read: true,\n        update: false,\n        delete: false,\n        export: true,\n        import: false\n      },\n      optional: {\n        bulkEdit: false,\n        bulkDelete: false,\n        advancedSearch: true,\n        auditView: true,\n        gdprManagement: false\n      }\n    };\n    \n    const readOnlyUI: UITemplateConfig = {\n      ...DEFAULT_UI_CONFIG,\n      toolbar: {\n        ...DEFAULT_UI_CONFIG.toolbar,\n        showImport: false,\n        showBulkActions: false\n      },\n      modals: {\n        ...DEFAULT_UI_CONFIG.modals,\n        showCreateModal: false,\n        showEditModal: false,\n        showDeleteConfirmation: false,\n        showBulkDeleteConfirmation: false\n      }\n    };\n    \n    return this.createBaseConfig(entityType, title, {\n      permissions: readOnlyPermissions,\n      ui: readOnlyUI,\n      ...overrides\n    });\n  }\n}\n\nexport default {\n  DEFAULT_GDPR_CONFIG,\n  DEFAULT_PERMISSIONS,\n  DEFAULT_UI_CONFIG,\n  DEFAULT_API_CONFIG,\n  DEFAULT_VALIDATION_CONFIG,\n  DEFAULT_DATA_EXCHANGE_CONFIG,\n  DEFAULT_ADVANCED_CONFIG,\n  DEFAULT_ENTITY_COLUMNS,\n  DEFAULT_ENTITY_FILTERS,\n  DEFAULT_ENTITY_ACTIONS,\n  DEFAULT_TEMPLATE_CONFIG,\n  ConfigFactory\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/examples/CompaniesPageExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2880,2883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2880,2883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validatedData' is assigned a value but never used.","line":109,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formattedData' is assigned a value but never used.","line":126,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Badge } from '../../../design-system';\nimport { Edit, Eye, Trash2 } from 'lucide-react';\nimport { GDPREntityTemplate } from '../GDPREntityTemplate';\nimport { companiesConfig, createStandardColumns } from '../GDPREntityConfig';\nimport { Company } from '../../../types';\nimport { DataTableColumn } from '../../../components/shared/tables/DataTable';\n\n/**\n * Esempio di implementazione del template GDPR per la gestione delle aziende\n * Dimostra come utilizzare il template unificato con configurazione personalizzata\n */\n\nexport const CompaniesPageExample: React.FC = () => {\n  const navigate = useNavigate();\n  \n  // Definizione colonne personalizzate per le aziende\n  const columns: DataTableColumn<Company>[] = [\n    {\n      key: 'name',\n      label: 'Nome Azienda',\n      sortable: true,\n      width: 300,\n      renderCell: (company: Company) => (\n        <div className=\"font-medium\">\n          {company.name}\n        </div>\n      )\n    },\n    {\n      key: 'address',\n      label: 'Indirizzo',\n      sortable: true,\n      width: 200,\n      renderCell: (company: Company) => company.address || '-'\n    },\n    {\n      key: 'city',\n      label: 'Città',\n      sortable: true,\n      width: 120,\n      renderCell: (company: Company) => company.city || '-'\n    },\n    {\n      key: 'province',\n      label: 'Provincia',\n      sortable: true,\n      width: 100,\n      renderCell: (company: Company) => company.province || '-'\n    },\n    {\n      key: 'vatNumber',\n      label: 'P.IVA',\n      sortable: true,\n      width: 120,\n      renderCell: (company: Company) => company.vatNumber || '-'\n    },\n    {\n      key: 'email',\n      label: 'Email',\n      sortable: true,\n      width: 200,\n      renderCell: (company: Company) => company.email || '-'\n    },\n    {\n      key: 'phone',\n      label: 'Telefono',\n      sortable: true,\n      width: 120,\n      renderCell: (company: Company) => company.phone || '-'\n    },\n    {\n      key: 'status',\n      label: 'Stato',\n      sortable: true,\n      width: 120,\n      renderCell: (company) => (\n          <Badge variant={company.status === 'ACTIVE' ? 'default' : 'secondary'}>\n            {company.status || 'ACTIVE'}\n          </Badge>\n        )\n    }\n  ];\n  \n  // Handler personalizzati\n  const handleCreateCompany = () => {\n    navigate('/companies/create');\n  };\n  \n  const handleEditCompany = (company: Company) => {\n    navigate(`/companies/${company.id}/edit`);\n  };\n  \n  const handleDeleteCompany = async (id: string) => {\n    // Implementazione personalizzata per eliminazione azienda\n    // Qui potresti aggiungere logica specifica per le aziende\n    console.log('Eliminazione azienda personalizzata:', id);\n    \n    // Chiamata API personalizzata se necessario\n    // await customDeleteCompany(id);\n  };\n  \n  const handleImportCompanies = async (data: any[]) => {\n    // Implementazione personalizzata per import aziende\n    console.log('Import aziende personalizzato:', data);\n    \n    // Logica di validazione e trasformazione dati specifica per aziende\n    const validatedData = data.map(item => ({\n      ...item,\n      // Validazioni specifiche per aziende\n      vatNumber: item.vatNumber?.replace(/[^0-9]/g, ''), // Solo numeri per P.IVA\n      email: item.email?.toLowerCase(), // Email in minuscolo\n      status: item.status || 'ACTIVE' // Stato di default\n    }));\n    \n    // Chiamata API per import\n    // await importCompanies(validatedData);\n  };\n  \n  const handleExportCompanies = (companies: Company[]) => {\n    // Implementazione personalizzata per export aziende\n    console.log('Export aziende personalizzato:', companies);\n    \n    // Potresti aggiungere logica per formattazione speciale dei dati\n    const formattedData = companies.map(company => ({\n      ...company,\n      full_address: `${company.address || ''}, ${company.city || ''} ${company.province || ''}`.trim(),\n      contact_info: `${company.email || ''} - ${company.phone || ''}`.replace(/^\\s*-\\s*|\\s*-\\s*$/g, '')\n    }));\n    \n    // Esportazione con dati formattati\n    // exportToCsv(formattedData, customHeaders, 'aziende_export.csv');\n  };\n  \n  return (\n    <GDPREntityTemplate<Company>\n      // Configurazione base da config\n      {...companiesConfig}\n      \n      // Colonne personalizzate\n      columns={columns}\n      \n      // Handler personalizzati\n      onCreateEntity={handleCreateCompany}\n      onEditEntity={handleEditCompany}\n      onDeleteEntity={handleDeleteCompany}\n      onImportEntities={handleImportCompanies}\n      onExportEntities={handleExportCompanies}\n      \n      // Configurazioni specifiche per aziende\n      filterOptions={[\n        {\n          label: 'Stato',\n          key: 'status',\n          options: [\n            { label: 'Attiva', value: 'ACTIVE' },\n            { label: 'Inattiva', value: 'INACTIVE' }\n          ]\n        },\n        {\n          label: 'Provincia',\n          key: 'province',\n          options: [\n            { label: 'Milano', value: 'MI' },\n            { label: 'Roma', value: 'RM' },\n            { label: 'Torino', value: 'TO' },\n            { label: 'Napoli', value: 'NA' },\n            { label: 'Bologna', value: 'BO' }\n          ]\n        }\n      ]}\n      \n      sortOptions={[\n        { label: 'Nome (A-Z)', key: 'name-asc' },\n        { label: 'Nome (Z-A)', key: 'name-desc' },\n        { label: 'Città (A-Z)', key: 'city-asc' },\n        { label: 'Città (Z-A)', key: 'city-desc' },\n        { label: 'Data creazione (recente)', key: 'createdAt-desc' },\n        { label: 'Data creazione (meno recente)', key: 'createdAt-asc' }\n      ]}\n      \n      // Configurazione card per vista griglia\n      cardConfig={{\n        titleField: 'name',\n        subtitleField: 'city',\n        badgeField: 'status',\n        descriptionField: 'address',\n        additionalFields: [\n          {\n            key: 'vatNumber',\n            label: 'P.IVA',\n            icon: <Eye className=\"h-3.5 w-3.5\" />\n          },\n          {\n            key: 'email',\n            label: 'Email',\n            icon: <Edit className=\"h-3.5 w-3.5\" />\n          },\n          {\n            key: 'phone',\n            label: 'Telefono',\n            icon: <Trash2 className=\"h-3.5 w-3.5\" />\n          },\n          {\n            key: 'contactPerson',\n            label: 'Contatto',\n            icon: <Eye className=\"h-3.5 w-3.5\" />\n          }\n        ]\n      }}\n      \n      // Configurazioni UI\n      enableBatchOperations={true}\n      enableImportExport={true}\n      enableColumnSelector={true}\n      enableAdvancedFilters={true}\n      defaultViewMode=\"table\"\n    />\n  );\n};\n\nexport default CompaniesPageExample;\n\n/**\n * Esempio di utilizzo alternativo con configurazione minima\n */\nexport const CompaniesPageMinimal: React.FC = () => {\n  // Utilizzo con configurazione minima usando createStandardColumns\n  const minimalColumns = createStandardColumns<Company>([\n    { key: 'name', label: 'Nome', width: 200 },\n    { key: 'city', label: 'Città', width: 150 },\n    { key: 'email', label: 'Email', width: 200 },\n    { \n      key: 'status', \n      label: 'Stato', \n      width: 120,\n      formatter: (value) => (\n        <Badge variant={value === 'ACTIVE' ? 'default' : 'secondary'}>\n          {value || 'ACTIVE'}\n        </Badge>\n      )\n    }\n  ]);\n  \n  return (\n    <GDPREntityTemplate<Company>\n      {...companiesConfig}\n      columns={minimalColumns}\n      enableBatchOperations={false}\n      enableImportExport={false}\n      enableColumnSelector={false}\n      enableAdvancedFilters={false}\n    />\n  );\n};\n\n/**\n * Esempio di utilizzo con permessi personalizzati\n */\nexport const CompaniesPageCustomPermissions: React.FC = () => {\n  return (\n    <GDPREntityTemplate<Company>\n      {...companiesConfig}\n      \n      // Override permessi per logica specifica\n      readPermission=\"companies.view\"\n      writePermission=\"companies.manage\"\n      deletePermission=\"companies.remove\"\n      exportPermission=\"companies.export\"\n      \n      columns={createStandardColumns<Company>([\n        { key: 'name', label: 'Nome Azienda' },\n        { key: 'city', label: 'Città' },\n        { key: 'vatNumber', label: 'P.IVA' }\n      ])}\n    />\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/examples/CoursesPageExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'coursesConfig' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createStandardColumns' is defined but never used.","line":12,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4116,4119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4116,4119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validatedData' is assigned a value but never used.","line":153,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formattedData' is assigned a value but never used.","line":167,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleBatchAction' is assigned a value but never used.","line":178,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":26}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Badge } from '../../../components/ui/badge';\nimport { \n  BookOpen,\n  Calendar,\n  Clock,\n  DollarSign,\n  Users\n} from 'lucide-react';\nimport { GDPREntityTemplate } from '../GDPREntityTemplate';\nimport { coursesConfig, createStandardColumns } from '../GDPREntityConfig';\nimport { Course } from '../../../types/courses';\nimport { DataTableColumn } from '../../../components/shared/tables/DataTable';\n\n/**\n * Esempio di implementazione del template GDPR per la gestione dei corsi\n * Dimostra l'integrazione dei componenti UI specifici dalla pagina courses\n */\n\nexport const CoursesPageExample: React.FC = () => {\n  const navigate = useNavigate();\n  \n  // Definizione colonne personalizzate per i corsi\n  const columns: DataTableColumn<Course>[] = [\n    {\n      key: 'title',\n      label: 'Titolo Corso',\n      sortable: true,\n      width: 300,\n      renderCell: (course: Course) => (\n        <div className=\"font-medium\">\n          <div className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-4 w-4 text-blue-500\" />\n            {course.title}\n          </div>\n          {course.code && (\n            <div className=\"text-xs text-gray-500 mt-1\">\n              Codice: {course.code}\n            </div>\n          )}\n        </div>\n      )\n    },\n    {\n      key: 'category',\n      label: 'Categoria',\n      sortable: true,\n      width: 150,\n      renderCell: (course: Course) => (\n        <Badge variant=\"outline\">\n          {course.category || 'Generale'}\n        </Badge>\n      )\n    },\n    {\n      key: 'duration',\n      label: 'Durata',\n      sortable: true,\n      width: 120,\n      renderCell: (course: Course) => (\n        <div className=\"flex items-center gap-1\">\n          <Clock className=\"h-3.5 w-3.5 text-gray-400\" />\n          <span>{course.duration || 0}h</span>\n        </div>\n      )\n    },\n    {\n      key: 'maxPeople',\n      label: 'Max Partecipanti',\n      sortable: true,\n      width: 120,\n      renderCell: (course: Course) => (\n        <div className=\"flex items-center gap-1\">\n          <Users className=\"h-3.5 w-3.5 text-gray-400\" />\n          <span>{course.maxPeople || '∞'}</span>\n        </div>\n      )\n    },\n    {\n      key: 'pricePerPerson',\n      label: 'Prezzo',\n      sortable: true,\n      width: 120,\n      renderCell: (course: Course) => (\n        <div className=\"flex items-center gap-1\">\n          <DollarSign className=\"h-3.5 w-3.5 text-green-500\" />\n          <span>€{course.pricePerPerson || 0}</span>\n        </div>\n      )\n    },\n    {\n      key: 'createdAt',\n      label: 'Data Creazione',\n      sortable: true,\n      width: 120,\n      renderCell: (course: Course) => (\n        <div className=\"flex items-center gap-1\">\n          <Calendar className=\"h-3.5 w-3.5 text-gray-400\" />\n          <span>\n            {course.createdAt \n              ? new Date(course.createdAt).toLocaleDateString('it-IT')\n              : '-'\n            }\n          </span>\n        </div>\n      )\n    },\n    {\n      key: 'status',\n      label: 'Stato',\n      sortable: true,\n      width: 120,\n      renderCell: (course: Course) => {\n        const getStatusVariant = (status: string) => {\n          switch (status) {\n            case 'active': return 'default';\n            case 'draft': return 'secondary';\n            case 'completed': return 'outline';\n            case 'cancelled': return 'destructive';\n            default: return 'secondary';\n          }\n        };\n        \n        return (\n          <Badge variant={getStatusVariant(course.status || 'draft')}>\n            {course.status || 'Bozza'}\n          </Badge>\n        );\n      }\n    }\n  ];\n  \n  // Handler personalizzati per i corsi\n  const handleCreateCourse = () => {\n    navigate('/courses/create');\n  };\n  \n  const handleEditCourse = (course: Course) => {\n    navigate(`/courses/${course.id}/edit`);\n  };\n  \n  const handleDeleteCourse = async (id: string) => {\n    // Implementazione personalizzata per eliminazione corso\n    console.log('Eliminazione corso personalizzata:', id);\n  };\n  \n  const handleImportCourses = async (data: any[]) => {\n    // Implementazione personalizzata per import corsi\n    console.log('Import corsi personalizzato:', data);\n    \n    // Validazioni specifiche per corsi\n    const validatedData = data.map(item => ({\n      ...item,\n      duration: parseInt(item.duration) || 0,\n      pricePerPerson: parseFloat(item.pricePerPerson) || 0,\n      maxPeople: parseInt(item.maxPeople) || null,\n      status: item.status || 'draft'\n    }));\n  };\n  \n  const handleExportCourses = (courses: Course[]) => {\n    // Implementazione personalizzata per export corsi\n    console.log('Export corsi personalizzato:', courses);\n    \n    // Formattazione dati per export\n    const formattedData = courses.map(course => ({\n      ...course,\n      duration_formatted: `${course.duration || 0} ore`,\n      price_formatted: `€${course.pricePerPerson || 0}`,\n      max_people_info: course.maxPeople || 'Illimitato',\n      created_date_formatted: course.createdAt \n        ? new Date(course.createdAt).toLocaleDateString('it-IT')\n        : '-'\n    }));\n  };\n  \n  const handleBatchAction = async (action: string, selectedIds: string[]) => {\n    // Azioni batch personalizzate per corsi\n    switch (action) {\n      case 'activate':\n        console.log('Attivazione corsi:', selectedIds);\n        break;\n      case 'deactivate':\n        console.log('Disattivazione corsi:', selectedIds);\n        break;\n      case 'duplicate':\n        console.log('Duplicazione corsi:', selectedIds);\n        break;\n      default:\n        console.log('Azione batch:', action, selectedIds);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <GDPREntityTemplate<Course>\n        entityName=\"course\"\n        entityNamePlural=\"courses\"\n        entityDisplayName=\"Corso\"\n        entityDisplayNamePlural=\"Corsi\"\n        \n        // Permessi\n        readPermission=\"courses.read\"\n        writePermission=\"courses.write\"\n        deletePermission=\"courses.delete\"\n        exportPermission=\"courses.export\"\n        \n        // API endpoint\n        apiEndpoint=\"/api/courses\"\n        \n        // Colonne personalizzate\n        columns={columns}\n        \n        // Handler personalizzati\n        onCreateEntity={handleCreateCourse}\n        onEditEntity={handleEditCourse}\n        onDeleteEntity={handleDeleteCourse}\n        onImportEntities={handleImportCourses}\n        onExportEntities={handleExportCourses}\n        \n        // Configurazioni di ricerca e filtri\n        searchFields={['title', 'category', 'description']}\n        \n        // Opzioni di ordinamento personalizzate\n        sortOptions={[\n          { key: 'title', label: 'Titolo' },\n          { key: 'category', label: 'Categoria' },\n          { key: 'duration', label: 'Durata' },\n          { key: 'pricePerPerson', label: 'Prezzo' },\n          { key: 'createdAt', label: 'Data Creazione' },\n          { key: 'status', label: 'Stato' }\n        ]}\n        \n        // Configurazione card per vista mobile\n        cardConfig={{\n          titleField: 'title',\n          subtitleField: 'category'\n        }}\n        \n        // Configurazioni UI specifiche per corsi\n        enableBatchOperations={true}\n        enableImportExport={true}\n        enableColumnSelector={true}\n        enableAdvancedFilters={true}\n        \n        // Filtri personalizzati\n        filterOptions={[\n          {\n            key: 'category',\n            label: 'Categoria',\n            options: [\n              { label: 'Sicurezza', value: 'sicurezza' },\n              { label: 'Formazione', value: 'formazione' },\n              { label: 'Tecnico', value: 'tecnico' },\n              { label: 'Gestionale', value: 'gestionale' }\n            ]\n          },\n          {\n            key: 'status',\n            label: 'Stato',\n            options: [\n              { label: 'Attivo', value: 'active' },\n              { label: 'Bozza', value: 'draft' },\n              { label: 'Completato', value: 'completed' },\n              { label: 'Annullato', value: 'cancelled' }\n            ]\n          },\n          {\n            key: 'duration',\n            label: 'Durata',\n            options: [\n              { label: '1-4 ore', value: '1-4' },\n              { label: '5-8 ore', value: '5-8' },\n              { label: '9-16 ore', value: '9-16' },\n              { label: 'Più di 16 ore', value: '16+' }\n            ]\n          }\n        ]}\n        \n        // Configurazioni CSV\n        csvHeaders={[\n          { key: 'title', label: 'Titolo' },\n          { key: 'category', label: 'Categoria' },\n          { key: 'duration', label: 'Durata' },\n          { key: 'status', label: 'Stato' }\n        ]}\n      />\n    </div>\n  );\n};\n\n// Dashboard semplificata per i corsi\nexport const CoursesPageDashboard: React.FC = () => {\n  const columns: DataTableColumn<Course>[] = [\n    { \n      key: 'title', \n      label: 'Titolo', \n      sortable: true,\n      renderCell: (row: Course) => row.title || '-'\n    },\n    { \n      key: 'category', \n      label: 'Categoria', \n      sortable: true,\n      renderCell: (row: Course) => (\n        <Badge variant=\"outline\">\n          {row.category || 'Generale'}\n        </Badge>\n      )\n    },\n    {\n      key: 'status',\n      label: 'Stato',\n      sortable: true,\n      renderCell: (row: Course) => (\n        <Badge variant={row.status === 'active' ? 'default' : 'secondary'}>\n          {row.status || 'Bozza'}\n        </Badge>\n      )\n    },\n    {\n      key: 'createdAt',\n      label: 'Data Creazione',\n      sortable: true,\n      renderCell: (row: Course) => row.createdAt ? new Date(row.createdAt).toLocaleDateString('it-IT') : '-'\n    },\n    { \n      key: 'duration', \n      label: 'Durata', \n      sortable: true,\n      renderCell: (row: Course) => `${row.duration || 0}h`\n    }\n  ];\n\n  return (\n    <GDPREntityTemplate<Course>\n      entityName=\"course\"\n      entityNamePlural=\"courses\"\n      entityDisplayName=\"Corso\"\n      entityDisplayNamePlural=\"Corsi\"\n      readPermission=\"courses.read\"\n      writePermission=\"courses.write\"\n      deletePermission=\"courses.delete\"\n      apiEndpoint=\"/api/courses\"\n      columns={columns}\n      searchFields={['title', 'category']}\n      csvHeaders={[\n        { key: 'title', label: 'Titolo' },\n        { key: 'category', label: 'Categoria' }\n      ]}\n      enableBatchOperations={false}\n      enableImportExport={false}\n      enableColumnSelector={false}\n      enableAdvancedFilters={false}\n    />\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useEntityData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[717,720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[717,720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1618,1621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1618,1621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2434,2437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2434,2437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2736,2739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2736,2739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { apiGet } from '../../../services/api';\nimport { getLoadingErrorMessage } from '../../../utils/errorUtils';\nimport { useToast } from '../../../hooks/useToast';\n\n/**\n * Hook per la gestione dei dati delle entità\n * Centralizza caricamento, errori e refresh dei dati\n */\nexport interface UseEntityDataProps {\n  apiEndpoint: string;\n  entityNamePlural: string;\n  entityDisplayNamePlural: string;\n}\n\nexport interface UseEntityDataReturn<T> {\n  entities: T[];\n  loading: boolean;\n  error: string | null;\n  refreshData: () => Promise<void>;\n  setEntities: React.Dispatch<React.SetStateAction<T[]>>;\n}\n\nexport const useEntityData = <T extends Record<string, any>>({\n  apiEndpoint,\n  entityNamePlural,\n  entityDisplayNamePlural\n}: UseEntityDataProps): UseEntityDataReturn<T> => {\n  const [entities, setEntities] = useState<T[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { showToast } = useToast();\n\n  // Costruisce l'URL dell'API con parametri specifici per le persone\n  const buildApiUrl = useCallback((endpoint: string): string => {\n    if (endpoint === '/api/persons' || endpoint === '/api/v1/persons') {\n      const params = new URLSearchParams();\n      params.append('page', '1');\n      params.append('limit', '50');\n      params.append('sortBy', 'lastLogin');\n      params.append('sortOrder', 'desc');\n      return `${endpoint}?${params.toString()}`;\n    }\n    return endpoint;\n  }, []);\n\n  // Processa la risposta dell'API\n  const processApiResponse = useCallback((response: any): T[] => {\n    // Gestisci la risposta paginata per l'endpoint delle persone\n    if ((apiEndpoint === '/api/persons' || apiEndpoint === '/api/v1/persons') && \n        response && typeof response === 'object' && response.persons) {\n      return response.persons;\n    } else if (Array.isArray(response)) {\n      return response;\n    } else {\n      console.warn(`⚠️ Risposta API non è un array:`, response);\n      return [];\n    }\n  }, [apiEndpoint]);\n\n  // Caricamento dati\n  const loadEntities = useCallback(async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log(`🔄 Caricamento ${entityDisplayNamePlural}...`);\n      \n      const apiUrl = buildApiUrl(apiEndpoint);\n      console.log(`📡 Chiamata API: ${apiUrl}`);\n      \n      const response = await apiGet<any>(apiUrl);\n      console.log(`📊 Risposta API ${entityNamePlural}:`, response);\n      \n      const processedEntities = processApiResponse(response);\n      setEntities(processedEntities);\n      console.log(`✅ ${entityDisplayNamePlural} caricate:`, processedEntities.length);\n      \n    } catch (err: any) {\n      console.error(`❌ Errore caricamento ${entityDisplayNamePlural}:`, err);\n      const errorMessage = getLoadingErrorMessage(\n        (entityNamePlural as keyof typeof import('../../../utils/errorUtils').errorMessages.loading) || 'generic', \n        err\n      );\n      setError(errorMessage);\n      setEntities([]);\n      \n      showToast({\n        message: `Errore durante il caricamento dei ${entityDisplayNamePlural.toLowerCase()}: ${err instanceof Error ? err.message : 'Errore sconosciuto'}`,\n        type: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [apiEndpoint, entityNamePlural, entityDisplayNamePlural, buildApiUrl, processApiResponse, showToast]);\n\n  // Refresh dati (alias per loadEntities)\n  const refreshData = useCallback(async (): Promise<void> => {\n    await loadEntities();\n  }, [loadEntities]);\n\n  // Caricamento iniziale\n  useEffect(() => {\n    loadEntities();\n  }, [loadEntities]);\n\n  return {\n    entities,\n    loading,\n    error,\n    refreshData,\n    setEntities\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useEntityFilters.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1070,1073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1070,1073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filterOptions' is assigned a value but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sortOptions' is assigned a value but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":14}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo, useCallback } from 'react';\n\n/**\n * Hook per la gestione di filtri, ricerca e ordinamento delle entità\n * Centralizza tutta la logica di filtraggio e ordinamento\n */\nexport interface FilterOption {\n  key: string;\n  label: string;\n  options: Array<{ label: string; value: string }>;\n}\n\nexport interface SortOption {\n  key: string;\n  label: string;\n}\n\nexport interface ActiveSort {\n  field: string;\n  direction: 'asc' | 'desc';\n}\n\nexport interface UseEntityFiltersProps<T> {\n  entities: T[];\n  searchFields: (keyof T)[];\n  filterOptions?: FilterOption[];\n  sortOptions?: SortOption[];\n}\n\nexport interface UseEntityFiltersReturn<T> {\n  filteredEntities: T[];\n  searchQuery: string;\n  setSearchQuery: (query: string) => void;\n  activeFilters: Record<string, string>;\n  setActiveFilters: (filters: Record<string, string>) => void;\n  activeSort: ActiveSort | undefined;\n  setActiveSort: (sort: ActiveSort | undefined) => void;\n  clearAllFilters: () => void;\n  hasActiveFilters: boolean;\n}\n\nexport const useEntityFilters = <T extends Record<string, any>>({\n  entities,\n  searchFields,\n  filterOptions = [],\n  sortOptions = []\n}: UseEntityFiltersProps<T>): UseEntityFiltersReturn<T> => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeFilters, setActiveFilters] = useState<Record<string, string>>({});\n  const [activeSort, setActiveSort] = useState<ActiveSort | undefined>(undefined);\n\n  // Verifica se ci sono filtri attivi\n  const hasActiveFilters = useMemo(() => {\n    return searchQuery.trim() !== '' || \n           Object.values(activeFilters).some(value => value !== '') ||\n           activeSort !== undefined;\n  }, [searchQuery, activeFilters, activeSort]);\n\n  // Applica filtri\n  const applyFilters = useCallback((data: T[]): T[] => {\n    let filtered = data;\n    \n    // Applica filtri attivi\n    Object.entries(activeFilters).forEach(([key, value]) => {\n      if (value) {\n        filtered = filtered.filter(entity => {\n          const entityValue = entity[key];\n          return entityValue === value || String(entityValue).toLowerCase().includes(value.toLowerCase());\n        });\n      }\n    });\n    \n    return filtered;\n  }, [activeFilters]);\n\n  // Applica ricerca\n  const applySearch = useCallback((data: T[]): T[] => {\n    if (!searchQuery) return data;\n    \n    const searchLower = searchQuery.toLowerCase();\n    return data.filter(entity => {\n      return searchFields.some(field => {\n        const value = entity[field];\n        return value && String(value).toLowerCase().includes(searchLower);\n      });\n    });\n  }, [searchQuery, searchFields]);\n\n  // Applica ordinamento\n  const applySort = useCallback((data: T[]): T[] => {\n    if (!activeSort) return data;\n    \n    return [...data].sort((a, b) => {\n      const valueA = a[activeSort.field];\n      const valueB = b[activeSort.field];\n      \n      if (valueA == null && valueB == null) return 0;\n      if (valueA == null) return activeSort.direction === 'asc' ? -1 : 1;\n      if (valueB == null) return activeSort.direction === 'asc' ? 1 : -1;\n      \n      const compareValueA = typeof valueA === 'string' ? valueA.toLowerCase() : valueA;\n      const compareValueB = typeof valueB === 'string' ? valueB.toLowerCase() : valueB;\n      \n      if (compareValueA < compareValueB) return activeSort.direction === 'asc' ? -1 : 1;\n      if (compareValueA > compareValueB) return activeSort.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [activeSort]);\n\n  // Calcola entità filtrate\n  const filteredEntities = useMemo(() => {\n    let result = entities;\n    \n    // Applica filtri in sequenza\n    result = applyFilters(result);\n    result = applySearch(result);\n    result = applySort(result);\n    \n    return result;\n  }, [entities, applyFilters, applySearch, applySort]);\n\n  // Pulisce tutti i filtri\n  const clearAllFilters = useCallback(() => {\n    setSearchQuery('');\n    setActiveFilters({});\n    setActiveSort(undefined);\n  }, []);\n\n  return {\n    filteredEntities,\n    searchQuery,\n    setSearchQuery,\n    activeFilters,\n    setActiveFilters,\n    activeSort,\n    setActiveSort,\n    clearAllFilters,\n    hasActiveFilters\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useEntityOperations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityNameSingular' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2427,2430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2427,2430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3752,3755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3752,3755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { apiDelete } from '../../../services/api';\nimport { useToast } from '../../../hooks/useToast';\n\n/**\n * Hook per la gestione delle operazioni CRUD sulle entità\n * Centralizza le operazioni di eliminazione, creazione e modifica\n */\nexport interface UseEntityOperationsProps {\n  entityNameSingular: string;\n  entityDisplayNameSingular: string;\n  entityDisplayNamePlural: string;\n  apiEndpoint: string;\n  onDeleteEntity?: (id: string) => Promise<void>;\n  refreshData: () => Promise<void>;\n}\n\nexport interface UseEntityOperationsReturn {\n  handleDelete: (id: string) => Promise<void>;\n  handleDeleteSelected: (selectedIds: string[]) => Promise<void>;\n  confirmDelete: (id: string, entityName?: string) => Promise<boolean>;\n  confirmDeleteMultiple: (count: number) => Promise<boolean>;\n}\n\nexport const useEntityOperations = ({\n  entityNameSingular,\n  entityDisplayNameSingular,\n  entityDisplayNamePlural,\n  apiEndpoint,\n  onDeleteEntity,\n  refreshData\n}: UseEntityOperationsProps): UseEntityOperationsReturn => {\n  const { showToast } = useToast();\n\n  // Conferma eliminazione singola\n  const confirmDelete = useCallback(async (id: string, entityName?: string): Promise<boolean> => {\n    const displayName = entityName || `${entityDisplayNameSingular} con ID ${id}`;\n    return window.confirm(`Sei sicuro di voler eliminare ${displayName}?`);\n  }, [entityDisplayNameSingular]);\n\n  // Conferma eliminazione multipla\n  const confirmDeleteMultiple = useCallback(async (count: number): Promise<boolean> => {\n    return window.confirm(`Sei sicuro di voler eliminare ${count} ${entityDisplayNamePlural.toLowerCase()}?`);\n  }, [entityDisplayNamePlural]);\n\n  // Eliminazione singola\n  const handleDelete = useCallback(async (id: string): Promise<void> => {\n    try {\n      console.log(`🗑️ Eliminazione ${entityDisplayNameSingular} con ID:`, id);\n      \n      // Conferma eliminazione\n      const confirmed = await confirmDelete(id);\n      if (!confirmed) return;\n\n      // Usa il callback personalizzato se fornito\n      if (onDeleteEntity) {\n        await onDeleteEntity(id);\n      } else {\n        // Altrimenti usa l'API standard\n        await apiDelete(`${apiEndpoint}/${id}`);\n      }\n\n      showToast({\n        message: `${entityDisplayNameSingular} eliminato con successo`,\n        type: 'success'\n      });\n\n      // Ricarica i dati\n      await refreshData();\n      \n    } catch (error: any) {\n      console.error(`❌ Errore eliminazione ${entityDisplayNameSingular}:`, error);\n      showToast({\n        message: `Errore durante l'eliminazione: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`,\n        type: 'error'\n      });\n    }\n  }, [\n    entityDisplayNameSingular, \n    confirmDelete, \n    onDeleteEntity, \n    apiEndpoint, \n    showToast, \n    refreshData\n  ]);\n\n  // Eliminazione multipla\n  const handleDeleteSelected = useCallback(async (selectedIds: string[]): Promise<void> => {\n    if (selectedIds.length === 0) return;\n\n    try {\n      console.log(`🗑️ Eliminazione multipla ${entityDisplayNamePlural}:`, selectedIds);\n      \n      // Conferma eliminazione\n      const confirmed = await confirmDeleteMultiple(selectedIds.length);\n      if (!confirmed) return;\n\n      // Elimina in batch\n      const deletePromises = selectedIds.map(async (id) => {\n        if (onDeleteEntity) {\n          await onDeleteEntity(id);\n        } else {\n          await apiDelete(`${apiEndpoint}/${id}`);\n        }\n      });\n\n      await Promise.all(deletePromises);\n\n      showToast({\n        message: `${selectedIds.length} ${entityDisplayNamePlural.toLowerCase()} eliminati con successo`,\n        type: 'success'\n      });\n\n      // Ricarica i dati\n      await refreshData();\n      \n    } catch (error: any) {\n      console.error(`❌ Errore eliminazione multipla ${entityDisplayNamePlural}:`, error);\n      showToast({\n        message: `Errore durante l'eliminazione multipla: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`,\n        type: 'error'\n      });\n    }\n  }, [\n    entityDisplayNamePlural, \n    confirmDeleteMultiple, \n    onDeleteEntity, \n    apiEndpoint, \n    showToast, \n    refreshData\n  ]);\n\n  return {\n    handleDelete,\n    handleDeleteSelected,\n    confirmDelete,\n    confirmDeleteMultiple\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useEntityPermissions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { useAuth } from '../../../context/AuthContext';\nimport { usePermissions } from '../../../hooks/auth/usePermissions';\n\n/**\n * Hook per la gestione dei permessi delle entità GDPR\n * Centralizza tutta la logica di verifica permessi con supporto per formati multipli\n */\nexport interface EntityPermissions {\n  canCreate: boolean;\n  canUpdate: boolean;\n  canDelete: boolean;\n  canExport: boolean;\n  canRead: boolean;\n}\n\nexport interface UseEntityPermissionsProps {\n  entityName: string;\n  entityNamePlural: string;\n  readPermission: string;\n  writePermission: string;\n  deletePermission: string;\n  exportPermission?: string;\n}\n\nexport const useEntityPermissions = ({\n  entityName,\n  entityNamePlural,\n  readPermission,\n  writePermission,\n  deletePermission,\n  exportPermission\n}: UseEntityPermissionsProps): EntityPermissions => {\n  const { hasPermission, user } = useAuth();\n  const { canCreate: canCreateHook, canUpdate: canUpdateHook, canDelete: canDeleteHook } = usePermissions();\n\n  // Helper function per dividere i permessi in resource e action\n  const checkPermission = useCallback((permission: string): boolean => {\n    if (!permission) return false;\n    \n    // Se il permesso contiene \":\", dividilo in resource e action\n    if (permission.includes(':')) {\n      const [resource, action] = permission.split(':');\n      return hasPermission(resource, action);\n    }\n    \n    // Altrimenti usa il permesso come resource con action vuota\n    return hasPermission(permission, '');\n  }, [hasPermission]);\n\n  // Helper per verificare se l'utente è admin\n  const isAdmin = useCallback((): boolean => {\n    return user?.role === 'Admin' || user?.role === 'Administrator';\n  }, [user?.role]);\n\n  // Verifica permessi di lettura\n  const canRead = useCallback((): boolean => {\n    if (isAdmin()) return true;\n    return checkPermission(readPermission) || \n           hasPermission(entityName, 'read') || \n           hasPermission(entityNamePlural, 'read');\n  }, [isAdmin, checkPermission, readPermission, hasPermission, entityName, entityNamePlural]);\n\n  // Verifica permessi di creazione\n  const canCreate = useCallback((): boolean => {\n    if (isAdmin()) return true;\n    \n    return canCreateHook(entityName) || \n           canCreateHook(entityNamePlural) ||\n           checkPermission(writePermission) ||\n           hasPermission(entityName, 'create') ||\n           hasPermission(entityNamePlural, 'create');\n  }, [isAdmin, canCreateHook, entityName, entityNamePlural, checkPermission, writePermission, hasPermission]);\n\n  // Verifica permessi di modifica\n  const canUpdate = useCallback((): boolean => {\n    if (isAdmin()) return true;\n    \n    return canUpdateHook(entityName) || \n           canUpdateHook(entityNamePlural) ||\n           checkPermission(writePermission) ||\n           hasPermission(entityName, 'update') ||\n           hasPermission(entityNamePlural, 'update') ||\n           hasPermission(entityName, 'write') ||\n           hasPermission(entityNamePlural, 'write');\n  }, [isAdmin, canUpdateHook, entityName, entityNamePlural, checkPermission, writePermission, hasPermission]);\n\n  // Verifica permessi di eliminazione\n  const canDelete = useCallback((): boolean => {\n    if (isAdmin()) return true;\n    \n    return canDeleteHook(entityName) || \n           canDeleteHook(entityNamePlural) ||\n           checkPermission(deletePermission) ||\n           hasPermission(entityName, 'delete') ||\n           hasPermission(entityNamePlural, 'delete');\n  }, [isAdmin, canDeleteHook, entityName, entityNamePlural, checkPermission, deletePermission, hasPermission]);\n\n  // Verifica permessi di export\n  const canExport = useCallback((): boolean => {\n    if (isAdmin()) return true;\n    \n    return hasPermission('export', entityName) || \n           hasPermission('export', entityNamePlural) ||\n           hasPermission(entityName, 'export') ||\n           hasPermission(entityNamePlural, 'export') ||\n           (exportPermission ? checkPermission(exportPermission) : true);\n  }, [isAdmin, hasPermission, entityName, entityNamePlural, exportPermission, checkPermission]);\n\n  return {\n    canRead: canRead(),\n    canCreate: canCreate(),\n    canUpdate: canUpdate(),\n    canDelete: canDelete(),\n    canExport: canExport()\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useEntitySelection.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[712,715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[712,715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\n\n/**\n * Hook per la gestione della selezione multipla delle entità\n * Centralizza la logica di selezione, modalità batch e operazioni multiple\n */\nexport interface UseEntitySelectionProps<T> {\n  entities: T[];\n  entityNamePlural: string;\n}\n\nexport interface UseEntitySelectionReturn {\n  selectedIds: string[];\n  selectAll: boolean;\n  selectionMode: boolean;\n  setSelectionMode: (mode: boolean) => void;\n  handleSelect: (id: string) => void;\n  handleSelectAll: () => void;\n  clearSelection: () => void;\n  isSelected: (id: string) => boolean;\n  selectedCount: number;\n  hasSelection: boolean;\n}\n\nexport const useEntitySelection = <T extends Record<string, any>>({\n  entities,\n  entityNamePlural\n}: UseEntitySelectionProps<T>): UseEntitySelectionReturn => {\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [selectAll, setSelectAll] = useState(false);\n  const [selectionMode, setSelectionMode] = useState(false);\n\n  // Gestione selezione singola\n  const handleSelect = useCallback((id: string) => {\n    setSelectedIds(prev => \n      prev.includes(id) ? prev.filter(sid => sid !== id) : [...prev, id]\n    );\n  }, []);\n\n  // Gestione selezione tutti\n  const handleSelectAll = useCallback(() => {\n    // Validazione di sicurezza per assicurarsi che entities sia un array\n    if (!Array.isArray(entities)) {\n      console.error('useEntitySelection: entities deve essere un array, ricevuto:', typeof entities, entities);\n      return;\n    }\n    \n    if (selectAll) {\n      setSelectedIds([]);\n      setSelectAll(false);\n    } else {\n      setSelectedIds(entities.map(e => e.id));\n      setSelectAll(true);\n    }\n  }, [selectAll, entities]);\n\n  // Pulisce la selezione\n  const clearSelection = useCallback(() => {\n    setSelectedIds([]);\n    setSelectAll(false);\n    setSelectionMode(false);\n  }, []);\n\n  // Verifica se un elemento è selezionato\n  const isSelected = useCallback((id: string): boolean => {\n    return selectedIds.includes(id);\n  }, [selectedIds]);\n\n  // Aggiorna selectAll quando cambiano le selezioni\n  useEffect(() => {\n    // Validazione di sicurezza per assicurarsi che entities sia un array\n    if (!Array.isArray(entities)) {\n      console.error('useEntitySelection: entities deve essere un array nel useEffect, ricevuto:', typeof entities, entities);\n      setSelectAll(false);\n      return;\n    }\n    \n    if (entities.length === 0) {\n      setSelectAll(false);\n      return;\n    }\n    \n    const allSelected = entities.every(entity => selectedIds.includes(entity.id));\n    setSelectAll(allSelected);\n  }, [selectedIds, entities]);\n\n  // Pulisce la selezione quando si esce dalla modalità selezione\n  useEffect(() => {\n    if (!selectionMode) {\n      setSelectedIds([]);\n      setSelectAll(false);\n    }\n  }, [selectionMode]);\n\n  // Salva le preferenze di selezione nel localStorage\n  useEffect(() => {\n    if (selectedIds.length > 0) {\n      localStorage.setItem(`${entityNamePlural}-selected-ids`, JSON.stringify(selectedIds));\n    } else {\n      localStorage.removeItem(`${entityNamePlural}-selected-ids`);\n    }\n  }, [selectedIds, entityNamePlural]);\n\n  return {\n    selectedIds,\n    selectAll,\n    selectionMode,\n    setSelectionMode,\n    handleSelect,\n    handleSelectAll,\n    clearSelection,\n    isSelected,\n    selectedCount: selectedIds.length,\n    hasSelection: selectedIds.length > 0\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useEntityState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useGDPRAudit.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3659,3662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3659,3662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3678,3681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3678,3681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4006,4009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4006,4009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4015,4018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4015,4018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7228,7231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7228,7231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":282,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7247,7250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7247,7250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7377,7380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7377,7380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":337,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8811,8814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8811,8814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":389,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10106,10109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10106,10109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":464,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":464,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12169,12172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12169,12172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":468,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":468,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12289,12292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12289,12292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":469,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":469,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12346,12349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12346,12349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":510,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13517,13520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13517,13520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useGDPRAudit Hook - Hook per gestione audit GDPR\n * \n * Hook che gestisce il logging delle azioni e l'audit trail\n * per la conformità GDPR.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  GDPRAuditConfig,\n  GDPRAuditAction,\n  GDPRAuditLogEntry,\n  GDPRAuditLevel,\n  GDPRAwareOperation,\n  GDPROperationResult\n} from '../types/gdpr.types';\nimport { apiService } from '../../../services/api';\n\n/**\n * Configurazione hook audit\n */\nexport interface UseGDPRAuditConfig {\n  /** Configurazione audit GDPR */\n  config?: GDPRAuditConfig;\n  \n  /** Tipo di entità */\n  entityType: string;\n  \n  /** ID della persona (utente corrente) */\n  personId?: string;\n  \n  /** Livello di audit override */\n  auditLevel?: GDPRAuditLevel;\n  \n  /** Abilita audit automatico */\n  autoAudit?: boolean;\n  \n  /** Buffer size per batch logging */\n  bufferSize?: number;\n  \n  /** Intervallo flush buffer (ms) */\n  flushInterval?: number;\n}\n\n/**\n * Stato audit\n */\ninterface AuditState {\n  auditLog: GDPRAuditLogEntry[];\n  loading: boolean;\n  error: string | null;\n  lastSync: Date | null;\n  pendingEntries: GDPRAuditLogEntry[];\n  stats: {\n    totalEntries: number;\n    successfulOperations: number;\n    failedOperations: number;\n    lastWeekEntries: number;\n  };\n}\n\n/**\n * Metadati browser per audit\n */\ninterface BrowserMetadata {\n  userAgent: string;\n  ipAddress?: string;\n  sessionId?: string;\n  timestamp: Date;\n  timezone: string;\n  language: string;\n  screen: {\n    width: number;\n    height: number;\n    colorDepth: number;\n  };\n}\n\n/**\n * Hook per gestione audit GDPR\n */\nexport function useGDPRAudit({\n  config,\n  entityType,\n  personId = 'current-user', // Da implementare con context utente reale\n  auditLevel,\n  autoAudit = true,\n  bufferSize = 10,\n  flushInterval = 30000 // 30 secondi\n}: UseGDPRAuditConfig) {\n  \n  const [state, setState] = useState<AuditState>({\n    auditLog: [],\n    loading: false,\n    error: null,\n    lastSync: null,\n    pendingEntries: [],\n    stats: {\n      totalEntries: 0,\n      successfulOperations: 0,\n      failedOperations: 0,\n      lastWeekEntries: 0\n    }\n  });\n  \n  const bufferRef = useRef<GDPRAuditLogEntry[]>([]);\n  const flushTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const sessionIdRef = useRef<string>(generateSessionId());\n  \n  // Genera session ID univoco\n  function generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  // Ottieni metadati browser\n  const getBrowserMetadata = useCallback((): BrowserMetadata => {\n    return {\n      userAgent: navigator.userAgent,\n      sessionId: sessionIdRef.current,\n      timestamp: new Date(),\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      language: navigator.language,\n      screen: {\n        width: screen.width,\n        height: screen.height,\n        colorDepth: screen.colorDepth\n      }\n    };\n  }, []);\n  \n  // Determina se un'azione deve essere loggata\n  const shouldLogAction = useCallback((action: GDPRAuditAction): boolean => {\n    if (!config || !autoAudit) return false;\n    \n    const level = auditLevel || 'standard';\n    \n    switch (level) {\n      case 'minimal':\n        return config.minimalActions.includes(action);\n      case 'standard':\n        return config.standardActions.includes(action);\n      case 'comprehensive':\n        return config.comprehensiveActions.includes(action);\n      default:\n        return false;\n    }\n  }, [config, auditLevel, autoAudit]);\n  \n  // Crea entry di audit\n  const createAuditEntry = useCallback((\n    action: GDPRAuditAction,\n    entityId?: string,\n    data?: any,\n    oldData?: any,\n    success: boolean = true,\n    errorMessage?: string,\n    reason?: string\n  ): GDPRAuditLogEntry => {\n    const metadata = getBrowserMetadata();\n    const id = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Calcola changes se disponibili oldData e newData\n    let changes: Record<string, { from: any; to: any }> | undefined;\n    if (oldData && data && typeof data === 'object' && typeof oldData === 'object') {\n      changes = {};\n      Object.keys({ ...oldData, ...data }).forEach(key => {\n        if (oldData[key] !== data[key]) {\n          changes![key] = {\n            from: oldData[key],\n            to: data[key]\n          };\n        }\n      });\n    }\n    \n    const entry: GDPRAuditLogEntry = {\n      id,\n      personId,\n      action,\n      entityType,\n      entityId,\n      timestamp: metadata.timestamp,\n      success,\n      oldData,\n      newData: data,\n      changes,\n      reason,\n      errorMessage,\n      metadata: {\n        sessionId: metadata.sessionId,\n        timezone: metadata.timezone,\n        language: metadata.language,\n        screen: metadata.screen\n      }\n    };\n    \n    // Aggiungi metadati opzionali se configurati\n    if (config?.includeUserAgent) {\n      entry.userAgent = metadata.userAgent;\n    }\n    \n    if (config?.includeIpAddress) {\n      // L'IP address dovrebbe essere aggiunto dal backend\n      entry.ipAddress = 'to-be-set-by-backend';\n    }\n    \n    if (config?.includeSessionId) {\n      entry.sessionId = metadata.sessionId;\n    }\n    \n    return entry;\n  }, [config, entityType, personId, getBrowserMetadata]);\n  \n  // Flush buffer al server\n  const flushBuffer = useCallback(async () => {\n    if (bufferRef.current.length === 0) return;\n    \n    const entriesToSend = [...bufferRef.current];\n    bufferRef.current = [];\n    \n    try {\n      await apiService.post('/api/gdpr/audit/batch', {\n        entries: entriesToSend\n      });\n      \n      setState(prev => ({\n        ...prev,\n        lastSync: new Date(),\n        stats: {\n          ...prev.stats,\n          totalEntries: prev.stats.totalEntries + entriesToSend.length,\n          successfulOperations: prev.stats.successfulOperations + entriesToSend.filter(e => e.success).length,\n          failedOperations: prev.stats.failedOperations + entriesToSend.filter(e => !e.success).length\n        }\n      }));\n      \n    } catch (error) {\n      console.error('Errore nel flush audit buffer:', error);\n      \n      // Rimetti le entries nel buffer\n      bufferRef.current = [...entriesToSend, ...bufferRef.current];\n      \n      setState(prev => ({\n        ...prev,\n        error: 'Errore nella sincronizzazione audit log'\n      }));\n    }\n  }, []);\n  \n  // Aggiungi entry al buffer\n  const addToBuffer = useCallback((entry: GDPRAuditLogEntry) => {\n    bufferRef.current.push(entry);\n    \n    // Aggiungi anche al log locale\n    setState(prev => ({\n      ...prev,\n      auditLog: [entry, ...prev.auditLog].slice(0, 100), // Mantieni solo le ultime 100 entries localmente\n      pendingEntries: [...prev.pendingEntries, entry]\n    }));\n    \n    // Flush se buffer è pieno\n    if (bufferRef.current.length >= bufferSize) {\n      flushBuffer();\n    }\n    \n    // Reset timeout flush\n    if (flushTimeoutRef.current) {\n      clearTimeout(flushTimeoutRef.current);\n    }\n    \n    flushTimeoutRef.current = setTimeout(flushBuffer, flushInterval);\n  }, [bufferSize, flushInterval, flushBuffer]);\n  \n  // Log azione principale\n  const logAction = useCallback(async (\n    action: GDPRAuditAction,\n    entityId?: string,\n    data?: any,\n    oldData?: any,\n    options?: {\n      reason?: string;\n      success?: boolean;\n      errorMessage?: string;\n      metadata?: Record<string, any>;\n      immediate?: boolean;\n    }\n  ) => {\n    if (!shouldLogAction(action)) return;\n    \n    const entry = createAuditEntry(\n      action,\n      entityId,\n      data,\n      oldData,\n      options?.success ?? true,\n      options?.errorMessage,\n      options?.reason\n    );\n    \n    // Aggiungi metadati personalizzati\n    if (options?.metadata) {\n      entry.metadata = { ...entry.metadata, ...options.metadata };\n    }\n    \n    if (options?.immediate) {\n      // Invio immediato\n      try {\n        await apiService.post('/api/gdpr/audit', entry);\n        \n        setState(prev => ({\n          ...prev,\n          auditLog: [entry, ...prev.auditLog].slice(0, 100),\n          lastSync: new Date(),\n          stats: {\n            ...prev.stats,\n            totalEntries: prev.stats.totalEntries + 1,\n            successfulOperations: entry.success ? prev.stats.successfulOperations + 1 : prev.stats.successfulOperations,\n            failedOperations: !entry.success ? prev.stats.failedOperations + 1 : prev.stats.failedOperations\n          }\n        }));\n        \n      } catch (error) {\n        console.error('Errore nel logging immediato:', error);\n        // Fallback al buffer\n        addToBuffer(entry);\n      }\n    } else {\n      // Aggiungi al buffer\n      addToBuffer(entry);\n    }\n  }, [shouldLogAction, createAuditEntry, addToBuffer]);\n  \n  // Log operazione GDPR-aware\n  const logGDPROperation = useCallback(async <T = any>(\n    operation: GDPRAwareOperation<T>\n  ): Promise<GDPROperationResult<T>> => {\n    const startTime = Date.now();\n    \n    try {\n      // Log inizio operazione\n      await logAction(\n        operation.operation,\n        operation.entityId,\n        operation.data,\n        undefined,\n        {\n          reason: operation.reason,\n          metadata: {\n            ...operation.metadata,\n            riskLevel: operation.riskLevel,\n            startTime\n          }\n        }\n      );\n      \n      // Qui andrebbe eseguita l'operazione reale\n      // Per ora simuliamo il successo\n      const result: GDPROperationResult<T> = {\n        success: true,\n        data: operation.data,\n        auditLogId: `audit-${Date.now()}`,\n        metadata: {\n          duration: Date.now() - startTime,\n          timestamp: new Date().toISOString()\n        }\n      };\n      \n      // Log completamento operazione\n      await logAction(\n        operation.operation,\n        operation.entityId,\n        result.data,\n        operation.data,\n        {\n          success: true,\n          metadata: {\n            ...operation.metadata,\n            duration: result.metadata?.duration,\n            auditLogId: result.auditLogId\n          }\n        }\n      );\n      \n      return result;\n      \n    } catch (error: any) {\n      // Log errore operazione\n      await logAction(\n        operation.operation,\n        operation.entityId,\n        operation.data,\n        undefined,\n        {\n          success: false,\n          errorMessage: error.message,\n          metadata: {\n            ...operation.metadata,\n            duration: Date.now() - startTime,\n            stackTrace: config?.includeStackTrace ? error.stack : undefined\n          }\n        }\n      );\n      \n      return {\n        success: false,\n        errors: [error.message],\n        metadata: {\n          duration: Date.now() - startTime,\n          timestamp: new Date().toISOString()\n        }\n      };\n    }\n  }, [logAction, config]);\n  \n  // Carica storico audit\n  const loadAuditHistory = useCallback(async (\n    filters?: {\n      startDate?: Date;\n      endDate?: Date;\n      actions?: GDPRAuditAction[];\n      entityId?: string;\n      success?: boolean;\n      limit?: number;\n      offset?: number;\n    }\n  ) => {\n    setState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      const params = new URLSearchParams();\n      \n      if (filters?.startDate) {\n        params.append('startDate', filters.startDate.toISOString());\n      }\n      \n      if (filters?.endDate) {\n        params.append('endDate', filters.endDate.toISOString());\n      }\n      \n      if (filters?.actions) {\n        filters.actions.forEach(action => params.append('actions', action));\n      }\n      \n      if (filters?.entityId) {\n        params.append('entityId', filters.entityId);\n      }\n      \n      if (filters?.success !== undefined) {\n        params.append('success', filters.success.toString());\n      }\n      \n      params.append('entityType', entityType);\n      params.append('personId', personId);\n      params.append('limit', (filters?.limit || 50).toString());\n      params.append('offset', (filters?.offset || 0).toString());\n      \n      const response = await apiService.get(`/api/gdpr/audit?${params.toString()}`);\n      \n      setState(prev => ({\n        ...prev,\n        auditLog: (response as any).data || [],\n        loading: false,\n        stats: {\n          ...prev.stats,\n          totalEntries: (response as any).total || 0,\n          lastWeekEntries: (response as any).lastWeekCount || 0\n        }\n      }));\n      \n    } catch (error) {\n      console.error('Errore nel caricamento audit history:', error);\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: 'Errore nel caricamento dello storico audit'\n      }));\n    }\n  }, [entityType, personId]);\n  \n  // Export audit log\n  const exportAuditLog = useCallback(async (\n    format: 'json' | 'csv' | 'xlsx' = 'json',\n    filters?: Parameters<typeof loadAuditHistory>[0]\n  ): Promise<Blob> => {\n    const params = new URLSearchParams();\n    params.append('format', format);\n    params.append('entityType', entityType);\n    params.append('personId', personId);\n    \n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) {\n          if (Array.isArray(value)) {\n            value.forEach(v => params.append(key, v.toString()));\n          } else {\n            params.append(key, value.toString());\n          }\n        }\n      });\n    }\n    \n    const response = await apiService.get(\n      `/api/gdpr/audit/export?${params.toString()}`,\n      { responseType: 'blob' }\n    );\n    \n    return (response as any).data;\n  }, [entityType, personId]);\n  \n  // Cleanup e flush finale\n  useEffect(() => {\n    return () => {\n      if (flushTimeoutRef.current) {\n        clearTimeout(flushTimeoutRef.current);\n      }\n      \n      // Flush finale\n      if (bufferRef.current.length > 0) {\n        flushBuffer();\n      }\n    };\n  }, [flushBuffer]);\n  \n  // Carica statistiche iniziali\n  useEffect(() => {\n    if (autoAudit) {\n      loadAuditHistory({ limit: 10 });\n    }\n  }, [autoAudit, loadAuditHistory]);\n  \n  return {\n    // Stato\n    auditLog: state.auditLog,\n    loading: state.loading,\n    error: state.error,\n    lastSync: state.lastSync,\n    pendingEntries: state.pendingEntries,\n    stats: state.stats,\n    \n    // Azioni\n    logAction,\n    logGDPROperation,\n    loadAuditHistory,\n    exportAuditLog,\n    flushBuffer,\n    \n    // Utility\n    getAuditHistory: () => state.auditLog,\n    getPendingCount: () => bufferRef.current.length,\n    clearError: () => setState(prev => ({ ...prev, error: null })),\n    \n    // Configurazione\n    isAuditEnabled: autoAudit && !!config,\n    currentAuditLevel: auditLevel || 'standard',\n    sessionId: sessionIdRef.current\n  };\n}\n\nexport default useGDPRAudit;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useGDPRColumns.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[313,316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[313,316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[323,326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[323,326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\n\nexport interface ColumnConfig {\n  key: string;\n  label: string;\n  sortable?: boolean;\n  filterable?: boolean;\n  width?: number;\n  minWidth?: number;\n  maxWidth?: number;\n  resizable?: boolean;\n  visible?: boolean;\n  order?: number;\n  formatter?: (value: any, row: any) => React.ReactNode;\n  className?: string;\n}\n\nexport interface ColumnState {\n  visible: boolean;\n  width?: number;\n  order: number;\n}\n\nexport interface UseGDPRColumnsConfig {\n  columns: ColumnConfig[];\n  storageKey?: string;\n  defaultVisibleColumns?: string[];\n  enableReordering?: boolean;\n  enableResizing?: boolean;\n}\n\n/**\n * Hook per gestire la configurazione, visibilità e ordinamento delle colonne\n * Salva le preferenze utente nel localStorage\n */\nexport function useGDPRColumns({\n  columns,\n  storageKey = 'gdpr-columns-config',\n  defaultVisibleColumns,\n  enableReordering = true,\n  enableResizing = true\n}: UseGDPRColumnsConfig) {\n  \n  // Stato delle colonne con configurazione salvata\n  const [columnStates, setColumnStates] = useState<Record<string, ColumnState>>(() => {\n    try {\n      const saved = localStorage.getItem(storageKey);\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        // Verifica che le colonne salvate siano ancora valide\n        const validColumns = columns.reduce((acc, col) => {\n          acc[col.key] = {\n            visible: parsed[col.key]?.visible ?? col.visible ?? true,\n            width: parsed[col.key]?.width ?? col.width,\n            order: parsed[col.key]?.order ?? col.order ?? 0\n          };\n          return acc;\n        }, {} as Record<string, ColumnState>);\n        return validColumns;\n      }\n    } catch (error) {\n      console.warn('Errore nel caricamento configurazione colonne:', error);\n    }\n    \n    // Configurazione di default\n    return columns.reduce((acc, col, index) => {\n      const isVisible = defaultVisibleColumns \n        ? defaultVisibleColumns.includes(col.key)\n        : col.visible ?? true;\n      \n      acc[col.key] = {\n        visible: isVisible,\n        width: col.width,\n        order: col.order ?? index\n      };\n      return acc;\n    }, {} as Record<string, ColumnState>);\n  });\n\n  // Salva la configurazione nel localStorage\n  const saveConfiguration = useCallback(() => {\n    try {\n      localStorage.setItem(storageKey, JSON.stringify(columnStates));\n    } catch (error) {\n      console.warn('Errore nel salvataggio configurazione colonne:', error);\n    }\n  }, [storageKey, columnStates]);\n\n  // Effetto per salvare automaticamente le modifiche\n  useEffect(() => {\n    saveConfiguration();\n  }, [saveConfiguration]);\n\n  // Mostra/nasconde una colonna\n  const toggleColumnVisibility = useCallback((columnKey: string) => {\n    setColumnStates(prev => ({\n      ...prev,\n      [columnKey]: {\n        ...prev[columnKey],\n        visible: !prev[columnKey]?.visible\n      }\n    }));\n  }, []);\n\n  // Imposta la visibilità di una colonna\n  const setColumnVisibility = useCallback((columnKey: string, visible: boolean) => {\n    setColumnStates(prev => ({\n      ...prev,\n      [columnKey]: {\n        ...prev[columnKey],\n        visible\n      }\n    }));\n  }, []);\n\n  // Ridimensiona una colonna\n  const resizeColumn = useCallback((columnKey: string, width: number) => {\n    if (!enableResizing) return;\n    \n    setColumnStates(prev => ({\n      ...prev,\n      [columnKey]: {\n        ...prev[columnKey],\n        width: Math.max(50, width) // Larghezza minima 50px\n      }\n    }));\n  }, [enableResizing]);\n\n  // Riordina le colonne\n  const reorderColumns = useCallback((newOrder: string[]) => {\n    if (!enableReordering) return;\n    \n    setColumnStates(prev => {\n      const updated = { ...prev };\n      newOrder.forEach((columnKey, index) => {\n        if (updated[columnKey]) {\n          updated[columnKey] = {\n            ...updated[columnKey],\n            order: index\n          };\n        }\n      });\n      return updated;\n    });\n  }, [enableReordering]);\n\n  // Resetta la configurazione ai valori di default\n  const resetConfiguration = useCallback(() => {\n    const defaultStates = columns.reduce((acc, col, index) => {\n      const isVisible = defaultVisibleColumns \n        ? defaultVisibleColumns.includes(col.key)\n        : col.visible ?? true;\n      \n      acc[col.key] = {\n        visible: isVisible,\n        width: col.width,\n        order: col.order ?? index\n      };\n      return acc;\n    }, {} as Record<string, ColumnState>);\n    \n    setColumnStates(defaultStates);\n  }, [columns, defaultVisibleColumns]);\n\n  // Mostra tutte le colonne\n  const showAllColumns = useCallback(() => {\n    setColumnStates(prev => {\n      const updated = { ...prev };\n      Object.keys(updated).forEach(key => {\n        updated[key] = { ...updated[key], visible: true };\n      });\n      return updated;\n    });\n  }, []);\n\n  // Nasconde tutte le colonne (tranne quelle obbligatorie)\n  const hideAllColumns = useCallback(() => {\n    setColumnStates(prev => {\n      const updated = { ...prev };\n      columns.forEach(col => {\n        // Non nascondere colonne obbligatorie (es. azioni, selezione)\n        if (!col.key.includes('actions') && !col.key.includes('select')) {\n          updated[col.key] = { ...updated[col.key], visible: false };\n        }\n      });\n      return updated;\n    });\n  }, [columns]);\n\n  // Calcola le colonne visibili ordinate\n  const visibleColumns = columns\n    .filter(col => columnStates[col.key]?.visible !== false)\n    .map(col => ({\n      ...col,\n      width: columnStates[col.key]?.width ?? col.width,\n      order: columnStates[col.key]?.order ?? col.order ?? 0\n    }))\n    .sort((a, b) => (a.order || 0) - (b.order || 0));\n\n  // Calcola le colonne nascoste\n  const hiddenColumns = columns.filter(col => columnStates[col.key]?.visible === false);\n\n  // Statistiche sulle colonne\n  const columnStats = {\n    total: columns.length,\n    visible: visibleColumns.length,\n    hidden: hiddenColumns.length,\n    hasCustomOrder: visibleColumns.some((col, index) => col.order !== index),\n    hasCustomWidths: visibleColumns.some(col => \n      col.width !== undefined && col.width !== columns.find(c => c.key === col.key)?.width\n    )\n  };\n\n  return {\n    // Configurazione colonne\n    columns,\n    visibleColumns,\n    hiddenColumns,\n    columnStates,\n    columnStats,\n    \n    // Azioni\n    toggleColumnVisibility,\n    setColumnVisibility,\n    resizeColumn,\n    reorderColumns,\n    resetConfiguration,\n    showAllColumns,\n    hideAllColumns,\n    saveConfiguration,\n    \n    // Configurazione\n    enableReordering,\n    enableResizing,\n    storageKey\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useGDPRConsent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2439,2442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2439,2442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2995,2998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2995,2998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5531,5534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5531,5534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7430,7433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7430,7433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":304,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":304,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":311,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":311,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useGDPRConsent Hook - Hook per gestione consensi GDPR\n * \n * Hook che gestisce i consensi GDPR dell'utente con verifica\n * automatica e gestione della scadenza.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  GDPRConsentConfig,\n  GDPRConsentType,\n  GDPRConsent,\n  GDPRConsentRequest,\n  GDPRConsentVerification\n} from '../types/gdpr.types';\nimport { apiService } from '../../../services/api';\n\n/**\n * Configurazione hook consensi\n */\nexport interface UseGDPRConsentConfig {\n  /** Configurazione consensi GDPR */\n  config?: GDPRConsentConfig;\n  \n  /** ID della persona */\n  personId: string;\n  \n  /** Abilita verifica automatica */\n  autoCheck?: boolean;\n  \n  /** Intervallo verifica automatica (ms) */\n  checkInterval?: number;\n  \n  /** Callback per consensi scaduti */\n  onConsentsExpired?: (expiredConsents: GDPRConsentType[]) => void;\n  \n  /** Callback per consensi mancanti */\n  onConsentsMissing?: (missingConsents: GDPRConsentType[]) => void;\n}\n\n/**\n * Stato consensi\n */\ninterface ConsentState {\n  consents: Record<string, boolean>;\n  consentDetails: Record<string, GDPRConsent>;\n  loading: boolean;\n  error: string | null;\n  lastCheck: Date | null;\n  verification: GDPRConsentVerification | null;\n}\n\n/**\n * Hook per gestione consensi GDPR\n */\nexport function useGDPRConsent({\n  config,\n  personId,\n  autoCheck = true,\n  checkInterval = 60000, // 1 minuto\n  onConsentsExpired,\n  onConsentsMissing\n}: UseGDPRConsentConfig) {\n  \n  const [state, setState] = useState<ConsentState>({\n    consents: {},\n    consentDetails: {},\n    loading: false,\n    error: null,\n    lastCheck: null,\n    verification: null\n  });\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  // Carica consensi dal server\n  const loadConsents = useCallback(async () => {\n    if (!personId) return;\n    \n    // Cancella richiesta precedente se in corso\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    abortControllerRef.current = new AbortController();\n    \n    setState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      const response = await apiService.get(\n        `/api/gdpr/consents/${personId}`,\n        { signal: abortControllerRef.current.signal }\n      );\n      \n      const consentList: GDPRConsent[] = (response as any).data || [];\n      \n      // Converte in formato più utilizzabile\n      const consents: Record<string, boolean> = {};\n      const consentDetails: Record<string, GDPRConsent> = {};\n      \n      consentList.forEach(consent => {\n        consents[consent.consentType] = consent.isActive && consent.granted;\n        consentDetails[consent.consentType] = consent;\n      });\n      \n      setState(prev => ({\n        ...prev,\n        consents,\n        consentDetails,\n        loading: false,\n        lastCheck: new Date()\n      }));\n      \n    } catch (error: any) {\n      if (error.name !== 'AbortError') {\n        console.error('Errore nel caricamento consensi:', error);\n        setState(prev => ({\n          ...prev,\n          loading: false,\n          error: 'Errore nel caricamento dei consensi'\n        }));\n      }\n    }\n  }, [personId]);\n  \n  // Verifica consensi\n  const checkConsent = useCallback(async (\n    requiredConsents: GDPRConsentType[]\n  ): Promise<GDPRConsentVerification> => {\n    const now = new Date();\n    \n    const hasConsent = requiredConsents.every(type => state.consents[type]);\n    const missingConsents = requiredConsents.filter(type => !state.consents[type]);\n    \n    const expiredConsents: GDPRConsentType[] = [];\n    const validConsents: GDPRConsentType[] = [];\n    const requiresReconfirmation: GDPRConsentType[] = [];\n    \n    requiredConsents.forEach(type => {\n      const consentDetail = state.consentDetails[type];\n      \n      if (consentDetail && state.consents[type]) {\n        // Verifica scadenza\n        if (consentDetail.expiresAt && new Date(consentDetail.expiresAt) < now) {\n          expiredConsents.push(type);\n        } else {\n          validConsents.push(type);\n          \n          // Verifica se richiede riconferma\n          if (config?.requiresReconfirmation && config.reconfirmationIntervalDays) {\n            const daysSinceGrant = Math.floor(\n              (now.getTime() - new Date(consentDetail.grantedAt || 0).getTime()) / (1000 * 60 * 60 * 24)\n            );\n            \n            if (daysSinceGrant >= config.reconfirmationIntervalDays) {\n              requiresReconfirmation.push(type);\n            }\n          }\n        }\n      }\n    });\n    \n    const verification: GDPRConsentVerification = {\n      hasConsent: hasConsent && expiredConsents.length === 0,\n      missingConsents,\n      expiredConsents,\n      validConsents,\n      requiresReconfirmation\n    };\n    \n    setState(prev => ({ ...prev, verification }));\n    \n    // Trigger callbacks\n    if (expiredConsents.length > 0 && onConsentsExpired) {\n      onConsentsExpired(expiredConsents);\n    }\n    \n    if (missingConsents.length > 0 && onConsentsMissing) {\n      onConsentsMissing(missingConsents);\n    }\n    \n    return verification;\n  }, [state.consents, state.consentDetails, config, onConsentsExpired, onConsentsMissing]);\n  \n  // Richiedi consenso\n  const requestConsent = useCallback(async (\n    consentTypes: GDPRConsentType[],\n    options?: {\n      purpose?: string;\n      legalBasis?: string;\n      expirationDays?: number;\n      metadata?: Record<string, any>;\n    }\n  ) => {\n    if (!personId) throw new Error('Person ID richiesto');\n    \n    setState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      const request: GDPRConsentRequest = {\n        personId,\n        consentTypes,\n        purpose: options?.purpose || 'Utilizzo del servizio',\n        legalBasis: options?.legalBasis || 'Art. 6(1)(a) GDPR - Consenso dell\\'interessato',\n        expirationDays: options?.expirationDays || config?.consentValidityDays,\n        metadata: options?.metadata\n      };\n      \n      await apiService.post('/api/gdpr/consents/grant', request);\n      \n      // Ricarica consensi\n      await loadConsents();\n      \n    } catch (error) {\n      console.error('Errore nella richiesta consenso:', error);\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: 'Errore nella richiesta del consenso'\n      }));\n      throw error;\n    }\n  }, [personId, config, loadConsents]);\n  \n  // Revoca consenso\n  const revokeConsent = useCallback(async (\n    consentTypes: GDPRConsentType[],\n    reason?: string\n  ) => {\n    if (!personId) throw new Error('Person ID richiesto');\n    \n    setState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      await apiService.post('/api/gdpr/consents/revoke', {\n        personId,\n        consentTypes,\n        reason\n      });\n      \n      // Ricarica consensi\n      await loadConsents();\n      \n    } catch (error) {\n      console.error('Errore nella revoca consenso:', error);\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: 'Errore nella revoca del consenso'\n      }));\n      throw error;\n    }\n  }, [personId, loadConsents]);\n  \n  // Aggiorna consenso esistente\n  const updateConsent = useCallback(async (\n    consentType: GDPRConsentType,\n    granted: boolean,\n    options?: {\n      reason?: string;\n      metadata?: Record<string, any>;\n    }\n  ) => {\n    if (granted) {\n      await requestConsent([consentType], {\n        metadata: options?.metadata\n      });\n    } else {\n      await revokeConsent([consentType], options?.reason);\n    }\n  }, [requestConsent, revokeConsent]);\n  \n  // Verifica se un consenso specifico è valido\n  const isConsentValid = useCallback((consentType: GDPRConsentType): boolean => {\n    const consent = state.consentDetails[consentType];\n    \n    if (!consent || !consent.isActive || !consent.granted) {\n      return false;\n    }\n    \n    // Verifica scadenza\n    if (consent.expiresAt && new Date(consent.expiresAt) < new Date()) {\n      return false;\n    }\n    \n    return true;\n  }, [state.consentDetails]);\n  \n  // Ottieni dettagli consenso\n  const getConsentDetails = useCallback((consentType: GDPRConsentType): GDPRConsent | null => {\n    return state.consentDetails[consentType] || null;\n  }, [state.consentDetails]);\n  \n  // Ottieni consensi in scadenza\n  const getExpiringConsents = useCallback((daysThreshold = 7): GDPRConsentType[] => {\n    const threshold = new Date();\n    threshold.setDate(threshold.getDate() + daysThreshold);\n    \n    return Object.entries(state.consentDetails)\n      .filter(([_, consent]) => {\n        return consent.isActive &&\n               consent.granted &&\n               consent.expiresAt &&\n               new Date(consent.expiresAt) <= threshold &&\n               new Date(consent.expiresAt) > new Date();\n      })\n      .map(([type, _]) => type as GDPRConsentType);\n  }, [state.consentDetails]);\n  \n  // Verifica automatica periodica\n  useEffect(() => {\n    if (autoCheck && config) {\n      const performCheck = async () => {\n        const allRequiredConsents = [\n          ...config.requiredConsents,\n          ...(config.optionalConsents || [])\n        ];\n        \n        if (allRequiredConsents.length > 0) {\n          await checkConsent(config.requiredConsents);\n        }\n      };\n      \n      // Verifica immediata\n      performCheck();\n      \n      // Imposta intervallo\n      intervalRef.current = setInterval(performCheck, checkInterval);\n      \n      return () => {\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n        }\n      };\n    }\n  }, [autoCheck, config, checkInterval, checkConsent]);\n  \n  // Carica consensi all'avvio\n  useEffect(() => {\n    loadConsents();\n    \n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [loadConsents]);\n  \n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n  \n  return {\n    // Stato\n    consents: state.consents,\n    consentDetails: state.consentDetails,\n    loading: state.loading,\n    error: state.error,\n    lastCheck: state.lastCheck,\n    verification: state.verification,\n    \n    // Azioni\n    loadConsents,\n    requestConsent,\n    revokeConsent,\n    updateConsent,\n    checkConsent,\n    \n    // Utility\n    isConsentValid,\n    getConsentDetails,\n    getExpiringConsents,\n    \n    // Stato derivato\n    hasRequiredConsents: config ? config.requiredConsents.every(type => state.consents[type]) : true,\n    missingRequiredConsents: config ? config.requiredConsents.filter(type => !state.consents[type]) : [],\n    expiringConsents: getExpiringConsents(),\n    \n    // Controllo errori\n    clearError: () => setState(prev => ({ ...prev, error: null }))\n  };\n}\n\nexport default useGDPRConsent;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useGDPREntityData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1862,1865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1862,1865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2582,2585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2582,2585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEntities'. Either include it or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":62,"suggestions":[{"desc":"Update the dependencies array to be: [apiEndpoint, entityNamePlural, entityDisplayNamePlural, loadEntities]","fix":{"range":[3198,3254],"text":"[apiEndpoint, entityNamePlural, entityDisplayNamePlural, loadEntities]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { apiGet } from '../../../services/api';\nimport { getLoadingErrorMessage } from '../../../utils/errorUtils';\nimport { useToast } from '../../../hooks/useToast';\n\nexport interface GDPREntityDataConfig {\n  apiEndpoint: string;\n  entityNamePlural: string;\n  entityDisplayNamePlural: string;\n}\n\nexport interface GDPREntityDataState<T> {\n  entities: T[];\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n}\n\n/**\n * Hook per gestire il caricamento e la gestione dei dati delle entità\n * Centralizza la logica di fetch, loading e error handling\n */\nexport function useGDPREntityData<T extends Record<string, any>>({\n  apiEndpoint,\n  entityNamePlural,\n  entityDisplayNamePlural\n}: GDPREntityDataConfig): GDPREntityDataState<T> {\n  const [entities, setEntities] = useState<T[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { showToast } = useToast();\n\n  const loadEntities = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log(`🔄 Caricamento ${entityDisplayNamePlural}...`);\n      \n      // Costruisci i parametri di query per l'endpoint delle persone\n      let apiUrl = apiEndpoint;\n      if (apiEndpoint === '/api/persons' || apiEndpoint === '/api/v1/persons') {\n        // Per l'endpoint delle persone, aggiungi i parametri necessari\n        const params = new URLSearchParams();\n        // Non forzare roleType per mostrare tutti gli utenti\n        params.append('page', '1');\n        params.append('limit', '50');\n        params.append('sortBy', 'lastLogin');\n        params.append('sortOrder', 'desc');\n        \n        apiUrl = `${apiEndpoint}?${params.toString()}`;\n      }\n      \n      console.log(`📡 Chiamata API: ${apiUrl}`);\n      const response = await apiGet<any>(apiUrl);\n      console.log(`📊 Risposta API ${entityNamePlural}:`, response);\n      \n      // Gestisci la risposta paginata per l'endpoint delle persone\n      if ((apiEndpoint === '/api/persons' || apiEndpoint === '/api/v1/persons') && response && typeof response === 'object' && response.persons) {\n        setEntities(response.persons);\n        console.log(`✅ ${entityDisplayNamePlural} caricate:`, response.persons.length);\n      } else if (Array.isArray(response)) {\n        setEntities(response);\n        console.log(`✅ ${entityDisplayNamePlural} caricate:`, response.length);\n      } else {\n        console.warn(`⚠️ Risposta API non è un array:`, response);\n        setEntities([]);\n      }\n    } catch (err: any) {\n      console.error(`❌ Errore caricamento ${entityDisplayNamePlural}:`, err);\n      setError(getLoadingErrorMessage(\n        (entityNamePlural as keyof typeof import('../../../utils/errorUtils').errorMessages.loading) || 'generic', \n        err\n      ));\n      setEntities([]);\n      showToast({\n        message: `Errore durante il caricamento dei ${entityDisplayNamePlural.toLowerCase()}: ${err instanceof Error ? err.message : 'Errore sconosciuto'}`,\n        type: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Caricamento iniziale\n  useEffect(() => {\n    loadEntities();\n  }, [apiEndpoint, entityNamePlural, entityDisplayNamePlural]);\n\n  return {\n    entities,\n    loading,\n    error,\n    refetch: loadEntities\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useGDPREntityOperations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2039,2042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2039,2042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8719,8722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8719,8722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9137,9140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9137,9140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":415,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":415,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10795,10798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10795,10798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":432,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":432,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11178,11181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11178,11181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":537,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":537,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14085,14088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14085,14088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":557,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":557,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14590,14593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14590,14593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":662,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":662,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17441,17444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17441,17444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":707,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":707,"endColumn":21}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useGDPREntityOperations Hook - Hook per operazioni CRUD con supporto GDPR\n * \n * Hook che gestisce le operazioni CRUD (Create, Read, Update, Delete)\n * con controlli di consenso GDPR e audit logging.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport { useState, useCallback, useRef } from 'react';\nimport {\n  BaseEntity,\n  EntityOperationResult,\n  EntityAPIConfig,\n  EntityPermissions\n} from '../types/entity.types';\nimport {\n  GDPRConfig,\n  GDPRConsentType\n} from '../types/gdpr.types';\nimport { useGDPRConsent } from './useGDPRConsent';\nimport { useGDPRAudit } from './useGDPRAudit';\nimport { apiService } from '../../../services/api';\n\n/**\n * Configurazione hook operazioni\n */\nexport interface UseGDPREntityOperationsConfig<T extends BaseEntity> {\n  /** Configurazione API */\n  apiConfig: EntityAPIConfig;\n  \n  /** Configurazione GDPR */\n  gdprConfig?: GDPRConfig;\n  \n  /** Permessi richiesti */\n  permissions: EntityPermissions;\n  \n  /** Tipo di entità */\n  entityType: string;\n  \n  /** Validatore personalizzato */\n  validator?: (entity: Partial<T>) => Promise<string[]>;\n  \n  /** Trasformatore dati pre-salvataggio */\n  dataTransformer?: (entity: Partial<T>) => Partial<T>;\n  \n  /** Callback post-operazione */\n  onOperationComplete?: (operation: string, result: EntityOperationResult<T>) => void;\n  \n  /** Abilita cache locale */\n  enableCache?: boolean;\n  \n  /** TTL cache (ms) */\n  cacheTTL?: number;\n}\n\n/**\n * Stato operazioni\n */\ninterface OperationsState<T extends BaseEntity> {\n  loading: boolean;\n  saving: boolean;\n  deleting: boolean;\n  error: string | null;\n  lastOperation: string | null;\n  cache: Map<string, { data: T; timestamp: number }>;\n  optimisticUpdates: Map<string, Partial<T>>;\n}\n\n/**\n * Opzioni operazione\n */\ninterface OperationOptions {\n  /** Richiedi consenso esplicito */\n  requireConsent?: boolean;\n  \n  /** Tipi di consenso richiesti */\n  consentTypes?: GDPRConsentType[];\n  \n  /** Motivo dell'operazione */\n  reason?: string;\n  \n  /** Metadati aggiuntivi */\n  metadata?: Record<string, any>;\n  \n  /** Bypass cache */\n  bypassCache?: boolean;\n  \n  /** Update ottimistico */\n  optimistic?: boolean;\n  \n  /** Validazione personalizzata */\n  skipValidation?: boolean;\n}\n\n/**\n * Hook per operazioni CRUD con supporto GDPR\n */\nexport function useGDPREntityOperations<T extends BaseEntity>({\n  apiConfig,\n  gdprConfig,\n  permissions,\n  entityType,\n  validator,\n  dataTransformer,\n  onOperationComplete,\n  enableCache = true,\n  cacheTTL = 300000 // 5 minuti\n}: UseGDPREntityOperationsConfig<T>) {\n  \n  const [state, setState] = useState<OperationsState<T>>({\n    loading: false,\n    saving: false,\n    deleting: false,\n    error: null,\n    lastOperation: null,\n    cache: new Map(),\n    optimisticUpdates: new Map()\n  });\n  \n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  // Hook GDPR\n  const { checkConsent, requestConsent } = useGDPRConsent({\n    config: gdprConfig?.consentConfig,\n    personId: 'current-user' // TODO: Ottenere dall'auth context\n  });\n  \n  const { logGDPROperation } = useGDPRAudit({\n    config: gdprConfig?.auditConfig,\n    entityType\n  });\n  \n  // Verifica permessi\n  const checkPermissions = useCallback((operation: string): boolean => {\n    switch (operation) {\n      case 'create':\n        return permissions.create.length > 0;\n      case 'read':\n        return permissions.read.length > 0;\n      case 'update':\n        return permissions.update.length > 0;\n      case 'delete':\n        return permissions.delete.length > 0;\n      case 'export':\n        return permissions.export?.length > 0 || false;\n      case 'import':\n        return permissions.import?.length > 0 || false;\n      default:\n        return false;\n    }\n  }, [permissions]);\n  \n  // Verifica consensi GDPR\n  const checkGDPRConsents = useCallback(async (\n    operation: string,\n    consentTypes?: GDPRConsentType[]\n  ): Promise<boolean> => {\n    if (!gdprConfig?.consentConfig || !consentTypes?.length) return true;\n    \n    // Verifica tutti i consensi richiesti\n    const verification = await checkConsent(consentTypes);\n    \n    // Se ci sono consensi mancanti o scaduti, richiedili\n    const missingOrExpired = [...verification.missingConsents, ...verification.expiredConsents];\n    \n    if (missingOrExpired.length > 0) {\n      // Richiedi consensi mancanti/scaduti\n      await requestConsent(missingOrExpired, {\n        purpose: `Operazione ${operation} su ${entityType}`,\n        legalBasis: 'legitimate_interest'\n      });\n    }\n    \n    return verification.hasConsent;\n  }, [gdprConfig, checkConsent, requestConsent, entityType]);\n  \n  // Valida entità\n  const validateEntity = useCallback(async (entity: Partial<T>): Promise<string[]> => {\n    const errors: string[] = [];\n    \n    // Validazione base\n    if (!entity) {\n      errors.push('Entità non valida');\n      return errors;\n    }\n    \n    // Validazione personalizzata\n    if (validator) {\n      const customErrors = await validator(entity);\n      errors.push(...customErrors);\n    }\n    \n    return errors;\n  }, [validator]);\n  \n  // Gestione cache\n  const getCachedEntity = useCallback((id: string): T | null => {\n    if (!enableCache) return null;\n    \n    const cached = state.cache.get(id);\n    if (!cached) return null;\n    \n    // Verifica TTL\n    if (Date.now() - cached.timestamp > cacheTTL) {\n      state.cache.delete(id);\n      return null;\n    }\n    \n    return cached.data;\n  }, [enableCache, cacheTTL, state.cache]);\n  \n  const setCachedEntity = useCallback((entity: T) => {\n    if (!enableCache || !entity.id) return;\n    \n    setState(prev => {\n      const newCache = new Map(prev.cache);\n      newCache.set(entity.id!, {\n        data: entity,\n        timestamp: Date.now()\n      });\n      \n      return {\n        ...prev,\n        cache: newCache\n      };\n    });\n  }, [enableCache]);\n  \n  // Applica update ottimistico\n  const applyOptimisticUpdate = useCallback((id: string, updates: Partial<T>) => {\n    setState(prev => {\n      const newOptimistic = new Map(prev.optimisticUpdates);\n      newOptimistic.set(id, { ...newOptimistic.get(id), ...updates });\n      \n      return {\n        ...prev,\n        optimisticUpdates: newOptimistic\n      };\n    });\n  }, []);\n  \n  // Rimuovi update ottimistico\n  const removeOptimisticUpdate = useCallback((id: string) => {\n    setState(prev => {\n      const newOptimistic = new Map(prev.optimisticUpdates);\n      newOptimistic.delete(id);\n      \n      return {\n        ...prev,\n        optimisticUpdates: newOptimistic\n      };\n    });\n  }, []);\n  \n  // Cancella operazione in corso\n  const cancelOperation = useCallback(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n    \n    setState(prev => ({\n      ...prev,\n      loading: false,\n      saving: false,\n      deleting: false\n    }));\n  }, []);\n  \n  // CREATE - Crea nuova entità\n  const createEntity = useCallback(async (\n    entityData: Omit<T, 'id' | 'createdAt' | 'updatedAt'>,\n    options: OperationOptions = {}\n  ): Promise<EntityOperationResult<T>> => {\n    try {\n      // Verifica permessi\n      if (!checkPermissions('create')) {\n        throw new Error('Permessi insufficienti per creare l\\'entità');\n      }\n      \n      // Verifica consensi GDPR\n      await checkGDPRConsents('create', options.consentTypes);\n      \n      setState(prev => ({ ...prev, saving: true, error: null, lastOperation: 'create' }));\n      \n      // Validazione\n      if (!options.skipValidation) {\n        const errors = await validateEntity(entityData as Partial<T>);\n        if (errors.length > 0) {\n          throw new Error(`Errori di validazione: ${errors.join(', ')}`);\n        }\n      }\n      \n      // Trasformazione dati\n      let processedData = entityData;\n      if (dataTransformer) {\n        processedData = dataTransformer(entityData as Partial<T>) as Omit<T, 'id' | 'createdAt' | 'updatedAt'>;\n      }\n      \n      // Abort controller\n      abortControllerRef.current = new AbortController();\n      \n      // Log operazione GDPR\n      const gdprResult = await logGDPROperation({\n        operation: 'CREATE',\n        entityType,\n        data: processedData,\n        reason: options.reason || 'Creazione nuova entità',\n        riskLevel: 'MEDIUM',\n        metadata: options.metadata\n      });\n      \n      if (!gdprResult.success) {\n        throw new Error('Errore nel logging GDPR');\n      }\n      \n      // Chiamata API\n      const response = await apiService.post(\n        apiConfig.endpoints.create,\n        processedData,\n        {\n          signal: abortControllerRef.current.signal,\n          ...apiConfig.defaultOptions\n        }\n      );\n      \n      const createdEntity = (response as any).data as T;\n      \n      // Aggiorna cache\n      setCachedEntity(createdEntity);\n      \n      const result: EntityOperationResult<T> = {\n        success: true,\n        data: createdEntity,\n        operation: 'create'\n      };\n      \n      setState(prev => ({ ...prev, saving: false }));\n      \n      // Callback\n      onOperationComplete?.('create', result);\n      \n      return result;\n      \n    } catch (error: any) {\n      setState(prev => ({\n        ...prev,\n        saving: false,\n        error: error.message\n      }));\n      \n      const result: EntityOperationResult<T> = {\n        success: false,\n        errors: [error.message],\n        operation: 'create'\n      };\n      \n      onOperationComplete?.('create', result);\n      \n      return result;\n    } finally {\n      abortControllerRef.current = null;\n    }\n  }, [\n    checkPermissions,\n    checkGDPRConsents,\n    validateEntity,\n    dataTransformer,\n    logGDPROperation,\n    apiConfig,\n    entityType,\n    setCachedEntity,\n    onOperationComplete\n  ]);\n  \n  // READ - Leggi entità\n  const readEntity = useCallback(async (\n    id: string,\n    options: OperationOptions = {}\n  ): Promise<EntityOperationResult<T>> => {\n    try {\n      // Verifica permessi\n      if (!checkPermissions('read')) {\n        throw new Error('Permessi insufficienti per leggere l\\'entità');\n      }\n      \n      // Verifica cache\n      if (!options.bypassCache) {\n        const cached = getCachedEntity(id);\n        if (cached) {\n          return {\n            success: true,\n            data: cached,\n            operation: 'read'\n          };\n        }\n      }\n      \n      setState(prev => ({ ...prev, loading: true, error: null, lastOperation: 'read' }));\n      \n      // Abort controller\n      abortControllerRef.current = new AbortController();\n      \n      // Chiamata API\n      const response = await apiService.get(\n        `${apiConfig.endpoints.list}/${id}`,\n        {\n          signal: abortControllerRef.current.signal,\n          ...apiConfig.defaultOptions\n        }\n      );\n      \n      const entity = (response as any).data as T;\n      \n      // Aggiorna cache\n      setCachedEntity(entity);\n      \n      const result: EntityOperationResult<T> = {\n        success: true,\n        data: entity,\n        operation: 'read'\n      };\n      \n      setState(prev => ({ ...prev, loading: false }));\n      \n      onOperationComplete?.('read', result);\n      \n      return result;\n      \n    } catch (error: any) {\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: error.message\n      }));\n      \n      const result: EntityOperationResult<T> = {\n        success: false,\n        errors: [error.message],\n        operation: 'read'\n      };\n      \n      onOperationComplete?.('read', result);\n      \n      return result;\n    } finally {\n      abortControllerRef.current = null;\n    }\n  }, [\n    checkPermissions,\n    getCachedEntity,\n    apiConfig,\n    setCachedEntity,\n    onOperationComplete\n  ]);\n  \n  // UPDATE - Aggiorna entità\n  const updateEntity = useCallback(async (\n    id: string,\n    updates: Partial<T>,\n    options: OperationOptions = {}\n  ): Promise<EntityOperationResult<T>> => {\n    try {\n      // Verifica permessi\n      if (!checkPermissions('update')) {\n        throw new Error('Permessi insufficienti per aggiornare l\\'entità');\n      }\n      \n      // Verifica consensi GDPR\n      await checkGDPRConsents('update', options.consentTypes);\n      \n      setState(prev => ({ ...prev, saving: true, error: null, lastOperation: 'update' }));\n      \n      // Ottieni dati correnti per audit\n      const currentResult = await readEntity(id, { bypassCache: true });\n      if (!currentResult.success) {\n        throw new Error('Impossibile ottenere i dati correnti dell\\'entità');\n      }\n      \n      const currentData = currentResult.data!;\n      \n      // Update ottimistico\n      if (options.optimistic) {\n        applyOptimisticUpdate(id, updates);\n      }\n      \n      // Validazione\n      if (!options.skipValidation) {\n        const mergedData = { ...currentData, ...updates };\n        const errors = await validateEntity(mergedData);\n        if (errors.length > 0) {\n          if (options.optimistic) {\n            removeOptimisticUpdate(id);\n          }\n          throw new Error(`Errori di validazione: ${errors.join(', ')}`);\n        }\n      }\n      \n      // Trasformazione dati\n      let processedUpdates = updates;\n      if (dataTransformer) {\n        processedUpdates = dataTransformer(updates);\n      }\n      \n      // Abort controller\n      abortControllerRef.current = new AbortController();\n      \n      // Log operazione GDPR\n      const gdprResult = await logGDPROperation({\n        operation: 'UPDATE',\n        entityType,\n        entityId: id,\n        data: processedUpdates,\n        reason: options.reason || 'Aggiornamento entità',\n        riskLevel: 'MEDIUM',\n        metadata: {\n          ...options.metadata,\n          oldData: currentData\n        }\n      });\n      \n      if (!gdprResult.success) {\n        if (options.optimistic) {\n          removeOptimisticUpdate(id);\n        }\n        throw new Error('Errore nel logging GDPR');\n      }\n      \n      // Chiamata API\n      const response = await apiService.put(\n        `${apiConfig.endpoints.update}/${id}`,\n        processedUpdates\n      );\n      \n      const updatedEntity = (response as any).data as T;\n      \n      // Rimuovi update ottimistico e aggiorna cache\n      if (options.optimistic) {\n        removeOptimisticUpdate(id);\n      }\n      setCachedEntity(updatedEntity);\n      \n      const result: EntityOperationResult<T> = {\n        success: true,\n        data: updatedEntity,\n        operation: 'update'\n      };\n      \n      setState(prev => ({ ...prev, saving: false }));\n      \n      onOperationComplete?.('update', result);\n      \n      return result;\n      \n    } catch (error: any) {\n      // Rimuovi update ottimistico in caso di errore\n      if (options.optimistic) {\n        removeOptimisticUpdate(id);\n      }\n      \n      setState(prev => ({\n        ...prev,\n        saving: false,\n        error: error.message\n      }));\n      \n      const result: EntityOperationResult<T> = {\n        success: false,\n        errors: [error.message],\n        operation: 'update'\n      };\n      \n      onOperationComplete?.('update', result);\n      \n      return result;\n    } finally {\n      abortControllerRef.current = null;\n    }\n  }, [\n    checkPermissions,\n    checkGDPRConsents,\n    readEntity,\n    applyOptimisticUpdate,\n    removeOptimisticUpdate,\n    validateEntity,\n    dataTransformer,\n    logGDPROperation,\n    apiConfig,\n    entityType,\n    setCachedEntity,\n    onOperationComplete\n  ]);\n  \n  // DELETE - Elimina entità\n  const deleteEntity = useCallback(async (\n    id: string,\n    options: OperationOptions = {}\n  ): Promise<EntityOperationResult<void>> => {\n    try {\n      // Verifica permessi\n      if (!checkPermissions('delete')) {\n        throw new Error('Permessi insufficienti per eliminare l\\'entità');\n      }\n      \n      // Verifica consensi GDPR (diritto all'oblio)\n      await checkGDPRConsents('delete', options.consentTypes || ['DATA_PROCESSING']);\n      \n      setState(prev => ({ ...prev, deleting: true, error: null, lastOperation: 'delete' }));\n      \n      // Ottieni dati correnti per audit\n      const currentResult = await readEntity(id, { bypassCache: true });\n      const currentData = currentResult.success ? currentResult.data : null;\n      \n      // Abort controller\n      abortControllerRef.current = new AbortController();\n      \n      // Log operazione GDPR\n      const gdprResult = await logGDPROperation({\n        operation: 'DELETE',\n        entityType,\n        entityId: id,\n        data: currentData,\n        reason: options.reason || 'Eliminazione entità',\n        riskLevel: 'HIGH',\n        metadata: options.metadata\n      });\n      \n      if (!gdprResult.success) {\n        throw new Error('Errore nel logging GDPR');\n      }\n      \n      // Chiamata API\n      await apiService.delete(`${apiConfig.endpoints.delete}/${id}`);\n      \n      // Rimuovi da cache\n      setState(prev => {\n        const newCache = new Map(prev.cache);\n        newCache.delete(id);\n        \n        const newOptimistic = new Map(prev.optimisticUpdates);\n        newOptimistic.delete(id);\n        \n        return {\n          ...prev,\n          cache: newCache,\n          optimisticUpdates: newOptimistic,\n          deleting: false\n        };\n      });\n      \n      const result: EntityOperationResult<void> = {\n        success: true,\n        operation: 'delete'\n      };\n      \n      onOperationComplete?.('delete', result as EntityOperationResult<T>);\n      \n      return result;\n      \n    } catch (error: any) {\n      setState(prev => ({\n        ...prev,\n        deleting: false,\n        error: error.message\n      }));\n      \n      const result: EntityOperationResult<void> = {\n        success: false,\n        errors: [error.message],\n        operation: 'delete'\n      };\n      \n      onOperationComplete?.('delete', result as EntityOperationResult<T>);\n      \n      return result;\n    } finally {\n      abortControllerRef.current = null;\n    }\n  }, [\n    checkPermissions,\n    checkGDPRConsents,\n    readEntity,\n    logGDPROperation,\n    apiConfig,\n    entityType,\n    onOperationComplete\n  ]);\n  \n  // Bulk operations\n  const bulkDelete = useCallback(async (\n    ids: string[],\n    options: OperationOptions = {}\n  ): Promise<EntityOperationResult<{ deleted: string[]; failed: string[] }>> => {\n    const deleted: string[] = [];\n    const failed: string[] = [];\n    \n    for (const id of ids) {\n      try {\n        const result = await deleteEntity(id, options);\n        if (result.success) {\n          deleted.push(id);\n        } else {\n          failed.push(id);\n        }\n      } catch (error) {\n        failed.push(id);\n      }\n    }\n    \n    return {\n      success: failed.length === 0,\n      data: { deleted, failed },\n      operation: 'bulk_delete',\n      errors: failed.length > 0 ? [`Fallite ${failed.length} eliminazioni`] : undefined\n    };\n  }, [deleteEntity]);\n  \n  // Clear cache\n  const clearCache = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      cache: new Map(),\n      optimisticUpdates: new Map()\n    }));\n  }, []);\n  \n  // Clear error\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }));\n  }, []);\n  \n  return {\n    // Stato\n    loading: state.loading,\n    saving: state.saving,\n    deleting: state.deleting,\n    error: state.error,\n    lastOperation: state.lastOperation,\n    \n    // Operazioni CRUD\n    createEntity,\n    readEntity,\n    updateEntity,\n    deleteEntity,\n    bulkDelete,\n    \n    // Utility\n    cancelOperation,\n    clearCache,\n    clearError,\n    getCachedEntity,\n    \n    // Stato cache\n    cacheSize: state.cache.size,\n    optimisticUpdatesCount: state.optimisticUpdates.size,\n    \n    // Configurazione\n    permissions,\n    entityType,\n    isGDPREnabled: !!gdprConfig\n  };\n}\n\nexport default useGDPREntityOperations;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useGDPREntityPage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1699,1702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1699,1702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":444,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":444,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'initialData' and 'loadEntities'. Either include them or remove the dependency array.","line":470,"column":6,"nodeType":"ArrayExpression","endLine":470,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initialData, loadEntities]","fix":{"range":[14747,14749],"text":"[initialData, loadEntities]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'initialData' and 'loadEntities'. Either include them or remove the dependency array.","line":477,"column":6,"nodeType":"ArrayExpression","endLine":477,"endColumn":86,"suggestions":[{"desc":"Update the dependencies array to be: [state.filters, state.sorting, state.pagination.page, state.pagination.pageSize, initialData, loadEntities]","fix":{"range":[14896,14976],"text":"[state.filters, state.sorting, state.pagination.page, state.pagination.pageSize, initialData, loadEntities]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useGDPREntityPage Hook - Hook principale per gestione template\n * \n * Hook che gestisce lo stato e le azioni principali del template\n * GDPR-compliant per pagine entità.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport { useState, useEffect, useCallback, useReducer } from 'react';\nimport { BaseEntity } from '../types/entity.types';\nimport { GDPREntityPageConfig, TemplateState, TemplateActions } from '../types/template.types';\nimport { GDPRAuditAction } from '../types/gdpr.types';\nimport { useGDPRAudit } from './useGDPRAudit';\nimport { useGDPRConsent } from './useGDPRConsent';\nimport { apiService } from '../../../services/api';\n\n/**\n * Configurazione hook\n */\nexport interface UseGDPREntityPageConfig<T extends BaseEntity = BaseEntity> {\n  /** Configurazione template */\n  config: GDPREntityPageConfig<T>;\n  \n  /** Dati iniziali */\n  initialData?: T[];\n  \n  /** Callback personalizzate */\n  onEntityCreate?: (entity: Omit<T, 'id'>) => Promise<T>;\n  onEntityUpdate?: (id: string, entity: Partial<T>) => Promise<T>;\n  onEntityDelete?: (id: string) => Promise<void>;\n  onBulkDelete?: (ids: string[]) => Promise<void>;\n  \n  /** Configurazione cache */\n  enableCache?: boolean;\n  cacheTTL?: number;\n}\n\n/**\n * Azioni del reducer\n */\ntype EntityPageAction<T extends BaseEntity> = \n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_ENTITIES'; payload: T[] }\n  | { type: 'ADD_ENTITY'; payload: T }\n  | { type: 'UPDATE_ENTITY'; payload: { id: string; entity: Partial<T> } }\n  | { type: 'REMOVE_ENTITY'; payload: string }\n  | { type: 'REMOVE_ENTITIES'; payload: string[] }\n  | { type: 'SET_FILTERS'; payload: Record<string, any> }\n  | { type: 'SET_SORTING'; payload: { field: keyof T; direction: 'asc' | 'desc' } | null }\n  | { type: 'SET_PAGINATION'; payload: { page?: number; pageSize?: number; total?: number } }\n  | { type: 'SET_SELECTED_ENTITIES'; payload: T[] }\n  | { type: 'SET_UI_STATE'; payload: Partial<TemplateState<T>['ui']> }\n  | { type: 'RESET_STATE' };\n\n/**\n * Reducer per gestione stato\n */\nfunction entityPageReducer<T extends BaseEntity>(\n  state: TemplateState<T>,\n  action: EntityPageAction<T>\n): TemplateState<T> {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n      \n    case 'SET_ERROR':\n      return { ...state, error: action.payload, loading: false };\n      \n    case 'SET_ENTITIES':\n      return {\n        ...state,\n        entities: action.payload,\n        loading: false,\n        error: null,\n        pagination: {\n          ...state.pagination,\n          total: action.payload.length\n        }\n      };\n      \n    case 'ADD_ENTITY':\n      return {\n        ...state,\n        entities: [...state.entities, action.payload],\n        pagination: {\n          ...state.pagination,\n          total: state.pagination.total + 1\n        }\n      };\n      \n    case 'UPDATE_ENTITY':\n      return {\n        ...state,\n        entities: state.entities.map(entity =>\n          entity.id === action.payload.id\n            ? { ...entity, ...action.payload.entity }\n            : entity\n        )\n      };\n      \n    case 'REMOVE_ENTITY':\n      return {\n        ...state,\n        entities: state.entities.filter(entity => entity.id !== action.payload),\n        selectedEntities: state.selectedEntities.filter(entity => entity.id !== action.payload),\n        pagination: {\n          ...state.pagination,\n          total: Math.max(0, state.pagination.total - 1)\n        }\n      };\n      \n    case 'REMOVE_ENTITIES':\n      return {\n        ...state,\n        entities: state.entities.filter(entity => !action.payload.includes(entity.id)),\n        selectedEntities: state.selectedEntities.filter(entity => !action.payload.includes(entity.id)),\n        pagination: {\n          ...state.pagination,\n          total: Math.max(0, state.pagination.total - action.payload.length)\n        }\n      };\n      \n    case 'SET_FILTERS':\n      return {\n        ...state,\n        filters: action.payload,\n        pagination: { ...state.pagination, page: 1 }\n      };\n      \n    case 'SET_SORTING':\n      return { ...state, sorting: action.payload };\n      \n    case 'SET_PAGINATION':\n      return {\n        ...state,\n        pagination: { ...state.pagination, ...action.payload }\n      };\n      \n    case 'SET_SELECTED_ENTITIES':\n      return { ...state, selectedEntities: action.payload };\n      \n    case 'SET_UI_STATE':\n      return {\n        ...state,\n        ui: { ...state.ui, ...action.payload }\n      };\n      \n    case 'RESET_STATE':\n      return {\n        entities: [],\n        loading: false,\n        error: null,\n        selectedEntities: [],\n        filters: {},\n        sorting: null,\n        pagination: { page: 1, pageSize: 10, total: 0 },\n        ui: {\n          density: 'standard',\n          sidebarCollapsed: false,\n          activeModal: null\n        }\n      };\n      \n    default:\n      return state;\n  }\n}\n\n/**\n * Hook principale per gestione template GDPR\n */\nexport function useGDPREntityPage<T extends BaseEntity = BaseEntity>({\n  config,\n  initialData,\n  onEntityCreate,\n  onEntityUpdate,\n  onEntityDelete,\n  onBulkDelete,\n  enableCache = true,\n  cacheTTL = 300000 // 5 minuti\n}: UseGDPREntityPageConfig<T>) {\n  \n  // Stato iniziale\n  const initialState: TemplateState<T> = {\n    entities: initialData || [],\n    loading: false,\n    error: null,\n    selectedEntities: [],\n    filters: {},\n    sorting: null,\n    pagination: {\n      page: 1,\n      pageSize: config.ui.table.defaultPageSize,\n      total: initialData?.length || 0\n    },\n    ui: {\n      density: config.ui.table.defaultDensity,\n      sidebarCollapsed: config.ui.layout.sidebar?.defaultCollapsed || false,\n      activeModal: null\n    }\n  };\n  \n  const [state, dispatch] = useReducer(entityPageReducer<T>, initialState);\n  \n  // Hooks GDPR\n  const { logAction } = useGDPRAudit({\n    config: config.gdpr.auditConfig,\n    entityType: config.entity.name\n  });\n  \n  const { checkConsent } = useGDPRConsent({\n    config: config.gdpr.consentConfig,\n    personId: 'current-user' // Da implementare con context utente reale\n  });\n  \n  // Cache per entità\n  const [cache, setCache] = useState<Map<string, { data: T[]; timestamp: number }>>(new Map());\n  \n  // Carica entità dal server\n  const loadEntities = useCallback(async (forceRefresh = false) => {\n    const cacheKey = `${config.api.baseEndpoint}_${JSON.stringify(state.filters)}_${JSON.stringify(state.sorting)}`;\n    \n    // Verifica cache se abilitata\n    if (enableCache && !forceRefresh) {\n      const cached = cache.get(cacheKey);\n      if (cached && Date.now() - cached.timestamp < cacheTTL) {\n        dispatch({ type: 'SET_ENTITIES', payload: cached.data });\n        return;\n      }\n    }\n    \n    dispatch({ type: 'SET_LOADING', payload: true });\n    \n    try {\n      // Log azione\n      await logAction('READ' as GDPRAuditAction, undefined, {\n        filters: state.filters,\n        sorting: state.sorting,\n        pagination: state.pagination\n      });\n      \n      // Costruisci parametri query\n      const params = new URLSearchParams();\n      \n      // Aggiungi filtri\n      Object.entries(state.filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          params.append(key, value.toString());\n        }\n      });\n      \n      // Aggiungi ordinamento\n      if (state.sorting) {\n        params.append('sortBy', state.sorting.field.toString());\n        params.append('sortOrder', state.sorting.direction);\n      }\n      \n      // Aggiungi paginazione\n      params.append('page', state.pagination.page.toString());\n      params.append('limit', state.pagination.pageSize.toString());\n      \n      // Chiamata API\n      const response = await apiService.get(`${config.api.endpoints.list}?${params.toString()}`);\n      \n      const responseData = response as { data?: T[]; total?: number };\n      const entities = responseData.data || [];\n      const total = responseData.total || entities.length;\n      \n      // Aggiorna cache\n      if (enableCache) {\n        setCache(prev => new Map(prev.set(cacheKey, {\n          data: entities,\n          timestamp: Date.now()\n        })));\n      }\n      \n      dispatch({ type: 'SET_ENTITIES', payload: entities });\n      dispatch({ type: 'SET_PAGINATION', payload: { total } });\n      \n    } catch (error) {\n      console.error('Errore nel caricamento entità:', error);\n      dispatch({ type: 'SET_ERROR', payload: 'Errore nel caricamento dei dati' });\n    }\n  }, [config, state.filters, state.sorting, state.pagination, enableCache, cacheTTL, cache, logAction]);\n  \n  // Crea nuova entità\n  const createEntity = useCallback(async (entityData: Omit<T, 'id'>) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    \n    try {\n      // Verifica consensi se richiesto\n      if (config.gdpr.requiresConsent && config.gdpr.consentConfig) {\n        const verification = await checkConsent(config.gdpr.consentConfig.requiredConsents);\n        if (!verification.hasConsent) {\n          throw new Error('Consensi GDPR mancanti per questa operazione');\n        }\n      }\n      \n      let newEntity: T;\n      \n      if (onEntityCreate) {\n        newEntity = await onEntityCreate(entityData);\n      } else {\n        const response = await apiService.post(config.api.endpoints.create, entityData);\n        const responseData = response as { data: T };\n        newEntity = responseData.data;\n      }\n      \n      dispatch({ type: 'ADD_ENTITY', payload: newEntity });\n      \n      // Invalida cache\n      if (enableCache) {\n        setCache(new Map());\n      }\n      \n      return newEntity;\n      \n    } catch (error) {\n      console.error('Errore nella creazione entità:', error);\n      dispatch({ type: 'SET_ERROR', payload: 'Errore nella creazione dell\\'elemento' });\n      throw error;\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [config, onEntityCreate, checkConsent, enableCache]);\n  \n  // Aggiorna entità esistente\n  const updateEntity = useCallback(async (id: string, entityData: Partial<T>) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    \n    try {\n      // Verifica consensi se richiesto\n      if (config.gdpr.requiresConsent && config.gdpr.consentConfig) {\n        const verification = await checkConsent(config.gdpr.consentConfig.requiredConsents);\n        if (!verification.hasConsent) {\n          throw new Error('Consensi GDPR mancanti per questa operazione');\n        }\n      }\n      \n      let updatedEntity: T;\n      \n      if (onEntityUpdate) {\n        updatedEntity = await onEntityUpdate(id, entityData);\n      } else {\n        const response = await apiService.put(config.api.endpoints.update.replace(':id', id), entityData);\n        const responseData = response as { data: T };\n        updatedEntity = responseData.data;\n      }\n      \n      dispatch({ type: 'UPDATE_ENTITY', payload: { id, entity: entityData } });\n      \n      // Invalida cache\n      if (enableCache) {\n        setCache(new Map());\n      }\n      \n      return updatedEntity;\n      \n    } catch (error) {\n      console.error('Errore nell\\'aggiornamento entità:', error);\n      dispatch({ type: 'SET_ERROR', payload: 'Errore nell\\'aggiornamento dell\\'elemento' });\n      throw error;\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [config, onEntityUpdate, checkConsent, enableCache]);\n  \n  // Elimina entità\n  const deleteEntity = useCallback(async (id: string) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    \n    try {\n      if (onEntityDelete) {\n        await onEntityDelete(id);\n      } else {\n        await apiService.delete(config.api.endpoints.delete.replace(':id', id));\n      }\n      \n      dispatch({ type: 'REMOVE_ENTITY', payload: id });\n      \n      // Invalida cache\n      if (enableCache) {\n        setCache(new Map());\n      }\n      \n    } catch (error) {\n      console.error('Errore nell\\'eliminazione entità:', error);\n      dispatch({ type: 'SET_ERROR', payload: 'Errore nell\\'eliminazione dell\\'elemento' });\n      throw error;\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [config, onEntityDelete, enableCache]);\n  \n  // Elimina entità multiple\n  const bulkDelete = useCallback(async (ids: string[]) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    \n    try {\n      if (onBulkDelete) {\n        await onBulkDelete(ids);\n      } else if (config.api.endpoints.bulkDelete) {\n        await apiService.post(config.api.endpoints.bulkDelete, { ids });\n      } else {\n        // Fallback: elimina uno per uno\n        await Promise.all(ids.map(id => \n          apiService.delete(config.api.endpoints.delete.replace(':id', id))\n        ));\n      }\n      \n      dispatch({ type: 'REMOVE_ENTITIES', payload: ids });\n      \n      // Invalida cache\n      if (enableCache) {\n        setCache(new Map());\n      }\n      \n    } catch (error) {\n      console.error('Errore nell\\'eliminazione multipla:', error);\n      dispatch({ type: 'SET_ERROR', payload: 'Errore nell\\'eliminazione degli elementi' });\n      throw error;\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [config, onBulkDelete, enableCache]);\n  \n  // Azioni template\n  const actions: TemplateActions<T> = {\n    loadEntities,\n    createEntity,\n    updateEntity,\n    deleteEntity,\n    bulkDelete,\n    \n    setFilters: (filters) => dispatch({ type: 'SET_FILTERS', payload: filters }),\n    setSorting: (field, direction) => dispatch({ type: 'SET_SORTING', payload: { field, direction } }),\n    setPage: (page) => dispatch({ type: 'SET_PAGINATION', payload: { page } }),\n    setPageSize: (pageSize) => dispatch({ type: 'SET_PAGINATION', payload: { pageSize, page: 1 } }),\n    setSelectedEntities: (entities) => dispatch({ type: 'SET_SELECTED_ENTITIES', payload: entities }),\n    \n    openModal: (modalId, data) => dispatch({ type: 'SET_UI_STATE', payload: { activeModal: modalId } }),\n    closeModal: () => dispatch({ type: 'SET_UI_STATE', payload: { activeModal: null } }),\n    \n    requestConsent: async (consentTypes) => {\n      // Implementa richiesta consenso\n      console.log('Richiesta consenso:', consentTypes);\n    },\n    revokeConsent: async (consentTypes) => {\n      // Implementa revoca consenso\n      console.log('Revoca consenso:', consentTypes);\n    },\n    exportData: async (format) => {\n      // Implementa export dati\n      console.log('Export dati:', format);\n    },\n    requestDeletion: async (reason) => {\n      // Implementa richiesta cancellazione\n      console.log('Richiesta cancellazione:', reason);\n    }\n  };\n  \n  // Carica dati iniziali\n  useEffect(() => {\n    if (!initialData) {\n      loadEntities();\n    }\n  }, []);\n  \n  // Ricarica quando cambiano filtri, ordinamento o paginazione\n  useEffect(() => {\n    if (!initialData) {\n      loadEntities();\n    }\n  }, [state.filters, state.sorting, state.pagination.page, state.pagination.pageSize]);\n  \n  return {\n    state,\n    actions,\n    loading: state.loading,\n    error: state.error,\n    \n    // Utility functions\n    clearError: () => dispatch({ type: 'SET_ERROR', payload: null }),\n    resetState: () => dispatch({ type: 'RESET_STATE' }),\n    refreshData: () => loadEntities(true),\n    \n    // Cache utilities\n    clearCache: () => setCache(new Map()),\n    getCacheSize: () => cache.size\n  };\n}\n\nexport default useGDPREntityPage;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useGDPRFilters.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[418,421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[418,421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[598,601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[598,601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1135,1138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1135,1138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1659,1662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1659,1662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo, useCallback } from 'react';\n\nexport interface FilterConfig {\n  key: string;\n  label: string;\n  type: 'text' | 'select' | 'date' | 'boolean' | 'number';\n  options?: { value: string; label: string }[];\n  placeholder?: string;\n}\n\nexport interface SortConfig {\n  field: string;\n  direction: 'asc' | 'desc';\n}\n\nexport interface GDPRFiltersState {\n  searchTerm: string;\n  filters: Record<string, any>;\n  sortConfig: SortConfig;\n  showAdvancedFilters: boolean;\n}\n\nexport interface GDPRFiltersActions {\n  setSearchTerm: (term: string) => void;\n  setFilter: (key: string, value: any) => void;\n  clearFilter: (key: string) => void;\n  clearAllFilters: () => void;\n  setSortConfig: (config: SortConfig) => void;\n  toggleAdvancedFilters: () => void;\n  resetFilters: () => void;\n}\n\nexport interface UseGDPRFiltersConfig {\n  defaultSort?: SortConfig;\n  filterConfigs?: FilterConfig[];\n  enableAdvancedFilters?: boolean;\n}\n\n/**\n * Hook per gestire filtri, ricerca e ordinamento delle entità\n * Centralizza la logica di filtraggio con supporto per filtri avanzati\n */\nexport function useGDPRFilters<T extends Record<string, any>>({\n  defaultSort = { field: 'createdAt', direction: 'desc' },\n  filterConfigs = [],\n  enableAdvancedFilters = true\n}: UseGDPRFiltersConfig = {}) {\n  \n  const [state, setState] = useState<GDPRFiltersState>({\n    searchTerm: '',\n    filters: {},\n    sortConfig: defaultSort,\n    showAdvancedFilters: false\n  });\n\n  // Azioni per gestire i filtri\n  const setSearchTerm = useCallback((term: string) => {\n    setState(prev => ({ ...prev, searchTerm: term }));\n  }, []);\n\n  const setFilter = useCallback((key: string, value: any) => {\n    setState(prev => ({\n      ...prev,\n      filters: { ...prev.filters, [key]: value }\n    }));\n  }, []);\n\n  const clearFilter = useCallback((key: string) => {\n    setState(prev => {\n      const newFilters = { ...prev.filters };\n      delete newFilters[key];\n      return { ...prev, filters: newFilters };\n    });\n  }, []);\n\n  const clearAllFilters = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      searchTerm: '',\n      filters: {}\n    }));\n  }, []);\n\n  const setSortConfig = useCallback((config: SortConfig) => {\n    setState(prev => ({ ...prev, sortConfig: config }));\n  }, []);\n\n  const toggleAdvancedFilters = useCallback(() => {\n    setState(prev => ({ ...prev, showAdvancedFilters: !prev.showAdvancedFilters }));\n  }, []);\n\n  const resetFilters = useCallback(() => {\n    setState({\n      searchTerm: '',\n      filters: {},\n      sortConfig: defaultSort,\n      showAdvancedFilters: false\n    });\n  }, [defaultSort]);\n\n  // Funzione per applicare i filtri ai dati\n  const applyFilters = useCallback((data: T[]): T[] => {\n    if (!data || data.length === 0) return [];\n\n    let filteredData = [...data];\n\n    // Applica ricerca testuale\n    if (state.searchTerm) {\n      const searchLower = state.searchTerm.toLowerCase();\n      filteredData = filteredData.filter(item => {\n        return Object.values(item).some(value => {\n          if (value === null || value === undefined) return false;\n          return String(value).toLowerCase().includes(searchLower);\n        });\n      });\n    }\n\n    // Applica filtri specifici\n    Object.entries(state.filters).forEach(([key, value]) => {\n      if (value === null || value === undefined || value === '') return;\n\n      filteredData = filteredData.filter(item => {\n        const itemValue = item[key];\n        \n        if (typeof value === 'boolean') {\n          return Boolean(itemValue) === value;\n        }\n        \n        if (typeof value === 'string') {\n          if (itemValue === null || itemValue === undefined) return false;\n          return String(itemValue).toLowerCase().includes(value.toLowerCase());\n        }\n        \n        if (typeof value === 'number') {\n          return Number(itemValue) === value;\n        }\n        \n        return itemValue === value;\n      });\n    });\n\n    // Applica ordinamento\n    if (state.sortConfig.field) {\n      filteredData.sort((a, b) => {\n        const aValue = a[state.sortConfig.field];\n        const bValue = b[state.sortConfig.field];\n        \n        // Gestione valori null/undefined\n        if (aValue === null || aValue === undefined) return 1;\n        if (bValue === null || bValue === undefined) return -1;\n        \n        // Ordinamento per date\n        if (aValue instanceof Date || bValue instanceof Date) {\n          const aDate = new Date(aValue);\n          const bDate = new Date(bValue);\n          return state.sortConfig.direction === 'asc' \n            ? aDate.getTime() - bDate.getTime()\n            : bDate.getTime() - aDate.getTime();\n        }\n        \n        // Ordinamento per stringhe\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          return state.sortConfig.direction === 'asc'\n            ? aValue.localeCompare(bValue)\n            : bValue.localeCompare(aValue);\n        }\n        \n        // Ordinamento per numeri\n        if (typeof aValue === 'number' && typeof bValue === 'number') {\n          return state.sortConfig.direction === 'asc'\n            ? aValue - bValue\n            : bValue - aValue;\n        }\n        \n        // Fallback per altri tipi\n        const aStr = String(aValue);\n        const bStr = String(bValue);\n        return state.sortConfig.direction === 'asc'\n          ? aStr.localeCompare(bStr)\n          : bStr.localeCompare(aStr);\n      });\n    }\n\n    return filteredData;\n  }, [state.searchTerm, state.filters, state.sortConfig]);\n\n  // Statistiche sui filtri\n  const filterStats = useMemo(() => {\n    const activeFiltersCount = Object.keys(state.filters).filter(\n      key => state.filters[key] !== null && state.filters[key] !== undefined && state.filters[key] !== ''\n    ).length;\n    \n    return {\n      hasSearchTerm: Boolean(state.searchTerm),\n      activeFiltersCount,\n      hasActiveFilters: activeFiltersCount > 0 || Boolean(state.searchTerm),\n      isDefaultSort: state.sortConfig.field === defaultSort.field && \n                     state.sortConfig.direction === defaultSort.direction\n    };\n  }, [state.searchTerm, state.filters, state.sortConfig, defaultSort]);\n\n  const actions: GDPRFiltersActions = {\n    setSearchTerm,\n    setFilter,\n    clearFilter,\n    clearAllFilters,\n    setSortConfig,\n    toggleAdvancedFilters,\n    resetFilters\n  };\n\n  return {\n    // Stato\n    searchTerm: state.searchTerm,\n    filters: state.filters,\n    sortConfig: state.sortConfig,\n    showAdvancedFilters: state.showAdvancedFilters,\n    \n    // Azioni\n    ...actions,\n    \n    // Funzioni di utilità\n    applyFilters,\n    filterStats,\n    \n    // Configurazione\n    filterConfigs,\n    enableAdvancedFilters\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useGDPRPermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useTableColumns.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[426,429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[426,429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[439,442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[439,442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[680,683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[680,683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1313,1316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1313,1316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1351,1354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1351,1354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1391,1394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1391,1394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1431,1434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1431,1434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4334,4337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4334,4337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4372,4375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4372,4375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4412,4415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4412,4415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4452,4455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4452,4455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6412,6415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6412,6415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useMemo } from 'react';\nimport { Button } from '../../../components/ui/button';\nimport { Eye, Edit, Trash2, Download } from 'lucide-react';\nimport { GDPRPermissions } from '../types';\n\nexport interface ColumnConfig {\n  key: string;\n  label: string;\n  sortable?: boolean;\n  filterable?: boolean;\n  width?: number;\n  minWidth?: number;\n  maxWidth?: number;\n  hidden?: boolean;\n  render?: (value: any, entity: any) => React.ReactNode;\n}\n\nexport interface ActionConfig {\n  view?: boolean;\n  edit?: boolean;\n  delete?: boolean;\n  export?: boolean;\n  custom?: Array<{\n    key: string;\n    label: string;\n    icon?: React.ReactNode;\n    onClick: (entity: any) => void;\n    permission?: string;\n  }>;\n}\n\nexport interface ColumnState {\n  columns: ColumnConfig[];\n  hiddenColumns: Set<string>;\n  columnOrder: string[];\n  sortColumn: string | null;\n  sortDirection: 'asc' | 'desc';\n}\n\nexport interface ColumnActions {\n  toggleColumnVisibility: (columnKey: string) => void;\n  reorderColumns: (newOrder: string[]) => void;\n  setSorting: (column: string | null, direction?: 'asc' | 'desc') => void;\n  resetColumns: () => void;\n  getVisibleColumns: () => ColumnConfig[];\n  createActionColumn: (\n    actions: ActionConfig,\n    permissions: GDPRPermissions,\n    handlers: {\n      onView?: (entity: any) => void;\n      onEdit?: (entity: any) => void;\n      onDelete?: (entity: any) => void;\n      onExport?: (entity: any) => void;\n    }\n  ) => ColumnConfig;\n}\n\n/**\n * Hook per la gestione delle colonne della tabella GDPR\n * Centralizza la logica di visualizzazione, ordinamento e azioni\n */\nexport function useTableColumns(\n  initialColumns: ColumnConfig[]\n): [ColumnState, ColumnActions] {\n  \n  // Stati per le colonne\n  const [hiddenColumns, setHiddenColumns] = useState<Set<string>>(\n    new Set(initialColumns.filter(col => col.hidden).map(col => col.key))\n  );\n  const [columnOrder, setColumnOrder] = useState<string[]>(\n    initialColumns.map(col => col.key)\n  );\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  // Colonne processate con stato corrente\n  const processedColumns = useMemo(() => {\n    return initialColumns.map(col => ({\n      ...col,\n      hidden: hiddenColumns.has(col.key)\n    }));\n  }, [initialColumns, hiddenColumns]);\n\n  // Toggle visibilità colonna\n  const toggleColumnVisibility = useCallback((columnKey: string) => {\n    setHiddenColumns(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(columnKey)) {\n        newSet.delete(columnKey);\n      } else {\n        newSet.add(columnKey);\n      }\n      return newSet;\n    });\n  }, []);\n\n  // Riordina colonne\n  const reorderColumns = useCallback((newOrder: string[]) => {\n    setColumnOrder(newOrder);\n  }, []);\n\n  // Gestione ordinamento\n  const setSorting = useCallback((column: string | null, direction?: 'asc' | 'desc') => {\n    if (column === null) {\n      setSortColumn(null);\n      setSortDirection('asc');\n      return;\n    }\n\n    if (column === sortColumn) {\n      // Se è la stessa colonna, cambia direzione\n      const newDirection = direction || (sortDirection === 'asc' ? 'desc' : 'asc');\n      setSortDirection(newDirection);\n    } else {\n      // Nuova colonna\n      setSortColumn(column);\n      setSortDirection(direction || 'asc');\n    }\n  }, [sortColumn, sortDirection]);\n\n  // Reset colonne allo stato iniziale\n  const resetColumns = useCallback(() => {\n    setHiddenColumns(new Set(initialColumns.filter(col => col.hidden).map(col => col.key)));\n    setColumnOrder(initialColumns.map(col => col.key));\n    setSortColumn(null);\n    setSortDirection('asc');\n  }, [initialColumns]);\n\n  // Ottieni colonne visibili nell'ordine corretto\n  const getVisibleColumns = useCallback((): ColumnConfig[] => {\n    const orderedColumns: ColumnConfig[] = [];\n    \n    for (const key of columnOrder) {\n      const col = processedColumns.find(col => col.key === key);\n      if (col && !hiddenColumns.has(col.key)) {\n        orderedColumns.push(col);\n      }\n    }\n    \n    return orderedColumns;\n  }, [columnOrder, processedColumns, hiddenColumns]);\n\n  // Crea colonna delle azioni\n  const createActionColumn = useCallback((\n    actions: ActionConfig,\n    permissions: GDPRPermissions,\n    handlers: {\n      onView?: (entity: any) => void;\n      onEdit?: (entity: any) => void;\n      onDelete?: (entity: any) => void;\n      onExport?: (entity: any) => void;\n    }\n  ): ColumnConfig => {\n    return {\n      key: 'actions',\n      label: 'Azioni',\n      sortable: false,\n      filterable: false,\n      width: 120,\n      render: (_, entity) => (\n        <div className=\"flex items-center gap-1\">\n          {/* Visualizza */}\n          {actions.view && permissions?.read && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handlers.onView && handlers.onView(entity)}\n              title=\"Visualizza\"\n            >\n              <Eye className=\"h-4 w-4\" />\n            </Button>\n          )}\n          \n          {/* Modifica */}\n          {actions.edit && permissions?.update && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handlers.onEdit && handlers.onEdit(entity)}\n              title=\"Modifica\"\n            >\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n          )}\n          \n          {/* Elimina */}\n          {actions.delete && permissions?.delete && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handlers.onDelete && handlers.onDelete(entity)}\n              title=\"Elimina\"\n              className=\"text-red-600 hover:text-red-700\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          )}\n          \n          {/* Esporta */}\n          {actions.export && permissions?.export && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handlers.onExport && handlers.onExport(entity)}\n              title=\"Esporta\"\n            >\n              <Download className=\"h-4 w-4\" />\n            </Button>\n          )}\n          \n          {/* Azioni personalizzate */}\n          {actions.custom && actions.custom.map(customAction => {\n             const hasPermission = customAction.permission \n               ? (permissions as any)[customAction.permission] || false\n               : true;\n              \n            if (!hasPermission) return null;\n            \n            return (\n              <Button\n                key={customAction.key}\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => customAction.onClick(entity)}\n                title={customAction.label}\n              >\n                {customAction.icon || customAction.label}\n              </Button>\n            );\n          })}\n        </div>\n      )\n    };\n  }, []);\n\n  // Stato combinato\n  const state: ColumnState = {\n    columns: processedColumns,\n    hiddenColumns,\n    columnOrder,\n    sortColumn,\n    sortDirection\n  };\n\n  // Azioni combinate\n  const actions: ColumnActions = {\n    toggleColumnVisibility,\n    reorderColumns,\n    setSorting,\n    resetColumns,\n    getVisibleColumns,\n    createActionColumn\n  };\n\n  return [state, actions];\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/hooks/useViewPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/types/entity.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[462,465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[462,465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[678,681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[678,681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[813,816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[813,816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[964,967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[964,967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1028,1031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1028,1031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1214,1217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1214,1217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2679,2682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2679,2682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3068,3071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3068,3071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3620,3623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3620,3623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3889,3892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3889,3892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4093,4096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4093,4096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4612,4615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4612,4615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4664,4667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4664,4667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Entity Types - Tipi per entità generiche\n * \n * Definisce i tipi base per le entità gestite dal template GDPR.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\n/**\n * Entità base con campi comuni\n */\nexport interface BaseEntity {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  deletedAt?: Date | null;\n  createdBy?: string;\n  updatedBy?: string;\n  deletedBy?: string;\n}\n\n/**\n * Configurazione colonna entità\n */\nexport interface EntityColumn<T = any> {\n  key: keyof T | string;\n  label: string;\n  sortable?: boolean;\n  filterable?: boolean;\n  required?: boolean;\n  sensitive?: boolean;\n  width?: string;\n  align?: 'left' | 'center' | 'right';\n  render?: (value: any, entity: T) => React.ReactNode;\n  className?: string;\n}\n\n/**\n * Configurazione filtro entità\n */\nexport interface EntityFilter<T = any> {\n  key: keyof T | string;\n  label: string;\n  type: 'text' | 'select' | 'date' | 'number' | 'boolean' | 'multiselect';\n  options?: Array<{ value: any; label: string }>;\n  placeholder?: string;\n  defaultValue?: any;\n  validation?: {\n    required?: boolean;\n    min?: number;\n    max?: number;\n    pattern?: RegExp;\n  };\n}\n\n/**\n * Configurazione azione entità\n */\nexport interface EntityAction<T = any> {\n  key: string;\n  label: string;\n  icon?: string;\n  variant?: 'primary' | 'secondary' | 'danger' | 'warning' | 'success';\n  requiresConfirm?: boolean;\n  confirmMessage?: string;\n  requiresPermission?: string[];\n  requiresConsent?: boolean;\n  disabled?: (entity: T) => boolean;\n  visible?: (entity: T) => boolean;\n  onClick: (entity: T) => void | Promise<void>;\n}\n\n/**\n * Configurazione permessi entità\n */\nexport interface EntityPermissions {\n  create: string[];\n  read: string[];\n  update: string[];\n  delete: string[];\n  export: string[];\n  import: string[];\n  viewSensitive?: string[];\n  bulkOperations?: string[];\n}\n\n/**\n * Configurazione UI entità\n */\nexport interface EntityUIConfig {\n  hasViewModeToggle: boolean;\n  hasImportExport: boolean;\n  hasBatchOperations: boolean;\n  hasAdvancedFilters: boolean;\n  hasColumnSelector: boolean;\n  hasSearch: boolean;\n  defaultViewMode: 'table' | 'grid';\n  pageSize: number;\n  enablePagination: boolean;\n  enableSorting: boolean;\n  enableFiltering: boolean;\n  enableSelection: boolean;\n  compactMode?: boolean;\n  stickyHeader?: boolean;\n}\n\n/**\n * Configurazione API endpoints\n */\nexport interface EntityAPIConfig {\n  baseUrl: string;\n  endpoints: {\n    list: string;\n    create: string;\n    update: string;\n    delete: string;\n    export?: string;\n    import?: string;\n    bulkDelete?: string;\n    bulkUpdate?: string;\n  };\n  headers?: Record<string, string>;\n  timeout?: number;\n  defaultOptions?: Record<string, any>;\n}\n\n/**\n * Stato di caricamento entità\n */\nexport interface EntityLoadingState {\n  loading: boolean;\n  creating: boolean;\n  updating: boolean;\n  deleting: boolean;\n  exporting: boolean;\n  importing: boolean;\n  error: string | null;\n  success: string | null;\n}\n\n/**\n * Stato filtri entità\n */\nexport interface EntityFiltersState {\n  searchTerm: string;\n  activeFilters: Record<string, any>;\n  sortKey?: string;\n  sortDirection?: 'asc' | 'desc';\n  currentPage: number;\n  pageSize: number;\n}\n\n/**\n * Stato selezione entità\n */\nexport interface EntitySelectionState {\n  selectedIds: string[];\n  selectAll: boolean;\n  selectionMode: boolean;\n}\n\n/**\n * Configurazione vista entità\n */\nexport interface EntityViewConfig {\n  viewMode: 'table' | 'grid';\n  hiddenColumns: string[];\n  columnOrder: Record<string, number>;\n  columnWidths: Record<string, string>;\n}\n\n/**\n * Risultato operazione entità\n */\nexport interface EntityOperationResult<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  errors?: string[];\n  message?: string;\n  affectedCount?: number;\n  operation?: string;\n}\n\n/**\n * Parametri ricerca entità\n */\nexport interface EntitySearchParams {\n  search?: string;\n  filters?: Record<string, any>;\n  sort?: string;\n  order?: 'asc' | 'desc';\n  page?: number;\n  limit?: number;\n  include?: string[];\n  exclude?: string[];\n}\n\n/**\n * Risposta lista entità\n */\nexport interface EntityListResponse<T = any> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrev: boolean;\n}\n\n/**\n * Metadati entità\n */\nexport interface EntityMetadata {\n  totalCount: number;\n  filteredCount: number;\n  selectedCount: number;\n  lastUpdated: Date;\n  version: string;\n}\n\n/**\n * Configurazione validazione entità\n */\nexport interface EntityValidationConfig {\n  required: string[];\n  unique: string[];\n  patterns: Record<string, RegExp>;\n  customValidators: Record<string, (value: any) => boolean | string>;\n  rules?: Record<string, any>;\n  strictMode?: boolean;\n}\n\n/**\n * Configurazione export entità\n */\nexport interface EntityExportConfig {\n  formats: Array<'csv' | 'xlsx' | 'pdf' | 'json'>;\n  includeHeaders: boolean;\n  includeMetadata: boolean;\n  dateFormat: string;\n  filename?: string;\n  columns?: string[];\n}\n\n/**\n * Configurazione import entità\n */\nexport interface EntityImportConfig {\n  supportedFormats: Array<'csv' | 'xlsx' | 'json'>;\n  requiredColumns: string[];\n  optionalColumns: string[];\n  validateOnImport: boolean;\n  batchSize: number;\n  skipDuplicates: boolean;\n  updateExisting: boolean;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/types/gdpr.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3663,3666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3663,3666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3680,3683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3680,3683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3720,3723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3720,3723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3729,3732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3729,3732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3852,3855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3852,3855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4216,4219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4216,4219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4449,4452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4449,4452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5703,5706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5703,5706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":301,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6695,6698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6695,6698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7287,7290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7287,7290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":336,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7506,7509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7506,7509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":342,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7593,7596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7593,7596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":349,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7776,7779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7776,7779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Types - Tipi per conformità GDPR\n * \n * Definisce i tipi specifici per la gestione della conformità GDPR\n * nel template di pagina.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\n/**\n * Livelli di audit GDPR\n */\nexport type GDPRAuditLevel = 'minimal' | 'standard' | 'comprehensive';\n\n/**\n * Azioni audit GDPR\n */\nexport type GDPRAuditAction = \n  | 'CREATE'\n  | 'READ'\n  | 'UPDATE'\n  | 'DELETE'\n  | 'EXPORT'\n  | 'IMPORT'\n  | 'SEARCH'\n  | 'FILTER'\n  | 'VIEW'\n  | 'BULK_DELETE'\n  | 'BULK_UPDATE'\n  | 'ANONYMIZE'\n  | 'RESTORE';\n\n/**\n * Tipi di consenso GDPR\n */\nexport type GDPRConsentType = \n  | 'DATA_PROCESSING'\n  | 'DATA_STORAGE'\n  | 'DATA_SHARING'\n  | 'MARKETING'\n  | 'ANALYTICS'\n  | 'PROFILING'\n  | 'AUTOMATED_DECISION';\n\n/**\n * Configurazione GDPR principale\n */\nexport interface GDPRConfig {\n  /** Richiede consenso esplicito per le operazioni */\n  requiresConsent: boolean;\n  \n  /** Livello di audit logging */\n  auditLevel: GDPRAuditLevel;\n  \n  /** Giorni di retention dei dati */\n  dataRetentionDays: number;\n  \n  /** Campi considerati sensibili */\n  sensitiveFields: string[];\n  \n  /** Campi da anonimizzare in caso di cancellazione */\n  anonymizationFields: string[];\n  \n  /** Campi che devono essere crittografati */\n  encryptedFields: string[];\n  \n  /** Configurazione consensi specifici */\n  consentConfig?: GDPRConsentConfig;\n  \n  /** Configurazione audit avanzata */\n  auditConfig?: GDPRAuditConfig;\n  \n  /** Configurazione data minimization */\n  dataMinimizationConfig?: GDPRDataMinimizationConfig;\n}\n\n/**\n * Configurazione consensi GDPR\n */\nexport interface GDPRConsentConfig {\n  /** Tipi di consenso richiesti */\n  requiredConsents: GDPRConsentType[];\n  \n  /** Consensi opzionali */\n  optionalConsents: GDPRConsentType[];\n  \n  /** Durata validità consenso (giorni) */\n  consentValidityDays: number;\n  \n  /** Richiede riconferma periodica */\n  requiresReconfirmation: boolean;\n  \n  /** Intervallo riconferma (giorni) */\n  reconfirmationIntervalDays?: number;\n  \n  /** Consenso granulare per operazioni */\n  granularConsents: Record<GDPRAuditAction, GDPRConsentType[]>;\n}\n\n/**\n * Configurazione audit GDPR\n */\nexport interface GDPRAuditConfig {\n  /** Azioni da loggare per livello minimal */\n  minimalActions: GDPRAuditAction[];\n  \n  /** Azioni da loggare per livello standard */\n  standardActions: GDPRAuditAction[];\n  \n  /** Azioni da loggare per livello comprehensive */\n  comprehensiveActions: GDPRAuditAction[];\n  \n  /** Include stack trace negli errori */\n  includeStackTrace: boolean;\n  \n  /** Include user agent */\n  includeUserAgent: boolean;\n  \n  /** Include IP address */\n  includeIpAddress: boolean;\n  \n  /** Include session ID */\n  includeSessionId: boolean;\n  \n  /** Retention giorni log audit */\n  auditLogRetentionDays: number;\n}\n\n/**\n * Configurazione data minimization\n */\nexport interface GDPRDataMinimizationConfig {\n  /** Ruoli che possono vedere dati sensibili */\n  sensitiveDataRoles: string[];\n  \n  /** Mascheramento dati per ruoli non autorizzati */\n  maskingPattern: string;\n  \n  /** Campi sempre visibili indipendentemente dal ruolo */\n  alwaysVisibleFields: string[];\n  \n  /** Campi mai visibili (solo admin) */\n  adminOnlyFields: string[];\n  \n  /** Configurazione mascheramento per campo */\n  fieldMaskingConfig: Record<string, {\n    pattern: string;\n    showFirst?: number;\n    showLast?: number;\n    replacement?: string;\n  }>;\n}\n\n/**\n * Entry log audit GDPR\n */\nexport interface GDPRAuditLogEntry {\n  id: string;\n  personId: string;\n  action: GDPRAuditAction;\n  entityType: string;\n  entityId?: string;\n  timestamp: Date;\n  ipAddress?: string;\n  userAgent?: string;\n  sessionId?: string;\n  oldData?: any;\n  newData?: any;\n  changes?: Record<string, { from: any; to: any }>;\n  reason?: string;\n  success: boolean;\n  errorMessage?: string;\n  stackTrace?: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Consenso GDPR\n */\nexport interface GDPRConsent {\n  id: string;\n  personId: string;\n  consentType: GDPRConsentType;\n  granted: boolean;\n  grantedAt?: Date;\n  revokedAt?: Date;\n  expiresAt?: Date;\n  version: string;\n  ipAddress?: string;\n  userAgent?: string;\n  purpose: string;\n  legalBasis: string;\n  isActive: boolean;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Richiesta consenso GDPR\n */\nexport interface GDPRConsentRequest {\n  personId: string;\n  consentTypes: GDPRConsentType[];\n  purpose: string;\n  legalBasis: string;\n  expirationDays?: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Risposta verifica consenso\n */\nexport interface GDPRConsentVerification {\n  hasConsent: boolean;\n  missingConsents: GDPRConsentType[];\n  expiredConsents: GDPRConsentType[];\n  validConsents: GDPRConsentType[];\n  requiresReconfirmation: GDPRConsentType[];\n}\n\n/**\n * Configurazione Right to be Forgotten\n */\nexport interface GDPRRightToBeForgottenConfig {\n  /** Abilita soft delete */\n  enableSoftDelete: boolean;\n  \n  /** Giorni prima della cancellazione definitiva */\n  hardDeleteAfterDays: number;\n  \n  /** Campi da anonimizzare invece di cancellare */\n  anonymizeInsteadOfDelete: string[];\n  \n  /** Mantieni relazioni essenziali */\n  preserveEssentialRelations: boolean;\n  \n  /** Notifica altri sistemi della cancellazione */\n  notifyExternalSystems: boolean;\n  \n  /** Endpoint per notifiche esterne */\n  externalNotificationEndpoints: string[];\n}\n\n/**\n * Richiesta cancellazione GDPR\n */\nexport interface GDPRDeletionRequest {\n  id: string;\n  personId: string;\n  requestedBy: string;\n  requestedAt: Date;\n  reason: string;\n  status: 'PENDING' | 'APPROVED' | 'REJECTED' | 'COMPLETED';\n  approvedBy?: string;\n  approvedAt?: Date;\n  completedAt?: Date;\n  rejectionReason?: string;\n  affectedEntities: string[];\n  metadata?: Record<string, any>;\n}\n\n/**\n * Configurazione Data Portability\n */\nexport interface GDPRDataPortabilityConfig {\n  /** Formati supportati per export */\n  supportedFormats: Array<'json' | 'xml' | 'csv' | 'pdf'>;\n  \n  /** Include metadati nell'export */\n  includeMetadata: boolean;\n  \n  /** Include log audit nell'export */\n  includeAuditLog: boolean;\n  \n  /** Crittografa export */\n  encryptExport: boolean;\n  \n  /** Password per crittografia */\n  encryptionPassword?: string;\n  \n  /** Scadenza link download (ore) */\n  downloadLinkExpirationHours: number;\n}\n\n/**\n * Richiesta portabilità dati\n */\nexport interface GDPRDataPortabilityRequest {\n  id: string;\n  personId: string;\n  requestedBy: string;\n  requestedAt: Date;\n  format: 'json' | 'xml' | 'csv' | 'pdf';\n  includeMetadata: boolean;\n  includeAuditLog: boolean;\n  status: 'PENDING' | 'PROCESSING' | 'READY' | 'DOWNLOADED' | 'EXPIRED';\n  downloadUrl?: string;\n  expiresAt?: Date;\n  downloadedAt?: Date;\n  fileSize?: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Configurazione Privacy Impact Assessment\n */\nexport interface GDPRPrivacyImpactConfig {\n  /** Richiede PIA per operazioni ad alto rischio */\n  requiresPIA: boolean;\n  \n  /** Soglia rischio per PIA automatica */\n  riskThreshold: number;\n  \n  /** Fattori di rischio */\n  riskFactors: {\n    largescaleProcessing: number;\n    sensitiveData: number;\n    publiclyAccessible: number;\n    vulnerableSubjects: number;\n    innovativeTechnology: number;\n    preventRightsExercise: number;\n  };\n}\n\n/**\n * Utility type per operazioni GDPR-aware\n */\nexport interface GDPRAwareOperation<T = any> {\n  operation: GDPRAuditAction;\n  entityType: string;\n  entityId?: string;\n  data?: T;\n  reason?: string;\n  requiresConsent?: GDPRConsentType[];\n  riskLevel?: 'LOW' | 'MEDIUM' | 'HIGH';\n  metadata?: Record<string, any>;\n}\n\n/**\n * Risultato operazione GDPR\n */\nexport interface GDPROperationResult<T = any> {\n  success: boolean;\n  data?: T;\n  auditLogId?: string;\n  consentVerification?: GDPRConsentVerification;\n  warnings?: string[];\n  errors?: string[];\n  metadata?: Record<string, any>;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[522,525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[522,525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[873,876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[873,876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[924,927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[924,927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[963,966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[963,966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3282,3285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3282,3285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3310,3313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3310,3313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3442,3445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3442,3445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3970,3973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3970,3973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3980,3983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3980,3983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4518,4521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4518,4521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6767,6770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6767,6770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6992,6995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6992,6995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":282,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7026,7029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7026,7029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":368,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9278,9281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9278,9281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode } from 'react';\n\n// ============================================================================\n// TIPI BASE\n// ============================================================================\n\nexport interface BaseEntity {\n  id: string;\n  createdAt?: string | Date;\n  updatedAt?: string | Date;\n  deletedAt?: string | Date;\n}\n\nexport interface EntityField {\n  key: string;\n  label: string;\n  type?: 'text' | 'email' | 'phone' | 'date' | 'boolean' | 'number' | 'select' | 'textarea';\n  formatter?: (value: any, entity: any) => ReactNode;\n  sortable?: boolean;\n  filterable?: boolean;\n  required?: boolean;\n  placeholder?: string;\n  options?: { value: string; label: string }[];\n}\n\nexport interface EntityAction {\n  key: string;\n  label: string;\n  icon?: ReactNode;\n  variant?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';\n  onClick: (entity: any) => void | Promise<void>;\n  visible?: (entity: any) => boolean;\n  disabled?: (entity: any) => boolean;\n  requiresPermission?: string[];\n}\n\n// ============================================================================\n// CONFIGURAZIONE TEMPLATE GDPR\n// ============================================================================\n\nexport interface GDPREntityTemplateProps<T extends BaseEntity = BaseEntity> {\n  // Configurazione base\n  entityName: string;\n  entityDisplayName: string;\n  entityDisplayNamePlural: string;\n  apiEndpoint: string;\n  \n  // Configurazione campi\n  fields: EntityField[];\n  additionalFields?: EntityField[];\n  \n  // Configurazione azioni\n  actions?: EntityAction[];\n  bulkActions?: EntityAction[];\n  \n  // Configurazione UI\n  enableSearch?: boolean;\n  enableFilters?: boolean;\n  enableExport?: boolean;\n  enableImport?: boolean;\n  enableBulkEdit?: boolean;\n  enableColumnSelector?: boolean;\n  enableViewModeToggle?: boolean;\n  \n  // Configurazione vista\n  defaultViewMode?: 'table' | 'grid';\n  defaultPageSize?: number;\n  defaultSortField?: string;\n  defaultSortDirection?: 'asc' | 'desc';\n  \n  // Configurazione permessi\n  permissions?: {\n    read: string[];\n    create: string[];\n    update: string[];\n    delete: string[];\n    export?: string[];\n    import?: string[];\n  };\n  \n  // Configurazione GDPR\n  gdprConfig?: {\n    enableAuditLog?: boolean;\n    enableConsentTracking?: boolean;\n    dataRetentionDays?: number;\n    anonymizeOnDelete?: boolean;\n  };\n  \n  // Callback personalizzati\n  onEntitySelect?: (entity: T) => void;\n  onEntityCreate?: () => void;\n  onEntityEdit?: (entity: T) => void;\n  onEntityDelete?: (id: string) => Promise<void>;\n  onEntityExport?: (entities: T[]) => void;\n  onDataLoad?: (data: T[]) => void;\n  \n  // Configurazione avanzata\n  customFilters?: FilterConfig[];\n  customColumns?: ColumnConfig[];\n  customToolbarActions?: ReactNode;\n  customEmptyState?: ReactNode;\n  customLoadingState?: ReactNode;\n  customErrorState?: ReactNode;\n}\n\n// ============================================================================\n// CONFIGURAZIONE FILTRI\n// ============================================================================\n\nexport interface FilterConfig {\n  key: string;\n  label: string;\n  type: 'text' | 'select' | 'date' | 'boolean' | 'number' | 'dateRange';\n  options?: { value: string; label: string }[];\n  placeholder?: string;\n  defaultValue?: any;\n  validation?: (value: any) => string | null;\n  dependencies?: string[]; // Altri filtri da cui dipende\n}\n\nexport interface FilterState {\n  [key: string]: any;\n}\n\nexport interface SortConfig {\n  field: string;\n  direction: 'asc' | 'desc';\n}\n\n// ============================================================================\n// CONFIGURAZIONE COLONNE\n// ============================================================================\n\nexport interface ColumnConfig {\n  key: string;\n  label: string;\n  sortable?: boolean;\n  filterable?: boolean;\n  width?: number;\n  minWidth?: number;\n  maxWidth?: number;\n  resizable?: boolean;\n  visible?: boolean;\n  order?: number;\n  formatter?: (value: any, row: any) => ReactNode;\n  className?: string;\n  headerClassName?: string;\n  cellClassName?: string;\n  align?: 'left' | 'center' | 'right';\n  sticky?: boolean;\n}\n\nexport interface ColumnState {\n  visible: boolean;\n  width?: number;\n  order: number;\n}\n\n// ============================================================================\n// CONFIGURAZIONE PERMESSI\n// ============================================================================\n\nexport interface PermissionConfig {\n  resource: string;\n  action: string;\n  conditions?: Record<string, any>;\n}\n\nexport interface EntityPermissions {\n  read: string[];\n  create: string[];\n  update: string[];\n  delete: string[];\n  export?: string[];\n  import?: string[];\n}\n\nexport interface GDPRPermissions extends EntityPermissions {\n  viewAuditLog?: string[];\n  manageConsents?: string[];\n  anonymizeData?: string[];\n  exportPersonalData?: string[];\n}\n\n// ============================================================================\n// CONFIGURAZIONE OPERAZIONI\n// ============================================================================\n\nexport interface EntityOperationResult<T> {\n  success: boolean;\n  data?: T;\n  errors?: string[];\n  warnings?: string[];\n  operation: string;\n  timestamp?: Date;\n}\n\nexport interface BatchOperationResult<T> {\n  success: boolean;\n  processed: number;\n  failed: number;\n  results: EntityOperationResult<T>[];\n  errors: string[];\n}\n\nexport interface EntityAPIConfig {\n  endpoints: {\n    list: string;\n    create: string;\n    read: string;\n    update: string;\n    delete: string;\n    export?: string;\n    import?: string;\n  };\n  defaultOptions?: RequestInit;\n  pagination?: {\n    enabled: boolean;\n    defaultPageSize: number;\n    maxPageSize: number;\n  };\n}\n\n// ============================================================================\n// CONFIGURAZIONE GDPR\n// ============================================================================\n\nexport interface GDPRConfig {\n  consent?: {\n    required: boolean;\n    types: GDPRConsentType[];\n    retentionDays: number;\n  };\n  audit?: {\n    enabled: boolean;\n    logLevel: 'basic' | 'detailed' | 'full';\n    retentionDays: number;\n  };\n  anonymization?: {\n    enabled: boolean;\n    fields: string[];\n    method: 'hash' | 'random' | 'remove';\n  };\n  dataRetention?: {\n    enabled: boolean;\n    defaultDays: number;\n    policies: Record<string, number>;\n  };\n}\n\nexport type GDPRConsentType = \n  | 'data_processing'\n  | 'marketing'\n  | 'analytics'\n  | 'cookies'\n  | 'third_party_sharing'\n  | 'automated_decision_making';\n\nexport interface ConsentRecord {\n  id: string;\n  personId: string;\n  consentType: GDPRConsentType;\n  granted: boolean;\n  grantedAt?: Date;\n  revokedAt?: Date;\n  expiresAt?: Date;\n  purpose: string;\n  legalBasis: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface AuditLogEntry {\n  id: string;\n  entityType: string;\n  entityId?: string;\n  operation: string;\n  userId: string;\n  timestamp: Date;\n  ipAddress?: string;\n  userAgent?: string;\n  data?: Record<string, any>;\n  metadata?: Record<string, any>;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n}\n\n// ============================================================================\n// CONFIGURAZIONE UI\n// ============================================================================\n\nexport interface ViewModeConfig {\n  mode: 'table' | 'grid';\n  storageKey?: string;\n}\n\nexport interface PaginationConfig {\n  page: number;\n  pageSize: number;\n  total: number;\n  showSizeChanger?: boolean;\n  showQuickJumper?: boolean;\n  pageSizeOptions?: number[];\n}\n\nexport interface SearchConfig {\n  placeholder?: string;\n  debounceMs?: number;\n  minLength?: number;\n  searchFields?: string[];\n}\n\nexport interface ExportConfig {\n  formats: ('csv' | 'xlsx' | 'json' | 'pdf')[];\n  filename?: string;\n  includeHeaders?: boolean;\n  selectedOnly?: boolean;\n}\n\nexport interface ImportConfig {\n  formats: ('csv' | 'xlsx' | 'json')[];\n  maxFileSize?: number;\n  validateHeaders?: boolean;\n  allowPartialImport?: boolean;\n  duplicateHandling?: 'skip' | 'update' | 'error';\n}\n\n// ============================================================================\n// STATI DELL'APPLICAZIONE\n// ============================================================================\n\nexport interface LoadingState {\n  loading: boolean;\n  saving: boolean;\n  deleting: boolean;\n  exporting: boolean;\n  importing: boolean;\n}\n\nexport interface ErrorState {\n  error: string | null;\n  fieldErrors: Record<string, string>;\n  validationErrors: string[];\n}\n\nexport interface SelectionState {\n  selectedIds: string[];\n  selectAll: boolean;\n  selectionMode: boolean;\n}\n\n// ============================================================================\n// EVENTI E CALLBACK\n// ============================================================================\n\nexport interface EntityEventHandlers<T> {\n  onSelect?: (entity: T) => void;\n  onCreate?: () => void;\n  onEdit?: (entity: T) => void;\n  onDelete?: (id: string) => Promise<void>;\n  onBulkDelete?: (ids: string[]) => Promise<void>;\n  onExport?: (entities: T[]) => void;\n  onImport?: (file: File) => Promise<void>;\n  onRefresh?: () => void;\n  onError?: (error: Error) => void;\n}\n\nexport interface FilterEventHandlers {\n  onSearchChange?: (term: string) => void;\n  onFilterChange?: (key: string, value: any) => void;\n  onSortChange?: (config: SortConfig) => void;\n  onFiltersReset?: () => void;\n}\n\nexport interface ColumnEventHandlers {\n  onColumnResize?: (key: string, width: number) => void;\n  onColumnReorder?: (newOrder: string[]) => void;\n  onColumnVisibilityChange?: (key: string, visible: boolean) => void;\n  onColumnsReset?: () => void;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/types/template.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/utils/config.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/utils/gdpr.utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":326,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9123,9126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9123,9126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9279,9282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9279,9282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GDPR Utilities - Utility per gestione GDPR\n * \n * Collezione di utility per la gestione della conformità GDPR,\n * inclusi validatori, trasformatori e helper vari.\n * \n * @version 1.0\n * @date 30 Dicembre 2024\n */\n\nimport {\n  GDPRConsentType,\n  GDPRConsent,\n  GDPRAuditAction,\n  GDPRConfig\n} from '../types/gdpr.types';\nimport { BaseEntity } from '../types/entity.types';\n\n/**\n * Configurazione per la minimizzazione dei dati\n */\nexport interface DataMinimizationRule {\n  field: string;\n  condition?: (value: unknown, entity: unknown) => boolean;\n  action: 'remove' | 'anonymize' | 'pseudonymize' | 'encrypt';\n  replacement?: unknown;\n}\n\n/**\n * Risultato validazione GDPR\n */\nexport interface GDPRValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  suggestions: string[];\n}\n\n/**\n * Metadati per l'anonimizzazione\n */\nexport interface AnonymizationMetadata {\n  originalFields: string[];\n  anonymizedFields: string[];\n  method: 'hash' | 'random' | 'pattern' | 'removal';\n  timestamp: Date;\n  reversible: boolean;\n}\n\n/**\n * Configurazione esportazione GDPR\n */\nexport interface GDPRExportConfig {\n  includeMetadata: boolean;\n  includeAuditLog: boolean;\n  format: 'json' | 'xml' | 'csv';\n  encryption?: {\n    enabled: boolean;\n    algorithm: string;\n    keyId: string;\n  };\n  watermark?: {\n    enabled: boolean;\n    text: string;\n    position: 'header' | 'footer';\n  };\n}\n\n/**\n * Classe per gestione utility GDPR\n */\nexport class GDPRUtils {\n  \n  /**\n   * Valida configurazione GDPR\n   */\n  static validateGDPRConfig(config: GDPRConfig): GDPRValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const suggestions: string[] = [];\n    \n    // Validazione consent\n    if (config.consentConfig) {\n      if (!config.consentConfig.requiredConsents?.length) {\n        warnings.push('Nessun consenso richiesto configurato');\n      }\n      \n      if (!config.consentConfig.consentValidityDays || config.consentConfig.consentValidityDays < 30) {\n        warnings.push('Durata consenso troppo breve (minimo 30 giorni consigliato)');\n      }\n      \n      if (config.consentConfig.consentValidityDays && config.consentConfig.consentValidityDays > 730) {\n        suggestions.push('Durata consenso molto lunga, considera di ridurla');\n      }\n    }\n    \n    // Validazione audit\n    if (config.auditConfig) {\n      if (!config.auditConfig.auditLogRetentionDays || config.auditConfig.auditLogRetentionDays < 365) {\n        warnings.push('Periodo di retention audit troppo breve (minimo 1 anno consigliato)');\n      }\n      \n      if (!config.auditConfig.includeUserAgent && !config.auditConfig.includeIpAddress) {\n        suggestions.push('Considera di includere User-Agent o IP per audit più completo');\n      }\n    } else {\n      warnings.push('Configurazione audit non presente');\n    }\n    \n    // Validazione data minimization\n    if (config.dataMinimizationConfig) {\n      if (!config.dataMinimizationConfig.sensitiveDataRoles?.length) {\n        suggestions.push('Nessun ruolo per dati sensibili configurato');\n      }\n    } else {\n      warnings.push('Data minimization non configurata');\n    }\n    \n    // Validazione data retention\n    if (!config.dataRetentionDays || config.dataRetentionDays <= 0) {\n      errors.push('Data retention è obbligatoria per conformità GDPR');\n    } else if (config.dataRetentionDays > 2555) { // 7 anni\n      suggestions.push('Periodo di retention molto lungo, verifica necessità legale');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      suggestions\n    };\n  }\n  \n  /**\n   * Verifica se un consenso è valido\n   */\n  static isConsentValid(consent: GDPRConsent): boolean {\n    if (!consent.granted) return false;\n    if (!consent.grantedAt) return false;\n    \n    // Verifica scadenza\n    if (consent.expiresAt && new Date() > consent.expiresAt) {\n      return false;\n    }\n    \n    // Verifica revoca\n    if (consent.revokedAt) return false;\n    \n    return true;\n  }\n  \n  /**\n   * Calcola scadenza consenso\n   */\n  static calculateConsentExpiration(\n    grantedAt: Date,\n    expirationDays: number\n  ): Date {\n    const expiration = new Date(grantedAt);\n    expiration.setDate(expiration.getDate() + expirationDays);\n    return expiration;\n  }\n  \n  /**\n   * Verifica se un consenso sta per scadere\n   */\n  static isConsentExpiringSoon(\n    consent: GDPRConsent,\n    warningDays: number = 30\n  ): boolean {\n    if (!consent.expiresAt) return false;\n    \n    const warningDate = new Date();\n    warningDate.setDate(warningDate.getDate() + warningDays);\n    \n    return consent.expiresAt <= warningDate;\n  }\n  \n  /**\n   * Applica minimizzazione dati\n   */\n  static applyDataMinimization<T extends BaseEntity>(\n    entity: T,\n    rules: DataMinimizationRule[]\n  ): { minimized: T; metadata: AnonymizationMetadata } {\n    const minimized = { ...entity };\n    const originalFields: string[] = [];\n    const anonymizedFields: string[] = [];\n    \n    for (const rule of rules) {\n      const fieldValue = this.getNestedValue(minimized, rule.field);\n      \n      // Verifica condizione se presente\n      if (rule.condition && !rule.condition(fieldValue, minimized)) {\n        continue;\n      }\n      \n      originalFields.push(rule.field);\n      \n      switch (rule.action) {\n        case 'remove':\n          this.setNestedValue(minimized, rule.field, undefined);\n          anonymizedFields.push(rule.field);\n          break;\n          \n        case 'anonymize': {\n          const anonymized = this.anonymizeValue(fieldValue, rule.field);\n          this.setNestedValue(minimized, rule.field, anonymized);\n          anonymizedFields.push(rule.field);\n          break;\n        }\n          \n        case 'pseudonymize': {\n          const pseudonymized = this.pseudonymizeValue(fieldValue);\n          this.setNestedValue(minimized, rule.field, pseudonymized);\n          anonymizedFields.push(rule.field);\n          break;\n        }\n          \n        case 'encrypt': {\n          const encrypted = this.encryptValue(fieldValue);\n          this.setNestedValue(minimized, rule.field, encrypted);\n          anonymizedFields.push(rule.field);\n          break;\n        }\n      }\n    }\n    \n    const metadata: AnonymizationMetadata = {\n      originalFields,\n      anonymizedFields,\n      method: 'pattern', // Metodo misto\n      timestamp: new Date(),\n      reversible: rules.some(r => r.action === 'encrypt' || r.action === 'pseudonymize')\n    };\n    \n    return { minimized, metadata };\n  }\n  \n  /**\n   * Anonimizza un valore\n   */\n  private static anonymizeValue(value: unknown, field: string): unknown {\n    if (value === null || value === undefined) return value;\n    \n    const str = String(value);\n    \n    // Pattern specifici per diversi tipi di campo\n    if (field.toLowerCase().includes('email')) {\n      const [local, domain] = str.split('@');\n      if (domain) {\n        return `${local.charAt(0)}***@${domain}`;\n      }\n    }\n    \n    if (field.toLowerCase().includes('phone') || field.toLowerCase().includes('telefono')) {\n      return str.replace(/\\d/g, '*').substring(0, str.length);\n    }\n    \n    if (field.toLowerCase().includes('name') || field.toLowerCase().includes('nome')) {\n      return str.charAt(0) + '*'.repeat(str.length - 1);\n    }\n    \n    if (field.toLowerCase().includes('address') || field.toLowerCase().includes('indirizzo')) {\n      return '*** [INDIRIZZO ANONIMIZZATO] ***';\n    }\n    \n    // Default: sostituisci con asterischi\n    if (typeof value === 'string') {\n      return '*'.repeat(Math.min(str.length, 10));\n    }\n    \n    if (typeof value === 'number') {\n      return 0;\n    }\n    \n    return '[ANONIMIZZATO]';\n  }\n  \n  /**\n   * Pseudonimizza un valore (reversibile con chiave)\n   */\n  private static pseudonymizeValue(value: unknown): string {\n    if (value === null || value === undefined) return '[NULL]';\n    \n    const str = String(value);\n    \n    // Genera hash deterministico (in produzione usare crypto sicuro)\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Converti a 32bit integer\n    }\n    \n    return `PSEUDO_${Math.abs(hash).toString(36).toUpperCase()}`;\n  }\n  \n  /**\n   * Cripta un valore (placeholder - in produzione usare crypto reale)\n   */\n  private static encryptValue(value: unknown): string {\n    if (value === null || value === undefined) return '[NULL]';\n    \n    // Placeholder per encryption reale\n    const str = String(value);\n    const encoded = btoa(str); // Base64 encoding (NON è encryption sicura!)\n    \n    return `ENC_${encoded}`;\n  }\n  \n  /**\n   * Ottieni valore nested da oggetto\n   */\n  private static getNestedValue(obj: unknown, path: string): unknown {\n    return path.split('.').reduce((current: unknown, key) => {\n      return current && typeof current === 'object' && current !== null && key in current \n        ? (current as Record<string, unknown>)[key] \n        : undefined;\n    }, obj);\n  }\n  \n  /**\n   * Imposta valore nested in oggetto\n   */\n  private static setNestedValue(obj: any, path: string, value: unknown): void {\n    const keys = path.split('.');\n    const lastKey = keys.pop()!;\n    \n    const target = keys.reduce((current: any, key) => {\n      if (!current[key] || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      return current[key];\n    }, obj);\n    \n    if (value === undefined) {\n      delete target[lastKey];\n    } else {\n      target[lastKey] = value;\n    }\n  }\n  \n  /**\n   * Genera report conformità GDPR\n   */\n  static generateComplianceReport(config: GDPRConfig): {\n    score: number;\n    status: 'compliant' | 'partial' | 'non-compliant';\n    details: {\n      category: string;\n      status: 'ok' | 'warning' | 'error';\n      message: string;\n    }[];\n  } {\n    const details: { category: string; status: 'ok' | 'warning' | 'error'; message: string }[] = [];\n    let score = 0;\n    \n    // Verifica consent management (25 punti)\n    if (config.consentConfig) {\n      score += 15;\n      details.push({\n        category: 'Consent Management',\n        status: 'ok',\n        message: 'Gestione consensi abilitata'\n      });\n      \n      if (config.consentConfig.requiredConsents && config.consentConfig.requiredConsents.length > 0) {\n        score += 10;\n        details.push({\n          category: 'Consent Management',\n          status: 'ok',\n          message: `${config.consentConfig.requiredConsents.length} consensi richiesti configurati`\n        });\n      } else {\n        details.push({\n          category: 'Consent Management',\n          status: 'warning',\n          message: 'Nessun consenso richiesto configurato'\n        });\n      }\n    } else {\n      details.push({\n        category: 'Consent Management',\n        status: 'error',\n        message: 'Gestione consensi non abilitata'\n      });\n    }\n    \n    // Verifica audit logging (25 punti)\n    if (config.auditConfig) {\n      score += 15;\n      details.push({\n        category: 'Audit Logging',\n        status: 'ok',\n        message: 'Audit logging abilitato'\n      });\n      \n      if (config.auditConfig.auditLogRetentionDays >= 365) {\n        score += 10;\n        details.push({\n          category: 'Audit Logging',\n          status: 'ok',\n          message: `Retention period: ${config.auditConfig.auditLogRetentionDays} giorni`\n        });\n      } else {\n        score += 5;\n        details.push({\n          category: 'Audit Logging',\n          status: 'warning',\n          message: `Retention period breve: ${config.auditConfig.auditLogRetentionDays} giorni`\n        });\n      }\n    } else {\n      details.push({\n        category: 'Audit Logging',\n        status: 'error',\n        message: 'Audit logging non abilitato'\n      });\n    }\n    \n    // Verifica data minimization (25 punti)\n    if (config.dataMinimizationConfig) {\n      score += 15;\n      details.push({\n        category: 'Data Minimization',\n        status: 'ok',\n        message: 'Data minimization abilitata'\n      });\n      \n      if (config.dataMinimizationConfig.sensitiveDataRoles && config.dataMinimizationConfig.sensitiveDataRoles.length > 0) {\n        score += 10;\n        details.push({\n          category: 'Data Minimization',\n          status: 'ok',\n          message: `${config.dataMinimizationConfig.sensitiveDataRoles.length} ruoli configurati`\n        });\n      } else {\n        score += 5;\n        details.push({\n          category: 'Data Minimization',\n          status: 'warning',\n          message: 'Nessun ruolo di minimizzazione configurato'\n        });\n      }\n    } else {\n      details.push({\n        category: 'Data Minimization',\n        status: 'warning',\n        message: 'Data minimization non abilitata'\n      });\n    }\n    \n    // Verifica data retention (25 punti)\n    if (config.dataRetentionDays > 0) {\n      score += 15;\n      details.push({\n        category: 'Data Retention',\n        status: 'ok',\n        message: `Data retention configurata: ${config.dataRetentionDays} giorni`\n      });\n      \n      if (config.dataRetentionDays <= 365) {\n        score += 10;\n        details.push({\n          category: 'Data Retention',\n          status: 'ok',\n          message: 'Periodo di retention conforme'\n        });\n      } else {\n        score += 5;\n        details.push({\n          category: 'Data Retention',\n          status: 'warning',\n          message: 'Periodo di retention lungo'\n        });\n      }\n    } else {\n      details.push({\n        category: 'Data Retention',\n        status: 'error',\n        message: 'Data retention non configurata'\n      });\n    }\n    \n    // Determina status\n    let status: 'compliant' | 'partial' | 'non-compliant';\n    if (score >= 80) {\n      status = 'compliant';\n    } else if (score >= 50) {\n      status = 'partial';\n    } else {\n      status = 'non-compliant';\n    }\n    \n    return {\n      score,\n      status,\n      details\n    };\n  }\n  \n  /**\n   * Esporta dati in formato GDPR-compliant\n   */\n  static exportGDPRData<T extends BaseEntity>(\n    entities: T[],\n    config: GDPRExportConfig\n  ): {\n    data: unknown;\n    metadata: {\n      exportDate: string;\n      entityCount: number;\n      format: string;\n      gdprCompliant: boolean;\n    };\n  } {\n    const exportDate = new Date().toISOString();\n    \n    let processedData: unknown;\n    \n    switch (config.format) {\n      case 'json':\n        processedData = {\n          entities,\n          metadata: config.includeMetadata ? {\n            exportDate,\n            entityCount: entities.length,\n            gdprCompliant: true\n          } : undefined\n        };\n        break;\n        \n      case 'xml':\n        // Placeholder per XML export\n        processedData = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gdpr-export date=\"${exportDate}\">\n  <entities count=\"${entities.length}\">\n    ${entities.map(e => `<entity id=\"${e.id}\">${JSON.stringify(e)}</entity>`).join('\\n    ')}\n  </entities>\n</gdpr-export>`;\n        break;\n        \n      case 'csv':\n        // Placeholder per CSV export\n        if (entities.length > 0) {\n          const headers = Object.keys(entities[0]);\n          const csvRows = entities.map(entity => \n            headers.map(header => \n              JSON.stringify(entity[header as keyof T] || '')\n            ).join(',')\n          );\n          processedData = [headers.join(','), ...csvRows].join('\\n');\n        } else {\n          processedData = '';\n        }\n        break;\n    }\n    \n    // Aggiungi watermark se richiesto\n    if (config.watermark?.enabled) {\n      const watermarkText = `\\n\\n--- ${config.watermark.text} ---\\n`;\n      if (config.watermark.position === 'header') {\n        processedData = watermarkText + processedData;\n      } else {\n        processedData = processedData + watermarkText;\n      }\n    }\n    \n    return {\n      data: processedData,\n      metadata: {\n        exportDate,\n        entityCount: entities.length,\n        format: config.format,\n        gdprCompliant: true\n      }\n    };\n  }\n  \n  /**\n   * Valida richiesta di cancellazione dati\n   */\n  static validateDeletionRequest(request: {\n    entityId: string;\n    reason: string;\n    requestedBy: string;\n    requestDate: Date;\n  }): GDPRValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const suggestions: string[] = [];\n    \n    if (!request.entityId) {\n      errors.push('ID entità richiesto');\n    }\n    \n    if (!request.reason || request.reason.length < 10) {\n      errors.push('Motivo della cancellazione richiesto (minimo 10 caratteri)');\n    }\n    \n    if (!request.requestedBy) {\n      errors.push('Richiedente richiesto');\n    }\n    \n    if (!request.requestDate) {\n      errors.push('Data richiesta richiesta');\n    }\n    \n    // Verifica che la richiesta non sia troppo vecchia\n    if (request.requestDate) {\n      const daysSinceRequest = Math.floor(\n        (Date.now() - request.requestDate.getTime()) / (1000 * 60 * 60 * 24)\n      );\n      \n      if (daysSinceRequest > 30) {\n        warnings.push(`Richiesta datata ${daysSinceRequest} giorni fa`);\n      }\n      \n      if (daysSinceRequest > 90) {\n        suggestions.push('Considera di verificare se la richiesta è ancora valida');\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      suggestions\n    };\n  }\n}\n\n/**\n * Costanti GDPR\n */\nexport const GDPR_CONSTANTS = {\n  // Durate standard\n  DEFAULT_CONSENT_EXPIRATION_DAYS: 365,\n  DEFAULT_AUDIT_RETENTION_DAYS: 2555, // 7 anni\n  DEFAULT_CONSENT_WARNING_DAYS: 30,\n  \n  // Livelli di rischio\n  RISK_LEVELS: {\n    LOW: 'low',\n    MEDIUM: 'medium',\n    HIGH: 'high',\n    CRITICAL: 'critical'\n  } as const,\n  \n  // Azioni audit standard\n  STANDARD_AUDIT_ACTIONS: [\n    'CREATE',\n    'READ',\n    'UPDATE',\n    'DELETE',\n    'EXPORT',\n    'SEARCH'\n  ] as GDPRAuditAction[],\n  \n  // Consensi base\n  BASE_CONSENT_TYPES: [\n    'DATA_PROCESSING',\n    'DATA_STORAGE',\n    'MARKETING',\n    'ANALYTICS',\n    'DATA_SHARING'\n  ] as GDPRConsentType[],\n  \n  // Messaggi standard\n  MESSAGES: {\n    CONSENT_REQUIRED: 'Consenso richiesto per questa operazione',\n    CONSENT_EXPIRED: 'Il consenso è scaduto',\n    CONSENT_REVOKED: 'Il consenso è stato revocato',\n    AUDIT_FAILED: 'Errore nel logging audit',\n    DATA_MINIMIZED: 'Dati minimizzati secondo policy GDPR',\n    DELETION_COMPLETED: 'Cancellazione completata secondo diritto all\\'oblio'\n  }\n};\n\nexport default GDPRUtils;","usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/utils/permissions.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/templates/gdpr-entity-page/utils/validation.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/types/courses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/types/gdpr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/types/import/personImportTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/types/index.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":72,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":72,"endColumn":26,"suggestions":[{"fix":{"range":[1706,1889],"text":"type Employee = PersonData"},"messageId":"replaceEmptyInterfaceWithSuper","desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/types/preferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/types/template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/colorUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/csvExport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/errorUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/gdpr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/logging-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/performanceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/permissionMapping.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/routePreloader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/test-logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/textFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tests/accessibility/a11y.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tests/e2e/auth.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tests/e2e/documents.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tests/integration/full-workflow.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tests/performance/load-test.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tests/regression/regression.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tests/security/security.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/tests/smoke/smoke.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matteo.michielon/project 2.0/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
