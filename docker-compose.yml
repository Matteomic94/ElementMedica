version: '3.8'

services:
  # Database PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: project-database
    environment:
      POSTGRES_DB: project_db
      POSTGRES_USER: project_user
      POSTGRES_PASSWORD: project_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U project_user -d project_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - project-network

  # API Server (Backend)
  api:
    # image: elementmedica/project-api:latest
    build:
      context: ./backend
      dockerfile: Dockerfile.api
      target: production
    container_name: project-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://project_user:project_password@database:5432/project_db
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      API_PORT: 4001
      API_HOST: 0.0.0.0
      REDIS_ENABLED: false
      CORS_ORIGIN: http://localhost:5173,http://localhost:4003
    ports:
      - "4001:4001"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - project-network
    restart: unless-stopped

  # Proxy Server
  proxy:
    # image: elementmedica/project-proxy:latest
    build:
      context: ./backend
      dockerfile: Dockerfile.proxy
      target: production
    container_name: project-proxy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://project_user:project_password@database:5432/project_db
      PROXY_PORT: 4003
      PROXY_HOST: 0.0.0.0
      API_SERVER_URL: http://api:4001
      DEBUG_PROXY: true
      DEBUG_AUTH: true
      CORS_ORIGIN: http://localhost:5173
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
    ports:
      - "4003:4003"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - project-network
    restart: unless-stopped

  # Documents Server
  # documents:
  #   # image: elementmedica/project-documents:latest
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.docs
  #     target: production
  #   container_name: project-documents
  #   environment:
  #     NODE_ENV: production
  #     DATABASE_URL: postgresql://project_user:project_password@database:5432/project_db
  #     DOCUMENTS_PORT: 4002
  #     DOCUMENTS_HOST: 0.0.0.0
  #   ports:
  #     - "4002:4002"
  #   depends_on:
  #     database:
  #       condition: service_healthy
  #   # healthcheck:
  #   #   test: ["CMD", "curl", "-f", "http://localhost:4002/health"]
  #   #   interval: 30s
  #   #   timeout: 10s
  #   #   retries: 3
  #   networks:
  #     - project-network
  #   restart: unless-stopped

  # Frontend (commentato fino alla risoluzione degli errori TypeScript)
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.frontend
  #     target: production-server
  #   container_name: project-frontend
  #   environment:
  #     NODE_ENV: production
  #     VITE_API_BASE_URL: http://localhost:4003
  #     VITE_APP_TITLE: Project 2.0
  #   ports:
  #     - "5173:80"
  #   depends_on:
  #     proxy:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:80"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - project-network
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  project-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16